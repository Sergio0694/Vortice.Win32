// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Numerics;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Diagnostics.CodeAnalysis;

#if !NET6_0_OR_GREATER
using MemoryMarshal = Win32.MemoryMarshal;
#endif

namespace Win32.Graphics.DirectWrite;

public static partial class Apis
{
	public const uint DWRITE_ALPHA_MAX = 255;
	public const uint FACILITY_DWRITE = 2200;
	public const uint DWRITE_ERR_BASE = 20480;
	public static readonly HResult DWRITE_E_REMOTEFONT = -2003283955;
	public static readonly HResult DWRITE_E_DOWNLOADCANCELLED = -2003283954;
	public static readonly HResult DWRITE_E_DOWNLOADFAILED = -2003283953;
	public static readonly HResult DWRITE_E_TOOMANYDOWNLOADS = -2003283952;
}

#region Enums
/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_TAG"]/*' />
/// <unmanaged>DWRITE_FONT_AXIS_TAG</unmanaged>
public enum FontAxisTag : uint
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_TAG::DWRITE_FONT_AXIS_TAG_WEIGHT"]/*' />
	/// <unmanaged>DWRITE_FONT_AXIS_TAG_WEIGHT</unmanaged>
	Weight = 1952999287,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_TAG::DWRITE_FONT_AXIS_TAG_WIDTH"]/*' />
	/// <unmanaged>DWRITE_FONT_AXIS_TAG_WIDTH</unmanaged>
	Width = 1752458359,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_TAG::DWRITE_FONT_AXIS_TAG_SLANT"]/*' />
	/// <unmanaged>DWRITE_FONT_AXIS_TAG_SLANT</unmanaged>
	Slant = 1953393779,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_TAG::DWRITE_FONT_AXIS_TAG_OPTICAL_SIZE"]/*' />
	/// <unmanaged>DWRITE_FONT_AXIS_TAG_OPTICAL_SIZE</unmanaged>
	OpticalSize = 2054385775,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_TAG::DWRITE_FONT_AXIS_TAG_ITALIC"]/*' />
	/// <unmanaged>DWRITE_FONT_AXIS_TAG_ITALIC</unmanaged>
	Italic = 1818326121,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_MEASURING_MODE"]/*' />
/// <unmanaged>DWRITE_MEASURING_MODE</unmanaged>
public enum MeasuringMode : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_MEASURING_MODE::DWRITE_MEASURING_MODE_NATURAL"]/*' />
	/// <unmanaged>DWRITE_MEASURING_MODE_NATURAL</unmanaged>
	Natural = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_MEASURING_MODE::DWRITE_MEASURING_MODE_GDI_CLASSIC"]/*' />
	/// <unmanaged>DWRITE_MEASURING_MODE_GDI_CLASSIC</unmanaged>
	GDIClassic = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_MEASURING_MODE::DWRITE_MEASURING_MODE_GDI_NATURAL"]/*' />
	/// <unmanaged>DWRITE_MEASURING_MODE_GDI_NATURAL</unmanaged>
	GDINatural = 2,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_FORMATS"]/*' />
/// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS</unmanaged>
[Flags]
public enum GlyphImageFormats : uint
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_FORMATS::DWRITE_GLYPH_IMAGE_FORMATS_NONE"]/*' />
	/// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_NONE</unmanaged>
	None = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_FORMATS::DWRITE_GLYPH_IMAGE_FORMATS_TRUETYPE"]/*' />
	/// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_TRUETYPE</unmanaged>
	Truetype = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_FORMATS::DWRITE_GLYPH_IMAGE_FORMATS_CFF"]/*' />
	/// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_CFF</unmanaged>
	Cff = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_FORMATS::DWRITE_GLYPH_IMAGE_FORMATS_COLR"]/*' />
	/// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_COLR</unmanaged>
	Colr = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_FORMATS::DWRITE_GLYPH_IMAGE_FORMATS_SVG"]/*' />
	/// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_SVG</unmanaged>
	Svg = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_FORMATS::DWRITE_GLYPH_IMAGE_FORMATS_PNG"]/*' />
	/// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_PNG</unmanaged>
	Png = 16,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_FORMATS::DWRITE_GLYPH_IMAGE_FORMATS_JPEG"]/*' />
	/// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_JPEG</unmanaged>
	Jpeg = 32,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_FORMATS::DWRITE_GLYPH_IMAGE_FORMATS_TIFF"]/*' />
	/// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_TIFF</unmanaged>
	Tiff = 64,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_FORMATS::DWRITE_GLYPH_IMAGE_FORMATS_PREMULTIPLIED_B8G8R8A8"]/*' />
	/// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_PREMULTIPLIED_B8G8R8A8</unmanaged>
	PremultipliedB8g8r8a8 = 128,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FILE_TYPE"]/*' />
/// <unmanaged>DWRITE_FONT_FILE_TYPE</unmanaged>
public enum FontFileType : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FILE_TYPE::DWRITE_FONT_FILE_TYPE_UNKNOWN"]/*' />
	/// <unmanaged>DWRITE_FONT_FILE_TYPE_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FILE_TYPE::DWRITE_FONT_FILE_TYPE_CFF"]/*' />
	/// <unmanaged>DWRITE_FONT_FILE_TYPE_CFF</unmanaged>
	Cff = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FILE_TYPE::DWRITE_FONT_FILE_TYPE_TRUETYPE"]/*' />
	/// <unmanaged>DWRITE_FONT_FILE_TYPE_TRUETYPE</unmanaged>
	Truetype = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FILE_TYPE::DWRITE_FONT_FILE_TYPE_OPENTYPE_COLLECTION"]/*' />
	/// <unmanaged>DWRITE_FONT_FILE_TYPE_OPENTYPE_COLLECTION</unmanaged>
	OpentypeCollection = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FILE_TYPE::DWRITE_FONT_FILE_TYPE_TYPE1_PFM"]/*' />
	/// <unmanaged>DWRITE_FONT_FILE_TYPE_TYPE1_PFM</unmanaged>
	Type1Pfm = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FILE_TYPE::DWRITE_FONT_FILE_TYPE_TYPE1_PFB"]/*' />
	/// <unmanaged>DWRITE_FONT_FILE_TYPE_TYPE1_PFB</unmanaged>
	Type1Pfb = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FILE_TYPE::DWRITE_FONT_FILE_TYPE_VECTOR"]/*' />
	/// <unmanaged>DWRITE_FONT_FILE_TYPE_VECTOR</unmanaged>
	Vector = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FILE_TYPE::DWRITE_FONT_FILE_TYPE_BITMAP"]/*' />
	/// <unmanaged>DWRITE_FONT_FILE_TYPE_BITMAP</unmanaged>
	Bitmap = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FILE_TYPE::DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION"]/*' />
	/// <unmanaged>DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION</unmanaged>
	TruetypeCollection = 3,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FACE_TYPE"]/*' />
/// <unmanaged>DWRITE_FONT_FACE_TYPE</unmanaged>
public enum FontFaceType : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FACE_TYPE::DWRITE_FONT_FACE_TYPE_CFF"]/*' />
	/// <unmanaged>DWRITE_FONT_FACE_TYPE_CFF</unmanaged>
	Cff = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FACE_TYPE::DWRITE_FONT_FACE_TYPE_TRUETYPE"]/*' />
	/// <unmanaged>DWRITE_FONT_FACE_TYPE_TRUETYPE</unmanaged>
	Truetype = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FACE_TYPE::DWRITE_FONT_FACE_TYPE_OPENTYPE_COLLECTION"]/*' />
	/// <unmanaged>DWRITE_FONT_FACE_TYPE_OPENTYPE_COLLECTION</unmanaged>
	OpentypeCollection = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FACE_TYPE::DWRITE_FONT_FACE_TYPE_TYPE1"]/*' />
	/// <unmanaged>DWRITE_FONT_FACE_TYPE_TYPE1</unmanaged>
	Type1 = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FACE_TYPE::DWRITE_FONT_FACE_TYPE_VECTOR"]/*' />
	/// <unmanaged>DWRITE_FONT_FACE_TYPE_VECTOR</unmanaged>
	Vector = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FACE_TYPE::DWRITE_FONT_FACE_TYPE_BITMAP"]/*' />
	/// <unmanaged>DWRITE_FONT_FACE_TYPE_BITMAP</unmanaged>
	Bitmap = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FACE_TYPE::DWRITE_FONT_FACE_TYPE_UNKNOWN"]/*' />
	/// <unmanaged>DWRITE_FONT_FACE_TYPE_UNKNOWN</unmanaged>
	Unknown = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FACE_TYPE::DWRITE_FONT_FACE_TYPE_RAW_CFF"]/*' />
	/// <unmanaged>DWRITE_FONT_FACE_TYPE_RAW_CFF</unmanaged>
	RawCff = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FACE_TYPE::DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION"]/*' />
	/// <unmanaged>DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION</unmanaged>
	TruetypeCollection = 2,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_SIMULATIONS"]/*' />
/// <unmanaged>DWRITE_FONT_SIMULATIONS</unmanaged>
[Flags]
public enum FontSimulations : uint
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_SIMULATIONS::DWRITE_FONT_SIMULATIONS_NONE"]/*' />
	/// <unmanaged>DWRITE_FONT_SIMULATIONS_NONE</unmanaged>
	None = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_SIMULATIONS::DWRITE_FONT_SIMULATIONS_BOLD"]/*' />
	/// <unmanaged>DWRITE_FONT_SIMULATIONS_BOLD</unmanaged>
	Bold = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_SIMULATIONS::DWRITE_FONT_SIMULATIONS_OBLIQUE"]/*' />
	/// <unmanaged>DWRITE_FONT_SIMULATIONS_OBLIQUE</unmanaged>
	Oblique = 2,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT"]/*' />
/// <unmanaged>DWRITE_FONT_WEIGHT</unmanaged>
public enum FontWeight : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_THIN"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_THIN</unmanaged>
	Thin = 100,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_EXTRA_LIGHT"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_EXTRA_LIGHT</unmanaged>
	ExtraLight = 200,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_ULTRA_LIGHT"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_ULTRA_LIGHT</unmanaged>
	UltraLight = 200,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_LIGHT"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_LIGHT</unmanaged>
	Light = 300,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_SEMI_LIGHT"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_SEMI_LIGHT</unmanaged>
	SemiLight = 350,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_NORMAL"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_NORMAL</unmanaged>
	Normal = 400,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_REGULAR"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_REGULAR</unmanaged>
	Regular = 400,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_MEDIUM"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_MEDIUM</unmanaged>
	Medium = 500,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_DEMI_BOLD"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_DEMI_BOLD</unmanaged>
	DemiBold = 600,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_SEMI_BOLD"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_SEMI_BOLD</unmanaged>
	SemiBold = 600,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_BOLD"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_BOLD</unmanaged>
	Bold = 700,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_EXTRA_BOLD"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_EXTRA_BOLD</unmanaged>
	ExtraBold = 800,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_ULTRA_BOLD"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_ULTRA_BOLD</unmanaged>
	UltraBold = 800,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_BLACK"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_BLACK</unmanaged>
	Black = 900,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_HEAVY"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_HEAVY</unmanaged>
	Heavy = 900,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_EXTRA_BLACK"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_EXTRA_BLACK</unmanaged>
	ExtraBlack = 950,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_WEIGHT::DWRITE_FONT_WEIGHT_ULTRA_BLACK"]/*' />
	/// <unmanaged>DWRITE_FONT_WEIGHT_ULTRA_BLACK</unmanaged>
	UltraBlack = 950,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_STRETCH"]/*' />
/// <unmanaged>DWRITE_FONT_STRETCH</unmanaged>
public enum FontStretch : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_STRETCH::DWRITE_FONT_STRETCH_UNDEFINED"]/*' />
	/// <unmanaged>DWRITE_FONT_STRETCH_UNDEFINED</unmanaged>
	Undefined = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_STRETCH::DWRITE_FONT_STRETCH_ULTRA_CONDENSED"]/*' />
	/// <unmanaged>DWRITE_FONT_STRETCH_ULTRA_CONDENSED</unmanaged>
	UltraCondensed = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_STRETCH::DWRITE_FONT_STRETCH_EXTRA_CONDENSED"]/*' />
	/// <unmanaged>DWRITE_FONT_STRETCH_EXTRA_CONDENSED</unmanaged>
	ExtraCondensed = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_STRETCH::DWRITE_FONT_STRETCH_CONDENSED"]/*' />
	/// <unmanaged>DWRITE_FONT_STRETCH_CONDENSED</unmanaged>
	Condensed = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_STRETCH::DWRITE_FONT_STRETCH_SEMI_CONDENSED"]/*' />
	/// <unmanaged>DWRITE_FONT_STRETCH_SEMI_CONDENSED</unmanaged>
	SemiCondensed = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_STRETCH::DWRITE_FONT_STRETCH_NORMAL"]/*' />
	/// <unmanaged>DWRITE_FONT_STRETCH_NORMAL</unmanaged>
	Normal = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_STRETCH::DWRITE_FONT_STRETCH_MEDIUM"]/*' />
	/// <unmanaged>DWRITE_FONT_STRETCH_MEDIUM</unmanaged>
	Medium = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_STRETCH::DWRITE_FONT_STRETCH_SEMI_EXPANDED"]/*' />
	/// <unmanaged>DWRITE_FONT_STRETCH_SEMI_EXPANDED</unmanaged>
	SemiExpanded = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_STRETCH::DWRITE_FONT_STRETCH_EXPANDED"]/*' />
	/// <unmanaged>DWRITE_FONT_STRETCH_EXPANDED</unmanaged>
	Expanded = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_STRETCH::DWRITE_FONT_STRETCH_EXTRA_EXPANDED"]/*' />
	/// <unmanaged>DWRITE_FONT_STRETCH_EXTRA_EXPANDED</unmanaged>
	ExtraExpanded = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_STRETCH::DWRITE_FONT_STRETCH_ULTRA_EXPANDED"]/*' />
	/// <unmanaged>DWRITE_FONT_STRETCH_ULTRA_EXPANDED</unmanaged>
	UltraExpanded = 9,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_STYLE"]/*' />
/// <unmanaged>DWRITE_FONT_STYLE</unmanaged>
public enum FontStyle : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_STYLE::DWRITE_FONT_STYLE_NORMAL"]/*' />
	/// <unmanaged>DWRITE_FONT_STYLE_NORMAL</unmanaged>
	Normal = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_STYLE::DWRITE_FONT_STYLE_OBLIQUE"]/*' />
	/// <unmanaged>DWRITE_FONT_STYLE_OBLIQUE</unmanaged>
	Oblique = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_STYLE::DWRITE_FONT_STYLE_ITALIC"]/*' />
	/// <unmanaged>DWRITE_FONT_STYLE_ITALIC</unmanaged>
	Italic = 2,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID"]/*' />
/// <unmanaged>DWRITE_INFORMATIONAL_STRING_ID</unmanaged>
public enum InformationalStringId : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_NONE"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_NONE</unmanaged>
	DWRITE_INFORMATIONAL_STRING_NONE = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE</unmanaged>
	DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS</unmanaged>
	DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_TRADEMARK"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_TRADEMARK</unmanaged>
	DWRITE_INFORMATIONAL_STRING_TRADEMARK = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_MANUFACTURER"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_MANUFACTURER</unmanaged>
	DWRITE_INFORMATIONAL_STRING_MANUFACTURER = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_DESIGNER"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_DESIGNER</unmanaged>
	DWRITE_INFORMATIONAL_STRING_DESIGNER = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_DESIGNER_URL"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_DESIGNER_URL</unmanaged>
	DWRITE_INFORMATIONAL_STRING_DESIGNER_URL = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_DESCRIPTION"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_DESCRIPTION</unmanaged>
	DWRITE_INFORMATIONAL_STRING_DESCRIPTION = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL</unmanaged>
	DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION</unmanaged>
	DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION = 9,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL</unmanaged>
	DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL = 10,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES</unmanaged>
	DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES = 11,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES</unmanaged>
	DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES = 12,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_FAMILY_NAMES"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_FAMILY_NAMES</unmanaged>
	DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_FAMILY_NAMES = 13,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_SUBFAMILY_NAMES"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_SUBFAMILY_NAMES</unmanaged>
	DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_SUBFAMILY_NAMES = 14,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT</unmanaged>
	DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT = 15,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_FULL_NAME"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_FULL_NAME</unmanaged>
	DWRITE_INFORMATIONAL_STRING_FULL_NAME = 16,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME</unmanaged>
	DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME = 17,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_CID_NAME"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_CID_NAME</unmanaged>
	DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_CID_NAME = 18,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_WEIGHT_STRETCH_STYLE_FAMILY_NAME"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_WEIGHT_STRETCH_STYLE_FAMILY_NAME</unmanaged>
	DWRITE_INFORMATIONAL_STRING_WEIGHT_STRETCH_STYLE_FAMILY_NAME = 19,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_DESIGN_SCRIPT_LANGUAGE_TAG"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_DESIGN_SCRIPT_LANGUAGE_TAG</unmanaged>
	DWRITE_INFORMATIONAL_STRING_DESIGN_SCRIPT_LANGUAGE_TAG = 20,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_SUPPORTED_SCRIPT_LANGUAGE_TAG"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_SUPPORTED_SCRIPT_LANGUAGE_TAG</unmanaged>
	DWRITE_INFORMATIONAL_STRING_SUPPORTED_SCRIPT_LANGUAGE_TAG = 21,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES</unmanaged>
	DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES = 13,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES</unmanaged>
	DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES = 14,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INFORMATIONAL_STRING_ID::DWRITE_INFORMATIONAL_STRING_WWS_FAMILY_NAME"]/*' />
	/// <unmanaged>DWRITE_INFORMATIONAL_STRING_WWS_FAMILY_NAME</unmanaged>
	DWRITE_INFORMATIONAL_STRING_WWS_FAMILY_NAME = 19,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FACTORY_TYPE"]/*' />
/// <unmanaged>DWRITE_FACTORY_TYPE</unmanaged>
public enum FactoryType : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FACTORY_TYPE::DWRITE_FACTORY_TYPE_SHARED"]/*' />
	/// <unmanaged>DWRITE_FACTORY_TYPE_SHARED</unmanaged>
	Shared = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FACTORY_TYPE::DWRITE_FACTORY_TYPE_ISOLATED"]/*' />
	/// <unmanaged>DWRITE_FACTORY_TYPE_ISOLATED</unmanaged>
	Isolated = 1,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PIXEL_GEOMETRY"]/*' />
/// <unmanaged>DWRITE_PIXEL_GEOMETRY</unmanaged>
public enum PixelGeometry : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PIXEL_GEOMETRY::DWRITE_PIXEL_GEOMETRY_FLAT"]/*' />
	/// <unmanaged>DWRITE_PIXEL_GEOMETRY_FLAT</unmanaged>
	Flat = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PIXEL_GEOMETRY::DWRITE_PIXEL_GEOMETRY_RGB"]/*' />
	/// <unmanaged>DWRITE_PIXEL_GEOMETRY_RGB</unmanaged>
	Rgb = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PIXEL_GEOMETRY::DWRITE_PIXEL_GEOMETRY_BGR"]/*' />
	/// <unmanaged>DWRITE_PIXEL_GEOMETRY_BGR</unmanaged>
	Bgr = 2,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE"]/*' />
/// <unmanaged>DWRITE_RENDERING_MODE</unmanaged>
public enum RenderingMode : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE::DWRITE_RENDERING_MODE_DEFAULT"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE_DEFAULT</unmanaged>
	Default = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE::DWRITE_RENDERING_MODE_ALIASED"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE_ALIASED</unmanaged>
	Aliased = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE::DWRITE_RENDERING_MODE_GDI_CLASSIC"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE_GDI_CLASSIC</unmanaged>
	GDIClassic = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE::DWRITE_RENDERING_MODE_GDI_NATURAL"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE_GDI_NATURAL</unmanaged>
	GDINatural = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE::DWRITE_RENDERING_MODE_NATURAL"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE_NATURAL</unmanaged>
	Natural = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE::DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC</unmanaged>
	NaturalSymmetric = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE::DWRITE_RENDERING_MODE_OUTLINE"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE_OUTLINE</unmanaged>
	Outline = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE::DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC</unmanaged>
	CleartypeGDIClassic = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE::DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL</unmanaged>
	CleartypeGDINatural = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE::DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL</unmanaged>
	CleartypeNatural = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE::DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC</unmanaged>
	CleartypeNaturalSymmetric = 5,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_READING_DIRECTION"]/*' />
/// <unmanaged>DWRITE_READING_DIRECTION</unmanaged>
public enum ReadingDirection : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_READING_DIRECTION::DWRITE_READING_DIRECTION_LEFT_TO_RIGHT"]/*' />
	/// <unmanaged>DWRITE_READING_DIRECTION_LEFT_TO_RIGHT</unmanaged>
	LeftToRight = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_READING_DIRECTION::DWRITE_READING_DIRECTION_RIGHT_TO_LEFT"]/*' />
	/// <unmanaged>DWRITE_READING_DIRECTION_RIGHT_TO_LEFT</unmanaged>
	RightToLeft = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_READING_DIRECTION::DWRITE_READING_DIRECTION_TOP_TO_BOTTOM"]/*' />
	/// <unmanaged>DWRITE_READING_DIRECTION_TOP_TO_BOTTOM</unmanaged>
	TopToBottom = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_READING_DIRECTION::DWRITE_READING_DIRECTION_BOTTOM_TO_TOP"]/*' />
	/// <unmanaged>DWRITE_READING_DIRECTION_BOTTOM_TO_TOP</unmanaged>
	BottomToTop = 3,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FLOW_DIRECTION"]/*' />
/// <unmanaged>DWRITE_FLOW_DIRECTION</unmanaged>
public enum FlowDirection : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FLOW_DIRECTION::DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM"]/*' />
	/// <unmanaged>DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM</unmanaged>
	TopToBottom = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FLOW_DIRECTION::DWRITE_FLOW_DIRECTION_BOTTOM_TO_TOP"]/*' />
	/// <unmanaged>DWRITE_FLOW_DIRECTION_BOTTOM_TO_TOP</unmanaged>
	BottomToTop = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FLOW_DIRECTION::DWRITE_FLOW_DIRECTION_LEFT_TO_RIGHT"]/*' />
	/// <unmanaged>DWRITE_FLOW_DIRECTION_LEFT_TO_RIGHT</unmanaged>
	LeftToRight = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FLOW_DIRECTION::DWRITE_FLOW_DIRECTION_RIGHT_TO_LEFT"]/*' />
	/// <unmanaged>DWRITE_FLOW_DIRECTION_RIGHT_TO_LEFT</unmanaged>
	RightToLeft = 3,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_ALIGNMENT"]/*' />
/// <unmanaged>DWRITE_TEXT_ALIGNMENT</unmanaged>
public enum TextAlignment : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_ALIGNMENT::DWRITE_TEXT_ALIGNMENT_LEADING"]/*' />
	/// <unmanaged>DWRITE_TEXT_ALIGNMENT_LEADING</unmanaged>
	Leading = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_ALIGNMENT::DWRITE_TEXT_ALIGNMENT_TRAILING"]/*' />
	/// <unmanaged>DWRITE_TEXT_ALIGNMENT_TRAILING</unmanaged>
	Trailing = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_ALIGNMENT::DWRITE_TEXT_ALIGNMENT_CENTER"]/*' />
	/// <unmanaged>DWRITE_TEXT_ALIGNMENT_CENTER</unmanaged>
	Center = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_ALIGNMENT::DWRITE_TEXT_ALIGNMENT_JUSTIFIED"]/*' />
	/// <unmanaged>DWRITE_TEXT_ALIGNMENT_JUSTIFIED</unmanaged>
	Justified = 3,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PARAGRAPH_ALIGNMENT"]/*' />
/// <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT</unmanaged>
public enum ParagraphAlignment : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PARAGRAPH_ALIGNMENT::DWRITE_PARAGRAPH_ALIGNMENT_NEAR"]/*' />
	/// <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT_NEAR</unmanaged>
	Near = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PARAGRAPH_ALIGNMENT::DWRITE_PARAGRAPH_ALIGNMENT_FAR"]/*' />
	/// <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT_FAR</unmanaged>
	Far = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PARAGRAPH_ALIGNMENT::DWRITE_PARAGRAPH_ALIGNMENT_CENTER"]/*' />
	/// <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT_CENTER</unmanaged>
	Center = 2,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_WORD_WRAPPING"]/*' />
/// <unmanaged>DWRITE_WORD_WRAPPING</unmanaged>
public enum WordWrapping : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_WORD_WRAPPING::DWRITE_WORD_WRAPPING_WRAP"]/*' />
	/// <unmanaged>DWRITE_WORD_WRAPPING_WRAP</unmanaged>
	Wrap = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_WORD_WRAPPING::DWRITE_WORD_WRAPPING_NO_WRAP"]/*' />
	/// <unmanaged>DWRITE_WORD_WRAPPING_NO_WRAP</unmanaged>
	NoWrap = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_WORD_WRAPPING::DWRITE_WORD_WRAPPING_EMERGENCY_BREAK"]/*' />
	/// <unmanaged>DWRITE_WORD_WRAPPING_EMERGENCY_BREAK</unmanaged>
	EmergencyBreak = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_WORD_WRAPPING::DWRITE_WORD_WRAPPING_WHOLE_WORD"]/*' />
	/// <unmanaged>DWRITE_WORD_WRAPPING_WHOLE_WORD</unmanaged>
	WholeWord = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_WORD_WRAPPING::DWRITE_WORD_WRAPPING_CHARACTER"]/*' />
	/// <unmanaged>DWRITE_WORD_WRAPPING_CHARACTER</unmanaged>
	Character = 4,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_SPACING_METHOD"]/*' />
/// <unmanaged>DWRITE_LINE_SPACING_METHOD</unmanaged>
public enum LineSpacingMethod : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_SPACING_METHOD::DWRITE_LINE_SPACING_METHOD_DEFAULT"]/*' />
	/// <unmanaged>DWRITE_LINE_SPACING_METHOD_DEFAULT</unmanaged>
	Default = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_SPACING_METHOD::DWRITE_LINE_SPACING_METHOD_UNIFORM"]/*' />
	/// <unmanaged>DWRITE_LINE_SPACING_METHOD_UNIFORM</unmanaged>
	Uniform = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_SPACING_METHOD::DWRITE_LINE_SPACING_METHOD_PROPORTIONAL"]/*' />
	/// <unmanaged>DWRITE_LINE_SPACING_METHOD_PROPORTIONAL</unmanaged>
	Proportional = 2,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TRIMMING_GRANULARITY"]/*' />
/// <unmanaged>DWRITE_TRIMMING_GRANULARITY</unmanaged>
public enum TrimmingGranularity : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TRIMMING_GRANULARITY::DWRITE_TRIMMING_GRANULARITY_NONE"]/*' />
	/// <unmanaged>DWRITE_TRIMMING_GRANULARITY_NONE</unmanaged>
	None = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TRIMMING_GRANULARITY::DWRITE_TRIMMING_GRANULARITY_CHARACTER"]/*' />
	/// <unmanaged>DWRITE_TRIMMING_GRANULARITY_CHARACTER</unmanaged>
	Character = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TRIMMING_GRANULARITY::DWRITE_TRIMMING_GRANULARITY_WORD"]/*' />
	/// <unmanaged>DWRITE_TRIMMING_GRANULARITY_WORD</unmanaged>
	Word = 2,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG"]/*' />
/// <unmanaged>DWRITE_FONT_FEATURE_TAG</unmanaged>
public enum FontFeatureTag : uint
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS</unmanaged>
	AlternativeFractions = 1668441697,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS</unmanaged>
	PetiteCapitalsFromCapitals = 1668297315,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS</unmanaged>
	SmallCapitalsFromCapitals = 1668493923,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES</unmanaged>
	ContextualAlternates = 1953259875,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS</unmanaged>
	CaseSensitiveForms = 1702060387,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION</unmanaged>
	GlyphCompositionDecomposition = 1886217059,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES</unmanaged>
	ContextualLigatures = 1734962275,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING</unmanaged>
	CapitalSpacing = 1886613603,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH</unmanaged>
	ContextualSwash = 1752658787,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING</unmanaged>
	CursivePositioning = 1936880995,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_DEFAULT"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_DEFAULT</unmanaged>
	Default = 1953261156,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES</unmanaged>
	DiscretionaryLigatures = 1734962276,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS</unmanaged>
	ExpertForms = 1953527909,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_FRACTIONS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_FRACTIONS</unmanaged>
	Fractions = 1667330662,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_FULL_WIDTH"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_FULL_WIDTH</unmanaged>
	FullWidth = 1684633446,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_HALF_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_HALF_FORMS</unmanaged>
	HalfForms = 1718378856,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_HALANT_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_HALANT_FORMS</unmanaged>
	HalantForms = 1852596584,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH</unmanaged>
	AlternateHalfWidth = 1953259880,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS</unmanaged>
	HistoricalForms = 1953720680,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES</unmanaged>
	HorizontalKanaAlternates = 1634626408,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES</unmanaged>
	HistoricalLigatures = 1734962280,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_HALF_WIDTH"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_HALF_WIDTH</unmanaged>
	HalfWidth = 1684633448,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS</unmanaged>
	HojoKanjiForms = 1869246312,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_JIS04_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_JIS04_FORMS</unmanaged>
	Jis04Forms = 875589738,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_JIS78_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_JIS78_FORMS</unmanaged>
	Jis78Forms = 943157354,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_JIS83_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_JIS83_FORMS</unmanaged>
	Jis83Forms = 859336810,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_JIS90_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_JIS90_FORMS</unmanaged>
	Jis90Forms = 809070698,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_KERNING"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_KERNING</unmanaged>
	Kerning = 1852990827,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES</unmanaged>
	StandardLigatures = 1634167148,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_LINING_FIGURES"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_LINING_FIGURES</unmanaged>
	LiningFigures = 1836412524,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS</unmanaged>
	LocalizedForms = 1818455916,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING</unmanaged>
	MarkPositioning = 1802658157,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK</unmanaged>
	MathematicalGreek = 1802659693,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING</unmanaged>
	MarkToMarkPositioning = 1802333037,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS</unmanaged>
	AlternateAnnotationForms = 1953259886,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS</unmanaged>
	NlcKanjiForms = 1801677934,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES</unmanaged>
	OldStyleFigures = 1836412527,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_ORDINALS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_ORDINALS</unmanaged>
	Ordinals = 1852076655,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH</unmanaged>
	ProportionalAlternateWidth = 1953259888,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS</unmanaged>
	PetiteCapitals = 1885430640,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES</unmanaged>
	ProportionalFigures = 1836412528,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS</unmanaged>
	ProportionalWidths = 1684633456,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS</unmanaged>
	QuarterWidths = 1684633457,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES</unmanaged>
	RequiredLigatures = 1734962290,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS</unmanaged>
	RubyNotationForms = 2036495730,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES</unmanaged>
	StylisticAlternates = 1953259891,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS</unmanaged>
	ScientificInferiors = 1718511987,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS</unmanaged>
	SmallCapitals = 1885564275,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS</unmanaged>
	SimplifiedForms = 1819307379,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1</unmanaged>
	StylisticSet1 = 825258867,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2</unmanaged>
	StylisticSet2 = 842036083,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3</unmanaged>
	StylisticSet3 = 858813299,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4</unmanaged>
	StylisticSet4 = 875590515,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5</unmanaged>
	StylisticSet5 = 892367731,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6</unmanaged>
	StylisticSet6 = 909144947,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7</unmanaged>
	StylisticSet7 = 925922163,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8</unmanaged>
	StylisticSet8 = 942699379,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9</unmanaged>
	StylisticSet9 = 959476595,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10</unmanaged>
	StylisticSet10 = 808547187,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11</unmanaged>
	StylisticSet11 = 825324403,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12</unmanaged>
	StylisticSet12 = 842101619,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13</unmanaged>
	StylisticSet13 = 858878835,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14</unmanaged>
	StylisticSet14 = 875656051,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15</unmanaged>
	StylisticSet15 = 892433267,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16</unmanaged>
	StylisticSet16 = 909210483,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17</unmanaged>
	StylisticSet17 = 925987699,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18</unmanaged>
	StylisticSet18 = 942764915,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19</unmanaged>
	StylisticSet19 = 959542131,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20</unmanaged>
	StylisticSet20 = 808612723,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_SUBSCRIPT"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_SUBSCRIPT</unmanaged>
	Subscript = 1935832435,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT</unmanaged>
	Superscript = 1936749939,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_SWASH"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_SWASH</unmanaged>
	Swash = 1752397683,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_TITLING"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_TITLING</unmanaged>
	Titling = 1819568500,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS</unmanaged>
	TraditionalNameForms = 1835101812,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES</unmanaged>
	TabularFigures = 1836412532,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS</unmanaged>
	TraditionalForms = 1684107892,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS</unmanaged>
	ThirdWidths = 1684633460,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_UNICASE"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_UNICASE</unmanaged>
	Unicase = 1667853941,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_VERTICAL_WRITING"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_VERTICAL_WRITING</unmanaged>
	VerticalWriting = 1953654134,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_VERTICAL_ALTERNATES_AND_ROTATION"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_VERTICAL_ALTERNATES_AND_ROTATION</unmanaged>
	VerticalAlternatesAndRotation = 846492278,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE_TAG::DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO"]/*' />
	/// <unmanaged>DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO</unmanaged>
	SlashedZero = 1869768058,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_SCRIPT_SHAPES"]/*' />
/// <unmanaged>DWRITE_SCRIPT_SHAPES</unmanaged>
[Flags]
public enum ScriptShapes : uint
{
	None = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_SCRIPT_SHAPES::DWRITE_SCRIPT_SHAPES_DEFAULT"]/*' />
	/// <unmanaged>DWRITE_SCRIPT_SHAPES_DEFAULT</unmanaged>
	Default = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_SCRIPT_SHAPES::DWRITE_SCRIPT_SHAPES_NO_VISUAL"]/*' />
	/// <unmanaged>DWRITE_SCRIPT_SHAPES_NO_VISUAL</unmanaged>
	NoVisual = 1,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_BREAK_CONDITION"]/*' />
/// <unmanaged>DWRITE_BREAK_CONDITION</unmanaged>
public enum BreakCondition : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_BREAK_CONDITION::DWRITE_BREAK_CONDITION_NEUTRAL"]/*' />
	/// <unmanaged>DWRITE_BREAK_CONDITION_NEUTRAL</unmanaged>
	Neutral = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_BREAK_CONDITION::DWRITE_BREAK_CONDITION_CAN_BREAK"]/*' />
	/// <unmanaged>DWRITE_BREAK_CONDITION_CAN_BREAK</unmanaged>
	CanBreak = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_BREAK_CONDITION::DWRITE_BREAK_CONDITION_MAY_NOT_BREAK"]/*' />
	/// <unmanaged>DWRITE_BREAK_CONDITION_MAY_NOT_BREAK</unmanaged>
	MayNotBreak = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_BREAK_CONDITION::DWRITE_BREAK_CONDITION_MUST_BREAK"]/*' />
	/// <unmanaged>DWRITE_BREAK_CONDITION_MUST_BREAK</unmanaged>
	MustBreak = 3,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_NUMBER_SUBSTITUTION_METHOD"]/*' />
/// <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD</unmanaged>
public enum NumberSubstitutionMethod : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_NUMBER_SUBSTITUTION_METHOD::DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE"]/*' />
	/// <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE</unmanaged>
	FromCulture = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_NUMBER_SUBSTITUTION_METHOD::DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL"]/*' />
	/// <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL</unmanaged>
	Contextual = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_NUMBER_SUBSTITUTION_METHOD::DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE"]/*' />
	/// <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE</unmanaged>
	None = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_NUMBER_SUBSTITUTION_METHOD::DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL"]/*' />
	/// <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL</unmanaged>
	National = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_NUMBER_SUBSTITUTION_METHOD::DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL"]/*' />
	/// <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL</unmanaged>
	Traditional = 4,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXTURE_TYPE"]/*' />
/// <unmanaged>DWRITE_TEXTURE_TYPE</unmanaged>
public enum TextureType : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXTURE_TYPE::DWRITE_TEXTURE_ALIASED_1x1"]/*' />
	/// <unmanaged>DWRITE_TEXTURE_ALIASED_1x1</unmanaged>
	DWRITE_TEXTURE_ALIASED_1x1 = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXTURE_TYPE::DWRITE_TEXTURE_CLEARTYPE_3x1"]/*' />
	/// <unmanaged>DWRITE_TEXTURE_CLEARTYPE_3x1</unmanaged>
	DWRITE_TEXTURE_CLEARTYPE_3x1 = 1,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FAMILY"]/*' />
/// <unmanaged>DWRITE_PANOSE_FAMILY</unmanaged>
public enum PanoseFamily : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FAMILY::DWRITE_PANOSE_FAMILY_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FAMILY_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FAMILY::DWRITE_PANOSE_FAMILY_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FAMILY_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FAMILY::DWRITE_PANOSE_FAMILY_TEXT_DISPLAY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FAMILY_TEXT_DISPLAY</unmanaged>
	TextDisplay = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FAMILY::DWRITE_PANOSE_FAMILY_SCRIPT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FAMILY_SCRIPT</unmanaged>
	Script = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FAMILY::DWRITE_PANOSE_FAMILY_DECORATIVE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FAMILY_DECORATIVE</unmanaged>
	Decorative = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FAMILY::DWRITE_PANOSE_FAMILY_SYMBOL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FAMILY_SYMBOL</unmanaged>
	Symbol = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FAMILY::DWRITE_PANOSE_FAMILY_PICTORIAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FAMILY_PICTORIAL</unmanaged>
	Pictorial = 5,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE"]/*' />
/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE</unmanaged>
public enum PanoseSerifStyle : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_COVE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_COVE</unmanaged>
	Cove = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_OBTUSE_COVE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_OBTUSE_COVE</unmanaged>
	ObtuseCove = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_SQUARE_COVE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_SQUARE_COVE</unmanaged>
	SquareCove = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SQUARE_COVE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SQUARE_COVE</unmanaged>
	ObtuseSquareCove = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_SQUARE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_SQUARE</unmanaged>
	Square = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_THIN"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_THIN</unmanaged>
	Thin = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_OVAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_OVAL</unmanaged>
	Oval = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_EXAGGERATED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_EXAGGERATED</unmanaged>
	Exaggerated = 9,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_TRIANGLE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_TRIANGLE</unmanaged>
	Triangle = 10,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_NORMAL_SANS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_NORMAL_SANS</unmanaged>
	NormalSans = 11,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SANS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SANS</unmanaged>
	ObtuseSans = 12,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_PERPENDICULAR_SANS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_PERPENDICULAR_SANS</unmanaged>
	PerpendicularSans = 13,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_FLARED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_FLARED</unmanaged>
	Flared = 14,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_ROUNDED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_ROUNDED</unmanaged>
	Rounded = 15,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_SCRIPT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_SCRIPT</unmanaged>
	Script = 16,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_PERP_SANS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_PERP_SANS</unmanaged>
	PerpSans = 13,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SERIF_STYLE::DWRITE_PANOSE_SERIF_STYLE_BONE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SERIF_STYLE_BONE</unmanaged>
	Bone = 8,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_WEIGHT"]/*' />
/// <unmanaged>DWRITE_PANOSE_WEIGHT</unmanaged>
public enum PanoseWeight : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_WEIGHT::DWRITE_PANOSE_WEIGHT_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_WEIGHT_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_WEIGHT::DWRITE_PANOSE_WEIGHT_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_WEIGHT_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_WEIGHT::DWRITE_PANOSE_WEIGHT_VERY_LIGHT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_WEIGHT_VERY_LIGHT</unmanaged>
	VeryLight = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_WEIGHT::DWRITE_PANOSE_WEIGHT_LIGHT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_WEIGHT_LIGHT</unmanaged>
	Light = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_WEIGHT::DWRITE_PANOSE_WEIGHT_THIN"]/*' />
	/// <unmanaged>DWRITE_PANOSE_WEIGHT_THIN</unmanaged>
	Thin = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_WEIGHT::DWRITE_PANOSE_WEIGHT_BOOK"]/*' />
	/// <unmanaged>DWRITE_PANOSE_WEIGHT_BOOK</unmanaged>
	Book = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_WEIGHT::DWRITE_PANOSE_WEIGHT_MEDIUM"]/*' />
	/// <unmanaged>DWRITE_PANOSE_WEIGHT_MEDIUM</unmanaged>
	Medium = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_WEIGHT::DWRITE_PANOSE_WEIGHT_DEMI"]/*' />
	/// <unmanaged>DWRITE_PANOSE_WEIGHT_DEMI</unmanaged>
	Demi = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_WEIGHT::DWRITE_PANOSE_WEIGHT_BOLD"]/*' />
	/// <unmanaged>DWRITE_PANOSE_WEIGHT_BOLD</unmanaged>
	Bold = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_WEIGHT::DWRITE_PANOSE_WEIGHT_HEAVY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_WEIGHT_HEAVY</unmanaged>
	Heavy = 9,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_WEIGHT::DWRITE_PANOSE_WEIGHT_BLACK"]/*' />
	/// <unmanaged>DWRITE_PANOSE_WEIGHT_BLACK</unmanaged>
	Black = 10,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_WEIGHT::DWRITE_PANOSE_WEIGHT_EXTRA_BLACK"]/*' />
	/// <unmanaged>DWRITE_PANOSE_WEIGHT_EXTRA_BLACK</unmanaged>
	ExtraBlack = 11,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_WEIGHT::DWRITE_PANOSE_WEIGHT_NORD"]/*' />
	/// <unmanaged>DWRITE_PANOSE_WEIGHT_NORD</unmanaged>
	Nord = 11,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_PROPORTION"]/*' />
/// <unmanaged>DWRITE_PANOSE_PROPORTION</unmanaged>
public enum PanoseProportion : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_PROPORTION::DWRITE_PANOSE_PROPORTION_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_PROPORTION_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_PROPORTION::DWRITE_PANOSE_PROPORTION_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_PROPORTION_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_PROPORTION::DWRITE_PANOSE_PROPORTION_OLD_STYLE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_PROPORTION_OLD_STYLE</unmanaged>
	OldStyle = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_PROPORTION::DWRITE_PANOSE_PROPORTION_MODERN"]/*' />
	/// <unmanaged>DWRITE_PANOSE_PROPORTION_MODERN</unmanaged>
	Modern = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_PROPORTION::DWRITE_PANOSE_PROPORTION_EVEN_WIDTH"]/*' />
	/// <unmanaged>DWRITE_PANOSE_PROPORTION_EVEN_WIDTH</unmanaged>
	EvenWidth = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_PROPORTION::DWRITE_PANOSE_PROPORTION_EXPANDED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_PROPORTION_EXPANDED</unmanaged>
	Expanded = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_PROPORTION::DWRITE_PANOSE_PROPORTION_CONDENSED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_PROPORTION_CONDENSED</unmanaged>
	Condensed = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_PROPORTION::DWRITE_PANOSE_PROPORTION_VERY_EXPANDED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_PROPORTION_VERY_EXPANDED</unmanaged>
	VeryExpanded = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_PROPORTION::DWRITE_PANOSE_PROPORTION_VERY_CONDENSED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_PROPORTION_VERY_CONDENSED</unmanaged>
	VeryCondensed = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_PROPORTION::DWRITE_PANOSE_PROPORTION_MONOSPACED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_PROPORTION_MONOSPACED</unmanaged>
	Monospaced = 9,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CONTRAST"]/*' />
/// <unmanaged>DWRITE_PANOSE_CONTRAST</unmanaged>
public enum PanoseContrast : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CONTRAST::DWRITE_PANOSE_CONTRAST_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CONTRAST_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CONTRAST::DWRITE_PANOSE_CONTRAST_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CONTRAST_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CONTRAST::DWRITE_PANOSE_CONTRAST_NONE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CONTRAST_NONE</unmanaged>
	None = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CONTRAST::DWRITE_PANOSE_CONTRAST_VERY_LOW"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CONTRAST_VERY_LOW</unmanaged>
	VeryLow = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CONTRAST::DWRITE_PANOSE_CONTRAST_LOW"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CONTRAST_LOW</unmanaged>
	Low = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CONTRAST::DWRITE_PANOSE_CONTRAST_MEDIUM_LOW"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CONTRAST_MEDIUM_LOW</unmanaged>
	MediumLow = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CONTRAST::DWRITE_PANOSE_CONTRAST_MEDIUM"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CONTRAST_MEDIUM</unmanaged>
	Medium = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CONTRAST::DWRITE_PANOSE_CONTRAST_MEDIUM_HIGH"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CONTRAST_MEDIUM_HIGH</unmanaged>
	MediumHigh = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CONTRAST::DWRITE_PANOSE_CONTRAST_HIGH"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CONTRAST_HIGH</unmanaged>
	High = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CONTRAST::DWRITE_PANOSE_CONTRAST_VERY_HIGH"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CONTRAST_VERY_HIGH</unmanaged>
	VeryHigh = 9,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CONTRAST::DWRITE_PANOSE_CONTRAST_HORIZONTAL_LOW"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CONTRAST_HORIZONTAL_LOW</unmanaged>
	HorizontalLow = 10,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CONTRAST::DWRITE_PANOSE_CONTRAST_HORIZONTAL_MEDIUM"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CONTRAST_HORIZONTAL_MEDIUM</unmanaged>
	HorizontalMedium = 11,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CONTRAST::DWRITE_PANOSE_CONTRAST_HORIZONTAL_HIGH"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CONTRAST_HORIZONTAL_HIGH</unmanaged>
	HorizontalHigh = 12,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CONTRAST::DWRITE_PANOSE_CONTRAST_BROKEN"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CONTRAST_BROKEN</unmanaged>
	Broken = 13,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_STROKE_VARIATION"]/*' />
/// <unmanaged>DWRITE_PANOSE_STROKE_VARIATION</unmanaged>
public enum PanoseStrokeVariation : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_STROKE_VARIATION::DWRITE_PANOSE_STROKE_VARIATION_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_STROKE_VARIATION_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_STROKE_VARIATION::DWRITE_PANOSE_STROKE_VARIATION_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_STROKE_VARIATION_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_STROKE_VARIATION::DWRITE_PANOSE_STROKE_VARIATION_NO_VARIATION"]/*' />
	/// <unmanaged>DWRITE_PANOSE_STROKE_VARIATION_NO_VARIATION</unmanaged>
	NoVariation = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_STROKE_VARIATION::DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_DIAGONAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_DIAGONAL</unmanaged>
	GradualDiagonal = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_STROKE_VARIATION::DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_TRANSITIONAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_TRANSITIONAL</unmanaged>
	GradualTransitional = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_STROKE_VARIATION::DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_VERTICAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_VERTICAL</unmanaged>
	GradualVertical = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_STROKE_VARIATION::DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_HORIZONTAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_HORIZONTAL</unmanaged>
	GradualHorizontal = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_STROKE_VARIATION::DWRITE_PANOSE_STROKE_VARIATION_RAPID_VERTICAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_STROKE_VARIATION_RAPID_VERTICAL</unmanaged>
	RapidVertical = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_STROKE_VARIATION::DWRITE_PANOSE_STROKE_VARIATION_RAPID_HORIZONTAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_STROKE_VARIATION_RAPID_HORIZONTAL</unmanaged>
	RapidHorizontal = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_STROKE_VARIATION::DWRITE_PANOSE_STROKE_VARIATION_INSTANT_VERTICAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_STROKE_VARIATION_INSTANT_VERTICAL</unmanaged>
	InstantVertical = 9,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_STROKE_VARIATION::DWRITE_PANOSE_STROKE_VARIATION_INSTANT_HORIZONTAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_STROKE_VARIATION_INSTANT_HORIZONTAL</unmanaged>
	InstantHorizontal = 10,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE"]/*' />
/// <unmanaged>DWRITE_PANOSE_ARM_STYLE</unmanaged>
public enum PanoseArmStyle : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORIZONTAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORIZONTAL</unmanaged>
	StraightArmsHorizontal = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_WEDGE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_WEDGE</unmanaged>
	StraightArmsWedge = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERTICAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERTICAL</unmanaged>
	StraightArmsVertical = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_SINGLE_SERIF"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_SINGLE_SERIF</unmanaged>
	StraightArmsSingleSerif = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_DOUBLE_SERIF"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_DOUBLE_SERIF</unmanaged>
	StraightArmsDoubleSerif = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_HORIZONTAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_HORIZONTAL</unmanaged>
	NonstraightArmsHorizontal = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_WEDGE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_WEDGE</unmanaged>
	NonstraightArmsWedge = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_VERTICAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_VERTICAL</unmanaged>
	NonstraightArmsVertical = 9,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_SINGLE_SERIF"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_SINGLE_SERIF</unmanaged>
	NonstraightArmsSingleSerif = 10,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_DOUBLE_SERIF"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_DOUBLE_SERIF</unmanaged>
	NonstraightArmsDoubleSerif = 11,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORZ"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORZ</unmanaged>
	StraightArmsHorz = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERT</unmanaged>
	StraightArmsVert = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_HORZ"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_HORZ</unmanaged>
	BentArmsHorz = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_WEDGE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_WEDGE</unmanaged>
	BentArmsWedge = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_VERT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_VERT</unmanaged>
	BentArmsVert = 9,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_SINGLE_SERIF"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_SINGLE_SERIF</unmanaged>
	BentArmsSingleSerif = 10,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ARM_STYLE::DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_DOUBLE_SERIF"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_DOUBLE_SERIF</unmanaged>
	BentArmsDoubleSerif = 11,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM"]/*' />
/// <unmanaged>DWRITE_PANOSE_LETTERFORM</unmanaged>
public enum PanoseLetterform : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM::DWRITE_PANOSE_LETTERFORM_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LETTERFORM_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM::DWRITE_PANOSE_LETTERFORM_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LETTERFORM_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM::DWRITE_PANOSE_LETTERFORM_NORMAL_CONTACT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LETTERFORM_NORMAL_CONTACT</unmanaged>
	NormalContact = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM::DWRITE_PANOSE_LETTERFORM_NORMAL_WEIGHTED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LETTERFORM_NORMAL_WEIGHTED</unmanaged>
	NormalWeighted = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM::DWRITE_PANOSE_LETTERFORM_NORMAL_BOXED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LETTERFORM_NORMAL_BOXED</unmanaged>
	NormalBoxed = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM::DWRITE_PANOSE_LETTERFORM_NORMAL_FLATTENED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LETTERFORM_NORMAL_FLATTENED</unmanaged>
	NormalFlattened = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM::DWRITE_PANOSE_LETTERFORM_NORMAL_ROUNDED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LETTERFORM_NORMAL_ROUNDED</unmanaged>
	NormalRounded = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM::DWRITE_PANOSE_LETTERFORM_NORMAL_OFF_CENTER"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LETTERFORM_NORMAL_OFF_CENTER</unmanaged>
	NormalOffCenter = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM::DWRITE_PANOSE_LETTERFORM_NORMAL_SQUARE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LETTERFORM_NORMAL_SQUARE</unmanaged>
	NormalSquare = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM::DWRITE_PANOSE_LETTERFORM_OBLIQUE_CONTACT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LETTERFORM_OBLIQUE_CONTACT</unmanaged>
	ObliqueContact = 9,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM::DWRITE_PANOSE_LETTERFORM_OBLIQUE_WEIGHTED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LETTERFORM_OBLIQUE_WEIGHTED</unmanaged>
	ObliqueWeighted = 10,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM::DWRITE_PANOSE_LETTERFORM_OBLIQUE_BOXED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LETTERFORM_OBLIQUE_BOXED</unmanaged>
	ObliqueBoxed = 11,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM::DWRITE_PANOSE_LETTERFORM_OBLIQUE_FLATTENED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LETTERFORM_OBLIQUE_FLATTENED</unmanaged>
	ObliqueFlattened = 12,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM::DWRITE_PANOSE_LETTERFORM_OBLIQUE_ROUNDED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LETTERFORM_OBLIQUE_ROUNDED</unmanaged>
	ObliqueRounded = 13,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM::DWRITE_PANOSE_LETTERFORM_OBLIQUE_OFF_CENTER"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LETTERFORM_OBLIQUE_OFF_CENTER</unmanaged>
	ObliqueOffCenter = 14,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LETTERFORM::DWRITE_PANOSE_LETTERFORM_OBLIQUE_SQUARE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LETTERFORM_OBLIQUE_SQUARE</unmanaged>
	ObliqueSquare = 15,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_MIDLINE"]/*' />
/// <unmanaged>DWRITE_PANOSE_MIDLINE</unmanaged>
public enum PanoseMidline : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_MIDLINE::DWRITE_PANOSE_MIDLINE_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_MIDLINE_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_MIDLINE::DWRITE_PANOSE_MIDLINE_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_MIDLINE_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_MIDLINE::DWRITE_PANOSE_MIDLINE_STANDARD_TRIMMED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_MIDLINE_STANDARD_TRIMMED</unmanaged>
	StandardTrimmed = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_MIDLINE::DWRITE_PANOSE_MIDLINE_STANDARD_POINTED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_MIDLINE_STANDARD_POINTED</unmanaged>
	StandardPointed = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_MIDLINE::DWRITE_PANOSE_MIDLINE_STANDARD_SERIFED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_MIDLINE_STANDARD_SERIFED</unmanaged>
	StandardSerifed = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_MIDLINE::DWRITE_PANOSE_MIDLINE_HIGH_TRIMMED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_MIDLINE_HIGH_TRIMMED</unmanaged>
	HighTrimmed = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_MIDLINE::DWRITE_PANOSE_MIDLINE_HIGH_POINTED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_MIDLINE_HIGH_POINTED</unmanaged>
	HighPointed = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_MIDLINE::DWRITE_PANOSE_MIDLINE_HIGH_SERIFED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_MIDLINE_HIGH_SERIFED</unmanaged>
	HighSerifed = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_MIDLINE::DWRITE_PANOSE_MIDLINE_CONSTANT_TRIMMED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_MIDLINE_CONSTANT_TRIMMED</unmanaged>
	ConstantTrimmed = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_MIDLINE::DWRITE_PANOSE_MIDLINE_CONSTANT_POINTED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_MIDLINE_CONSTANT_POINTED</unmanaged>
	ConstantPointed = 9,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_MIDLINE::DWRITE_PANOSE_MIDLINE_CONSTANT_SERIFED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_MIDLINE_CONSTANT_SERIFED</unmanaged>
	ConstantSerifed = 10,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_MIDLINE::DWRITE_PANOSE_MIDLINE_LOW_TRIMMED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_MIDLINE_LOW_TRIMMED</unmanaged>
	LowTrimmed = 11,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_MIDLINE::DWRITE_PANOSE_MIDLINE_LOW_POINTED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_MIDLINE_LOW_POINTED</unmanaged>
	LowPointed = 12,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_MIDLINE::DWRITE_PANOSE_MIDLINE_LOW_SERIFED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_MIDLINE_LOW_SERIFED</unmanaged>
	LowSerifed = 13,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XHEIGHT"]/*' />
/// <unmanaged>DWRITE_PANOSE_XHEIGHT</unmanaged>
public enum PanoseXheight : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XHEIGHT::DWRITE_PANOSE_XHEIGHT_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XHEIGHT_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XHEIGHT::DWRITE_PANOSE_XHEIGHT_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XHEIGHT_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XHEIGHT::DWRITE_PANOSE_XHEIGHT_CONSTANT_SMALL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XHEIGHT_CONSTANT_SMALL</unmanaged>
	ConstantSmall = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XHEIGHT::DWRITE_PANOSE_XHEIGHT_CONSTANT_STANDARD"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XHEIGHT_CONSTANT_STANDARD</unmanaged>
	ConstantStandard = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XHEIGHT::DWRITE_PANOSE_XHEIGHT_CONSTANT_LARGE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XHEIGHT_CONSTANT_LARGE</unmanaged>
	ConstantLarge = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XHEIGHT::DWRITE_PANOSE_XHEIGHT_DUCKING_SMALL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XHEIGHT_DUCKING_SMALL</unmanaged>
	DuckingSmall = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XHEIGHT::DWRITE_PANOSE_XHEIGHT_DUCKING_STANDARD"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XHEIGHT_DUCKING_STANDARD</unmanaged>
	DuckingStandard = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XHEIGHT::DWRITE_PANOSE_XHEIGHT_DUCKING_LARGE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XHEIGHT_DUCKING_LARGE</unmanaged>
	DuckingLarge = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XHEIGHT::DWRITE_PANOSE_XHEIGHT_CONSTANT_STD"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XHEIGHT_CONSTANT_STD</unmanaged>
	ConstantStd = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XHEIGHT::DWRITE_PANOSE_XHEIGHT_DUCKING_STD"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XHEIGHT_DUCKING_STD</unmanaged>
	DuckingStd = 6,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_TOOL_KIND"]/*' />
/// <unmanaged>DWRITE_PANOSE_TOOL_KIND</unmanaged>
public enum PanoseToolKind : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_TOOL_KIND::DWRITE_PANOSE_TOOL_KIND_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_TOOL_KIND_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_TOOL_KIND::DWRITE_PANOSE_TOOL_KIND_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_TOOL_KIND_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_TOOL_KIND::DWRITE_PANOSE_TOOL_KIND_FLAT_NIB"]/*' />
	/// <unmanaged>DWRITE_PANOSE_TOOL_KIND_FLAT_NIB</unmanaged>
	FlatNib = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_TOOL_KIND::DWRITE_PANOSE_TOOL_KIND_PRESSURE_POINT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_TOOL_KIND_PRESSURE_POINT</unmanaged>
	PressurePoint = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_TOOL_KIND::DWRITE_PANOSE_TOOL_KIND_ENGRAVED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_TOOL_KIND_ENGRAVED</unmanaged>
	Engraved = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_TOOL_KIND::DWRITE_PANOSE_TOOL_KIND_BALL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_TOOL_KIND_BALL</unmanaged>
	Ball = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_TOOL_KIND::DWRITE_PANOSE_TOOL_KIND_BRUSH"]/*' />
	/// <unmanaged>DWRITE_PANOSE_TOOL_KIND_BRUSH</unmanaged>
	Brush = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_TOOL_KIND::DWRITE_PANOSE_TOOL_KIND_ROUGH"]/*' />
	/// <unmanaged>DWRITE_PANOSE_TOOL_KIND_ROUGH</unmanaged>
	Rough = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_TOOL_KIND::DWRITE_PANOSE_TOOL_KIND_FELT_PEN_BRUSH_TIP"]/*' />
	/// <unmanaged>DWRITE_PANOSE_TOOL_KIND_FELT_PEN_BRUSH_TIP</unmanaged>
	FeltPenBrushTip = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_TOOL_KIND::DWRITE_PANOSE_TOOL_KIND_WILD_BRUSH"]/*' />
	/// <unmanaged>DWRITE_PANOSE_TOOL_KIND_WILD_BRUSH</unmanaged>
	WildBrush = 9,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SPACING"]/*' />
/// <unmanaged>DWRITE_PANOSE_SPACING</unmanaged>
public enum PanoseSpacing : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SPACING::DWRITE_PANOSE_SPACING_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SPACING_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SPACING::DWRITE_PANOSE_SPACING_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SPACING_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SPACING::DWRITE_PANOSE_SPACING_PROPORTIONAL_SPACED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SPACING_PROPORTIONAL_SPACED</unmanaged>
	ProportionalSpaced = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SPACING::DWRITE_PANOSE_SPACING_MONOSPACED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SPACING_MONOSPACED</unmanaged>
	Monospaced = 3,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT_RATIO"]/*' />
/// <unmanaged>DWRITE_PANOSE_ASPECT_RATIO</unmanaged>
public enum PanoseAspectRatio : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT_RATIO::DWRITE_PANOSE_ASPECT_RATIO_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_RATIO_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT_RATIO::DWRITE_PANOSE_ASPECT_RATIO_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_RATIO_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT_RATIO::DWRITE_PANOSE_ASPECT_RATIO_VERY_CONDENSED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_RATIO_VERY_CONDENSED</unmanaged>
	VeryCondensed = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT_RATIO::DWRITE_PANOSE_ASPECT_RATIO_CONDENSED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_RATIO_CONDENSED</unmanaged>
	Condensed = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT_RATIO::DWRITE_PANOSE_ASPECT_RATIO_NORMAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_RATIO_NORMAL</unmanaged>
	Normal = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT_RATIO::DWRITE_PANOSE_ASPECT_RATIO_EXPANDED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_RATIO_EXPANDED</unmanaged>
	Expanded = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT_RATIO::DWRITE_PANOSE_ASPECT_RATIO_VERY_EXPANDED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_RATIO_VERY_EXPANDED</unmanaged>
	VeryExpanded = 6,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_TOPOLOGY"]/*' />
/// <unmanaged>DWRITE_PANOSE_SCRIPT_TOPOLOGY</unmanaged>
public enum PanoseScriptTopology : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_TOPOLOGY::DWRITE_PANOSE_SCRIPT_TOPOLOGY_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_TOPOLOGY_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_TOPOLOGY::DWRITE_PANOSE_SCRIPT_TOPOLOGY_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_TOPOLOGY_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_TOPOLOGY::DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_DISCONNECTED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_DISCONNECTED</unmanaged>
	RomanDisconnected = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_TOPOLOGY::DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_TRAILING"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_TRAILING</unmanaged>
	RomanTrailing = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_TOPOLOGY::DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_CONNECTED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_CONNECTED</unmanaged>
	RomanConnected = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_TOPOLOGY::DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_DISCONNECTED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_DISCONNECTED</unmanaged>
	CursiveDisconnected = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_TOPOLOGY::DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_TRAILING"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_TRAILING</unmanaged>
	CursiveTrailing = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_TOPOLOGY::DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_CONNECTED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_CONNECTED</unmanaged>
	CursiveConnected = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_TOPOLOGY::DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_DISCONNECTED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_DISCONNECTED</unmanaged>
	BlackletterDisconnected = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_TOPOLOGY::DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_TRAILING"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_TRAILING</unmanaged>
	BlackletterTrailing = 9,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_TOPOLOGY::DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_CONNECTED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_CONNECTED</unmanaged>
	BlackletterConnected = 10,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_FORM"]/*' />
/// <unmanaged>DWRITE_PANOSE_SCRIPT_FORM</unmanaged>
public enum PanoseScriptForm : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_FORM::DWRITE_PANOSE_SCRIPT_FORM_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_FORM_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_FORM::DWRITE_PANOSE_SCRIPT_FORM_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_FORM_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_FORM::DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_NO_WRAPPING"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_NO_WRAPPING</unmanaged>
	UprightNoWrapping = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_FORM::DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_SOME_WRAPPING"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_SOME_WRAPPING</unmanaged>
	UprightSomeWrapping = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_FORM::DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_MORE_WRAPPING"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_MORE_WRAPPING</unmanaged>
	UprightMoreWrapping = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_FORM::DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_EXTREME_WRAPPING"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_EXTREME_WRAPPING</unmanaged>
	UprightExtremeWrapping = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_FORM::DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_NO_WRAPPING"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_NO_WRAPPING</unmanaged>
	ObliqueNoWrapping = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_FORM::DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_SOME_WRAPPING"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_SOME_WRAPPING</unmanaged>
	ObliqueSomeWrapping = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_FORM::DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_MORE_WRAPPING"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_MORE_WRAPPING</unmanaged>
	ObliqueMoreWrapping = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_FORM::DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_EXTREME_WRAPPING"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_EXTREME_WRAPPING</unmanaged>
	ObliqueExtremeWrapping = 9,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_FORM::DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_NO_WRAPPING"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_NO_WRAPPING</unmanaged>
	ExaggeratedNoWrapping = 10,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_FORM::DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_SOME_WRAPPING"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_SOME_WRAPPING</unmanaged>
	ExaggeratedSomeWrapping = 11,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_FORM::DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_MORE_WRAPPING"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_MORE_WRAPPING</unmanaged>
	ExaggeratedMoreWrapping = 12,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SCRIPT_FORM::DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_EXTREME_WRAPPING"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_EXTREME_WRAPPING</unmanaged>
	ExaggeratedExtremeWrapping = 13,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FINIALS"]/*' />
/// <unmanaged>DWRITE_PANOSE_FINIALS</unmanaged>
public enum PanoseFinials : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FINIALS::DWRITE_PANOSE_FINIALS_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FINIALS_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FINIALS::DWRITE_PANOSE_FINIALS_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FINIALS_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FINIALS::DWRITE_PANOSE_FINIALS_NONE_NO_LOOPS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FINIALS_NONE_NO_LOOPS</unmanaged>
	NoneNoLoops = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FINIALS::DWRITE_PANOSE_FINIALS_NONE_CLOSED_LOOPS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FINIALS_NONE_CLOSED_LOOPS</unmanaged>
	NoneClosedLoops = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FINIALS::DWRITE_PANOSE_FINIALS_NONE_OPEN_LOOPS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FINIALS_NONE_OPEN_LOOPS</unmanaged>
	NoneOpenLoops = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FINIALS::DWRITE_PANOSE_FINIALS_SHARP_NO_LOOPS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FINIALS_SHARP_NO_LOOPS</unmanaged>
	SharpNoLoops = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FINIALS::DWRITE_PANOSE_FINIALS_SHARP_CLOSED_LOOPS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FINIALS_SHARP_CLOSED_LOOPS</unmanaged>
	SharpClosedLoops = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FINIALS::DWRITE_PANOSE_FINIALS_SHARP_OPEN_LOOPS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FINIALS_SHARP_OPEN_LOOPS</unmanaged>
	SharpOpenLoops = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FINIALS::DWRITE_PANOSE_FINIALS_TAPERED_NO_LOOPS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FINIALS_TAPERED_NO_LOOPS</unmanaged>
	TaperedNoLoops = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FINIALS::DWRITE_PANOSE_FINIALS_TAPERED_CLOSED_LOOPS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FINIALS_TAPERED_CLOSED_LOOPS</unmanaged>
	TaperedClosedLoops = 9,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FINIALS::DWRITE_PANOSE_FINIALS_TAPERED_OPEN_LOOPS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FINIALS_TAPERED_OPEN_LOOPS</unmanaged>
	TaperedOpenLoops = 10,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FINIALS::DWRITE_PANOSE_FINIALS_ROUND_NO_LOOPS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FINIALS_ROUND_NO_LOOPS</unmanaged>
	RoundNoLoops = 11,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FINIALS::DWRITE_PANOSE_FINIALS_ROUND_CLOSED_LOOPS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FINIALS_ROUND_CLOSED_LOOPS</unmanaged>
	RoundClosedLoops = 12,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FINIALS::DWRITE_PANOSE_FINIALS_ROUND_OPEN_LOOPS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FINIALS_ROUND_OPEN_LOOPS</unmanaged>
	RoundOpenLoops = 13,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XASCENT"]/*' />
/// <unmanaged>DWRITE_PANOSE_XASCENT</unmanaged>
public enum PanoseXascent : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XASCENT::DWRITE_PANOSE_XASCENT_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XASCENT_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XASCENT::DWRITE_PANOSE_XASCENT_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XASCENT_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XASCENT::DWRITE_PANOSE_XASCENT_VERY_LOW"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XASCENT_VERY_LOW</unmanaged>
	VeryLow = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XASCENT::DWRITE_PANOSE_XASCENT_LOW"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XASCENT_LOW</unmanaged>
	Low = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XASCENT::DWRITE_PANOSE_XASCENT_MEDIUM"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XASCENT_MEDIUM</unmanaged>
	Medium = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XASCENT::DWRITE_PANOSE_XASCENT_HIGH"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XASCENT_HIGH</unmanaged>
	High = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_XASCENT::DWRITE_PANOSE_XASCENT_VERY_HIGH"]/*' />
	/// <unmanaged>DWRITE_PANOSE_XASCENT_VERY_HIGH</unmanaged>
	VeryHigh = 6,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_CLASS"]/*' />
/// <unmanaged>DWRITE_PANOSE_DECORATIVE_CLASS</unmanaged>
public enum PanoseDecorativeClass : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_CLASS::DWRITE_PANOSE_DECORATIVE_CLASS_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_CLASS_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_CLASS::DWRITE_PANOSE_DECORATIVE_CLASS_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_CLASS_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_CLASS::DWRITE_PANOSE_DECORATIVE_CLASS_DERIVATIVE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_CLASS_DERIVATIVE</unmanaged>
	Derivative = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_CLASS::DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_TOPOLOGY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_TOPOLOGY</unmanaged>
	NonstandardTopology = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_CLASS::DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ELEMENTS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ELEMENTS</unmanaged>
	NonstandardElements = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_CLASS::DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ASPECT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ASPECT</unmanaged>
	NonstandardAspect = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_CLASS::DWRITE_PANOSE_DECORATIVE_CLASS_INITIALS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_CLASS_INITIALS</unmanaged>
	Initials = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_CLASS::DWRITE_PANOSE_DECORATIVE_CLASS_CARTOON"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_CLASS_CARTOON</unmanaged>
	Cartoon = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_CLASS::DWRITE_PANOSE_DECORATIVE_CLASS_PICTURE_STEMS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_CLASS_PICTURE_STEMS</unmanaged>
	PictureStems = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_CLASS::DWRITE_PANOSE_DECORATIVE_CLASS_ORNAMENTED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_CLASS_ORNAMENTED</unmanaged>
	Ornamented = 9,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_CLASS::DWRITE_PANOSE_DECORATIVE_CLASS_TEXT_AND_BACKGROUND"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_CLASS_TEXT_AND_BACKGROUND</unmanaged>
	TextAndBackground = 10,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_CLASS::DWRITE_PANOSE_DECORATIVE_CLASS_COLLAGE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_CLASS_COLLAGE</unmanaged>
	Collage = 11,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_CLASS::DWRITE_PANOSE_DECORATIVE_CLASS_MONTAGE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_CLASS_MONTAGE</unmanaged>
	Montage = 12,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT"]/*' />
/// <unmanaged>DWRITE_PANOSE_ASPECT</unmanaged>
public enum PanoseAspect : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT::DWRITE_PANOSE_ASPECT_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT::DWRITE_PANOSE_ASPECT_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT::DWRITE_PANOSE_ASPECT_SUPER_CONDENSED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_SUPER_CONDENSED</unmanaged>
	SuperCondensed = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT::DWRITE_PANOSE_ASPECT_VERY_CONDENSED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_VERY_CONDENSED</unmanaged>
	VeryCondensed = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT::DWRITE_PANOSE_ASPECT_CONDENSED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_CONDENSED</unmanaged>
	Condensed = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT::DWRITE_PANOSE_ASPECT_NORMAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_NORMAL</unmanaged>
	Normal = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT::DWRITE_PANOSE_ASPECT_EXTENDED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_EXTENDED</unmanaged>
	Extended = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT::DWRITE_PANOSE_ASPECT_VERY_EXTENDED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_VERY_EXTENDED</unmanaged>
	VeryExtended = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT::DWRITE_PANOSE_ASPECT_SUPER_EXTENDED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_SUPER_EXTENDED</unmanaged>
	SuperExtended = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_ASPECT::DWRITE_PANOSE_ASPECT_MONOSPACED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_ASPECT_MONOSPACED</unmanaged>
	Monospaced = 9,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FILL"]/*' />
/// <unmanaged>DWRITE_PANOSE_FILL</unmanaged>
public enum PanoseFill : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FILL::DWRITE_PANOSE_FILL_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FILL_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FILL::DWRITE_PANOSE_FILL_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FILL_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FILL::DWRITE_PANOSE_FILL_STANDARD_SOLID_FILL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FILL_STANDARD_SOLID_FILL</unmanaged>
	StandardSolidFill = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FILL::DWRITE_PANOSE_FILL_NO_FILL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FILL_NO_FILL</unmanaged>
	NoFill = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FILL::DWRITE_PANOSE_FILL_PATTERNED_FILL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FILL_PATTERNED_FILL</unmanaged>
	PatternedFill = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FILL::DWRITE_PANOSE_FILL_COMPLEX_FILL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FILL_COMPLEX_FILL</unmanaged>
	ComplexFill = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FILL::DWRITE_PANOSE_FILL_SHAPED_FILL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FILL_SHAPED_FILL</unmanaged>
	ShapedFill = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_FILL::DWRITE_PANOSE_FILL_DRAWN_DISTRESSED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_FILL_DRAWN_DISTRESSED</unmanaged>
	DrawnDistressed = 7,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LINING"]/*' />
/// <unmanaged>DWRITE_PANOSE_LINING</unmanaged>
public enum PanoseLining : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LINING::DWRITE_PANOSE_LINING_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LINING_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LINING::DWRITE_PANOSE_LINING_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LINING_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LINING::DWRITE_PANOSE_LINING_NONE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LINING_NONE</unmanaged>
	None = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LINING::DWRITE_PANOSE_LINING_INLINE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LINING_INLINE</unmanaged>
	Inline = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LINING::DWRITE_PANOSE_LINING_OUTLINE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LINING_OUTLINE</unmanaged>
	Outline = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LINING::DWRITE_PANOSE_LINING_ENGRAVED"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LINING_ENGRAVED</unmanaged>
	Engraved = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LINING::DWRITE_PANOSE_LINING_SHADOW"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LINING_SHADOW</unmanaged>
	Shadow = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LINING::DWRITE_PANOSE_LINING_RELIEF"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LINING_RELIEF</unmanaged>
	Relief = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_LINING::DWRITE_PANOSE_LINING_BACKDROP"]/*' />
	/// <unmanaged>DWRITE_PANOSE_LINING_BACKDROP</unmanaged>
	Backdrop = 8,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY"]/*' />
/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY</unmanaged>
public enum PanoseDecorativeTopology : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY::DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY::DWRITE_PANOSE_DECORATIVE_TOPOLOGY_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY::DWRITE_PANOSE_DECORATIVE_TOPOLOGY_STANDARD"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY_STANDARD</unmanaged>
	Standard = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY::DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SQUARE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SQUARE</unmanaged>
	Square = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY::DWRITE_PANOSE_DECORATIVE_TOPOLOGY_MULTIPLE_SEGMENT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY_MULTIPLE_SEGMENT</unmanaged>
	MultipleSegment = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY::DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ART_DECO"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ART_DECO</unmanaged>
	ArtDeco = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY::DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UNEVEN_WEIGHTING"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UNEVEN_WEIGHTING</unmanaged>
	UnevenWeighting = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY::DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_ARMS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_ARMS</unmanaged>
	DiverseArms = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY::DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_FORMS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_FORMS</unmanaged>
	DiverseForms = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY::DWRITE_PANOSE_DECORATIVE_TOPOLOGY_LOMBARDIC_FORMS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY_LOMBARDIC_FORMS</unmanaged>
	LombardicForms = 9,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY::DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UPPER_CASE_IN_LOWER_CASE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UPPER_CASE_IN_LOWER_CASE</unmanaged>
	UpperCaseInLowerCase = 10,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY::DWRITE_PANOSE_DECORATIVE_TOPOLOGY_IMPLIED_TOPOLOGY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY_IMPLIED_TOPOLOGY</unmanaged>
	ImpliedTopology = 11,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY::DWRITE_PANOSE_DECORATIVE_TOPOLOGY_HORSESHOE_E_AND_A"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY_HORSESHOE_E_AND_A</unmanaged>
	HorseshoeEAndA = 12,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY::DWRITE_PANOSE_DECORATIVE_TOPOLOGY_CURSIVE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY_CURSIVE</unmanaged>
	Cursive = 13,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY::DWRITE_PANOSE_DECORATIVE_TOPOLOGY_BLACKLETTER"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY_BLACKLETTER</unmanaged>
	Blackletter = 14,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_DECORATIVE_TOPOLOGY::DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SWASH_VARIANCE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SWASH_VARIANCE</unmanaged>
	SwashVariance = 15,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CHARACTER_RANGES"]/*' />
/// <unmanaged>DWRITE_PANOSE_CHARACTER_RANGES</unmanaged>
public enum PanoseCharacterRanges : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CHARACTER_RANGES::DWRITE_PANOSE_CHARACTER_RANGES_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CHARACTER_RANGES_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CHARACTER_RANGES::DWRITE_PANOSE_CHARACTER_RANGES_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CHARACTER_RANGES_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CHARACTER_RANGES::DWRITE_PANOSE_CHARACTER_RANGES_EXTENDED_COLLECTION"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CHARACTER_RANGES_EXTENDED_COLLECTION</unmanaged>
	ExtendedCollection = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CHARACTER_RANGES::DWRITE_PANOSE_CHARACTER_RANGES_LITERALS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CHARACTER_RANGES_LITERALS</unmanaged>
	Literals = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CHARACTER_RANGES::DWRITE_PANOSE_CHARACTER_RANGES_NO_LOWER_CASE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CHARACTER_RANGES_NO_LOWER_CASE</unmanaged>
	NoLowerCase = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_CHARACTER_RANGES::DWRITE_PANOSE_CHARACTER_RANGES_SMALL_CAPS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_CHARACTER_RANGES_SMALL_CAPS</unmanaged>
	SmallCaps = 5,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_KIND"]/*' />
/// <unmanaged>DWRITE_PANOSE_SYMBOL_KIND</unmanaged>
public enum PanoseSymbolKind : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_KIND::DWRITE_PANOSE_SYMBOL_KIND_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_KIND_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_KIND::DWRITE_PANOSE_SYMBOL_KIND_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_KIND_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_KIND::DWRITE_PANOSE_SYMBOL_KIND_MONTAGES"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_KIND_MONTAGES</unmanaged>
	Montages = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_KIND::DWRITE_PANOSE_SYMBOL_KIND_PICTURES"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_KIND_PICTURES</unmanaged>
	Pictures = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_KIND::DWRITE_PANOSE_SYMBOL_KIND_SHAPES"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_KIND_SHAPES</unmanaged>
	Shapes = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_KIND::DWRITE_PANOSE_SYMBOL_KIND_SCIENTIFIC"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_KIND_SCIENTIFIC</unmanaged>
	Scientific = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_KIND::DWRITE_PANOSE_SYMBOL_KIND_MUSIC"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_KIND_MUSIC</unmanaged>
	Music = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_KIND::DWRITE_PANOSE_SYMBOL_KIND_EXPERT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_KIND_EXPERT</unmanaged>
	Expert = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_KIND::DWRITE_PANOSE_SYMBOL_KIND_PATTERNS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_KIND_PATTERNS</unmanaged>
	Patterns = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_KIND::DWRITE_PANOSE_SYMBOL_KIND_BOARDERS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_KIND_BOARDERS</unmanaged>
	Boarders = 9,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_KIND::DWRITE_PANOSE_SYMBOL_KIND_ICONS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_KIND_ICONS</unmanaged>
	Icons = 10,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_KIND::DWRITE_PANOSE_SYMBOL_KIND_LOGOS"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_KIND_LOGOS</unmanaged>
	Logos = 11,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_KIND::DWRITE_PANOSE_SYMBOL_KIND_INDUSTRY_SPECIFIC"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_KIND_INDUSTRY_SPECIFIC</unmanaged>
	IndustrySpecific = 12,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_ASPECT_RATIO"]/*' />
/// <unmanaged>DWRITE_PANOSE_SYMBOL_ASPECT_RATIO</unmanaged>
public enum PanoseSymbolAspectRatio : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_ASPECT_RATIO::DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_ANY"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_ANY</unmanaged>
	Any = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_ASPECT_RATIO::DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_FIT"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_FIT</unmanaged>
	NoFit = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_ASPECT_RATIO::DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_WIDTH"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_WIDTH</unmanaged>
	NoWidth = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_ASPECT_RATIO::DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_EXCEPTIONALLY_WIDE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_EXCEPTIONALLY_WIDE</unmanaged>
	ExceptionallyWide = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_ASPECT_RATIO::DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_SUPER_WIDE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_SUPER_WIDE</unmanaged>
	SuperWide = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_ASPECT_RATIO::DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_WIDE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_WIDE</unmanaged>
	VeryWide = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_ASPECT_RATIO::DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_WIDE"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_WIDE</unmanaged>
	Wide = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_ASPECT_RATIO::DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NORMAL"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NORMAL</unmanaged>
	Normal = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_ASPECT_RATIO::DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NARROW"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NARROW</unmanaged>
	Narrow = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE_SYMBOL_ASPECT_RATIO::DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_NARROW"]/*' />
	/// <unmanaged>DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_NARROW</unmanaged>
	VeryNarrow = 9,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_OUTLINE_THRESHOLD"]/*' />
/// <unmanaged>DWRITE_OUTLINE_THRESHOLD</unmanaged>
public enum OutlineThreshold : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_OUTLINE_THRESHOLD::DWRITE_OUTLINE_THRESHOLD_ANTIALIASED"]/*' />
	/// <unmanaged>DWRITE_OUTLINE_THRESHOLD_ANTIALIASED</unmanaged>
	Antialiased = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_OUTLINE_THRESHOLD::DWRITE_OUTLINE_THRESHOLD_ALIASED"]/*' />
	/// <unmanaged>DWRITE_OUTLINE_THRESHOLD_ALIASED</unmanaged>
	Aliased = 1,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_BASELINE"]/*' />
/// <unmanaged>DWRITE_BASELINE</unmanaged>
public enum Baseline : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_BASELINE::DWRITE_BASELINE_DEFAULT"]/*' />
	/// <unmanaged>DWRITE_BASELINE_DEFAULT</unmanaged>
	Default = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_BASELINE::DWRITE_BASELINE_ROMAN"]/*' />
	/// <unmanaged>DWRITE_BASELINE_ROMAN</unmanaged>
	Roman = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_BASELINE::DWRITE_BASELINE_CENTRAL"]/*' />
	/// <unmanaged>DWRITE_BASELINE_CENTRAL</unmanaged>
	Central = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_BASELINE::DWRITE_BASELINE_MATH"]/*' />
	/// <unmanaged>DWRITE_BASELINE_MATH</unmanaged>
	Math = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_BASELINE::DWRITE_BASELINE_HANGING"]/*' />
	/// <unmanaged>DWRITE_BASELINE_HANGING</unmanaged>
	Hanging = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_BASELINE::DWRITE_BASELINE_IDEOGRAPHIC_BOTTOM"]/*' />
	/// <unmanaged>DWRITE_BASELINE_IDEOGRAPHIC_BOTTOM</unmanaged>
	IdeographicBottom = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_BASELINE::DWRITE_BASELINE_IDEOGRAPHIC_TOP"]/*' />
	/// <unmanaged>DWRITE_BASELINE_IDEOGRAPHIC_TOP</unmanaged>
	IdeographicTop = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_BASELINE::DWRITE_BASELINE_MINIMUM"]/*' />
	/// <unmanaged>DWRITE_BASELINE_MINIMUM</unmanaged>
	Minimum = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_BASELINE::DWRITE_BASELINE_MAXIMUM"]/*' />
	/// <unmanaged>DWRITE_BASELINE_MAXIMUM</unmanaged>
	Maximum = 8,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_VERTICAL_GLYPH_ORIENTATION"]/*' />
/// <unmanaged>DWRITE_VERTICAL_GLYPH_ORIENTATION</unmanaged>
public enum VerticalGlyphOrientation : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_VERTICAL_GLYPH_ORIENTATION::DWRITE_VERTICAL_GLYPH_ORIENTATION_DEFAULT"]/*' />
	/// <unmanaged>DWRITE_VERTICAL_GLYPH_ORIENTATION_DEFAULT</unmanaged>
	Default = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_VERTICAL_GLYPH_ORIENTATION::DWRITE_VERTICAL_GLYPH_ORIENTATION_STACKED"]/*' />
	/// <unmanaged>DWRITE_VERTICAL_GLYPH_ORIENTATION_STACKED</unmanaged>
	Stacked = 1,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_ORIENTATION_ANGLE"]/*' />
/// <unmanaged>DWRITE_GLYPH_ORIENTATION_ANGLE</unmanaged>
public enum GlyphOrientationAngle : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_ORIENTATION_ANGLE::DWRITE_GLYPH_ORIENTATION_ANGLE_0_DEGREES"]/*' />
	/// <unmanaged>DWRITE_GLYPH_ORIENTATION_ANGLE_0_DEGREES</unmanaged>
	_0Degrees = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_ORIENTATION_ANGLE::DWRITE_GLYPH_ORIENTATION_ANGLE_90_DEGREES"]/*' />
	/// <unmanaged>DWRITE_GLYPH_ORIENTATION_ANGLE_90_DEGREES</unmanaged>
	_90Degrees = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_ORIENTATION_ANGLE::DWRITE_GLYPH_ORIENTATION_ANGLE_180_DEGREES"]/*' />
	/// <unmanaged>DWRITE_GLYPH_ORIENTATION_ANGLE_180_DEGREES</unmanaged>
	_180Degrees = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_ORIENTATION_ANGLE::DWRITE_GLYPH_ORIENTATION_ANGLE_270_DEGREES"]/*' />
	/// <unmanaged>DWRITE_GLYPH_ORIENTATION_ANGLE_270_DEGREES</unmanaged>
	_270Degrees = 3,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_ANTIALIAS_MODE"]/*' />
/// <unmanaged>DWRITE_TEXT_ANTIALIAS_MODE</unmanaged>
public enum TextAntialiasMode : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_ANTIALIAS_MODE::DWRITE_TEXT_ANTIALIAS_MODE_CLEARTYPE"]/*' />
	/// <unmanaged>DWRITE_TEXT_ANTIALIAS_MODE_CLEARTYPE</unmanaged>
	Cleartype = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_ANTIALIAS_MODE::DWRITE_TEXT_ANTIALIAS_MODE_GRAYSCALE"]/*' />
	/// <unmanaged>DWRITE_TEXT_ANTIALIAS_MODE_GRAYSCALE</unmanaged>
	Grayscale = 1,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_OPTICAL_ALIGNMENT"]/*' />
/// <unmanaged>DWRITE_OPTICAL_ALIGNMENT</unmanaged>
public enum OpticalAlignment : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_OPTICAL_ALIGNMENT::DWRITE_OPTICAL_ALIGNMENT_NONE"]/*' />
	/// <unmanaged>DWRITE_OPTICAL_ALIGNMENT_NONE</unmanaged>
	None = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_OPTICAL_ALIGNMENT::DWRITE_OPTICAL_ALIGNMENT_NO_SIDE_BEARINGS"]/*' />
	/// <unmanaged>DWRITE_OPTICAL_ALIGNMENT_NO_SIDE_BEARINGS</unmanaged>
	NoSideBearings = 1,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GRID_FIT_MODE"]/*' />
/// <unmanaged>DWRITE_GRID_FIT_MODE</unmanaged>
public enum GridFitMode : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GRID_FIT_MODE::DWRITE_GRID_FIT_MODE_DEFAULT"]/*' />
	/// <unmanaged>DWRITE_GRID_FIT_MODE_DEFAULT</unmanaged>
	Default = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GRID_FIT_MODE::DWRITE_GRID_FIT_MODE_DISABLED"]/*' />
	/// <unmanaged>DWRITE_GRID_FIT_MODE_DISABLED</unmanaged>
	Disabled = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GRID_FIT_MODE::DWRITE_GRID_FIT_MODE_ENABLED"]/*' />
	/// <unmanaged>DWRITE_GRID_FIT_MODE_ENABLED</unmanaged>
	Enabled = 2,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID"]/*' />
/// <unmanaged>DWRITE_FONT_PROPERTY_ID</unmanaged>
public enum FontPropertyId : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_NONE"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_NONE</unmanaged>
	None = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FAMILY_NAME"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FAMILY_NAME</unmanaged>
	WeightStretchStyleFamilyName = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FAMILY_NAME"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FAMILY_NAME</unmanaged>
	TypographicFamilyName = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FACE_NAME"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FACE_NAME</unmanaged>
	WeightStretchStyleFaceName = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_FULL_NAME"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_FULL_NAME</unmanaged>
	FullName = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_WIN32_FAMILY_NAME"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_WIN32_FAMILY_NAME</unmanaged>
	Win32FamilyName = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_POSTSCRIPT_NAME"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_POSTSCRIPT_NAME</unmanaged>
	PostscriptName = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_DESIGN_SCRIPT_LANGUAGE_TAG"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_DESIGN_SCRIPT_LANGUAGE_TAG</unmanaged>
	DesignScriptLanguageTag = 7,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_SUPPORTED_SCRIPT_LANGUAGE_TAG"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_SUPPORTED_SCRIPT_LANGUAGE_TAG</unmanaged>
	SupportedScriptLanguageTag = 8,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_SEMANTIC_TAG"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_SEMANTIC_TAG</unmanaged>
	SemanticTag = 9,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_WEIGHT"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_WEIGHT</unmanaged>
	Weight = 10,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_STRETCH"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_STRETCH</unmanaged>
	Stretch = 11,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_STYLE"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_STYLE</unmanaged>
	Style = 12,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FACE_NAME"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FACE_NAME</unmanaged>
	TypographicFaceName = 13,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_TOTAL"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_TOTAL</unmanaged>
	Total = 13,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_TOTAL_RS3"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_TOTAL_RS3</unmanaged>
	TotalRs3 = 14,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_PREFERRED_FAMILY_NAME"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_PREFERRED_FAMILY_NAME</unmanaged>
	PreferredFamilyName = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_FAMILY_NAME"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_FAMILY_NAME</unmanaged>
	FamilyName = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY_ID::DWRITE_FONT_PROPERTY_ID_FACE_NAME"]/*' />
	/// <unmanaged>DWRITE_FONT_PROPERTY_ID_FACE_NAME</unmanaged>
	FaceName = 3,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LOCALITY"]/*' />
/// <unmanaged>DWRITE_LOCALITY</unmanaged>
public enum Locality : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LOCALITY::DWRITE_LOCALITY_REMOTE"]/*' />
	/// <unmanaged>DWRITE_LOCALITY_REMOTE</unmanaged>
	Remote = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LOCALITY::DWRITE_LOCALITY_PARTIAL"]/*' />
	/// <unmanaged>DWRITE_LOCALITY_PARTIAL</unmanaged>
	Partial = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LOCALITY::DWRITE_LOCALITY_LOCAL"]/*' />
	/// <unmanaged>DWRITE_LOCALITY_LOCAL</unmanaged>
	Local = 2,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE1"]/*' />
/// <unmanaged>DWRITE_RENDERING_MODE1</unmanaged>
public enum RenderingMode1 : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE1::DWRITE_RENDERING_MODE1_DEFAULT"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE1_DEFAULT</unmanaged>
	Default = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE1::DWRITE_RENDERING_MODE1_ALIASED"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE1_ALIASED</unmanaged>
	Aliased = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE1::DWRITE_RENDERING_MODE1_GDI_CLASSIC"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE1_GDI_CLASSIC</unmanaged>
	GDIClassic = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE1::DWRITE_RENDERING_MODE1_GDI_NATURAL"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE1_GDI_NATURAL</unmanaged>
	GDINatural = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE1::DWRITE_RENDERING_MODE1_NATURAL"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE1_NATURAL</unmanaged>
	Natural = 4,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE1::DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC</unmanaged>
	NaturalSymmetric = 5,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE1::DWRITE_RENDERING_MODE1_OUTLINE"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE1_OUTLINE</unmanaged>
	Outline = 6,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_RENDERING_MODE1::DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC_DOWNSAMPLED"]/*' />
	/// <unmanaged>DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC_DOWNSAMPLED</unmanaged>
	NaturalSymmetricDownsampled = 7,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_LINE_GAP_USAGE"]/*' />
/// <unmanaged>DWRITE_FONT_LINE_GAP_USAGE</unmanaged>
public enum FontLineGapUsage : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_LINE_GAP_USAGE::DWRITE_FONT_LINE_GAP_USAGE_DEFAULT"]/*' />
	/// <unmanaged>DWRITE_FONT_LINE_GAP_USAGE_DEFAULT</unmanaged>
	Default = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_LINE_GAP_USAGE::DWRITE_FONT_LINE_GAP_USAGE_DISABLED"]/*' />
	/// <unmanaged>DWRITE_FONT_LINE_GAP_USAGE_DISABLED</unmanaged>
	Disabled = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_LINE_GAP_USAGE::DWRITE_FONT_LINE_GAP_USAGE_ENABLED"]/*' />
	/// <unmanaged>DWRITE_FONT_LINE_GAP_USAGE_ENABLED</unmanaged>
	Enabled = 2,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_CONTAINER_TYPE"]/*' />
/// <unmanaged>DWRITE_CONTAINER_TYPE</unmanaged>
public enum ContainerType : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_CONTAINER_TYPE::DWRITE_CONTAINER_TYPE_UNKNOWN"]/*' />
	/// <unmanaged>DWRITE_CONTAINER_TYPE_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_CONTAINER_TYPE::DWRITE_CONTAINER_TYPE_WOFF"]/*' />
	/// <unmanaged>DWRITE_CONTAINER_TYPE_WOFF</unmanaged>
	Woff = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_CONTAINER_TYPE::DWRITE_CONTAINER_TYPE_WOFF2"]/*' />
	/// <unmanaged>DWRITE_CONTAINER_TYPE_WOFF2</unmanaged>
	Woff2 = 2,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FAMILY_MODEL"]/*' />
/// <unmanaged>DWRITE_FONT_FAMILY_MODEL</unmanaged>
public enum FontFamilyModel : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FAMILY_MODEL::DWRITE_FONT_FAMILY_MODEL_TYPOGRAPHIC"]/*' />
	/// <unmanaged>DWRITE_FONT_FAMILY_MODEL_TYPOGRAPHIC</unmanaged>
	Typographic = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FAMILY_MODEL::DWRITE_FONT_FAMILY_MODEL_WEIGHT_STRETCH_STYLE"]/*' />
	/// <unmanaged>DWRITE_FONT_FAMILY_MODEL_WEIGHT_STRETCH_STYLE</unmanaged>
	WeightStretchStyle = 1,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_AUTOMATIC_FONT_AXES"]/*' />
/// <unmanaged>DWRITE_AUTOMATIC_FONT_AXES</unmanaged>
[Flags]
public enum AutomaticFontAxes : uint
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_AUTOMATIC_FONT_AXES::DWRITE_AUTOMATIC_FONT_AXES_NONE"]/*' />
	/// <unmanaged>DWRITE_AUTOMATIC_FONT_AXES_NONE</unmanaged>
	None = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_AUTOMATIC_FONT_AXES::DWRITE_AUTOMATIC_FONT_AXES_OPTICAL_SIZE"]/*' />
	/// <unmanaged>DWRITE_AUTOMATIC_FONT_AXES_OPTICAL_SIZE</unmanaged>
	OpticalSize = 1,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_ATTRIBUTES"]/*' />
/// <unmanaged>DWRITE_FONT_AXIS_ATTRIBUTES</unmanaged>
[Flags]
public enum FontAxisAttributes : uint
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_ATTRIBUTES::DWRITE_FONT_AXIS_ATTRIBUTES_NONE"]/*' />
	/// <unmanaged>DWRITE_FONT_AXIS_ATTRIBUTES_NONE</unmanaged>
	None = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_ATTRIBUTES::DWRITE_FONT_AXIS_ATTRIBUTES_VARIABLE"]/*' />
	/// <unmanaged>DWRITE_FONT_AXIS_ATTRIBUTES_VARIABLE</unmanaged>
	Variable = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_ATTRIBUTES::DWRITE_FONT_AXIS_ATTRIBUTES_HIDDEN"]/*' />
	/// <unmanaged>DWRITE_FONT_AXIS_ATTRIBUTES_HIDDEN</unmanaged>
	Hidden = 2,
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_SOURCE_TYPE"]/*' />
/// <unmanaged>DWRITE_FONT_SOURCE_TYPE</unmanaged>
public enum FontSourceType : int
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_SOURCE_TYPE::DWRITE_FONT_SOURCE_TYPE_UNKNOWN"]/*' />
	/// <unmanaged>DWRITE_FONT_SOURCE_TYPE_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_SOURCE_TYPE::DWRITE_FONT_SOURCE_TYPE_PER_MACHINE"]/*' />
	/// <unmanaged>DWRITE_FONT_SOURCE_TYPE_PER_MACHINE</unmanaged>
	PerMachine = 1,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_SOURCE_TYPE::DWRITE_FONT_SOURCE_TYPE_PER_USER"]/*' />
	/// <unmanaged>DWRITE_FONT_SOURCE_TYPE_PER_USER</unmanaged>
	PerUser = 2,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_SOURCE_TYPE::DWRITE_FONT_SOURCE_TYPE_APPX_PACKAGE"]/*' />
	/// <unmanaged>DWRITE_FONT_SOURCE_TYPE_APPX_PACKAGE</unmanaged>
	AppxPackage = 3,
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_SOURCE_TYPE::DWRITE_FONT_SOURCE_TYPE_REMOTE_FONT_PROVIDER"]/*' />
	/// <unmanaged>DWRITE_FONT_SOURCE_TYPE_REMOTE_FONT_PROVIDER</unmanaged>
	RemoteFontProvider = 4,
}

#endregion Enums

#region Unions
/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE"]/*' />
/// <unmanaged>DWRITE_PANOSE</unmanaged>
[StructLayout(LayoutKind.Explicit)]
public partial struct Panose
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE::values"]/*' />
	[FieldOffset(0)]
	public unsafe fixed byte values[10];

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE::familyKind"]/*' />
	[FieldOffset(0)]
	public byte familyKind;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE::text"]/*' />
	[FieldOffset(0)]
	public _text_e__Struct text;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE::script"]/*' />
	[FieldOffset(0)]
	public _script_e__Struct script;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE::decorative"]/*' />
	[FieldOffset(0)]
	public _decorative_e__Struct decorative;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_PANOSE::symbol"]/*' />
	[FieldOffset(0)]
	public _symbol_e__Struct symbol;

	public partial struct _decorative_e__Struct
	{
		/// <include file='../DirectWrite.xml' path='doc/member[@name="_decorative_e__Struct::familyKind"]/*' />
		public byte familyKind;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_decorative_e__Struct::decorativeClass"]/*' />
		public byte decorativeClass;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_decorative_e__Struct::weight"]/*' />
		public byte weight;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_decorative_e__Struct::aspect"]/*' />
		public byte aspect;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_decorative_e__Struct::contrast"]/*' />
		public byte contrast;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_decorative_e__Struct::serifVariant"]/*' />
		public byte serifVariant;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_decorative_e__Struct::fill"]/*' />
		public byte fill;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_decorative_e__Struct::lining"]/*' />
		public byte lining;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_decorative_e__Struct::decorativeTopology"]/*' />
		public byte decorativeTopology;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_decorative_e__Struct::characterRange"]/*' />
		public byte characterRange;
	}

	public partial struct _text_e__Struct
	{
		/// <include file='../DirectWrite.xml' path='doc/member[@name="_text_e__Struct::familyKind"]/*' />
		public byte familyKind;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_text_e__Struct::serifStyle"]/*' />
		public byte serifStyle;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_text_e__Struct::weight"]/*' />
		public byte weight;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_text_e__Struct::proportion"]/*' />
		public byte proportion;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_text_e__Struct::contrast"]/*' />
		public byte contrast;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_text_e__Struct::strokeVariation"]/*' />
		public byte strokeVariation;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_text_e__Struct::armStyle"]/*' />
		public byte armStyle;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_text_e__Struct::letterform"]/*' />
		public byte letterform;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_text_e__Struct::midline"]/*' />
		public byte midline;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_text_e__Struct::xHeight"]/*' />
		public byte xHeight;
	}

	public partial struct _symbol_e__Struct
	{
		/// <include file='../DirectWrite.xml' path='doc/member[@name="_symbol_e__Struct::familyKind"]/*' />
		public byte familyKind;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_symbol_e__Struct::symbolKind"]/*' />
		public byte symbolKind;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_symbol_e__Struct::weight"]/*' />
		public byte weight;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_symbol_e__Struct::spacing"]/*' />
		public byte spacing;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_symbol_e__Struct::aspectRatioAndContrast"]/*' />
		public byte aspectRatioAndContrast;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_symbol_e__Struct::aspectRatio94"]/*' />
		public byte aspectRatio94;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_symbol_e__Struct::aspectRatio119"]/*' />
		public byte aspectRatio119;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_symbol_e__Struct::aspectRatio157"]/*' />
		public byte aspectRatio157;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_symbol_e__Struct::aspectRatio163"]/*' />
		public byte aspectRatio163;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_symbol_e__Struct::aspectRatio211"]/*' />
		public byte aspectRatio211;
	}

	public partial struct _script_e__Struct
	{
		/// <include file='../DirectWrite.xml' path='doc/member[@name="_script_e__Struct::familyKind"]/*' />
		public byte familyKind;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_script_e__Struct::toolKind"]/*' />
		public byte toolKind;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_script_e__Struct::weight"]/*' />
		public byte weight;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_script_e__Struct::spacing"]/*' />
		public byte spacing;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_script_e__Struct::aspectRatio"]/*' />
		public byte aspectRatio;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_script_e__Struct::contrast"]/*' />
		public byte contrast;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_script_e__Struct::scriptTopology"]/*' />
		public byte scriptTopology;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_script_e__Struct::scriptForm"]/*' />
		public byte scriptForm;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_script_e__Struct::finials"]/*' />
		public byte finials;

		/// <include file='../DirectWrite.xml' path='doc/member[@name="_script_e__Struct::xAscent"]/*' />
		public byte xAscent;
	}

}

#endregion Unions

#region Structs
/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_COLOR_F"]/*' />
/// <unmanaged>DWRITE_COLOR_F</unmanaged>
public partial struct ColorF
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_COLOR_F::r"]/*' />
	public float r;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_COLOR_F::g"]/*' />
	public float g;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_COLOR_F::b"]/*' />
	public float b;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_COLOR_F::a"]/*' />
	public float a;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS"]/*' />
/// <unmanaged>DWRITE_FONT_METRICS</unmanaged>
public partial struct FontMetrics
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS::designUnitsPerEm"]/*' />
	public ushort designUnitsPerEm;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS::ascent"]/*' />
	public ushort ascent;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS::descent"]/*' />
	public ushort descent;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS::lineGap"]/*' />
	public short lineGap;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS::capHeight"]/*' />
	public ushort capHeight;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS::xHeight"]/*' />
	public ushort xHeight;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS::underlinePosition"]/*' />
	public short underlinePosition;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS::underlineThickness"]/*' />
	public ushort underlineThickness;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS::strikethroughPosition"]/*' />
	public short strikethroughPosition;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS::strikethroughThickness"]/*' />
	public ushort strikethroughThickness;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_METRICS"]/*' />
/// <unmanaged>DWRITE_GLYPH_METRICS</unmanaged>
public partial struct GlyphMetrics
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_METRICS::leftSideBearing"]/*' />
	public int leftSideBearing;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_METRICS::advanceWidth"]/*' />
	public uint advanceWidth;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_METRICS::rightSideBearing"]/*' />
	public int rightSideBearing;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_METRICS::topSideBearing"]/*' />
	public int topSideBearing;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_METRICS::advanceHeight"]/*' />
	public uint advanceHeight;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_METRICS::bottomSideBearing"]/*' />
	public int bottomSideBearing;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_METRICS::verticalOriginY"]/*' />
	public int verticalOriginY;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_OFFSET"]/*' />
/// <unmanaged>DWRITE_GLYPH_OFFSET</unmanaged>
public partial struct GlyphOffset
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_OFFSET::advanceOffset"]/*' />
	public float advanceOffset;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_OFFSET::ascenderOffset"]/*' />
	public float ascenderOffset;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_MATRIX"]/*' />
/// <unmanaged>DWRITE_MATRIX</unmanaged>
public partial struct Matrix
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_MATRIX::m11"]/*' />
	public float m11;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_MATRIX::m12"]/*' />
	public float m12;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_MATRIX::m21"]/*' />
	public float m21;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_MATRIX::m22"]/*' />
	public float m22;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_MATRIX::dx"]/*' />
	public float dx;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_MATRIX::dy"]/*' />
	public float dy;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_RANGE"]/*' />
/// <unmanaged>DWRITE_TEXT_RANGE</unmanaged>
public partial struct TextRange
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_RANGE::startPosition"]/*' />
	public uint startPosition;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_RANGE::length"]/*' />
	public uint length;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE"]/*' />
/// <unmanaged>DWRITE_FONT_FEATURE</unmanaged>
public partial struct FontFeature
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE::nameTag"]/*' />
	public FontFeatureTag nameTag;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_FEATURE::parameter"]/*' />
	public uint parameter;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TYPOGRAPHIC_FEATURES"]/*' />
/// <unmanaged>DWRITE_TYPOGRAPHIC_FEATURES</unmanaged>
public partial struct TypographicFeatures
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TYPOGRAPHIC_FEATURES::features"]/*' />
	public unsafe FontFeature* features;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TYPOGRAPHIC_FEATURES::featureCount"]/*' />
	public uint featureCount;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TRIMMING"]/*' />
/// <unmanaged>DWRITE_TRIMMING</unmanaged>
public partial struct Trimming
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TRIMMING::granularity"]/*' />
	public TrimmingGranularity granularity;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TRIMMING::delimiter"]/*' />
	public uint delimiter;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TRIMMING::delimiterCount"]/*' />
	public uint delimiterCount;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_SCRIPT_ANALYSIS"]/*' />
/// <unmanaged>DWRITE_SCRIPT_ANALYSIS</unmanaged>
public partial struct ScriptAnalysis
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_SCRIPT_ANALYSIS::script"]/*' />
	public ushort script;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_SCRIPT_ANALYSIS::shapes"]/*' />
	public ScriptShapes shapes;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_BREAKPOINT"]/*' />
/// <unmanaged>DWRITE_LINE_BREAKPOINT</unmanaged>
public partial struct LineBreakpoint
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_BREAKPOINT::_bitfield"]/*' />
	public byte _bitfield;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_SHAPING_TEXT_PROPERTIES"]/*' />
/// <unmanaged>DWRITE_SHAPING_TEXT_PROPERTIES</unmanaged>
public partial struct ShapingTextProperties
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_SHAPING_TEXT_PROPERTIES::_bitfield"]/*' />
	public ushort _bitfield;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_SHAPING_GLYPH_PROPERTIES"]/*' />
/// <unmanaged>DWRITE_SHAPING_GLYPH_PROPERTIES</unmanaged>
public partial struct ShapingGlyphProperties
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_SHAPING_GLYPH_PROPERTIES::_bitfield"]/*' />
	public ushort _bitfield;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_RUN"]/*' />
/// <unmanaged>DWRITE_GLYPH_RUN</unmanaged>
public partial struct GlyphRun
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_RUN::fontFace"]/*' />
	public unsafe IDWriteFontFace* fontFace;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_RUN::fontEmSize"]/*' />
	public float fontEmSize;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_RUN::glyphCount"]/*' />
	public uint glyphCount;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_RUN::glyphIndices"]/*' />
	public unsafe ushort* glyphIndices;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_RUN::glyphAdvances"]/*' />
	public unsafe float* glyphAdvances;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_RUN::glyphOffsets"]/*' />
	public unsafe GlyphOffset* glyphOffsets;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_RUN::isSideways"]/*' />
	public Bool32 isSideways;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_RUN::bidiLevel"]/*' />
	public uint bidiLevel;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_RUN_DESCRIPTION"]/*' />
/// <unmanaged>DWRITE_GLYPH_RUN_DESCRIPTION</unmanaged>
public partial struct GlyphRunDescription
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_RUN_DESCRIPTION::localeName"]/*' />
	public unsafe ushort* localeName;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_RUN_DESCRIPTION::string"]/*' />
	public unsafe ushort* @string;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_RUN_DESCRIPTION::stringLength"]/*' />
	public uint stringLength;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_RUN_DESCRIPTION::clusterMap"]/*' />
	public unsafe ushort* clusterMap;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_RUN_DESCRIPTION::textPosition"]/*' />
	public uint textPosition;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_UNDERLINE"]/*' />
/// <unmanaged>DWRITE_UNDERLINE</unmanaged>
public partial struct Underline
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_UNDERLINE::width"]/*' />
	public float width;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_UNDERLINE::thickness"]/*' />
	public float thickness;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_UNDERLINE::offset"]/*' />
	public float offset;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_UNDERLINE::runHeight"]/*' />
	public float runHeight;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_UNDERLINE::readingDirection"]/*' />
	public ReadingDirection readingDirection;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_UNDERLINE::flowDirection"]/*' />
	public FlowDirection flowDirection;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_UNDERLINE::localeName"]/*' />
	public unsafe ushort* localeName;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_UNDERLINE::measuringMode"]/*' />
	public MeasuringMode measuringMode;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_STRIKETHROUGH"]/*' />
/// <unmanaged>DWRITE_STRIKETHROUGH</unmanaged>
public partial struct Strikethrough
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_STRIKETHROUGH::width"]/*' />
	public float width;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_STRIKETHROUGH::thickness"]/*' />
	public float thickness;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_STRIKETHROUGH::offset"]/*' />
	public float offset;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_STRIKETHROUGH::readingDirection"]/*' />
	public ReadingDirection readingDirection;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_STRIKETHROUGH::flowDirection"]/*' />
	public FlowDirection flowDirection;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_STRIKETHROUGH::localeName"]/*' />
	public unsafe ushort* localeName;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_STRIKETHROUGH::measuringMode"]/*' />
	public MeasuringMode measuringMode;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_METRICS"]/*' />
/// <unmanaged>DWRITE_LINE_METRICS</unmanaged>
public partial struct LineMetrics
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_METRICS::length"]/*' />
	public uint length;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_METRICS::trailingWhitespaceLength"]/*' />
	public uint trailingWhitespaceLength;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_METRICS::newlineLength"]/*' />
	public uint newlineLength;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_METRICS::height"]/*' />
	public float height;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_METRICS::baseline"]/*' />
	public float baseline;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_METRICS::isTrimmed"]/*' />
	public Bool32 isTrimmed;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_CLUSTER_METRICS"]/*' />
/// <unmanaged>DWRITE_CLUSTER_METRICS</unmanaged>
public partial struct ClusterMetrics
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_CLUSTER_METRICS::width"]/*' />
	public float width;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_CLUSTER_METRICS::length"]/*' />
	public ushort length;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_CLUSTER_METRICS::_bitfield"]/*' />
	public ushort _bitfield;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_METRICS"]/*' />
/// <unmanaged>DWRITE_TEXT_METRICS</unmanaged>
public partial struct TextMetrics
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_METRICS::left"]/*' />
	public float left;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_METRICS::top"]/*' />
	public float top;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_METRICS::width"]/*' />
	public float width;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_METRICS::widthIncludingTrailingWhitespace"]/*' />
	public float widthIncludingTrailingWhitespace;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_METRICS::height"]/*' />
	public float height;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_METRICS::layoutWidth"]/*' />
	public float layoutWidth;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_METRICS::layoutHeight"]/*' />
	public float layoutHeight;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_METRICS::maxBidiReorderingDepth"]/*' />
	public uint maxBidiReorderingDepth;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_METRICS::lineCount"]/*' />
	public uint lineCount;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INLINE_OBJECT_METRICS"]/*' />
/// <unmanaged>DWRITE_INLINE_OBJECT_METRICS</unmanaged>
public partial struct InlineObjectMetrics
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INLINE_OBJECT_METRICS::width"]/*' />
	public float width;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INLINE_OBJECT_METRICS::height"]/*' />
	public float height;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INLINE_OBJECT_METRICS::baseline"]/*' />
	public float baseline;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_INLINE_OBJECT_METRICS::supportsSideways"]/*' />
	public Bool32 supportsSideways;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_OVERHANG_METRICS"]/*' />
/// <unmanaged>DWRITE_OVERHANG_METRICS</unmanaged>
public partial struct OverhangMetrics
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_OVERHANG_METRICS::left"]/*' />
	public float left;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_OVERHANG_METRICS::top"]/*' />
	public float top;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_OVERHANG_METRICS::right"]/*' />
	public float right;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_OVERHANG_METRICS::bottom"]/*' />
	public float bottom;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_HIT_TEST_METRICS"]/*' />
/// <unmanaged>DWRITE_HIT_TEST_METRICS</unmanaged>
public partial struct HitTestMetrics
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_HIT_TEST_METRICS::textPosition"]/*' />
	public uint textPosition;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_HIT_TEST_METRICS::length"]/*' />
	public uint length;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_HIT_TEST_METRICS::left"]/*' />
	public float left;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_HIT_TEST_METRICS::top"]/*' />
	public float top;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_HIT_TEST_METRICS::width"]/*' />
	public float width;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_HIT_TEST_METRICS::height"]/*' />
	public float height;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_HIT_TEST_METRICS::bidiLevel"]/*' />
	public uint bidiLevel;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_HIT_TEST_METRICS::isText"]/*' />
	public Bool32 isText;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_HIT_TEST_METRICS::isTrimmed"]/*' />
	public Bool32 isTrimmed;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS1"]/*' />
/// <unmanaged>DWRITE_FONT_METRICS1</unmanaged>
public partial struct FontMetrics1
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS1::__AnonymousBase_DWrite_1_L627_C38"]/*' />
	public FontMetrics __AnonymousBase_DWrite_1_L627_C38;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS1::glyphBoxLeft"]/*' />
	public short glyphBoxLeft;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS1::glyphBoxTop"]/*' />
	public short glyphBoxTop;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS1::glyphBoxRight"]/*' />
	public short glyphBoxRight;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS1::glyphBoxBottom"]/*' />
	public short glyphBoxBottom;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS1::subscriptPositionX"]/*' />
	public short subscriptPositionX;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS1::subscriptPositionY"]/*' />
	public short subscriptPositionY;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS1::subscriptSizeX"]/*' />
	public short subscriptSizeX;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS1::subscriptSizeY"]/*' />
	public short subscriptSizeY;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS1::superscriptPositionX"]/*' />
	public short superscriptPositionX;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS1::superscriptPositionY"]/*' />
	public short superscriptPositionY;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS1::superscriptSizeX"]/*' />
	public short superscriptSizeX;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS1::superscriptSizeY"]/*' />
	public short superscriptSizeY;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_METRICS1::hasTypographicMetrics"]/*' />
	public Bool32 hasTypographicMetrics;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_CARET_METRICS"]/*' />
/// <unmanaged>DWRITE_CARET_METRICS</unmanaged>
public partial struct CaretMetrics
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_CARET_METRICS::slopeRise"]/*' />
	public short slopeRise;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_CARET_METRICS::slopeRun"]/*' />
	public short slopeRun;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_CARET_METRICS::offset"]/*' />
	public short offset;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_UNICODE_RANGE"]/*' />
/// <unmanaged>DWRITE_UNICODE_RANGE</unmanaged>
public partial struct UnicodeRange
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_UNICODE_RANGE::first"]/*' />
	public uint first;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_UNICODE_RANGE::last"]/*' />
	public uint last;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_SCRIPT_PROPERTIES"]/*' />
/// <unmanaged>DWRITE_SCRIPT_PROPERTIES</unmanaged>
public partial struct ScriptProperties
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_SCRIPT_PROPERTIES::isoScriptCode"]/*' />
	public uint isoScriptCode;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_SCRIPT_PROPERTIES::isoScriptNumber"]/*' />
	public uint isoScriptNumber;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_SCRIPT_PROPERTIES::clusterLookahead"]/*' />
	public uint clusterLookahead;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_SCRIPT_PROPERTIES::justificationCharacter"]/*' />
	public uint justificationCharacter;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_SCRIPT_PROPERTIES::_bitfield"]/*' />
	public uint _bitfield;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_JUSTIFICATION_OPPORTUNITY"]/*' />
/// <unmanaged>DWRITE_JUSTIFICATION_OPPORTUNITY</unmanaged>
public partial struct JustificationOpportunity
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_JUSTIFICATION_OPPORTUNITY::expansionMinimum"]/*' />
	public float expansionMinimum;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_JUSTIFICATION_OPPORTUNITY::expansionMaximum"]/*' />
	public float expansionMaximum;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_JUSTIFICATION_OPPORTUNITY::compressionMaximum"]/*' />
	public float compressionMaximum;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_JUSTIFICATION_OPPORTUNITY::_bitfield"]/*' />
	public uint _bitfield;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_METRICS1"]/*' />
/// <unmanaged>DWRITE_TEXT_METRICS1</unmanaged>
public partial struct TextMetrics1
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_METRICS1::Base"]/*' />
	public TextMetrics Base;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_TEXT_METRICS1::heightIncludingTrailingWhitespace"]/*' />
	public float heightIncludingTrailingWhitespace;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_COLOR_GLYPH_RUN"]/*' />
/// <unmanaged>DWRITE_COLOR_GLYPH_RUN</unmanaged>
public partial struct ColorGlyphRun
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_COLOR_GLYPH_RUN::glyphRun"]/*' />
	public GlyphRun glyphRun;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_COLOR_GLYPH_RUN::glyphRunDescription"]/*' />
	public unsafe GlyphRunDescription* glyphRunDescription;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_COLOR_GLYPH_RUN::baselineOriginX"]/*' />
	public float baselineOriginX;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_COLOR_GLYPH_RUN::baselineOriginY"]/*' />
	public float baselineOriginY;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_COLOR_GLYPH_RUN::runColor"]/*' />
	public ColorF runColor;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_COLOR_GLYPH_RUN::paletteIndex"]/*' />
	public ushort paletteIndex;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY"]/*' />
/// <unmanaged>DWRITE_FONT_PROPERTY</unmanaged>
public partial struct FontProperty
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY::propertyId"]/*' />
	public FontPropertyId propertyId;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY::propertyValue"]/*' />
	public unsafe ushort* propertyValue;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_PROPERTY::localeName"]/*' />
	public unsafe ushort* localeName;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_METRICS1"]/*' />
/// <unmanaged>DWRITE_LINE_METRICS1</unmanaged>
public partial struct LineMetrics1
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_METRICS1::Base"]/*' />
	public LineMetrics Base;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_METRICS1::leadingBefore"]/*' />
	public float leadingBefore;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_METRICS1::leadingAfter"]/*' />
	public float leadingAfter;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_SPACING"]/*' />
/// <unmanaged>DWRITE_LINE_SPACING</unmanaged>
public partial struct LineSpacing
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_SPACING::method"]/*' />
	public LineSpacingMethod method;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_SPACING::height"]/*' />
	public float height;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_SPACING::baseline"]/*' />
	public float baseline;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_SPACING::leadingBefore"]/*' />
	public float leadingBefore;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_LINE_SPACING::fontLineGapUsage"]/*' />
	public FontLineGapUsage fontLineGapUsage;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_COLOR_GLYPH_RUN1"]/*' />
/// <unmanaged>DWRITE_COLOR_GLYPH_RUN1</unmanaged>
public partial struct ColorGlyphRun1
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_COLOR_GLYPH_RUN1::Base"]/*' />
	public ColorGlyphRun Base;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_COLOR_GLYPH_RUN1::glyphImageFormat"]/*' />
	public GlyphImageFormats glyphImageFormat;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_COLOR_GLYPH_RUN1::measuringMode"]/*' />
	public MeasuringMode measuringMode;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_DATA"]/*' />
/// <unmanaged>DWRITE_GLYPH_IMAGE_DATA</unmanaged>
public partial struct GlyphImageData
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_DATA::imageData"]/*' />
	public unsafe void* imageData;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_DATA::imageDataSize"]/*' />
	public uint imageDataSize;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_DATA::uniqueDataId"]/*' />
	public uint uniqueDataId;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_DATA::pixelsPerEm"]/*' />
	public uint pixelsPerEm;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_DATA::pixelSize"]/*' />
	public Graphics.Direct2D.Common.SizeU pixelSize;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_DATA::horizontalLeftOrigin"]/*' />
	public System.Drawing.Point horizontalLeftOrigin;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_DATA::horizontalRightOrigin"]/*' />
	public System.Drawing.Point horizontalRightOrigin;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_DATA::verticalTopOrigin"]/*' />
	public System.Drawing.Point verticalTopOrigin;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_GLYPH_IMAGE_DATA::verticalBottomOrigin"]/*' />
	public System.Drawing.Point verticalBottomOrigin;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FILE_FRAGMENT"]/*' />
/// <unmanaged>DWRITE_FILE_FRAGMENT</unmanaged>
public partial struct FileFragment
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FILE_FRAGMENT::fileOffset"]/*' />
	public ulong fileOffset;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FILE_FRAGMENT::fragmentSize"]/*' />
	public ulong fragmentSize;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_VALUE"]/*' />
/// <unmanaged>DWRITE_FONT_AXIS_VALUE</unmanaged>
public partial struct FontAxisValue
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_VALUE::axisTag"]/*' />
	public FontAxisTag axisTag;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_VALUE::value"]/*' />
	public float value;
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_RANGE"]/*' />
/// <unmanaged>DWRITE_FONT_AXIS_RANGE</unmanaged>
public partial struct FontAxisRange
{
	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_RANGE::axisTag"]/*' />
	public FontAxisTag axisTag;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_RANGE::minValue"]/*' />
	public float minValue;

	/// <include file='../DirectWrite.xml' path='doc/member[@name="DWRITE_FONT_AXIS_RANGE::maxValue"]/*' />
	public float maxValue;
}

#endregion Structs

#region COM Types
/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFileLoader"]/*' />
/// <unmanaged>IDWriteFontFileLoader</unmanaged>
[Guid("727cad4e-d6af-4c9e-8a08-d695b11caa49")]
[NativeTypeName("struct IDWriteFontFileLoader : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFontFileLoader
{
	public static ref readonly Guid IID_IDWriteFontFileLoader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x4E, 0xAD, 0x7C, 0x72,
				0xAF, 0xD6,
				0x9E, 0x4C,
				0x8A,
				0x08,
				0xD6,
				0x95,
				0xB1,
				0x1C,
				0xAA,
				0x49
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFileLoader));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFileLoader::CreateStreamFromKey"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreateStreamFromKey(void* fontFileReferenceKey, uint fontFileReferenceKeySize, IDWriteFontFileStream** fontFileStream)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFileLoader*, void*, uint, IDWriteFontFileStream**, int>)(lpVtbl[3]))((IDWriteFontFileLoader*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, fontFileStream);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteLocalFontFileLoader"]/*' />
/// <unmanaged>IDWriteLocalFontFileLoader</unmanaged>
[Guid("b2d9f3ec-c9fe-4a11-a2ec-d86208f7c0a2")]
[NativeTypeName("struct IDWriteLocalFontFileLoader : IDWriteFontFileLoader")]
[NativeInheritance("IDWriteFontFileLoader")]
public unsafe partial struct IDWriteLocalFontFileLoader
{
	public static ref readonly Guid IID_IDWriteLocalFontFileLoader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xEC, 0xF3, 0xD9, 0xB2,
				0xFE, 0xC9,
				0x11, 0x4A,
				0xA2,
				0xEC,
				0xD8,
				0x62,
				0x08,
				0xF7,
				0xC0,
				0xA2
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteLocalFontFileLoader));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFileLoader.CreateStreamFromKey" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreateStreamFromKey(void* fontFileReferenceKey, uint fontFileReferenceKeySize, IDWriteFontFileStream** fontFileStream)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteLocalFontFileLoader*, void*, uint, IDWriteFontFileStream**, int>)(lpVtbl[3]))((IDWriteLocalFontFileLoader*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, fontFileStream);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteLocalFontFileLoader::GetFilePathLengthFromKey"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetFilePathLengthFromKey(void* fontFileReferenceKey, uint fontFileReferenceKeySize, uint* filePathLength)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteLocalFontFileLoader*, void*, uint, uint*, int>)(lpVtbl[4]))((IDWriteLocalFontFileLoader*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, filePathLength);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteLocalFontFileLoader::GetFilePathFromKey"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetFilePathFromKey(void* fontFileReferenceKey, uint fontFileReferenceKeySize, ushort* filePath, uint filePathSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteLocalFontFileLoader*, void*, uint, ushort*, uint, int>)(lpVtbl[5]))((IDWriteLocalFontFileLoader*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, filePath, filePathSize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteLocalFontFileLoader::GetLastWriteTimeFromKey"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetLastWriteTimeFromKey(void* fontFileReferenceKey, uint fontFileReferenceKeySize, ulong* lastWriteTime)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteLocalFontFileLoader*, void*, uint, ulong*, int>)(lpVtbl[6]))((IDWriteLocalFontFileLoader*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, lastWriteTime);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFileStream"]/*' />
/// <unmanaged>IDWriteFontFileStream</unmanaged>
[Guid("6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0")]
[NativeTypeName("struct IDWriteFontFileStream : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFontFileStream
{
	public static ref readonly Guid IID_IDWriteFontFileStream
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFE, 0x65, 0x48, 0x6D,
				0xB8, 0x0A,
				0x91, 0x4D,
				0x8F,
				0x62,
				0x5D,
				0xD6,
				0xBE,
				0x34,
				0xA3,
				0xE0
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFileStream));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFileStream::ReadFileFragment"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult ReadFileFragment(void** fragmentStart, ulong fileOffset, ulong fragmentSize, void** fragmentContext)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFileStream*, void**, ulong, ulong, void**, int>)(lpVtbl[3]))((IDWriteFontFileStream*)Unsafe.AsPointer(ref this), fragmentStart, fileOffset, fragmentSize, fragmentContext);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFileStream::ReleaseFileFragment"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void ReleaseFileFragment(void* fragmentContext)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFileStream*, void*, void>)(lpVtbl[4]))((IDWriteFontFileStream*)Unsafe.AsPointer(ref this), fragmentContext);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFileStream::GetFileSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetFileSize(ulong* fileSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFileStream*, ulong*, int>)(lpVtbl[5]))((IDWriteFontFileStream*)Unsafe.AsPointer(ref this), fileSize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFileStream::GetLastWriteTime"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetLastWriteTime(ulong* lastWriteTime)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFileStream*, ulong*, int>)(lpVtbl[6]))((IDWriteFontFileStream*)Unsafe.AsPointer(ref this), lastWriteTime);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFile"]/*' />
/// <unmanaged>IDWriteFontFile</unmanaged>
[Guid("739d886a-cef5-47dc-8769-1a8b41bebbb0")]
[NativeTypeName("struct IDWriteFontFile : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFontFile
{
	public static ref readonly Guid IID_IDWriteFontFile
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x6A, 0x88, 0x9D, 0x73,
				0xF5, 0xCE,
				0xDC, 0x47,
				0x87,
				0x69,
				0x1A,
				0x8B,
				0x41,
				0xBE,
				0xBB,
				0xB0
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFile));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFile::GetReferenceKey"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetReferenceKey(void** fontFileReferenceKey, uint* fontFileReferenceKeySize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFile*, void**, uint*, int>)(lpVtbl[3]))((IDWriteFontFile*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFile::GetLoader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetLoader(IDWriteFontFileLoader** fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFile*, IDWriteFontFileLoader**, int>)(lpVtbl[4]))((IDWriteFontFile*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFile::Analyze"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult Analyze(Bool32* isSupportedFontType, FontFileType* fontFileType, FontFaceType* fontFaceType, uint* numberOfFaces)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFile*, Bool32*, FontFileType*, FontFaceType*, uint*, int>)(lpVtbl[5]))((IDWriteFontFile*)Unsafe.AsPointer(ref this), isSupportedFontType, fontFileType, fontFaceType, numberOfFaces);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRenderingParams"]/*' />
/// <unmanaged>IDWriteRenderingParams</unmanaged>
[Guid("2f0da53a-2add-47cd-82ee-d9ec34688e75")]
[NativeTypeName("struct IDWriteRenderingParams : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteRenderingParams
{
	public static ref readonly Guid IID_IDWriteRenderingParams
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3A, 0xA5, 0x0D, 0x2F,
				0xDD, 0x2A,
				0xCD, 0x47,
				0x82,
				0xEE,
				0xD9,
				0xEC,
				0x34,
				0x68,
				0x8E,
				0x75
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteRenderingParams));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRenderingParams::GetGamma"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public float GetGamma()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams*, float>)(lpVtbl[3]))((IDWriteRenderingParams*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRenderingParams::GetEnhancedContrast"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public float GetEnhancedContrast()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams*, float>)(lpVtbl[4]))((IDWriteRenderingParams*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRenderingParams::GetClearTypeLevel"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public float GetClearTypeLevel()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams*, float>)(lpVtbl[5]))((IDWriteRenderingParams*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRenderingParams::GetPixelGeometry"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public Graphics.DirectWrite.PixelGeometry GetPixelGeometry()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams*, Graphics.DirectWrite.PixelGeometry>)(lpVtbl[6]))((IDWriteRenderingParams*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRenderingParams::GetRenderingMode"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public Graphics.DirectWrite.RenderingMode GetRenderingMode()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams*, Graphics.DirectWrite.RenderingMode>)(lpVtbl[7]))((IDWriteRenderingParams*)Unsafe.AsPointer(ref this));
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace"]/*' />
/// <unmanaged>IDWriteFontFace</unmanaged>
[Guid("5f49804d-7024-4d43-bfa9-d25984f53849")]
[NativeTypeName("struct IDWriteFontFace : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFontFace
{
	public static ref readonly Guid IID_IDWriteFontFace
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x4D, 0x80, 0x49, 0x5F,
				0x24, 0x70,
				0x43, 0x4D,
				0xBF,
				0xA9,
				0xD2,
				0x59,
				0x84,
				0xF5,
				0x38,
				0x49
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFace));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace::GetType"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public new Graphics.DirectWrite.FontFaceType GetType()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace*, Graphics.DirectWrite.FontFaceType>)(lpVtbl[3]))((IDWriteFontFace*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace::GetFiles"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetFiles(uint* numberOfFiles, IDWriteFontFile** fontFiles)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace*, uint*, IDWriteFontFile**, int>)(lpVtbl[4]))((IDWriteFontFace*)Unsafe.AsPointer(ref this), numberOfFiles, fontFiles);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace::GetIndex"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public uint GetIndex()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace*, uint>)(lpVtbl[5]))((IDWriteFontFace*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace::GetSimulations"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public Graphics.DirectWrite.FontSimulations GetSimulations()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace*, Graphics.DirectWrite.FontSimulations>)(lpVtbl[6]))((IDWriteFontFace*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace::IsSymbolFont"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public Bool32 IsSymbolFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace*, Bool32>)(lpVtbl[7]))((IDWriteFontFace*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace::GetMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public void GetMetrics(FontMetrics* fontFaceMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace*, FontMetrics*, void>)(lpVtbl[8]))((IDWriteFontFace*)Unsafe.AsPointer(ref this), fontFaceMetrics);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace::GetGlyphCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public ushort GetGlyphCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace*, ushort>)(lpVtbl[9]))((IDWriteFontFace*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace::GetDesignGlyphMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetDesignGlyphMetrics(ushort* glyphIndices, uint glyphCount, GlyphMetrics* glyphMetrics, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace*, ushort*, uint, GlyphMetrics*, Bool32, int>)(lpVtbl[10]))((IDWriteFontFace*)Unsafe.AsPointer(ref this), glyphIndices, glyphCount, glyphMetrics, isSideways);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace::GetGlyphIndices"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetGlyphIndices(uint* codePoints, uint codePointCount, ushort* glyphIndices)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace*, uint*, uint, ushort*, int>)(lpVtbl[11]))((IDWriteFontFace*)Unsafe.AsPointer(ref this), codePoints, codePointCount, glyphIndices);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace::TryGetFontTable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult TryGetFontTable(uint openTypeTableTag, void** tableData, uint* tableSize, void** tableContext, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace*, uint, void**, uint*, void**, Bool32*, int>)(lpVtbl[12]))((IDWriteFontFace*)Unsafe.AsPointer(ref this), openTypeTableTag, tableData, tableSize, tableContext, exists);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace::ReleaseFontTable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public void ReleaseFontTable(void* tableContext)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace*, void*, void>)(lpVtbl[13]))((IDWriteFontFace*)Unsafe.AsPointer(ref this), tableContext);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace::GetGlyphRunOutline"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult GetGlyphRunOutline(float emSize, ushort* glyphIndices, float* glyphAdvances, GlyphOffset* glyphOffsets, uint glyphCount, Bool32 isSideways, Bool32 isRightToLeft, Graphics.Direct2D.Common.ID2D1SimplifiedGeometrySink* geometrySink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace*, float, ushort*, float*, GlyphOffset*, uint, Bool32, Bool32, Graphics.Direct2D.Common.ID2D1SimplifiedGeometrySink*, int>)(lpVtbl[14]))((IDWriteFontFace*)Unsafe.AsPointer(ref this), emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace::GetRecommendedRenderingMode"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetRecommendedRenderingMode(float emSize, float pixelsPerDip, MeasuringMode measuringMode, IDWriteRenderingParams* renderingParams, RenderingMode* renderingMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace*, float, float, MeasuringMode, IDWriteRenderingParams*, RenderingMode*, int>)(lpVtbl[15]))((IDWriteFontFace*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace::GetGdiCompatibleMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, Matrix* transform, FontMetrics* fontFaceMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace*, float, float, Matrix*, FontMetrics*, int>)(lpVtbl[16]))((IDWriteFontFace*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, fontFaceMetrics);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace::GetGdiCompatibleGlyphMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetGdiCompatibleGlyphMetrics(float emSize, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, ushort* glyphIndices, uint glyphCount, GlyphMetrics* glyphMetrics, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace*, float, float, Matrix*, Bool32, ushort*, uint, GlyphMetrics*, Bool32, int>)(lpVtbl[17]))((IDWriteFontFace*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollectionLoader"]/*' />
/// <unmanaged>IDWriteFontCollectionLoader</unmanaged>
[Guid("cca920e4-52f0-492b-bfa8-29c72ee0a468")]
[NativeTypeName("struct IDWriteFontCollectionLoader : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFontCollectionLoader
{
	public static ref readonly Guid IID_IDWriteFontCollectionLoader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE4, 0x20, 0xA9, 0xCC,
				0xF0, 0x52,
				0x2B, 0x49,
				0xBF,
				0xA8,
				0x29,
				0xC7,
				0x2E,
				0xE0,
				0xA4,
				0x68
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontCollectionLoader));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollectionLoader::CreateEnumeratorFromKey"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreateEnumeratorFromKey(IDWriteFactory* factory, void* collectionKey, uint collectionKeySize, IDWriteFontFileEnumerator** fontFileEnumerator)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollectionLoader*, IDWriteFactory*, void*, uint, IDWriteFontFileEnumerator**, int>)(lpVtbl[3]))((IDWriteFontCollectionLoader*)Unsafe.AsPointer(ref this), factory, collectionKey, collectionKeySize, fontFileEnumerator);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFileEnumerator"]/*' />
/// <unmanaged>IDWriteFontFileEnumerator</unmanaged>
[Guid("72755049-5ff7-435d-8348-4be97cfa6c7c")]
[NativeTypeName("struct IDWriteFontFileEnumerator : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFontFileEnumerator
{
	public static ref readonly Guid IID_IDWriteFontFileEnumerator
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x49, 0x50, 0x75, 0x72,
				0xF7, 0x5F,
				0x5D, 0x43,
				0x83,
				0x48,
				0x4B,
				0xE9,
				0x7C,
				0xFA,
				0x6C,
				0x7C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFileEnumerator));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFileEnumerator::MoveNext"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult MoveNext(Bool32* hasCurrentFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFileEnumerator*, Bool32*, int>)(lpVtbl[3]))((IDWriteFontFileEnumerator*)Unsafe.AsPointer(ref this), hasCurrentFile);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFileEnumerator::GetCurrentFontFile"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetCurrentFontFile(IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFileEnumerator*, IDWriteFontFile**, int>)(lpVtbl[4]))((IDWriteFontFileEnumerator*)Unsafe.AsPointer(ref this), fontFile);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteLocalizedStrings"]/*' />
/// <unmanaged>IDWriteLocalizedStrings</unmanaged>
[Guid("08256209-099a-4b34-b86d-c22b110e7771")]
[NativeTypeName("struct IDWriteLocalizedStrings : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteLocalizedStrings
{
	public static ref readonly Guid IID_IDWriteLocalizedStrings
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x09, 0x62, 0x25, 0x08,
				0x9A, 0x09,
				0x34, 0x4B,
				0xB8,
				0x6D,
				0xC2,
				0x2B,
				0x11,
				0x0E,
				0x77,
				0x71
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteLocalizedStrings));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteLocalizedStrings::GetCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public uint GetCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteLocalizedStrings*, uint>)(lpVtbl[3]))((IDWriteLocalizedStrings*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteLocalizedStrings::FindLocaleName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult FindLocaleName(ushort* localeName, uint* index, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteLocalizedStrings*, ushort*, uint*, Bool32*, int>)(lpVtbl[4]))((IDWriteLocalizedStrings*)Unsafe.AsPointer(ref this), localeName, index, exists);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteLocalizedStrings::GetLocaleNameLength"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetLocaleNameLength(uint index, uint* length)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteLocalizedStrings*, uint, uint*, int>)(lpVtbl[5]))((IDWriteLocalizedStrings*)Unsafe.AsPointer(ref this), index, length);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteLocalizedStrings::GetLocaleName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetLocaleName(uint index, ushort* localeName, uint size)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteLocalizedStrings*, uint, ushort*, uint, int>)(lpVtbl[6]))((IDWriteLocalizedStrings*)Unsafe.AsPointer(ref this), index, localeName, size);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteLocalizedStrings::GetStringLength"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetStringLength(uint index, uint* length)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteLocalizedStrings*, uint, uint*, int>)(lpVtbl[7]))((IDWriteLocalizedStrings*)Unsafe.AsPointer(ref this), index, length);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteLocalizedStrings::GetString"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetString(uint index, ushort* stringBuffer, uint size)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteLocalizedStrings*, uint, ushort*, uint, int>)(lpVtbl[8]))((IDWriteLocalizedStrings*)Unsafe.AsPointer(ref this), index, stringBuffer, size);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollection"]/*' />
/// <unmanaged>IDWriteFontCollection</unmanaged>
[Guid("a84cee02-3eea-4eee-a827-87c1a02a0fcc")]
[NativeTypeName("struct IDWriteFontCollection : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFontCollection
{
	public static ref readonly Guid IID_IDWriteFontCollection
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x02, 0xEE, 0x4C, 0xA8,
				0xEA, 0x3E,
				0xEE, 0x4E,
				0xA8,
				0x27,
				0x87,
				0xC1,
				0xA0,
				0x2A,
				0x0F,
				0xCC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontCollection));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollection::GetFontFamilyCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public uint GetFontFamilyCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection*, uint>)(lpVtbl[3]))((IDWriteFontCollection*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollection::GetFontFamily"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetFontFamily(uint index, IDWriteFontFamily** fontFamily)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection*, uint, IDWriteFontFamily**, int>)(lpVtbl[4]))((IDWriteFontCollection*)Unsafe.AsPointer(ref this), index, fontFamily);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollection::FindFamilyName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult FindFamilyName(ushort* familyName, uint* index, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection*, ushort*, uint*, Bool32*, int>)(lpVtbl[5]))((IDWriteFontCollection*)Unsafe.AsPointer(ref this), familyName, index, exists);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollection::GetFontFromFontFace"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetFontFromFontFace(IDWriteFontFace* fontFace, IDWriteFont** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection*, IDWriteFontFace*, IDWriteFont**, int>)(lpVtbl[6]))((IDWriteFontCollection*)Unsafe.AsPointer(ref this), fontFace, font);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontList"]/*' />
/// <unmanaged>IDWriteFontList</unmanaged>
[Guid("1a0d8438-1d97-4ec1-aef9-a2fb86ed6acb")]
[NativeTypeName("struct IDWriteFontList : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFontList
{
	public static ref readonly Guid IID_IDWriteFontList
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x38, 0x84, 0x0D, 0x1A,
				0x97, 0x1D,
				0xC1, 0x4E,
				0xAE,
				0xF9,
				0xA2,
				0xFB,
				0x86,
				0xED,
				0x6A,
				0xCB
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontList));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontList::GetFontCollection"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetFontCollection(IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontList*, IDWriteFontCollection**, int>)(lpVtbl[3]))((IDWriteFontList*)Unsafe.AsPointer(ref this), fontCollection);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontList::GetFontCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public uint GetFontCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontList*, uint>)(lpVtbl[4]))((IDWriteFontList*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontList::GetFont"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetFont(uint index, IDWriteFont** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontList*, uint, IDWriteFont**, int>)(lpVtbl[5]))((IDWriteFontList*)Unsafe.AsPointer(ref this), index, font);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFamily"]/*' />
/// <unmanaged>IDWriteFontFamily</unmanaged>
[Guid("da20d8ef-812a-4c43-9802-62ec4abd7add")]
[NativeTypeName("struct IDWriteFontFamily : IDWriteFontList")]
[NativeInheritance("IDWriteFontList")]
public unsafe partial struct IDWriteFontFamily
{
	public static ref readonly Guid IID_IDWriteFontFamily
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xEF, 0xD8, 0x20, 0xDA,
				0x2A, 0x81,
				0x43, 0x4C,
				0x98,
				0x02,
				0x62,
				0xEC,
				0x4A,
				0xBD,
				0x7A,
				0xDD
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFamily));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontList.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetFontCollection(IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily*, IDWriteFontCollection**, int>)(lpVtbl[3]))((IDWriteFontFamily*)Unsafe.AsPointer(ref this), fontCollection);
	}

	/// <inheritdoc cref="IDWriteFontList.GetFontCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public uint GetFontCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily*, uint>)(lpVtbl[4]))((IDWriteFontFamily*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontList.GetFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetFont(uint index, IDWriteFont** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily*, uint, IDWriteFont**, int>)(lpVtbl[5]))((IDWriteFontFamily*)Unsafe.AsPointer(ref this), index, font);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFamily::GetFamilyNames"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetFamilyNames(IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily*, IDWriteLocalizedStrings**, int>)(lpVtbl[6]))((IDWriteFontFamily*)Unsafe.AsPointer(ref this), names);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFamily::GetFirstMatchingFont"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetFirstMatchingFont(FontWeight weight, FontStretch stretch, FontStyle style, IDWriteFont** matchingFont)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily*, FontWeight, FontStretch, FontStyle, IDWriteFont**, int>)(lpVtbl[7]))((IDWriteFontFamily*)Unsafe.AsPointer(ref this), weight, stretch, style, matchingFont);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFamily::GetMatchingFonts"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetMatchingFonts(FontWeight weight, FontStretch stretch, FontStyle style, IDWriteFontList** matchingFonts)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily*, FontWeight, FontStretch, FontStyle, IDWriteFontList**, int>)(lpVtbl[8]))((IDWriteFontFamily*)Unsafe.AsPointer(ref this), weight, stretch, style, matchingFonts);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont"]/*' />
/// <unmanaged>IDWriteFont</unmanaged>
[Guid("acd16696-8c14-4f5d-877e-fe3fc1d32737")]
[NativeTypeName("struct IDWriteFont : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFont
{
	public static ref readonly Guid IID_IDWriteFont
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x96, 0x66, 0xD1, 0xAC,
				0x14, 0x8C,
				0x5D, 0x4F,
				0x87,
				0x7E,
				0xFE,
				0x3F,
				0xC1,
				0xD3,
				0x27,
				0x37
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFont));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont::GetFontFamily"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetFontFamily(IDWriteFontFamily** fontFamily)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont*, IDWriteFontFamily**, int>)(lpVtbl[3]))((IDWriteFont*)Unsafe.AsPointer(ref this), fontFamily);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont::GetWeight"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public Graphics.DirectWrite.FontWeight GetWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont*, Graphics.DirectWrite.FontWeight>)(lpVtbl[4]))((IDWriteFont*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont::GetStretch"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Graphics.DirectWrite.FontStretch GetStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont*, Graphics.DirectWrite.FontStretch>)(lpVtbl[5]))((IDWriteFont*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont::GetStyle"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public Graphics.DirectWrite.FontStyle GetStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont*, Graphics.DirectWrite.FontStyle>)(lpVtbl[6]))((IDWriteFont*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont::IsSymbolFont"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public Bool32 IsSymbolFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont*, Bool32>)(lpVtbl[7]))((IDWriteFont*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont::GetFaceNames"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetFaceNames(IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont*, IDWriteLocalizedStrings**, int>)(lpVtbl[8]))((IDWriteFont*)Unsafe.AsPointer(ref this), names);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont::GetInformationalStrings"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetInformationalStrings(InformationalStringId informationalStringID, IDWriteLocalizedStrings** informationalStrings, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont*, InformationalStringId, IDWriteLocalizedStrings**, Bool32*, int>)(lpVtbl[9]))((IDWriteFont*)Unsafe.AsPointer(ref this), informationalStringID, informationalStrings, exists);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont::GetSimulations"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public Graphics.DirectWrite.FontSimulations GetSimulations()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont*, Graphics.DirectWrite.FontSimulations>)(lpVtbl[10]))((IDWriteFont*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont::GetMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public void GetMetrics(FontMetrics* fontMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFont*, FontMetrics*, void>)(lpVtbl[11]))((IDWriteFont*)Unsafe.AsPointer(ref this), fontMetrics);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont::HasCharacter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult HasCharacter(uint unicodeValue, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont*, uint, Bool32*, int>)(lpVtbl[12]))((IDWriteFont*)Unsafe.AsPointer(ref this), unicodeValue, exists);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont::CreateFontFace"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult CreateFontFace(IDWriteFontFace** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont*, IDWriteFontFace**, int>)(lpVtbl[13]))((IDWriteFont*)Unsafe.AsPointer(ref this), fontFace);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat"]/*' />
/// <unmanaged>IDWriteTextFormat</unmanaged>
[Guid("9c906818-31d7-4fd3-a151-7c5e225db55a")]
[NativeTypeName("struct IDWriteTextFormat : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteTextFormat
{
	public static ref readonly Guid IID_IDWriteTextFormat
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x18, 0x68, 0x90, 0x9C,
				0xD7, 0x31,
				0xD3, 0x4F,
				0xA1,
				0x51,
				0x7C,
				0x5E,
				0x22,
				0x5D,
				0xB5,
				0x5A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextFormat));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::SetTextAlignment"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetTextAlignment(TextAlignment textAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, TextAlignment, int>)(lpVtbl[3]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this), textAlignment);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::SetParagraphAlignment"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetParagraphAlignment(ParagraphAlignment paragraphAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, ParagraphAlignment, int>)(lpVtbl[4]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this), paragraphAlignment);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::SetWordWrapping"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetWordWrapping(WordWrapping wordWrapping)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, WordWrapping, int>)(lpVtbl[5]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this), wordWrapping);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::SetReadingDirection"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetReadingDirection(ReadingDirection readingDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, ReadingDirection, int>)(lpVtbl[6]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this), readingDirection);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::SetFlowDirection"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetFlowDirection(FlowDirection flowDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, FlowDirection, int>)(lpVtbl[7]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this), flowDirection);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::SetIncrementalTabStop"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetIncrementalTabStop(float incrementalTabStop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, float, int>)(lpVtbl[8]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this), incrementalTabStop);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::SetTrimming"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetTrimming(Trimming* trimmingOptions, IDWriteInlineObject* trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, Trimming*, IDWriteInlineObject*, int>)(lpVtbl[9]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::SetLineSpacing"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetLineSpacing(LineSpacingMethod lineSpacingMethod, float lineSpacing, float baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, LineSpacingMethod, float, float, int>)(lpVtbl[10]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetTextAlignment"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public Graphics.DirectWrite.TextAlignment GetTextAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, Graphics.DirectWrite.TextAlignment>)(lpVtbl[11]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetParagraphAlignment"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public Graphics.DirectWrite.ParagraphAlignment GetParagraphAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, Graphics.DirectWrite.ParagraphAlignment>)(lpVtbl[12]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetWordWrapping"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public Graphics.DirectWrite.WordWrapping GetWordWrapping()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, Graphics.DirectWrite.WordWrapping>)(lpVtbl[13]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetReadingDirection"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public Graphics.DirectWrite.ReadingDirection GetReadingDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, Graphics.DirectWrite.ReadingDirection>)(lpVtbl[14]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetFlowDirection"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public Graphics.DirectWrite.FlowDirection GetFlowDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, Graphics.DirectWrite.FlowDirection>)(lpVtbl[15]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetIncrementalTabStop"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public float GetIncrementalTabStop()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, float>)(lpVtbl[16]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetTrimming"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetTrimming(Trimming* trimmingOptions, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, Trimming*, IDWriteInlineObject**, int>)(lpVtbl[17]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetLineSpacing"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult GetLineSpacing(LineSpacingMethod* lineSpacingMethod, float* lineSpacing, float* baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, LineSpacingMethod*, float*, float*, int>)(lpVtbl[18]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetFontCollection"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetFontCollection(IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, IDWriteFontCollection**, int>)(lpVtbl[19]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this), fontCollection);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetFontFamilyNameLength"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public uint GetFontFamilyNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, uint>)(lpVtbl[20]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetFontFamilyName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetFontFamilyName(ushort* fontFamilyName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, ushort*, uint, int>)(lpVtbl[21]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this), fontFamilyName, nameSize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetFontWeight"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public Graphics.DirectWrite.FontWeight GetFontWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, Graphics.DirectWrite.FontWeight>)(lpVtbl[22]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetFontStyle"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public Graphics.DirectWrite.FontStyle GetFontStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, Graphics.DirectWrite.FontStyle>)(lpVtbl[23]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetFontStretch"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public Graphics.DirectWrite.FontStretch GetFontStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, Graphics.DirectWrite.FontStretch>)(lpVtbl[24]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetFontSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public float GetFontSize()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, float>)(lpVtbl[25]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetLocaleNameLength"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public uint GetLocaleNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, uint>)(lpVtbl[26]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat::GetLocaleName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult GetLocaleName(ushort* localeName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat*, ushort*, uint, int>)(lpVtbl[27]))((IDWriteTextFormat*)Unsafe.AsPointer(ref this), localeName, nameSize);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTypography"]/*' />
/// <unmanaged>IDWriteTypography</unmanaged>
[Guid("55f1112b-1dc2-4b3c-9541-f46894ed85b6")]
[NativeTypeName("struct IDWriteTypography : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteTypography
{
	public static ref readonly Guid IID_IDWriteTypography
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x2B, 0x11, 0xF1, 0x55,
				0xC2, 0x1D,
				0x3C, 0x4B,
				0x95,
				0x41,
				0xF4,
				0x68,
				0x94,
				0xED,
				0x85,
				0xB6
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTypography));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTypography::AddFontFeature"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult AddFontFeature(FontFeature* fontFeature)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTypography*, FontFeature*, int>)(lpVtbl[3]))((IDWriteTypography*)Unsafe.AsPointer(ref this), fontFeature);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTypography::GetFontFeatureCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public uint GetFontFeatureCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTypography*, uint>)(lpVtbl[4]))((IDWriteTypography*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTypography::GetFontFeature"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetFontFeature(uint fontFeatureIndex, FontFeature* fontFeature)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTypography*, uint, FontFeature*, int>)(lpVtbl[5]))((IDWriteTypography*)Unsafe.AsPointer(ref this), fontFeatureIndex, fontFeature);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteNumberSubstitution"]/*' />
/// <unmanaged>IDWriteNumberSubstitution</unmanaged>
[Guid("14885cc9-bab0-4f90-b6ed-5c366a2cd03d")]
[NativeTypeName("struct IDWriteNumberSubstitution : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteNumberSubstitution
{
	public static ref readonly Guid IID_IDWriteNumberSubstitution
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC9, 0x5C, 0x88, 0x14,
				0xB0, 0xBA,
				0x90, 0x4F,
				0xB6,
				0xED,
				0x5C,
				0x36,
				0x6A,
				0x2C,
				0xD0,
				0x3D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteNumberSubstitution));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalysisSource"]/*' />
/// <unmanaged>IDWriteTextAnalysisSource</unmanaged>
[Guid("688e1a58-5094-47c8-adc8-fbcea60ae92b")]
[NativeTypeName("struct IDWriteTextAnalysisSource : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteTextAnalysisSource
{
	public static ref readonly Guid IID_IDWriteTextAnalysisSource
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x58, 0x1A, 0x8E, 0x68,
				0x94, 0x50,
				0xC8, 0x47,
				0xAD,
				0xC8,
				0xFB,
				0xCE,
				0xA6,
				0x0A,
				0xE9,
				0x2B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextAnalysisSource));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalysisSource::GetTextAtPosition"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetTextAtPosition(uint textPosition, ushort** textString, uint* textLength)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSource*, uint, ushort**, uint*, int>)(lpVtbl[3]))((IDWriteTextAnalysisSource*)Unsafe.AsPointer(ref this), textPosition, textString, textLength);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalysisSource::GetTextBeforePosition"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetTextBeforePosition(uint textPosition, ushort** textString, uint* textLength)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSource*, uint, ushort**, uint*, int>)(lpVtbl[4]))((IDWriteTextAnalysisSource*)Unsafe.AsPointer(ref this), textPosition, textString, textLength);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalysisSource::GetParagraphReadingDirection"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Graphics.DirectWrite.ReadingDirection GetParagraphReadingDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSource*, Graphics.DirectWrite.ReadingDirection>)(lpVtbl[5]))((IDWriteTextAnalysisSource*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalysisSource::GetLocaleName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetLocaleName(uint textPosition, uint* textLength, ushort** localeName)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSource*, uint, uint*, ushort**, int>)(lpVtbl[6]))((IDWriteTextAnalysisSource*)Unsafe.AsPointer(ref this), textPosition, textLength, localeName);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalysisSource::GetNumberSubstitution"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetNumberSubstitution(uint textPosition, uint* textLength, IDWriteNumberSubstitution** numberSubstitution)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSource*, uint, uint*, IDWriteNumberSubstitution**, int>)(lpVtbl[7]))((IDWriteTextAnalysisSource*)Unsafe.AsPointer(ref this), textPosition, textLength, numberSubstitution);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalysisSink"]/*' />
/// <unmanaged>IDWriteTextAnalysisSink</unmanaged>
[Guid("5810cd44-0ca0-4701-b3fa-bec5182ae4f6")]
[NativeTypeName("struct IDWriteTextAnalysisSink : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteTextAnalysisSink
{
	public static ref readonly Guid IID_IDWriteTextAnalysisSink
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x44, 0xCD, 0x10, 0x58,
				0xA0, 0x0C,
				0x01, 0x47,
				0xB3,
				0xFA,
				0xBE,
				0xC5,
				0x18,
				0x2A,
				0xE4,
				0xF6
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextAnalysisSink));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalysisSink::SetScriptAnalysis"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetScriptAnalysis(uint textPosition, uint textLength, ScriptAnalysis* scriptAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSink*, uint, uint, ScriptAnalysis*, int>)(lpVtbl[3]))((IDWriteTextAnalysisSink*)Unsafe.AsPointer(ref this), textPosition, textLength, scriptAnalysis);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalysisSink::SetLineBreakpoints"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetLineBreakpoints(uint textPosition, uint textLength, LineBreakpoint* lineBreakpoints)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSink*, uint, uint, LineBreakpoint*, int>)(lpVtbl[4]))((IDWriteTextAnalysisSink*)Unsafe.AsPointer(ref this), textPosition, textLength, lineBreakpoints);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalysisSink::SetBidiLevel"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetBidiLevel(uint textPosition, uint textLength, byte explicitLevel, byte resolvedLevel)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSink*, uint, uint, byte, byte, int>)(lpVtbl[5]))((IDWriteTextAnalysisSink*)Unsafe.AsPointer(ref this), textPosition, textLength, explicitLevel, resolvedLevel);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalysisSink::SetNumberSubstitution"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetNumberSubstitution(uint textPosition, uint textLength, IDWriteNumberSubstitution* numberSubstitution)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSink*, uint, uint, IDWriteNumberSubstitution*, int>)(lpVtbl[6]))((IDWriteTextAnalysisSink*)Unsafe.AsPointer(ref this), textPosition, textLength, numberSubstitution);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer"]/*' />
/// <unmanaged>IDWriteTextAnalyzer</unmanaged>
[Guid("b7e6163e-7f46-43b4-84b3-e4e6249c365d")]
[NativeTypeName("struct IDWriteTextAnalyzer : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteTextAnalyzer
{
	public static ref readonly Guid IID_IDWriteTextAnalyzer
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3E, 0x16, 0xE6, 0xB7,
				0x46, 0x7F,
				0xB4, 0x43,
				0x84,
				0xB3,
				0xE4,
				0xE6,
				0x24,
				0x9C,
				0x36,
				0x5D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextAnalyzer));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer::AnalyzeScript"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult AnalyzeScript(IDWriteTextAnalysisSource* analysisSource, uint textPosition, uint textLength, IDWriteTextAnalysisSink* analysisSink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer*, IDWriteTextAnalysisSource*, uint, uint, IDWriteTextAnalysisSink*, int>)(lpVtbl[3]))((IDWriteTextAnalyzer*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, analysisSink);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer::AnalyzeBidi"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult AnalyzeBidi(IDWriteTextAnalysisSource* analysisSource, uint textPosition, uint textLength, IDWriteTextAnalysisSink* analysisSink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer*, IDWriteTextAnalysisSource*, uint, uint, IDWriteTextAnalysisSink*, int>)(lpVtbl[4]))((IDWriteTextAnalyzer*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, analysisSink);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer::AnalyzeNumberSubstitution"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult AnalyzeNumberSubstitution(IDWriteTextAnalysisSource* analysisSource, uint textPosition, uint textLength, IDWriteTextAnalysisSink* analysisSink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer*, IDWriteTextAnalysisSource*, uint, uint, IDWriteTextAnalysisSink*, int>)(lpVtbl[5]))((IDWriteTextAnalyzer*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, analysisSink);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer::AnalyzeLineBreakpoints"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult AnalyzeLineBreakpoints(IDWriteTextAnalysisSource* analysisSource, uint textPosition, uint textLength, IDWriteTextAnalysisSink* analysisSink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer*, IDWriteTextAnalysisSource*, uint, uint, IDWriteTextAnalysisSink*, int>)(lpVtbl[6]))((IDWriteTextAnalyzer*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, analysisSink);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer::GetGlyphs"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetGlyphs(ushort* textString, uint textLength, IDWriteFontFace* fontFace, Bool32 isSideways, Bool32 isRightToLeft, ScriptAnalysis* scriptAnalysis, ushort* localeName, IDWriteNumberSubstitution* numberSubstitution, TypographicFeatures** features, uint* featureRangeLengths, uint featureRanges, uint maxGlyphCount, ushort* clusterMap, ShapingTextProperties* textProps, ushort* glyphIndices, ShapingGlyphProperties* glyphProps, uint* actualGlyphCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer*, ushort*, uint, IDWriteFontFace*, Bool32, Bool32, ScriptAnalysis*, ushort*, IDWriteNumberSubstitution*, TypographicFeatures**, uint*, uint, uint, ushort*, ShapingTextProperties*, ushort*, ShapingGlyphProperties*, uint*, int>)(lpVtbl[7]))((IDWriteTextAnalyzer*)Unsafe.AsPointer(ref this), textString, textLength, fontFace, isSideways, isRightToLeft, scriptAnalysis, localeName, numberSubstitution, features, featureRangeLengths, featureRanges, maxGlyphCount, clusterMap, textProps, glyphIndices, glyphProps, actualGlyphCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer::GetGlyphPlacements"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetGlyphPlacements(ushort* textString, ushort* clusterMap, ShapingTextProperties* textProps, uint textLength, ushort* glyphIndices, ShapingGlyphProperties* glyphProps, uint glyphCount, IDWriteFontFace* fontFace, float fontEmSize, Bool32 isSideways, Bool32 isRightToLeft, ScriptAnalysis* scriptAnalysis, ushort* localeName, TypographicFeatures** features, uint* featureRangeLengths, uint featureRanges, float* glyphAdvances, GlyphOffset* glyphOffsets)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer*, ushort*, ushort*, ShapingTextProperties*, uint, ushort*, ShapingGlyphProperties*, uint, IDWriteFontFace*, float, Bool32, Bool32, ScriptAnalysis*, ushort*, TypographicFeatures**, uint*, uint, float*, GlyphOffset*, int>)(lpVtbl[8]))((IDWriteTextAnalyzer*)Unsafe.AsPointer(ref this), textString, clusterMap, textProps, textLength, glyphIndices, glyphProps, glyphCount, fontFace, fontEmSize, isSideways, isRightToLeft, scriptAnalysis, localeName, features, featureRangeLengths, featureRanges, glyphAdvances, glyphOffsets);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer::GetGdiCompatibleGlyphPlacements"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetGdiCompatibleGlyphPlacements(ushort* textString, ushort* clusterMap, ShapingTextProperties* textProps, uint textLength, ushort* glyphIndices, ShapingGlyphProperties* glyphProps, uint glyphCount, IDWriteFontFace* fontFace, float fontEmSize, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, Bool32 isSideways, Bool32 isRightToLeft, ScriptAnalysis* scriptAnalysis, ushort* localeName, TypographicFeatures** features, uint* featureRangeLengths, uint featureRanges, float* glyphAdvances, GlyphOffset* glyphOffsets)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer*, ushort*, ushort*, ShapingTextProperties*, uint, ushort*, ShapingGlyphProperties*, uint, IDWriteFontFace*, float, float, Matrix*, Bool32, Bool32, Bool32, ScriptAnalysis*, ushort*, TypographicFeatures**, uint*, uint, float*, GlyphOffset*, int>)(lpVtbl[9]))((IDWriteTextAnalyzer*)Unsafe.AsPointer(ref this), textString, clusterMap, textProps, textLength, glyphIndices, glyphProps, glyphCount, fontFace, fontEmSize, pixelsPerDip, transform, useGdiNatural, isSideways, isRightToLeft, scriptAnalysis, localeName, features, featureRangeLengths, featureRanges, glyphAdvances, glyphOffsets);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteInlineObject"]/*' />
/// <unmanaged>IDWriteInlineObject</unmanaged>
[Guid("8339fde3-106f-47ab-8373-1c6295eb10b3")]
[NativeTypeName("struct IDWriteInlineObject : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteInlineObject
{
	public static ref readonly Guid IID_IDWriteInlineObject
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE3, 0xFD, 0x39, 0x83,
				0x6F, 0x10,
				0xAB, 0x47,
				0x83,
				0x73,
				0x1C,
				0x62,
				0x95,
				0xEB,
				0x10,
				0xB3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteInlineObject));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteInlineObject::Draw"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult Draw(void* clientDrawingContext, IDWriteTextRenderer* renderer, float originX, float originY, Bool32 isSideways, Bool32 isRightToLeft, IUnknown* clientDrawingEffect)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteInlineObject*, void*, IDWriteTextRenderer*, float, float, Bool32, Bool32, IUnknown*, int>)(lpVtbl[3]))((IDWriteInlineObject*)Unsafe.AsPointer(ref this), clientDrawingContext, renderer, originX, originY, isSideways, isRightToLeft, clientDrawingEffect);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteInlineObject::GetMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetMetrics(InlineObjectMetrics* metrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteInlineObject*, InlineObjectMetrics*, int>)(lpVtbl[4]))((IDWriteInlineObject*)Unsafe.AsPointer(ref this), metrics);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteInlineObject::GetOverhangMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetOverhangMetrics(OverhangMetrics* overhangs)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteInlineObject*, OverhangMetrics*, int>)(lpVtbl[5]))((IDWriteInlineObject*)Unsafe.AsPointer(ref this), overhangs);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteInlineObject::GetBreakConditions"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetBreakConditions(BreakCondition* breakConditionBefore, BreakCondition* breakConditionAfter)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteInlineObject*, BreakCondition*, BreakCondition*, int>)(lpVtbl[6]))((IDWriteInlineObject*)Unsafe.AsPointer(ref this), breakConditionBefore, breakConditionAfter);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWritePixelSnapping"]/*' />
/// <unmanaged>IDWritePixelSnapping</unmanaged>
[Guid("eaf3a2da-ecf4-4d24-b644-b34f6842024b")]
[NativeTypeName("struct IDWritePixelSnapping : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWritePixelSnapping
{
	public static ref readonly Guid IID_IDWritePixelSnapping
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDA, 0xA2, 0xF3, 0xEA,
				0xF4, 0xEC,
				0x24, 0x4D,
				0xB6,
				0x44,
				0xB3,
				0x4F,
				0x68,
				0x42,
				0x02,
				0x4B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWritePixelSnapping));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWritePixelSnapping::IsPixelSnappingDisabled"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult IsPixelSnappingDisabled(void* clientDrawingContext, Bool32* isDisabled)
	{
		return ((delegate* unmanaged[Stdcall]<IDWritePixelSnapping*, void*, Bool32*, int>)(lpVtbl[3]))((IDWritePixelSnapping*)Unsafe.AsPointer(ref this), clientDrawingContext, isDisabled);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWritePixelSnapping::GetCurrentTransform"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetCurrentTransform(void* clientDrawingContext, Matrix* transform)
	{
		return ((delegate* unmanaged[Stdcall]<IDWritePixelSnapping*, void*, Matrix*, int>)(lpVtbl[4]))((IDWritePixelSnapping*)Unsafe.AsPointer(ref this), clientDrawingContext, transform);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWritePixelSnapping::GetPixelsPerDip"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetPixelsPerDip(void* clientDrawingContext, float* pixelsPerDip)
	{
		return ((delegate* unmanaged[Stdcall]<IDWritePixelSnapping*, void*, float*, int>)(lpVtbl[5]))((IDWritePixelSnapping*)Unsafe.AsPointer(ref this), clientDrawingContext, pixelsPerDip);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextRenderer"]/*' />
/// <unmanaged>IDWriteTextRenderer</unmanaged>
[Guid("ef8a8135-5cc6-45fe-8825-c5a0724eb819")]
[NativeTypeName("struct IDWriteTextRenderer : IDWritePixelSnapping")]
[NativeInheritance("IDWritePixelSnapping")]
public unsafe partial struct IDWriteTextRenderer
{
	public static ref readonly Guid IID_IDWriteTextRenderer
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x35, 0x81, 0x8A, 0xEF,
				0xC6, 0x5C,
				0xFE, 0x45,
				0x88,
				0x25,
				0xC5,
				0xA0,
				0x72,
				0x4E,
				0xB8,
				0x19
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextRenderer));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWritePixelSnapping.IsPixelSnappingDisabled" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult IsPixelSnappingDisabled(void* clientDrawingContext, Bool32* isDisabled)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer*, void*, Bool32*, int>)(lpVtbl[3]))((IDWriteTextRenderer*)Unsafe.AsPointer(ref this), clientDrawingContext, isDisabled);
	}

	/// <inheritdoc cref="IDWritePixelSnapping.GetCurrentTransform" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetCurrentTransform(void* clientDrawingContext, Matrix* transform)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer*, void*, Matrix*, int>)(lpVtbl[4]))((IDWriteTextRenderer*)Unsafe.AsPointer(ref this), clientDrawingContext, transform);
	}

	/// <inheritdoc cref="IDWritePixelSnapping.GetPixelsPerDip" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetPixelsPerDip(void* clientDrawingContext, float* pixelsPerDip)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer*, void*, float*, int>)(lpVtbl[5]))((IDWriteTextRenderer*)Unsafe.AsPointer(ref this), clientDrawingContext, pixelsPerDip);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextRenderer::DrawGlyphRun"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult DrawGlyphRun(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, MeasuringMode measuringMode, GlyphRun* glyphRun, GlyphRunDescription* glyphRunDescription, IUnknown* clientDrawingEffect)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer*, void*, float, float, MeasuringMode, GlyphRun*, GlyphRunDescription*, IUnknown*, int>)(lpVtbl[6]))((IDWriteTextRenderer*)Unsafe.AsPointer(ref this), clientDrawingContext, baselineOriginX, baselineOriginY, measuringMode, glyphRun, glyphRunDescription, clientDrawingEffect);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextRenderer::DrawUnderline"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult DrawUnderline(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, Underline* underline, IUnknown* clientDrawingEffect)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer*, void*, float, float, Underline*, IUnknown*, int>)(lpVtbl[7]))((IDWriteTextRenderer*)Unsafe.AsPointer(ref this), clientDrawingContext, baselineOriginX, baselineOriginY, underline, clientDrawingEffect);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextRenderer::DrawStrikethrough"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult DrawStrikethrough(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, Strikethrough* strikethrough, IUnknown* clientDrawingEffect)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer*, void*, float, float, Strikethrough*, IUnknown*, int>)(lpVtbl[8]))((IDWriteTextRenderer*)Unsafe.AsPointer(ref this), clientDrawingContext, baselineOriginX, baselineOriginY, strikethrough, clientDrawingEffect);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextRenderer::DrawInlineObject"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult DrawInlineObject(void* clientDrawingContext, float originX, float originY, IDWriteInlineObject* inlineObject, Bool32 isSideways, Bool32 isRightToLeft, IUnknown* clientDrawingEffect)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer*, void*, float, float, IDWriteInlineObject*, Bool32, Bool32, IUnknown*, int>)(lpVtbl[9]))((IDWriteTextRenderer*)Unsafe.AsPointer(ref this), clientDrawingContext, originX, originY, inlineObject, isSideways, isRightToLeft, clientDrawingEffect);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout"]/*' />
/// <unmanaged>IDWriteTextLayout</unmanaged>
[Guid("53737037-6d14-410b-9bfe-0b182bb70961")]
[NativeTypeName("struct IDWriteTextLayout : IDWriteTextFormat")]
[NativeInheritance("IDWriteTextFormat")]
public unsafe partial struct IDWriteTextLayout
{
	public static ref readonly Guid IID_IDWriteTextLayout
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x37, 0x70, 0x73, 0x53,
				0x14, 0x6D,
				0x0B, 0x41,
				0x9B,
				0xFE,
				0x0B,
				0x18,
				0x2B,
				0xB7,
				0x09,
				0x61
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextLayout));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetTextAlignment(TextAlignment textAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, TextAlignment, int>)(lpVtbl[3]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), textAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetParagraphAlignment(ParagraphAlignment paragraphAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, ParagraphAlignment, int>)(lpVtbl[4]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), paragraphAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetWordWrapping(WordWrapping wordWrapping)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, WordWrapping, int>)(lpVtbl[5]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), wordWrapping);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetReadingDirection(ReadingDirection readingDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, ReadingDirection, int>)(lpVtbl[6]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), readingDirection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetFlowDirection(FlowDirection flowDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, FlowDirection, int>)(lpVtbl[7]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), flowDirection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetIncrementalTabStop(float incrementalTabStop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, float, int>)(lpVtbl[8]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), incrementalTabStop);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetTrimming(Trimming* trimmingOptions, IDWriteInlineObject* trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, Trimming*, IDWriteInlineObject*, int>)(lpVtbl[9]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetLineSpacing(LineSpacingMethod lineSpacingMethod, float lineSpacing, float baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, LineSpacingMethod, float, float, int>)(lpVtbl[10]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public Graphics.DirectWrite.TextAlignment GetTextAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, Graphics.DirectWrite.TextAlignment>)(lpVtbl[11]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public Graphics.DirectWrite.ParagraphAlignment GetParagraphAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, Graphics.DirectWrite.ParagraphAlignment>)(lpVtbl[12]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public Graphics.DirectWrite.WordWrapping GetWordWrapping()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, Graphics.DirectWrite.WordWrapping>)(lpVtbl[13]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public Graphics.DirectWrite.ReadingDirection GetReadingDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, Graphics.DirectWrite.ReadingDirection>)(lpVtbl[14]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public Graphics.DirectWrite.FlowDirection GetFlowDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, Graphics.DirectWrite.FlowDirection>)(lpVtbl[15]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public float GetIncrementalTabStop()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, float>)(lpVtbl[16]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetTrimming(Trimming* trimmingOptions, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, Trimming*, IDWriteInlineObject**, int>)(lpVtbl[17]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult GetLineSpacing(LineSpacingMethod* lineSpacingMethod, float* lineSpacing, float* baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, LineSpacingMethod*, float*, float*, int>)(lpVtbl[18]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetFontCollection(IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, IDWriteFontCollection**, int>)(lpVtbl[19]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), fontCollection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public uint GetFontFamilyNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint>)(lpVtbl[20]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetFontFamilyName(ushort* fontFamilyName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, ushort*, uint, int>)(lpVtbl[21]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), fontFamilyName, nameSize);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public Graphics.DirectWrite.FontWeight GetFontWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, Graphics.DirectWrite.FontWeight>)(lpVtbl[22]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public Graphics.DirectWrite.FontStyle GetFontStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, Graphics.DirectWrite.FontStyle>)(lpVtbl[23]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public Graphics.DirectWrite.FontStretch GetFontStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, Graphics.DirectWrite.FontStretch>)(lpVtbl[24]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public float GetFontSize()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, float>)(lpVtbl[25]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public uint GetLocaleNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint>)(lpVtbl[26]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult GetLocaleName(ushort* localeName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, ushort*, uint, int>)(lpVtbl[27]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), localeName, nameSize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::SetMaxWidth"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult SetMaxWidth(float maxWidth)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, float, int>)(lpVtbl[28]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), maxWidth);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::SetMaxHeight"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult SetMaxHeight(float maxHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, float, int>)(lpVtbl[29]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), maxHeight);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::SetFontCollection"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult SetFontCollection(IDWriteFontCollection* fontCollection, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, IDWriteFontCollection*, TextRange*, int>)(lpVtbl[30]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), fontCollection, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::SetFontFamilyName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult SetFontFamilyName(ushort* fontFamilyName, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, ushort*, TextRange*, int>)(lpVtbl[31]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), fontFamilyName, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::SetFontWeight"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult SetFontWeight(FontWeight fontWeight, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, FontWeight, TextRange*, int>)(lpVtbl[32]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), fontWeight, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::SetFontStyle"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult SetFontStyle(FontStyle fontStyle, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, FontStyle, TextRange*, int>)(lpVtbl[33]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), fontStyle, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::SetFontStretch"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult SetFontStretch(FontStretch fontStretch, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, FontStretch, TextRange*, int>)(lpVtbl[34]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), fontStretch, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::SetFontSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult SetFontSize(float fontSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, float, TextRange*, int>)(lpVtbl[35]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), fontSize, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::SetUnderline"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult SetUnderline(Bool32 hasUnderline, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, Bool32, TextRange*, int>)(lpVtbl[36]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), hasUnderline, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::SetStrikethrough"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult SetStrikethrough(Bool32 hasStrikethrough, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, Bool32, TextRange*, int>)(lpVtbl[37]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), hasStrikethrough, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::SetDrawingEffect"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult SetDrawingEffect(IUnknown* drawingEffect, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, IUnknown*, TextRange*, int>)(lpVtbl[38]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), drawingEffect, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::SetInlineObject"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult SetInlineObject(IDWriteInlineObject* inlineObject, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, IDWriteInlineObject*, TextRange*, int>)(lpVtbl[39]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), inlineObject, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::SetTypography"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult SetTypography(IDWriteTypography* typography, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, IDWriteTypography*, TextRange*, int>)(lpVtbl[40]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), typography, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::SetLocaleName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult SetLocaleName(ushort* localeName, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, ushort*, TextRange*, int>)(lpVtbl[41]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), localeName, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetMaxWidth"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public float GetMaxWidth()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, float>)(lpVtbl[42]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetMaxHeight"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public float GetMaxHeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, float>)(lpVtbl[43]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetFontCollection"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public HResult GetFontCollection(uint currentPosition, IDWriteFontCollection** fontCollection, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint, IDWriteFontCollection**, TextRange*, int>)(lpVtbl[44]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), currentPosition, fontCollection, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetFontFamilyNameLength"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public HResult GetFontFamilyNameLength(uint currentPosition, uint* nameLength, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint, uint*, TextRange*, int>)(lpVtbl[45]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), currentPosition, nameLength, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetFontFamilyName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public HResult GetFontFamilyName(uint currentPosition, ushort* fontFamilyName, uint nameSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint, ushort*, uint, TextRange*, int>)(lpVtbl[46]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), currentPosition, fontFamilyName, nameSize, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetFontWeight"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult GetFontWeight(uint currentPosition, FontWeight* fontWeight, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint, FontWeight*, TextRange*, int>)(lpVtbl[47]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), currentPosition, fontWeight, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetFontStyle"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public HResult GetFontStyle(uint currentPosition, FontStyle* fontStyle, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint, FontStyle*, TextRange*, int>)(lpVtbl[48]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), currentPosition, fontStyle, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetFontStretch"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public HResult GetFontStretch(uint currentPosition, FontStretch* fontStretch, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint, FontStretch*, TextRange*, int>)(lpVtbl[49]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), currentPosition, fontStretch, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetFontSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public HResult GetFontSize(uint currentPosition, float* fontSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint, float*, TextRange*, int>)(lpVtbl[50]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), currentPosition, fontSize, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetUnderline"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public HResult GetUnderline(uint currentPosition, Bool32* hasUnderline, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint, Bool32*, TextRange*, int>)(lpVtbl[51]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), currentPosition, hasUnderline, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetStrikethrough"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public HResult GetStrikethrough(uint currentPosition, Bool32* hasStrikethrough, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint, Bool32*, TextRange*, int>)(lpVtbl[52]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), currentPosition, hasStrikethrough, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetDrawingEffect"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public HResult GetDrawingEffect(uint currentPosition, IUnknown** drawingEffect, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint, IUnknown**, TextRange*, int>)(lpVtbl[53]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), currentPosition, drawingEffect, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetInlineObject"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public HResult GetInlineObject(uint currentPosition, IDWriteInlineObject** inlineObject, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint, IDWriteInlineObject**, TextRange*, int>)(lpVtbl[54]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), currentPosition, inlineObject, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetTypography"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public HResult GetTypography(uint currentPosition, IDWriteTypography** typography, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint, IDWriteTypography**, TextRange*, int>)(lpVtbl[55]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), currentPosition, typography, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetLocaleNameLength"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public HResult GetLocaleNameLength(uint currentPosition, uint* nameLength, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint, uint*, TextRange*, int>)(lpVtbl[56]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), currentPosition, nameLength, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetLocaleName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public HResult GetLocaleName(uint currentPosition, ushort* localeName, uint nameSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint, ushort*, uint, TextRange*, int>)(lpVtbl[57]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), currentPosition, localeName, nameSize, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::Draw"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public HResult Draw(void* clientDrawingContext, IDWriteTextRenderer* renderer, float originX, float originY)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, void*, IDWriteTextRenderer*, float, float, int>)(lpVtbl[58]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), clientDrawingContext, renderer, originX, originY);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetLineMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public HResult GetLineMetrics(LineMetrics* lineMetrics, uint maxLineCount, uint* actualLineCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, LineMetrics*, uint, uint*, int>)(lpVtbl[59]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), lineMetrics, maxLineCount, actualLineCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(60)]
	public HResult GetMetrics(TextMetrics* textMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, TextMetrics*, int>)(lpVtbl[60]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), textMetrics);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetOverhangMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(61)]
	public HResult GetOverhangMetrics(OverhangMetrics* overhangs)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, OverhangMetrics*, int>)(lpVtbl[61]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), overhangs);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::GetClusterMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(62)]
	public HResult GetClusterMetrics(ClusterMetrics* clusterMetrics, uint maxClusterCount, uint* actualClusterCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, ClusterMetrics*, uint, uint*, int>)(lpVtbl[62]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), clusterMetrics, maxClusterCount, actualClusterCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::DetermineMinWidth"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(63)]
	public HResult DetermineMinWidth(float* minWidth)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, float*, int>)(lpVtbl[63]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), minWidth);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::HitTestPoint"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(64)]
	public HResult HitTestPoint(float pointX, float pointY, Bool32* isTrailingHit, Bool32* isInside, HitTestMetrics* hitTestMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, float, float, Bool32*, Bool32*, HitTestMetrics*, int>)(lpVtbl[64]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), pointX, pointY, isTrailingHit, isInside, hitTestMetrics);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::HitTestTextPosition"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(65)]
	public HResult HitTestTextPosition(uint textPosition, Bool32 isTrailingHit, float* pointX, float* pointY, HitTestMetrics* hitTestMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint, Bool32, float*, float*, HitTestMetrics*, int>)(lpVtbl[65]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), textPosition, isTrailingHit, pointX, pointY, hitTestMetrics);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout::HitTestTextRange"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(66)]
	public HResult HitTestTextRange(uint textPosition, uint textLength, float originX, float originY, HitTestMetrics* hitTestMetrics, uint maxHitTestMetricsCount, uint* actualHitTestMetricsCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout*, uint, uint, float, float, HitTestMetrics*, uint, uint*, int>)(lpVtbl[66]))((IDWriteTextLayout*)Unsafe.AsPointer(ref this), textPosition, textLength, originX, originY, hitTestMetrics, maxHitTestMetricsCount, actualHitTestMetricsCount);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteBitmapRenderTarget"]/*' />
/// <unmanaged>IDWriteBitmapRenderTarget</unmanaged>
[Guid("5e5a32a3-8dff-4773-9ff6-0696eab77267")]
[NativeTypeName("struct IDWriteBitmapRenderTarget : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteBitmapRenderTarget
{
	public static ref readonly Guid IID_IDWriteBitmapRenderTarget
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA3, 0x32, 0x5A, 0x5E,
				0xFF, 0x8D,
				0x73, 0x47,
				0x9F,
				0xF6,
				0x06,
				0x96,
				0xEA,
				0xB7,
				0x72,
				0x67
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteBitmapRenderTarget));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteBitmapRenderTarget::DrawGlyphRun"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult DrawGlyphRun(float baselineOriginX, float baselineOriginY, MeasuringMode measuringMode, GlyphRun* glyphRun, IDWriteRenderingParams* renderingParams, uint textColor, RawRect* blackBoxRect)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget*, float, float, MeasuringMode, GlyphRun*, IDWriteRenderingParams*, uint, RawRect*, int>)(lpVtbl[3]))((IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this), baselineOriginX, baselineOriginY, measuringMode, glyphRun, renderingParams, textColor, blackBoxRect);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteBitmapRenderTarget::GetMemoryDC"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public IntPtr GetMemoryDC()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget*, IntPtr>)(lpVtbl[4]))((IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteBitmapRenderTarget::GetPixelsPerDip"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public float GetPixelsPerDip()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget*, float>)(lpVtbl[5]))((IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteBitmapRenderTarget::SetPixelsPerDip"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPixelsPerDip(float pixelsPerDip)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget*, float, int>)(lpVtbl[6]))((IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this), pixelsPerDip);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteBitmapRenderTarget::GetCurrentTransform"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetCurrentTransform(Matrix* transform)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget*, Matrix*, int>)(lpVtbl[7]))((IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this), transform);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteBitmapRenderTarget::SetCurrentTransform"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetCurrentTransform(Matrix* transform)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget*, Matrix*, int>)(lpVtbl[8]))((IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this), transform);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteBitmapRenderTarget::GetSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetSize(System.Drawing.Size** size)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget*, System.Drawing.Size**, int>)(lpVtbl[9]))((IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this), size);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteBitmapRenderTarget::Resize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult Resize(uint width, uint height)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget*, uint, uint, int>)(lpVtbl[10]))((IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this), width, height);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteGdiInterop"]/*' />
/// <unmanaged>IDWriteGdiInterop</unmanaged>
[Guid("1edd9491-9853-4299-898f-6432983b6f3a")]
[NativeTypeName("struct IDWriteGdiInterop : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteGdiInterop
{
	public static ref readonly Guid IID_IDWriteGdiInterop
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x91, 0x94, 0xDD, 0x1E,
				0x53, 0x98,
				0x99, 0x42,
				0x89,
				0x8F,
				0x64,
				0x32,
				0x98,
				0x3B,
				0x6F,
				0x3A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteGdiInterop));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteGdiInterop::CreateFontFromLOGFONT"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreateFontFromLOGFONT(Win32.Graphics.Gdi.LogFontW* logFont, IDWriteFont** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGdiInterop*, Win32.Graphics.Gdi.LogFontW*, IDWriteFont**, int>)(lpVtbl[3]))((IDWriteGdiInterop*)Unsafe.AsPointer(ref this), logFont, font);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteGdiInterop::ConvertFontToLOGFONT"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult ConvertFontToLOGFONT(IDWriteFont* font, Win32.Graphics.Gdi.LogFontW** logFont, Bool32* isSystemFont)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGdiInterop*, IDWriteFont*, Win32.Graphics.Gdi.LogFontW**, Bool32*, int>)(lpVtbl[4]))((IDWriteGdiInterop*)Unsafe.AsPointer(ref this), font, logFont, isSystemFont);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteGdiInterop::ConvertFontFaceToLOGFONT"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult ConvertFontFaceToLOGFONT(IDWriteFontFace* font, Win32.Graphics.Gdi.LogFontW** logFont)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGdiInterop*, IDWriteFontFace*, Win32.Graphics.Gdi.LogFontW**, int>)(lpVtbl[5]))((IDWriteGdiInterop*)Unsafe.AsPointer(ref this), font, logFont);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteGdiInterop::CreateFontFaceFromHdc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CreateFontFaceFromHdc(IntPtr hdc, IDWriteFontFace** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGdiInterop*, IntPtr, IDWriteFontFace**, int>)(lpVtbl[6]))((IDWriteGdiInterop*)Unsafe.AsPointer(ref this), hdc, fontFace);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteGdiInterop::CreateBitmapRenderTarget"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CreateBitmapRenderTarget(IntPtr hdc, uint width, uint height, IDWriteBitmapRenderTarget** renderTarget)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGdiInterop*, IntPtr, uint, uint, IDWriteBitmapRenderTarget**, int>)(lpVtbl[7]))((IDWriteGdiInterop*)Unsafe.AsPointer(ref this), hdc, width, height, renderTarget);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteGlyphRunAnalysis"]/*' />
/// <unmanaged>IDWriteGlyphRunAnalysis</unmanaged>
[Guid("7d97dbf7-e085-42d4-81e3-6a883bded118")]
[NativeTypeName("struct IDWriteGlyphRunAnalysis : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteGlyphRunAnalysis
{
	public static ref readonly Guid IID_IDWriteGlyphRunAnalysis
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF7, 0xDB, 0x97, 0x7D,
				0x85, 0xE0,
				0xD4, 0x42,
				0x81,
				0xE3,
				0x6A,
				0x88,
				0x3B,
				0xDE,
				0xD1,
				0x18
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteGlyphRunAnalysis));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteGlyphRunAnalysis::GetAlphaTextureBounds"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetAlphaTextureBounds(TextureType textureType, RawRect* textureBounds)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGlyphRunAnalysis*, TextureType, RawRect*, int>)(lpVtbl[3]))((IDWriteGlyphRunAnalysis*)Unsafe.AsPointer(ref this), textureType, textureBounds);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteGlyphRunAnalysis::CreateAlphaTexture"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateAlphaTexture(TextureType textureType, RawRect* textureBounds, byte* alphaValues, uint bufferSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGlyphRunAnalysis*, TextureType, RawRect*, byte*, uint, int>)(lpVtbl[4]))((IDWriteGlyphRunAnalysis*)Unsafe.AsPointer(ref this), textureType, textureBounds, alphaValues, bufferSize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteGlyphRunAnalysis::GetAlphaBlendParams"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetAlphaBlendParams(IDWriteRenderingParams* renderingParams, float* blendGamma, float* blendEnhancedContrast, float* blendClearTypeLevel)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGlyphRunAnalysis*, IDWriteRenderingParams*, float*, float*, float*, int>)(lpVtbl[5]))((IDWriteGlyphRunAnalysis*)Unsafe.AsPointer(ref this), renderingParams, blendGamma, blendEnhancedContrast, blendClearTypeLevel);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory"]/*' />
/// <unmanaged>IDWriteFactory</unmanaged>
[Guid("b859ee5a-d838-4b5b-a2e8-1adc7d93db48")]
[NativeTypeName("struct IDWriteFactory : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFactory
{
	public static ref readonly Guid IID_IDWriteFactory
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5A, 0xEE, 0x59, 0xB8,
				0x38, 0xD8,
				0x5B, 0x4B,
				0xA2,
				0xE8,
				0x1A,
				0xDC,
				0x7D,
				0x93,
				0xDB,
				0x48
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFactory));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::GetSystemFontCollection"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetSystemFontCollection(IDWriteFontCollection** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, IDWriteFontCollection**, Bool32, int>)(lpVtbl[3]))((IDWriteFactory*)Unsafe.AsPointer(ref this), fontCollection, checkForUpdates);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::CreateCustomFontCollection"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateCustomFontCollection(IDWriteFontCollectionLoader* collectionLoader, void* collectionKey, uint collectionKeySize, IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, IDWriteFontCollectionLoader*, void*, uint, IDWriteFontCollection**, int>)(lpVtbl[4]))((IDWriteFactory*)Unsafe.AsPointer(ref this), collectionLoader, collectionKey, collectionKeySize, fontCollection);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::RegisterFontCollectionLoader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult RegisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, IDWriteFontCollectionLoader*, int>)(lpVtbl[5]))((IDWriteFactory*)Unsafe.AsPointer(ref this), fontCollectionLoader);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::UnregisterFontCollectionLoader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult UnregisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, IDWriteFontCollectionLoader*, int>)(lpVtbl[6]))((IDWriteFactory*)Unsafe.AsPointer(ref this), fontCollectionLoader);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::CreateFontFileReference"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CreateFontFileReference(ushort* filePath, ulong* lastWriteTime, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, ushort*, ulong*, IDWriteFontFile**, int>)(lpVtbl[7]))((IDWriteFactory*)Unsafe.AsPointer(ref this), filePath, lastWriteTime, fontFile);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::CreateCustomFontFileReference"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult CreateCustomFontFileReference(void* fontFileReferenceKey, uint fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, void*, uint, IDWriteFontFileLoader*, IDWriteFontFile**, int>)(lpVtbl[8]))((IDWriteFactory*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::CreateFontFace"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CreateFontFace(FontFaceType fontFaceType, uint numberOfFiles, IDWriteFontFile** fontFiles, uint faceIndex, FontSimulations fontFaceSimulationFlags, IDWriteFontFace** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, FontFaceType, uint, IDWriteFontFile**, uint, FontSimulations, IDWriteFontFace**, int>)(lpVtbl[9]))((IDWriteFactory*)Unsafe.AsPointer(ref this), fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::CreateRenderingParams"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult CreateRenderingParams(IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, IDWriteRenderingParams**, int>)(lpVtbl[10]))((IDWriteFactory*)Unsafe.AsPointer(ref this), renderingParams);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::CreateMonitorRenderingParams"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CreateMonitorRenderingParams(IntPtr monitor, IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, IntPtr, IDWriteRenderingParams**, int>)(lpVtbl[11]))((IDWriteFactory*)Unsafe.AsPointer(ref this), monitor, renderingParams);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::CreateCustomRenderingParams"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, float, float, float, PixelGeometry, RenderingMode, IDWriteRenderingParams**, int>)(lpVtbl[12]))((IDWriteFactory*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::RegisterFontFileLoader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult RegisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, IDWriteFontFileLoader*, int>)(lpVtbl[13]))((IDWriteFactory*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::UnregisterFontFileLoader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult UnregisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, IDWriteFontFileLoader*, int>)(lpVtbl[14]))((IDWriteFactory*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::CreateTextFormat"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult CreateTextFormat(ushort* fontFamilyName, IDWriteFontCollection* fontCollection, FontWeight fontWeight, FontStyle fontStyle, FontStretch fontStretch, float fontSize, ushort* localeName, IDWriteTextFormat** textFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, ushort*, IDWriteFontCollection*, FontWeight, FontStyle, FontStretch, float, ushort*, IDWriteTextFormat**, int>)(lpVtbl[15]))((IDWriteFactory*)Unsafe.AsPointer(ref this), fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::CreateTypography"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult CreateTypography(IDWriteTypography** typography)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, IDWriteTypography**, int>)(lpVtbl[16]))((IDWriteFactory*)Unsafe.AsPointer(ref this), typography);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::GetGdiInterop"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetGdiInterop(IDWriteGdiInterop** gdiInterop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, IDWriteGdiInterop**, int>)(lpVtbl[17]))((IDWriteFactory*)Unsafe.AsPointer(ref this), gdiInterop);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::CreateTextLayout"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult CreateTextLayout(ushort* @string, uint stringLength, IDWriteTextFormat* textFormat, float maxWidth, float maxHeight, IDWriteTextLayout** textLayout)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, ushort*, uint, IDWriteTextFormat*, float, float, IDWriteTextLayout**, int>)(lpVtbl[18]))((IDWriteFactory*)Unsafe.AsPointer(ref this), @string, stringLength, textFormat, maxWidth, maxHeight, textLayout);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::CreateGdiCompatibleTextLayout"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult CreateGdiCompatibleTextLayout(ushort* @string, uint stringLength, IDWriteTextFormat* textFormat, float layoutWidth, float layoutHeight, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, IDWriteTextLayout** textLayout)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, ushort*, uint, IDWriteTextFormat*, float, float, float, Matrix*, Bool32, IDWriteTextLayout**, int>)(lpVtbl[19]))((IDWriteFactory*)Unsafe.AsPointer(ref this), @string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::CreateEllipsisTrimmingSign"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult CreateEllipsisTrimmingSign(IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, IDWriteTextFormat*, IDWriteInlineObject**, int>)(lpVtbl[20]))((IDWriteFactory*)Unsafe.AsPointer(ref this), textFormat, trimmingSign);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::CreateTextAnalyzer"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult CreateTextAnalyzer(IDWriteTextAnalyzer** textAnalyzer)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, IDWriteTextAnalyzer**, int>)(lpVtbl[21]))((IDWriteFactory*)Unsafe.AsPointer(ref this), textAnalyzer);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::CreateNumberSubstitution"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult CreateNumberSubstitution(NumberSubstitutionMethod substitutionMethod, ushort* localeName, Bool32 ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, NumberSubstitutionMethod, ushort*, Bool32, IDWriteNumberSubstitution**, int>)(lpVtbl[22]))((IDWriteFactory*)Unsafe.AsPointer(ref this), substitutionMethod, localeName, ignoreUserOverride, numberSubstitution);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory::CreateGlyphRunAnalysis"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, float pixelsPerDip, Matrix* transform, RenderingMode renderingMode, MeasuringMode measuringMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory*, GlyphRun*, float, Matrix*, RenderingMode, MeasuringMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[23]))((IDWriteFactory*)Unsafe.AsPointer(ref this), glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory1"]/*' />
/// <unmanaged>IDWriteFactory1</unmanaged>
[Guid("30572f99-dac6-41db-a16e-0486307e606a")]
[NativeTypeName("struct IDWriteFactory1 : IDWriteFactory")]
[NativeInheritance("IDWriteFactory")]
public unsafe partial struct IDWriteFactory1
{
	public static ref readonly Guid IID_IDWriteFactory1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x99, 0x2F, 0x57, 0x30,
				0xC6, 0xDA,
				0xDB, 0x41,
				0xA1,
				0x6E,
				0x04,
				0x86,
				0x30,
				0x7E,
				0x60,
				0x6A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFactory1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFactory.GetSystemFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetSystemFontCollection(IDWriteFontCollection** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, IDWriteFontCollection**, Bool32, int>)(lpVtbl[3]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateCustomFontCollection(IDWriteFontCollectionLoader* collectionLoader, void* collectionKey, uint collectionKeySize, IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, IDWriteFontCollectionLoader*, void*, uint, IDWriteFontCollection**, int>)(lpVtbl[4]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), collectionLoader, collectionKey, collectionKeySize, fontCollection);
	}

	/// <inheritdoc cref="IDWriteFactory.RegisterFontCollectionLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult RegisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, IDWriteFontCollectionLoader*, int>)(lpVtbl[5]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), fontCollectionLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.UnregisterFontCollectionLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult UnregisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, IDWriteFontCollectionLoader*, int>)(lpVtbl[6]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), fontCollectionLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateFontFileReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CreateFontFileReference(ushort* filePath, ulong* lastWriteTime, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, ushort*, ulong*, IDWriteFontFile**, int>)(lpVtbl[7]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), filePath, lastWriteTime, fontFile);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomFontFileReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult CreateCustomFontFileReference(void* fontFileReferenceKey, uint fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, void*, uint, IDWriteFontFileLoader*, IDWriteFontFile**, int>)(lpVtbl[8]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CreateFontFace(FontFaceType fontFaceType, uint numberOfFiles, IDWriteFontFile** fontFiles, uint faceIndex, FontSimulations fontFaceSimulationFlags, IDWriteFontFace** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, FontFaceType, uint, IDWriteFontFile**, uint, FontSimulations, IDWriteFontFace**, int>)(lpVtbl[9]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult CreateRenderingParams(IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, IDWriteRenderingParams**, int>)(lpVtbl[10]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateMonitorRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CreateMonitorRenderingParams(IntPtr monitor, IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, IntPtr, IDWriteRenderingParams**, int>)(lpVtbl[11]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), monitor, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, float, float, float, PixelGeometry, RenderingMode, IDWriteRenderingParams**, int>)(lpVtbl[12]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.RegisterFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult RegisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, IDWriteFontFileLoader*, int>)(lpVtbl[13]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.UnregisterFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult UnregisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, IDWriteFontFileLoader*, int>)(lpVtbl[14]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult CreateTextFormat(ushort* fontFamilyName, IDWriteFontCollection* fontCollection, FontWeight fontWeight, FontStyle fontStyle, FontStretch fontStretch, float fontSize, ushort* localeName, IDWriteTextFormat** textFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, ushort*, IDWriteFontCollection*, FontWeight, FontStyle, FontStretch, float, ushort*, IDWriteTextFormat**, int>)(lpVtbl[15]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTypography" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult CreateTypography(IDWriteTypography** typography)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, IDWriteTypography**, int>)(lpVtbl[16]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), typography);
	}

	/// <inheritdoc cref="IDWriteFactory.GetGdiInterop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetGdiInterop(IDWriteGdiInterop** gdiInterop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, IDWriteGdiInterop**, int>)(lpVtbl[17]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), gdiInterop);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextLayout" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult CreateTextLayout(ushort* @string, uint stringLength, IDWriteTextFormat* textFormat, float maxWidth, float maxHeight, IDWriteTextLayout** textLayout)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, ushort*, uint, IDWriteTextFormat*, float, float, IDWriteTextLayout**, int>)(lpVtbl[18]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), @string, stringLength, textFormat, maxWidth, maxHeight, textLayout);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateGdiCompatibleTextLayout" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult CreateGdiCompatibleTextLayout(ushort* @string, uint stringLength, IDWriteTextFormat* textFormat, float layoutWidth, float layoutHeight, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, IDWriteTextLayout** textLayout)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, ushort*, uint, IDWriteTextFormat*, float, float, float, Matrix*, Bool32, IDWriteTextLayout**, int>)(lpVtbl[19]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), @string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateEllipsisTrimmingSign" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult CreateEllipsisTrimmingSign(IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, IDWriteTextFormat*, IDWriteInlineObject**, int>)(lpVtbl[20]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), textFormat, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextAnalyzer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult CreateTextAnalyzer(IDWriteTextAnalyzer** textAnalyzer)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, IDWriteTextAnalyzer**, int>)(lpVtbl[21]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), textAnalyzer);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateNumberSubstitution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult CreateNumberSubstitution(NumberSubstitutionMethod substitutionMethod, ushort* localeName, Bool32 ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, NumberSubstitutionMethod, ushort*, Bool32, IDWriteNumberSubstitution**, int>)(lpVtbl[22]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), substitutionMethod, localeName, ignoreUserOverride, numberSubstitution);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateGlyphRunAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, float pixelsPerDip, Matrix* transform, RenderingMode renderingMode, MeasuringMode measuringMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, GlyphRun*, float, Matrix*, RenderingMode, MeasuringMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[23]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory1::GetEudcFontCollection"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult GetEudcFontCollection(IDWriteFontCollection** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, IDWriteFontCollection**, Bool32, int>)(lpVtbl[24]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), fontCollection, checkForUpdates);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory1::CreateCustomRenderingParams"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float enhancedContrastGrayscale, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, IDWriteRenderingParams1** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory1*, float, float, float, float, PixelGeometry, RenderingMode, IDWriteRenderingParams1**, int>)(lpVtbl[25]))((IDWriteFactory1*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace1"]/*' />
/// <unmanaged>IDWriteFontFace1</unmanaged>
[Guid("a71efdb4-9fdb-4838-ad90-cfc3be8c3daf")]
[NativeTypeName("struct IDWriteFontFace1 : IDWriteFontFace")]
[NativeInheritance("IDWriteFontFace")]
public unsafe partial struct IDWriteFontFace1
{
	public static ref readonly Guid IID_IDWriteFontFace1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB4, 0xFD, 0x1E, 0xA7,
				0xDB, 0x9F,
				0x38, 0x48,
				0xAD,
				0x90,
				0xCF,
				0xC3,
				0xBE,
				0x8C,
				0x3D,
				0xAF
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFace1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public new Graphics.DirectWrite.FontFaceType GetType()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, Graphics.DirectWrite.FontFaceType>)(lpVtbl[3]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetFiles" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetFiles(uint* numberOfFiles, IDWriteFontFile** fontFiles)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, uint*, IDWriteFontFile**, int>)(lpVtbl[4]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), numberOfFiles, fontFiles);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetIndex" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public uint GetIndex()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, uint>)(lpVtbl[5]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetSimulations" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public Graphics.DirectWrite.FontSimulations GetSimulations()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, Graphics.DirectWrite.FontSimulations>)(lpVtbl[6]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.IsSymbolFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public Bool32 IsSymbolFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, Bool32>)(lpVtbl[7]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public void GetMetrics(FontMetrics* fontFaceMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, FontMetrics*, void>)(lpVtbl[8]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), fontFaceMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public ushort GetGlyphCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, ushort>)(lpVtbl[9]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetDesignGlyphMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetDesignGlyphMetrics(ushort* glyphIndices, uint glyphCount, GlyphMetrics* glyphMetrics, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, ushort*, uint, GlyphMetrics*, Bool32, int>)(lpVtbl[10]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), glyphIndices, glyphCount, glyphMetrics, isSideways);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphIndices" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetGlyphIndices(uint* codePoints, uint codePointCount, ushort* glyphIndices)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, uint*, uint, ushort*, int>)(lpVtbl[11]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), codePoints, codePointCount, glyphIndices);
	}

	/// <inheritdoc cref="IDWriteFontFace.TryGetFontTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult TryGetFontTable(uint openTypeTableTag, void** tableData, uint* tableSize, void** tableContext, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, uint, void**, uint*, void**, Bool32*, int>)(lpVtbl[12]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), openTypeTableTag, tableData, tableSize, tableContext, exists);
	}

	/// <inheritdoc cref="IDWriteFontFace.ReleaseFontTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public void ReleaseFontTable(void* tableContext)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, void*, void>)(lpVtbl[13]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), tableContext);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphRunOutline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult GetGlyphRunOutline(float emSize, ushort* glyphIndices, float* glyphAdvances, GlyphOffset* glyphOffsets, uint glyphCount, Bool32 isSideways, Bool32 isRightToLeft, Graphics.Direct2D.Common.ID2D1SimplifiedGeometrySink* geometrySink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, float, ushort*, float*, GlyphOffset*, uint, Bool32, Bool32, Graphics.Direct2D.Common.ID2D1SimplifiedGeometrySink*, int>)(lpVtbl[14]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetRecommendedRenderingMode(float emSize, float pixelsPerDip, MeasuringMode measuringMode, IDWriteRenderingParams* renderingParams, RenderingMode* renderingMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, float, float, MeasuringMode, IDWriteRenderingParams*, RenderingMode*, int>)(lpVtbl[15]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGdiCompatibleMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, Matrix* transform, FontMetrics* fontFaceMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, float, float, Matrix*, FontMetrics*, int>)(lpVtbl[16]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, fontFaceMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGdiCompatibleGlyphMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetGdiCompatibleGlyphMetrics(float emSize, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, ushort* glyphIndices, uint glyphCount, GlyphMetrics* glyphMetrics, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, float, float, Matrix*, Bool32, ushort*, uint, GlyphMetrics*, Bool32, int>)(lpVtbl[17]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace1::GetMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public void GetMetrics(FontMetrics1* fontMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, FontMetrics1*, void>)(lpVtbl[18]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), fontMetrics);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace1::GetGdiCompatibleMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, Matrix* transform, FontMetrics1* fontMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, float, float, Matrix*, FontMetrics1*, int>)(lpVtbl[19]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, fontMetrics);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace1::GetCaretMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public void GetCaretMetrics(CaretMetrics* caretMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, CaretMetrics*, void>)(lpVtbl[20]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), caretMetrics);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace1::GetUnicodeRanges"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetUnicodeRanges(uint maxRangeCount, UnicodeRange* unicodeRanges, uint* actualRangeCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, uint, UnicodeRange*, uint*, int>)(lpVtbl[21]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), maxRangeCount, unicodeRanges, actualRangeCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace1::IsMonospacedFont"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public Bool32 IsMonospacedFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, Bool32>)(lpVtbl[22]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace1::GetDesignGlyphAdvances"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult GetDesignGlyphAdvances(uint glyphCount, ushort* glyphIndices, int* glyphAdvances, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, uint, ushort*, int*, Bool32, int>)(lpVtbl[23]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), glyphCount, glyphIndices, glyphAdvances, isSideways);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace1::GetGdiCompatibleGlyphAdvances"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult GetGdiCompatibleGlyphAdvances(float emSize, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, Bool32 isSideways, uint glyphCount, ushort* glyphIndices, int* glyphAdvances)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, float, float, Matrix*, Bool32, Bool32, uint, ushort*, int*, int>)(lpVtbl[24]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, useGdiNatural, isSideways, glyphCount, glyphIndices, glyphAdvances);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace1::GetKerningPairAdjustments"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult GetKerningPairAdjustments(uint glyphCount, ushort* glyphIndices, int* glyphAdvanceAdjustments)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, uint, ushort*, int*, int>)(lpVtbl[25]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), glyphCount, glyphIndices, glyphAdvanceAdjustments);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace1::HasKerningPairs"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public Bool32 HasKerningPairs()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, Bool32>)(lpVtbl[26]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace1::GetRecommendedRenderingMode"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Matrix* transform, Bool32 isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, RenderingMode* renderingMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, float, float, float, Matrix*, Bool32, OutlineThreshold, MeasuringMode, RenderingMode*, int>)(lpVtbl[27]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingMode);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace1::GetVerticalGlyphVariants"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult GetVerticalGlyphVariants(uint glyphCount, ushort* nominalGlyphIndices, ushort* verticalGlyphIndices)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, uint, ushort*, ushort*, int>)(lpVtbl[28]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this), glyphCount, nominalGlyphIndices, verticalGlyphIndices);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace1::HasVerticalGlyphVariants"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public Bool32 HasVerticalGlyphVariants()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace1*, Bool32>)(lpVtbl[29]))((IDWriteFontFace1*)Unsafe.AsPointer(ref this));
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont1"]/*' />
/// <unmanaged>IDWriteFont1</unmanaged>
[Guid("acd16696-8c14-4f5d-877e-fe3fc1d32738")]
[NativeTypeName("struct IDWriteFont1 : IDWriteFont")]
[NativeInheritance("IDWriteFont")]
public unsafe partial struct IDWriteFont1
{
	public static ref readonly Guid IID_IDWriteFont1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x96, 0x66, 0xD1, 0xAC,
				0x14, 0x8C,
				0x5D, 0x4F,
				0x87,
				0x7E,
				0xFE,
				0x3F,
				0xC1,
				0xD3,
				0x27,
				0x38
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFont1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.GetFontFamily" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetFontFamily(IDWriteFontFamily** fontFamily)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont1*, IDWriteFontFamily**, int>)(lpVtbl[3]))((IDWriteFont1*)Unsafe.AsPointer(ref this), fontFamily);
	}

	/// <inheritdoc cref="IDWriteFont.GetWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public Graphics.DirectWrite.FontWeight GetWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont1*, Graphics.DirectWrite.FontWeight>)(lpVtbl[4]))((IDWriteFont1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.GetStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Graphics.DirectWrite.FontStretch GetStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont1*, Graphics.DirectWrite.FontStretch>)(lpVtbl[5]))((IDWriteFont1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.GetStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public Graphics.DirectWrite.FontStyle GetStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont1*, Graphics.DirectWrite.FontStyle>)(lpVtbl[6]))((IDWriteFont1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.IsSymbolFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public Bool32 IsSymbolFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont1*, Bool32>)(lpVtbl[7]))((IDWriteFont1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.GetFaceNames" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetFaceNames(IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont1*, IDWriteLocalizedStrings**, int>)(lpVtbl[8]))((IDWriteFont1*)Unsafe.AsPointer(ref this), names);
	}

	/// <inheritdoc cref="IDWriteFont.GetInformationalStrings" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetInformationalStrings(InformationalStringId informationalStringID, IDWriteLocalizedStrings** informationalStrings, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont1*, InformationalStringId, IDWriteLocalizedStrings**, Bool32*, int>)(lpVtbl[9]))((IDWriteFont1*)Unsafe.AsPointer(ref this), informationalStringID, informationalStrings, exists);
	}

	/// <inheritdoc cref="IDWriteFont.GetSimulations" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public Graphics.DirectWrite.FontSimulations GetSimulations()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont1*, Graphics.DirectWrite.FontSimulations>)(lpVtbl[10]))((IDWriteFont1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public void GetMetrics(FontMetrics* fontMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFont1*, FontMetrics*, void>)(lpVtbl[11]))((IDWriteFont1*)Unsafe.AsPointer(ref this), fontMetrics);
	}

	/// <inheritdoc cref="IDWriteFont.HasCharacter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult HasCharacter(uint unicodeValue, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont1*, uint, Bool32*, int>)(lpVtbl[12]))((IDWriteFont1*)Unsafe.AsPointer(ref this), unicodeValue, exists);
	}

	/// <inheritdoc cref="IDWriteFont.CreateFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult CreateFontFace(IDWriteFontFace** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont1*, IDWriteFontFace**, int>)(lpVtbl[13]))((IDWriteFont1*)Unsafe.AsPointer(ref this), fontFace);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont1::GetMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public void GetMetrics(FontMetrics1* fontMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFont1*, FontMetrics1*, void>)(lpVtbl[14]))((IDWriteFont1*)Unsafe.AsPointer(ref this), fontMetrics);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont1::GetPanose"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public void GetPanose(Panose* panose)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFont1*, Panose*, void>)(lpVtbl[15]))((IDWriteFont1*)Unsafe.AsPointer(ref this), panose);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont1::GetUnicodeRanges"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult GetUnicodeRanges(uint maxRangeCount, UnicodeRange* unicodeRanges, uint* actualRangeCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont1*, uint, UnicodeRange*, uint*, int>)(lpVtbl[16]))((IDWriteFont1*)Unsafe.AsPointer(ref this), maxRangeCount, unicodeRanges, actualRangeCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont1::IsMonospacedFont"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public Bool32 IsMonospacedFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont1*, Bool32>)(lpVtbl[17]))((IDWriteFont1*)Unsafe.AsPointer(ref this));
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRenderingParams1"]/*' />
/// <unmanaged>IDWriteRenderingParams1</unmanaged>
[Guid("94413cf4-a6fc-4248-8b50-6674348fcad3")]
[NativeTypeName("struct IDWriteRenderingParams1 : IDWriteRenderingParams")]
[NativeInheritance("IDWriteRenderingParams")]
public unsafe partial struct IDWriteRenderingParams1
{
	public static ref readonly Guid IID_IDWriteRenderingParams1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF4, 0x3C, 0x41, 0x94,
				0xFC, 0xA6,
				0x48, 0x42,
				0x8B,
				0x50,
				0x66,
				0x74,
				0x34,
				0x8F,
				0xCA,
				0xD3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteRenderingParams1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams.GetGamma" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public float GetGamma()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams1*, float>)(lpVtbl[3]))((IDWriteRenderingParams1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams.GetEnhancedContrast" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public float GetEnhancedContrast()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams1*, float>)(lpVtbl[4]))((IDWriteRenderingParams1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams.GetClearTypeLevel" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public float GetClearTypeLevel()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams1*, float>)(lpVtbl[5]))((IDWriteRenderingParams1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams.GetPixelGeometry" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public Graphics.DirectWrite.PixelGeometry GetPixelGeometry()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams1*, Graphics.DirectWrite.PixelGeometry>)(lpVtbl[6]))((IDWriteRenderingParams1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams.GetRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public Graphics.DirectWrite.RenderingMode GetRenderingMode()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams1*, Graphics.DirectWrite.RenderingMode>)(lpVtbl[7]))((IDWriteRenderingParams1*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRenderingParams1::GetGrayscaleEnhancedContrast"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public float GetGrayscaleEnhancedContrast()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams1*, float>)(lpVtbl[8]))((IDWriteRenderingParams1*)Unsafe.AsPointer(ref this));
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer1"]/*' />
/// <unmanaged>IDWriteTextAnalyzer1</unmanaged>
[Guid("80dad800-e21f-4e83-96ce-bfcce500db7c")]
[NativeTypeName("struct IDWriteTextAnalyzer1 : IDWriteTextAnalyzer")]
[NativeInheritance("IDWriteTextAnalyzer")]
public unsafe partial struct IDWriteTextAnalyzer1
{
	public static ref readonly Guid IID_IDWriteTextAnalyzer1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x00, 0xD8, 0xDA, 0x80,
				0x1F, 0xE2,
				0x83, 0x4E,
				0x96,
				0xCE,
				0xBF,
				0xCC,
				0xE5,
				0x00,
				0xDB,
				0x7C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextAnalyzer1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer.AnalyzeScript" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult AnalyzeScript(IDWriteTextAnalysisSource* analysisSource, uint textPosition, uint textLength, IDWriteTextAnalysisSink* analysisSink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer1*, IDWriteTextAnalysisSource*, uint, uint, IDWriteTextAnalysisSink*, int>)(lpVtbl[3]))((IDWriteTextAnalyzer1*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, analysisSink);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer.AnalyzeBidi" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult AnalyzeBidi(IDWriteTextAnalysisSource* analysisSource, uint textPosition, uint textLength, IDWriteTextAnalysisSink* analysisSink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer1*, IDWriteTextAnalysisSource*, uint, uint, IDWriteTextAnalysisSink*, int>)(lpVtbl[4]))((IDWriteTextAnalyzer1*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, analysisSink);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer.AnalyzeNumberSubstitution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult AnalyzeNumberSubstitution(IDWriteTextAnalysisSource* analysisSource, uint textPosition, uint textLength, IDWriteTextAnalysisSink* analysisSink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer1*, IDWriteTextAnalysisSource*, uint, uint, IDWriteTextAnalysisSink*, int>)(lpVtbl[5]))((IDWriteTextAnalyzer1*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, analysisSink);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer.AnalyzeLineBreakpoints" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult AnalyzeLineBreakpoints(IDWriteTextAnalysisSource* analysisSource, uint textPosition, uint textLength, IDWriteTextAnalysisSink* analysisSink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer1*, IDWriteTextAnalysisSource*, uint, uint, IDWriteTextAnalysisSink*, int>)(lpVtbl[6]))((IDWriteTextAnalyzer1*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, analysisSink);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer.GetGlyphs" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetGlyphs(ushort* textString, uint textLength, IDWriteFontFace* fontFace, Bool32 isSideways, Bool32 isRightToLeft, ScriptAnalysis* scriptAnalysis, ushort* localeName, IDWriteNumberSubstitution* numberSubstitution, TypographicFeatures** features, uint* featureRangeLengths, uint featureRanges, uint maxGlyphCount, ushort* clusterMap, ShapingTextProperties* textProps, ushort* glyphIndices, ShapingGlyphProperties* glyphProps, uint* actualGlyphCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer1*, ushort*, uint, IDWriteFontFace*, Bool32, Bool32, ScriptAnalysis*, ushort*, IDWriteNumberSubstitution*, TypographicFeatures**, uint*, uint, uint, ushort*, ShapingTextProperties*, ushort*, ShapingGlyphProperties*, uint*, int>)(lpVtbl[7]))((IDWriteTextAnalyzer1*)Unsafe.AsPointer(ref this), textString, textLength, fontFace, isSideways, isRightToLeft, scriptAnalysis, localeName, numberSubstitution, features, featureRangeLengths, featureRanges, maxGlyphCount, clusterMap, textProps, glyphIndices, glyphProps, actualGlyphCount);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer.GetGlyphPlacements" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetGlyphPlacements(ushort* textString, ushort* clusterMap, ShapingTextProperties* textProps, uint textLength, ushort* glyphIndices, ShapingGlyphProperties* glyphProps, uint glyphCount, IDWriteFontFace* fontFace, float fontEmSize, Bool32 isSideways, Bool32 isRightToLeft, ScriptAnalysis* scriptAnalysis, ushort* localeName, TypographicFeatures** features, uint* featureRangeLengths, uint featureRanges, float* glyphAdvances, GlyphOffset* glyphOffsets)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer1*, ushort*, ushort*, ShapingTextProperties*, uint, ushort*, ShapingGlyphProperties*, uint, IDWriteFontFace*, float, Bool32, Bool32, ScriptAnalysis*, ushort*, TypographicFeatures**, uint*, uint, float*, GlyphOffset*, int>)(lpVtbl[8]))((IDWriteTextAnalyzer1*)Unsafe.AsPointer(ref this), textString, clusterMap, textProps, textLength, glyphIndices, glyphProps, glyphCount, fontFace, fontEmSize, isSideways, isRightToLeft, scriptAnalysis, localeName, features, featureRangeLengths, featureRanges, glyphAdvances, glyphOffsets);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer.GetGdiCompatibleGlyphPlacements" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetGdiCompatibleGlyphPlacements(ushort* textString, ushort* clusterMap, ShapingTextProperties* textProps, uint textLength, ushort* glyphIndices, ShapingGlyphProperties* glyphProps, uint glyphCount, IDWriteFontFace* fontFace, float fontEmSize, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, Bool32 isSideways, Bool32 isRightToLeft, ScriptAnalysis* scriptAnalysis, ushort* localeName, TypographicFeatures** features, uint* featureRangeLengths, uint featureRanges, float* glyphAdvances, GlyphOffset* glyphOffsets)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer1*, ushort*, ushort*, ShapingTextProperties*, uint, ushort*, ShapingGlyphProperties*, uint, IDWriteFontFace*, float, float, Matrix*, Bool32, Bool32, Bool32, ScriptAnalysis*, ushort*, TypographicFeatures**, uint*, uint, float*, GlyphOffset*, int>)(lpVtbl[9]))((IDWriteTextAnalyzer1*)Unsafe.AsPointer(ref this), textString, clusterMap, textProps, textLength, glyphIndices, glyphProps, glyphCount, fontFace, fontEmSize, pixelsPerDip, transform, useGdiNatural, isSideways, isRightToLeft, scriptAnalysis, localeName, features, featureRangeLengths, featureRanges, glyphAdvances, glyphOffsets);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer1::ApplyCharacterSpacing"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult ApplyCharacterSpacing(float leadingSpacing, float trailingSpacing, float minimumAdvanceWidth, uint textLength, uint glyphCount, ushort* clusterMap, float* glyphAdvances, GlyphOffset* glyphOffsets, ShapingGlyphProperties* glyphProperties, float* modifiedGlyphAdvances, GlyphOffset* modifiedGlyphOffsets)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer1*, float, float, float, uint, uint, ushort*, float*, GlyphOffset*, ShapingGlyphProperties*, float*, GlyphOffset*, int>)(lpVtbl[10]))((IDWriteTextAnalyzer1*)Unsafe.AsPointer(ref this), leadingSpacing, trailingSpacing, minimumAdvanceWidth, textLength, glyphCount, clusterMap, glyphAdvances, glyphOffsets, glyphProperties, modifiedGlyphAdvances, modifiedGlyphOffsets);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer1::GetBaseline"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetBaseline(IDWriteFontFace* fontFace, Baseline baseline, Bool32 isVertical, Bool32 isSimulationAllowed, ScriptAnalysis* scriptAnalysis, ushort* localeName, int* baselineCoordinate, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer1*, IDWriteFontFace*, Baseline, Bool32, Bool32, ScriptAnalysis*, ushort*, int*, Bool32*, int>)(lpVtbl[11]))((IDWriteTextAnalyzer1*)Unsafe.AsPointer(ref this), fontFace, baseline, isVertical, isSimulationAllowed, scriptAnalysis, localeName, baselineCoordinate, exists);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer1::AnalyzeVerticalGlyphOrientation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult AnalyzeVerticalGlyphOrientation(IDWriteTextAnalysisSource1* analysisSource, uint textPosition, uint textLength, IDWriteTextAnalysisSink1* analysisSink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer1*, IDWriteTextAnalysisSource1*, uint, uint, IDWriteTextAnalysisSink1*, int>)(lpVtbl[12]))((IDWriteTextAnalyzer1*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, analysisSink);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer1::GetGlyphOrientationTransform"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetGlyphOrientationTransform(GlyphOrientationAngle glyphOrientationAngle, Bool32 isSideways, Matrix* transform)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer1*, GlyphOrientationAngle, Bool32, Matrix*, int>)(lpVtbl[13]))((IDWriteTextAnalyzer1*)Unsafe.AsPointer(ref this), glyphOrientationAngle, isSideways, transform);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer1::GetScriptProperties"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult GetScriptProperties(ScriptAnalysis* scriptAnalysis, ScriptProperties* scriptProperties)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer1*, ScriptAnalysis*, ScriptProperties*, int>)(lpVtbl[14]))((IDWriteTextAnalyzer1*)Unsafe.AsPointer(ref this), scriptAnalysis, scriptProperties);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer1::GetTextComplexity"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetTextComplexity(ushort* textString, uint textLength, IDWriteFontFace* fontFace, Bool32* isTextSimple, uint* textLengthRead, ushort* glyphIndices)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer1*, ushort*, uint, IDWriteFontFace*, Bool32*, uint*, ushort*, int>)(lpVtbl[15]))((IDWriteTextAnalyzer1*)Unsafe.AsPointer(ref this), textString, textLength, fontFace, isTextSimple, textLengthRead, glyphIndices);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer1::GetJustificationOpportunities"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult GetJustificationOpportunities(IDWriteFontFace* fontFace, float fontEmSize, ScriptAnalysis* scriptAnalysis, uint textLength, uint glyphCount, ushort* textString, ushort* clusterMap, ShapingGlyphProperties* glyphProperties, JustificationOpportunity* justificationOpportunities)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer1*, IDWriteFontFace*, float, ScriptAnalysis*, uint, uint, ushort*, ushort*, ShapingGlyphProperties*, JustificationOpportunity*, int>)(lpVtbl[16]))((IDWriteTextAnalyzer1*)Unsafe.AsPointer(ref this), fontFace, fontEmSize, scriptAnalysis, textLength, glyphCount, textString, clusterMap, glyphProperties, justificationOpportunities);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer1::JustifyGlyphAdvances"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult JustifyGlyphAdvances(float lineWidth, uint glyphCount, JustificationOpportunity* justificationOpportunities, float* glyphAdvances, GlyphOffset* glyphOffsets, float* justifiedGlyphAdvances, GlyphOffset* justifiedGlyphOffsets)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer1*, float, uint, JustificationOpportunity*, float*, GlyphOffset*, float*, GlyphOffset*, int>)(lpVtbl[17]))((IDWriteTextAnalyzer1*)Unsafe.AsPointer(ref this), lineWidth, glyphCount, justificationOpportunities, glyphAdvances, glyphOffsets, justifiedGlyphAdvances, justifiedGlyphOffsets);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer1::GetJustifiedGlyphs"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult GetJustifiedGlyphs(IDWriteFontFace* fontFace, float fontEmSize, ScriptAnalysis* scriptAnalysis, uint textLength, uint glyphCount, uint maxGlyphCount, ushort* clusterMap, ushort* glyphIndices, float* glyphAdvances, float* justifiedGlyphAdvances, GlyphOffset* justifiedGlyphOffsets, ShapingGlyphProperties* glyphProperties, uint* actualGlyphCount, ushort* modifiedClusterMap, ushort* modifiedGlyphIndices, float* modifiedGlyphAdvances, GlyphOffset* modifiedGlyphOffsets)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer1*, IDWriteFontFace*, float, ScriptAnalysis*, uint, uint, uint, ushort*, ushort*, float*, float*, GlyphOffset*, ShapingGlyphProperties*, uint*, ushort*, ushort*, float*, GlyphOffset*, int>)(lpVtbl[18]))((IDWriteTextAnalyzer1*)Unsafe.AsPointer(ref this), fontFace, fontEmSize, scriptAnalysis, textLength, glyphCount, maxGlyphCount, clusterMap, glyphIndices, glyphAdvances, justifiedGlyphAdvances, justifiedGlyphOffsets, glyphProperties, actualGlyphCount, modifiedClusterMap, modifiedGlyphIndices, modifiedGlyphAdvances, modifiedGlyphOffsets);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalysisSource1"]/*' />
/// <unmanaged>IDWriteTextAnalysisSource1</unmanaged>
[Guid("639cfad8-0fb4-4b21-a58a-067920120009")]
[NativeTypeName("struct IDWriteTextAnalysisSource1 : IDWriteTextAnalysisSource")]
[NativeInheritance("IDWriteTextAnalysisSource")]
public unsafe partial struct IDWriteTextAnalysisSource1
{
	public static ref readonly Guid IID_IDWriteTextAnalysisSource1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xD8, 0xFA, 0x9C, 0x63,
				0xB4, 0x0F,
				0x21, 0x4B,
				0xA5,
				0x8A,
				0x06,
				0x79,
				0x20,
				0x12,
				0x00,
				0x09
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextAnalysisSource1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextAnalysisSource.GetTextAtPosition" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetTextAtPosition(uint textPosition, ushort** textString, uint* textLength)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSource1*, uint, ushort**, uint*, int>)(lpVtbl[3]))((IDWriteTextAnalysisSource1*)Unsafe.AsPointer(ref this), textPosition, textString, textLength);
	}

	/// <inheritdoc cref="IDWriteTextAnalysisSource.GetTextBeforePosition" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetTextBeforePosition(uint textPosition, ushort** textString, uint* textLength)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSource1*, uint, ushort**, uint*, int>)(lpVtbl[4]))((IDWriteTextAnalysisSource1*)Unsafe.AsPointer(ref this), textPosition, textString, textLength);
	}

	/// <inheritdoc cref="IDWriteTextAnalysisSource.GetParagraphReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Graphics.DirectWrite.ReadingDirection GetParagraphReadingDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSource1*, Graphics.DirectWrite.ReadingDirection>)(lpVtbl[5]))((IDWriteTextAnalysisSource1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextAnalysisSource.GetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetLocaleName(uint textPosition, uint* textLength, ushort** localeName)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSource1*, uint, uint*, ushort**, int>)(lpVtbl[6]))((IDWriteTextAnalysisSource1*)Unsafe.AsPointer(ref this), textPosition, textLength, localeName);
	}

	/// <inheritdoc cref="IDWriteTextAnalysisSource.GetNumberSubstitution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetNumberSubstitution(uint textPosition, uint* textLength, IDWriteNumberSubstitution** numberSubstitution)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSource1*, uint, uint*, IDWriteNumberSubstitution**, int>)(lpVtbl[7]))((IDWriteTextAnalysisSource1*)Unsafe.AsPointer(ref this), textPosition, textLength, numberSubstitution);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalysisSource1::GetVerticalGlyphOrientation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetVerticalGlyphOrientation(uint textPosition, uint* textLength, VerticalGlyphOrientation* glyphOrientation, byte* bidiLevel)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSource1*, uint, uint*, VerticalGlyphOrientation*, byte*, int>)(lpVtbl[8]))((IDWriteTextAnalysisSource1*)Unsafe.AsPointer(ref this), textPosition, textLength, glyphOrientation, bidiLevel);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalysisSink1"]/*' />
/// <unmanaged>IDWriteTextAnalysisSink1</unmanaged>
[Guid("b0d941a0-85e7-4d8b-9fd3-5ced9934482a")]
[NativeTypeName("struct IDWriteTextAnalysisSink1 : IDWriteTextAnalysisSink")]
[NativeInheritance("IDWriteTextAnalysisSink")]
public unsafe partial struct IDWriteTextAnalysisSink1
{
	public static ref readonly Guid IID_IDWriteTextAnalysisSink1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA0, 0x41, 0xD9, 0xB0,
				0xE7, 0x85,
				0x8B, 0x4D,
				0x9F,
				0xD3,
				0x5C,
				0xED,
				0x99,
				0x34,
				0x48,
				0x2A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextAnalysisSink1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextAnalysisSink.SetScriptAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetScriptAnalysis(uint textPosition, uint textLength, ScriptAnalysis* scriptAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSink1*, uint, uint, ScriptAnalysis*, int>)(lpVtbl[3]))((IDWriteTextAnalysisSink1*)Unsafe.AsPointer(ref this), textPosition, textLength, scriptAnalysis);
	}

	/// <inheritdoc cref="IDWriteTextAnalysisSink.SetLineBreakpoints" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetLineBreakpoints(uint textPosition, uint textLength, LineBreakpoint* lineBreakpoints)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSink1*, uint, uint, LineBreakpoint*, int>)(lpVtbl[4]))((IDWriteTextAnalysisSink1*)Unsafe.AsPointer(ref this), textPosition, textLength, lineBreakpoints);
	}

	/// <inheritdoc cref="IDWriteTextAnalysisSink.SetBidiLevel" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetBidiLevel(uint textPosition, uint textLength, byte explicitLevel, byte resolvedLevel)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSink1*, uint, uint, byte, byte, int>)(lpVtbl[5]))((IDWriteTextAnalysisSink1*)Unsafe.AsPointer(ref this), textPosition, textLength, explicitLevel, resolvedLevel);
	}

	/// <inheritdoc cref="IDWriteTextAnalysisSink.SetNumberSubstitution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetNumberSubstitution(uint textPosition, uint textLength, IDWriteNumberSubstitution* numberSubstitution)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSink1*, uint, uint, IDWriteNumberSubstitution*, int>)(lpVtbl[6]))((IDWriteTextAnalysisSink1*)Unsafe.AsPointer(ref this), textPosition, textLength, numberSubstitution);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalysisSink1::SetGlyphOrientation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetGlyphOrientation(uint textPosition, uint textLength, GlyphOrientationAngle glyphOrientationAngle, byte adjustedBidiLevel, Bool32 isSideways, Bool32 isRightToLeft)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalysisSink1*, uint, uint, GlyphOrientationAngle, byte, Bool32, Bool32, int>)(lpVtbl[7]))((IDWriteTextAnalysisSink1*)Unsafe.AsPointer(ref this), textPosition, textLength, glyphOrientationAngle, adjustedBidiLevel, isSideways, isRightToLeft);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout1"]/*' />
/// <unmanaged>IDWriteTextLayout1</unmanaged>
[Guid("9064d822-80a7-465c-a986-df65f78b8feb")]
[NativeTypeName("struct IDWriteTextLayout1 : IDWriteTextLayout")]
[NativeInheritance("IDWriteTextLayout")]
public unsafe partial struct IDWriteTextLayout1
{
	public static ref readonly Guid IID_IDWriteTextLayout1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x22, 0xD8, 0x64, 0x90,
				0xA7, 0x80,
				0x5C, 0x46,
				0xA9,
				0x86,
				0xDF,
				0x65,
				0xF7,
				0x8B,
				0x8F,
				0xEB
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextLayout1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetMaxWidth" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetMaxWidth(float maxWidth)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, float, int>)(lpVtbl[3]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), maxWidth);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetMaxHeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetMaxHeight(float maxHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, float, int>)(lpVtbl[4]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), maxHeight);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetFontCollection(IDWriteFontCollection* fontCollection, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, IDWriteFontCollection*, TextRange*, int>)(lpVtbl[5]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), fontCollection, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetFontFamilyName(ushort* fontFamilyName, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, ushort*, TextRange*, int>)(lpVtbl[6]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), fontFamilyName, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetFontWeight(FontWeight fontWeight, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, FontWeight, TextRange*, int>)(lpVtbl[7]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), fontWeight, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetFontStyle(FontStyle fontStyle, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, FontStyle, TextRange*, int>)(lpVtbl[8]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), fontStyle, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetFontStretch(FontStretch fontStretch, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, FontStretch, TextRange*, int>)(lpVtbl[9]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), fontStretch, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetFontSize(float fontSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, float, TextRange*, int>)(lpVtbl[10]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), fontSize, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetUnderline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult SetUnderline(Bool32 hasUnderline, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, Bool32, TextRange*, int>)(lpVtbl[11]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), hasUnderline, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetStrikethrough" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult SetStrikethrough(Bool32 hasStrikethrough, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, Bool32, TextRange*, int>)(lpVtbl[12]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), hasStrikethrough, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetDrawingEffect" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult SetDrawingEffect(IUnknown* drawingEffect, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, IUnknown*, TextRange*, int>)(lpVtbl[13]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), drawingEffect, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetInlineObject" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult SetInlineObject(IDWriteInlineObject* inlineObject, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, IDWriteInlineObject*, TextRange*, int>)(lpVtbl[14]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), inlineObject, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetTypography" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult SetTypography(IDWriteTypography* typography, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, IDWriteTypography*, TextRange*, int>)(lpVtbl[15]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), typography, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult SetLocaleName(ushort* localeName, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, ushort*, TextRange*, int>)(lpVtbl[16]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), localeName, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetMaxWidth" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public float GetMaxWidth()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, float>)(lpVtbl[17]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetMaxHeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public float GetMaxHeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, float>)(lpVtbl[18]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetFontCollection(uint currentPosition, IDWriteFontCollection** fontCollection, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, IDWriteFontCollection**, TextRange*, int>)(lpVtbl[19]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), currentPosition, fontCollection, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontFamilyNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult GetFontFamilyNameLength(uint currentPosition, uint* nameLength, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, uint*, TextRange*, int>)(lpVtbl[20]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), currentPosition, nameLength, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetFontFamilyName(uint currentPosition, ushort* fontFamilyName, uint nameSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, ushort*, uint, TextRange*, int>)(lpVtbl[21]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), currentPosition, fontFamilyName, nameSize, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult GetFontWeight(uint currentPosition, FontWeight* fontWeight, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, FontWeight*, TextRange*, int>)(lpVtbl[22]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), currentPosition, fontWeight, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult GetFontStyle(uint currentPosition, FontStyle* fontStyle, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, FontStyle*, TextRange*, int>)(lpVtbl[23]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), currentPosition, fontStyle, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult GetFontStretch(uint currentPosition, FontStretch* fontStretch, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, FontStretch*, TextRange*, int>)(lpVtbl[24]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), currentPosition, fontStretch, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult GetFontSize(uint currentPosition, float* fontSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, float*, TextRange*, int>)(lpVtbl[25]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), currentPosition, fontSize, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetUnderline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult GetUnderline(uint currentPosition, Bool32* hasUnderline, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, Bool32*, TextRange*, int>)(lpVtbl[26]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), currentPosition, hasUnderline, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetStrikethrough" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult GetStrikethrough(uint currentPosition, Bool32* hasStrikethrough, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, Bool32*, TextRange*, int>)(lpVtbl[27]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), currentPosition, hasStrikethrough, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetDrawingEffect" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult GetDrawingEffect(uint currentPosition, IUnknown** drawingEffect, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, IUnknown**, TextRange*, int>)(lpVtbl[28]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), currentPosition, drawingEffect, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetInlineObject" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult GetInlineObject(uint currentPosition, IDWriteInlineObject** inlineObject, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, IDWriteInlineObject**, TextRange*, int>)(lpVtbl[29]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), currentPosition, inlineObject, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetTypography" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult GetTypography(uint currentPosition, IDWriteTypography** typography, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, IDWriteTypography**, TextRange*, int>)(lpVtbl[30]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), currentPosition, typography, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetLocaleNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult GetLocaleNameLength(uint currentPosition, uint* nameLength, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, uint*, TextRange*, int>)(lpVtbl[31]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), currentPosition, nameLength, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult GetLocaleName(uint currentPosition, ushort* localeName, uint nameSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, ushort*, uint, TextRange*, int>)(lpVtbl[32]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), currentPosition, localeName, nameSize, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.Draw" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult Draw(void* clientDrawingContext, IDWriteTextRenderer* renderer, float originX, float originY)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, void*, IDWriteTextRenderer*, float, float, int>)(lpVtbl[33]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), clientDrawingContext, renderer, originX, originY);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetLineMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult GetLineMetrics(LineMetrics* lineMetrics, uint maxLineCount, uint* actualLineCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, LineMetrics*, uint, uint*, int>)(lpVtbl[34]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), lineMetrics, maxLineCount, actualLineCount);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult GetMetrics(TextMetrics* textMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, TextMetrics*, int>)(lpVtbl[35]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), textMetrics);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetOverhangMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult GetOverhangMetrics(OverhangMetrics* overhangs)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, OverhangMetrics*, int>)(lpVtbl[36]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), overhangs);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetClusterMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult GetClusterMetrics(ClusterMetrics* clusterMetrics, uint maxClusterCount, uint* actualClusterCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, ClusterMetrics*, uint, uint*, int>)(lpVtbl[37]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), clusterMetrics, maxClusterCount, actualClusterCount);
	}

	/// <inheritdoc cref="IDWriteTextLayout.DetermineMinWidth" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult DetermineMinWidth(float* minWidth)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, float*, int>)(lpVtbl[38]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), minWidth);
	}

	/// <inheritdoc cref="IDWriteTextLayout.HitTestPoint" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult HitTestPoint(float pointX, float pointY, Bool32* isTrailingHit, Bool32* isInside, HitTestMetrics* hitTestMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, float, float, Bool32*, Bool32*, HitTestMetrics*, int>)(lpVtbl[39]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), pointX, pointY, isTrailingHit, isInside, hitTestMetrics);
	}

	/// <inheritdoc cref="IDWriteTextLayout.HitTestTextPosition" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult HitTestTextPosition(uint textPosition, Bool32 isTrailingHit, float* pointX, float* pointY, HitTestMetrics* hitTestMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, Bool32, float*, float*, HitTestMetrics*, int>)(lpVtbl[40]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), textPosition, isTrailingHit, pointX, pointY, hitTestMetrics);
	}

	/// <inheritdoc cref="IDWriteTextLayout.HitTestTextRange" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult HitTestTextRange(uint textPosition, uint textLength, float originX, float originY, HitTestMetrics* hitTestMetrics, uint maxHitTestMetricsCount, uint* actualHitTestMetricsCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, uint, float, float, HitTestMetrics*, uint, uint*, int>)(lpVtbl[41]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), textPosition, textLength, originX, originY, hitTestMetrics, maxHitTestMetricsCount, actualHitTestMetricsCount);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public HResult SetTextAlignment(TextAlignment textAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, TextAlignment, int>)(lpVtbl[42]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), textAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public HResult SetParagraphAlignment(ParagraphAlignment paragraphAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, ParagraphAlignment, int>)(lpVtbl[43]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), paragraphAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public HResult SetWordWrapping(WordWrapping wordWrapping)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, WordWrapping, int>)(lpVtbl[44]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), wordWrapping);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public HResult SetReadingDirection(ReadingDirection readingDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, ReadingDirection, int>)(lpVtbl[45]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), readingDirection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public HResult SetFlowDirection(FlowDirection flowDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, FlowDirection, int>)(lpVtbl[46]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), flowDirection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult SetIncrementalTabStop(float incrementalTabStop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, float, int>)(lpVtbl[47]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), incrementalTabStop);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public HResult SetTrimming(Trimming* trimmingOptions, IDWriteInlineObject* trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, Trimming*, IDWriteInlineObject*, int>)(lpVtbl[48]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public HResult SetLineSpacing(LineSpacingMethod lineSpacingMethod, float lineSpacing, float baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, LineSpacingMethod, float, float, int>)(lpVtbl[49]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public Graphics.DirectWrite.TextAlignment GetTextAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, Graphics.DirectWrite.TextAlignment>)(lpVtbl[50]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public Graphics.DirectWrite.ParagraphAlignment GetParagraphAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, Graphics.DirectWrite.ParagraphAlignment>)(lpVtbl[51]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public Graphics.DirectWrite.WordWrapping GetWordWrapping()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, Graphics.DirectWrite.WordWrapping>)(lpVtbl[52]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public Graphics.DirectWrite.ReadingDirection GetReadingDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, Graphics.DirectWrite.ReadingDirection>)(lpVtbl[53]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public Graphics.DirectWrite.FlowDirection GetFlowDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, Graphics.DirectWrite.FlowDirection>)(lpVtbl[54]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public float GetIncrementalTabStop()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, float>)(lpVtbl[55]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public HResult GetTrimming(Trimming* trimmingOptions, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, Trimming*, IDWriteInlineObject**, int>)(lpVtbl[56]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public HResult GetLineSpacing(LineSpacingMethod* lineSpacingMethod, float* lineSpacing, float* baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, LineSpacingMethod*, float*, float*, int>)(lpVtbl[57]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public HResult GetFontCollection(IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, IDWriteFontCollection**, int>)(lpVtbl[58]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), fontCollection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public uint GetFontFamilyNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint>)(lpVtbl[59]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(60)]
	public HResult GetFontFamilyName(ushort* fontFamilyName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, ushort*, uint, int>)(lpVtbl[60]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), fontFamilyName, nameSize);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(61)]
	public Graphics.DirectWrite.FontWeight GetFontWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, Graphics.DirectWrite.FontWeight>)(lpVtbl[61]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(62)]
	public Graphics.DirectWrite.FontStyle GetFontStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, Graphics.DirectWrite.FontStyle>)(lpVtbl[62]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(63)]
	public Graphics.DirectWrite.FontStretch GetFontStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, Graphics.DirectWrite.FontStretch>)(lpVtbl[63]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(64)]
	public float GetFontSize()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, float>)(lpVtbl[64]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(65)]
	public uint GetLocaleNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint>)(lpVtbl[65]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(66)]
	public HResult GetLocaleName(ushort* localeName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, ushort*, uint, int>)(lpVtbl[66]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), localeName, nameSize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout1::SetPairKerning"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(67)]
	public HResult SetPairKerning(Bool32 isPairKerningEnabled, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, Bool32, TextRange*, int>)(lpVtbl[67]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), isPairKerningEnabled, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout1::GetPairKerning"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(68)]
	public HResult GetPairKerning(uint currentPosition, Bool32* isPairKerningEnabled, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, Bool32*, TextRange*, int>)(lpVtbl[68]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), currentPosition, isPairKerningEnabled, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout1::SetCharacterSpacing"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(69)]
	public HResult SetCharacterSpacing(float leadingSpacing, float trailingSpacing, float minimumAdvanceWidth, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, float, float, float, TextRange*, int>)(lpVtbl[69]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout1::GetCharacterSpacing"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(70)]
	public HResult GetCharacterSpacing(uint currentPosition, float* leadingSpacing, float* trailingSpacing, float* minimumAdvanceWidth, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout1*, uint, float*, float*, float*, TextRange*, int>)(lpVtbl[70]))((IDWriteTextLayout1*)Unsafe.AsPointer(ref this), currentPosition, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteBitmapRenderTarget1"]/*' />
/// <unmanaged>IDWriteBitmapRenderTarget1</unmanaged>
[Guid("791e8298-3ef3-4230-9880-c9bdecc42064")]
[NativeTypeName("struct IDWriteBitmapRenderTarget1 : IDWriteBitmapRenderTarget")]
[NativeInheritance("IDWriteBitmapRenderTarget")]
public unsafe partial struct IDWriteBitmapRenderTarget1
{
	public static ref readonly Guid IID_IDWriteBitmapRenderTarget1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x98, 0x82, 0x1E, 0x79,
				0xF3, 0x3E,
				0x30, 0x42,
				0x98,
				0x80,
				0xC9,
				0xBD,
				0xEC,
				0xC4,
				0x20,
				0x64
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteBitmapRenderTarget1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteBitmapRenderTarget.DrawGlyphRun" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult DrawGlyphRun(float baselineOriginX, float baselineOriginY, MeasuringMode measuringMode, GlyphRun* glyphRun, IDWriteRenderingParams* renderingParams, uint textColor, RawRect* blackBoxRect)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget1*, float, float, MeasuringMode, GlyphRun*, IDWriteRenderingParams*, uint, RawRect*, int>)(lpVtbl[3]))((IDWriteBitmapRenderTarget1*)Unsafe.AsPointer(ref this), baselineOriginX, baselineOriginY, measuringMode, glyphRun, renderingParams, textColor, blackBoxRect);
	}

	/// <inheritdoc cref="IDWriteBitmapRenderTarget.GetMemoryDC" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public IntPtr GetMemoryDC()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget1*, IntPtr>)(lpVtbl[4]))((IDWriteBitmapRenderTarget1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteBitmapRenderTarget.GetPixelsPerDip" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public float GetPixelsPerDip()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget1*, float>)(lpVtbl[5]))((IDWriteBitmapRenderTarget1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteBitmapRenderTarget.SetPixelsPerDip" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPixelsPerDip(float pixelsPerDip)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget1*, float, int>)(lpVtbl[6]))((IDWriteBitmapRenderTarget1*)Unsafe.AsPointer(ref this), pixelsPerDip);
	}

	/// <inheritdoc cref="IDWriteBitmapRenderTarget.GetCurrentTransform" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetCurrentTransform(Matrix* transform)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget1*, Matrix*, int>)(lpVtbl[7]))((IDWriteBitmapRenderTarget1*)Unsafe.AsPointer(ref this), transform);
	}

	/// <inheritdoc cref="IDWriteBitmapRenderTarget.SetCurrentTransform" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetCurrentTransform(Matrix* transform)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget1*, Matrix*, int>)(lpVtbl[8]))((IDWriteBitmapRenderTarget1*)Unsafe.AsPointer(ref this), transform);
	}

	/// <inheritdoc cref="IDWriteBitmapRenderTarget.GetSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetSize(System.Drawing.Size** size)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget1*, System.Drawing.Size**, int>)(lpVtbl[9]))((IDWriteBitmapRenderTarget1*)Unsafe.AsPointer(ref this), size);
	}

	/// <inheritdoc cref="IDWriteBitmapRenderTarget.Resize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult Resize(uint width, uint height)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget1*, uint, uint, int>)(lpVtbl[10]))((IDWriteBitmapRenderTarget1*)Unsafe.AsPointer(ref this), width, height);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteBitmapRenderTarget1::GetTextAntialiasMode"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public Graphics.DirectWrite.TextAntialiasMode GetTextAntialiasMode()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget1*, Graphics.DirectWrite.TextAntialiasMode>)(lpVtbl[11]))((IDWriteBitmapRenderTarget1*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteBitmapRenderTarget1::SetTextAntialiasMode"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult SetTextAntialiasMode(TextAntialiasMode antialiasMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteBitmapRenderTarget1*, TextAntialiasMode, int>)(lpVtbl[12]))((IDWriteBitmapRenderTarget1*)Unsafe.AsPointer(ref this), antialiasMode);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextRenderer1"]/*' />
/// <unmanaged>IDWriteTextRenderer1</unmanaged>
[Guid("d3e0e934-22a0-427e-aae4-7d9574b59db1")]
[NativeTypeName("struct IDWriteTextRenderer1 : IDWriteTextRenderer")]
[NativeInheritance("IDWriteTextRenderer")]
public unsafe partial struct IDWriteTextRenderer1
{
	public static ref readonly Guid IID_IDWriteTextRenderer1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x34, 0xE9, 0xE0, 0xD3,
				0xA0, 0x22,
				0x7E, 0x42,
				0xAA,
				0xE4,
				0x7D,
				0x95,
				0x74,
				0xB5,
				0x9D,
				0xB1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextRenderer1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextRenderer.DrawGlyphRun" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult DrawGlyphRun(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, MeasuringMode measuringMode, GlyphRun* glyphRun, GlyphRunDescription* glyphRunDescription, IUnknown* clientDrawingEffect)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer1*, void*, float, float, MeasuringMode, GlyphRun*, GlyphRunDescription*, IUnknown*, int>)(lpVtbl[3]))((IDWriteTextRenderer1*)Unsafe.AsPointer(ref this), clientDrawingContext, baselineOriginX, baselineOriginY, measuringMode, glyphRun, glyphRunDescription, clientDrawingEffect);
	}

	/// <inheritdoc cref="IDWriteTextRenderer.DrawUnderline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult DrawUnderline(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, Underline* underline, IUnknown* clientDrawingEffect)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer1*, void*, float, float, Underline*, IUnknown*, int>)(lpVtbl[4]))((IDWriteTextRenderer1*)Unsafe.AsPointer(ref this), clientDrawingContext, baselineOriginX, baselineOriginY, underline, clientDrawingEffect);
	}

	/// <inheritdoc cref="IDWriteTextRenderer.DrawStrikethrough" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult DrawStrikethrough(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, Strikethrough* strikethrough, IUnknown* clientDrawingEffect)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer1*, void*, float, float, Strikethrough*, IUnknown*, int>)(lpVtbl[5]))((IDWriteTextRenderer1*)Unsafe.AsPointer(ref this), clientDrawingContext, baselineOriginX, baselineOriginY, strikethrough, clientDrawingEffect);
	}

	/// <inheritdoc cref="IDWriteTextRenderer.DrawInlineObject" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult DrawInlineObject(void* clientDrawingContext, float originX, float originY, IDWriteInlineObject* inlineObject, Bool32 isSideways, Bool32 isRightToLeft, IUnknown* clientDrawingEffect)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer1*, void*, float, float, IDWriteInlineObject*, Bool32, Bool32, IUnknown*, int>)(lpVtbl[6]))((IDWriteTextRenderer1*)Unsafe.AsPointer(ref this), clientDrawingContext, originX, originY, inlineObject, isSideways, isRightToLeft, clientDrawingEffect);
	}

	/// <inheritdoc cref="IDWritePixelSnapping.IsPixelSnappingDisabled" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult IsPixelSnappingDisabled(void* clientDrawingContext, Bool32* isDisabled)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer1*, void*, Bool32*, int>)(lpVtbl[7]))((IDWriteTextRenderer1*)Unsafe.AsPointer(ref this), clientDrawingContext, isDisabled);
	}

	/// <inheritdoc cref="IDWritePixelSnapping.GetCurrentTransform" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetCurrentTransform(void* clientDrawingContext, Matrix* transform)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer1*, void*, Matrix*, int>)(lpVtbl[8]))((IDWriteTextRenderer1*)Unsafe.AsPointer(ref this), clientDrawingContext, transform);
	}

	/// <inheritdoc cref="IDWritePixelSnapping.GetPixelsPerDip" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetPixelsPerDip(void* clientDrawingContext, float* pixelsPerDip)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer1*, void*, float*, int>)(lpVtbl[9]))((IDWriteTextRenderer1*)Unsafe.AsPointer(ref this), clientDrawingContext, pixelsPerDip);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextRenderer1::DrawGlyphRun"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult DrawGlyphRun(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, GlyphOrientationAngle orientationAngle, MeasuringMode measuringMode, GlyphRun* glyphRun, GlyphRunDescription* glyphRunDescription, IUnknown* clientDrawingEffect)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer1*, void*, float, float, GlyphOrientationAngle, MeasuringMode, GlyphRun*, GlyphRunDescription*, IUnknown*, int>)(lpVtbl[10]))((IDWriteTextRenderer1*)Unsafe.AsPointer(ref this), clientDrawingContext, baselineOriginX, baselineOriginY, orientationAngle, measuringMode, glyphRun, glyphRunDescription, clientDrawingEffect);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextRenderer1::DrawUnderline"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult DrawUnderline(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, GlyphOrientationAngle orientationAngle, Underline* underline, IUnknown* clientDrawingEffect)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer1*, void*, float, float, GlyphOrientationAngle, Underline*, IUnknown*, int>)(lpVtbl[11]))((IDWriteTextRenderer1*)Unsafe.AsPointer(ref this), clientDrawingContext, baselineOriginX, baselineOriginY, orientationAngle, underline, clientDrawingEffect);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextRenderer1::DrawStrikethrough"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult DrawStrikethrough(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, GlyphOrientationAngle orientationAngle, Strikethrough* strikethrough, IUnknown* clientDrawingEffect)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer1*, void*, float, float, GlyphOrientationAngle, Strikethrough*, IUnknown*, int>)(lpVtbl[12]))((IDWriteTextRenderer1*)Unsafe.AsPointer(ref this), clientDrawingContext, baselineOriginX, baselineOriginY, orientationAngle, strikethrough, clientDrawingEffect);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextRenderer1::DrawInlineObject"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult DrawInlineObject(void* clientDrawingContext, float originX, float originY, GlyphOrientationAngle orientationAngle, IDWriteInlineObject* inlineObject, Bool32 isSideways, Bool32 isRightToLeft, IUnknown* clientDrawingEffect)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextRenderer1*, void*, float, float, GlyphOrientationAngle, IDWriteInlineObject*, Bool32, Bool32, IUnknown*, int>)(lpVtbl[13]))((IDWriteTextRenderer1*)Unsafe.AsPointer(ref this), clientDrawingContext, originX, originY, orientationAngle, inlineObject, isSideways, isRightToLeft, clientDrawingEffect);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat1"]/*' />
/// <unmanaged>IDWriteTextFormat1</unmanaged>
[Guid("5f174b49-0d8b-4cfb-8bca-f1cce9d06c67")]
[NativeTypeName("struct IDWriteTextFormat1 : IDWriteTextFormat")]
[NativeInheritance("IDWriteTextFormat")]
public unsafe partial struct IDWriteTextFormat1
{
	public static ref readonly Guid IID_IDWriteTextFormat1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x49, 0x4B, 0x17, 0x5F,
				0x8B, 0x0D,
				0xFB, 0x4C,
				0x8B,
				0xCA,
				0xF1,
				0xCC,
				0xE9,
				0xD0,
				0x6C,
				0x67
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextFormat1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetTextAlignment(TextAlignment textAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, TextAlignment, int>)(lpVtbl[3]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), textAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetParagraphAlignment(ParagraphAlignment paragraphAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, ParagraphAlignment, int>)(lpVtbl[4]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), paragraphAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetWordWrapping(WordWrapping wordWrapping)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, WordWrapping, int>)(lpVtbl[5]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), wordWrapping);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetReadingDirection(ReadingDirection readingDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, ReadingDirection, int>)(lpVtbl[6]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), readingDirection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetFlowDirection(FlowDirection flowDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, FlowDirection, int>)(lpVtbl[7]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), flowDirection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetIncrementalTabStop(float incrementalTabStop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, float, int>)(lpVtbl[8]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), incrementalTabStop);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetTrimming(Trimming* trimmingOptions, IDWriteInlineObject* trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, Trimming*, IDWriteInlineObject*, int>)(lpVtbl[9]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetLineSpacing(LineSpacingMethod lineSpacingMethod, float lineSpacing, float baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, LineSpacingMethod, float, float, int>)(lpVtbl[10]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public Graphics.DirectWrite.TextAlignment GetTextAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, Graphics.DirectWrite.TextAlignment>)(lpVtbl[11]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public Graphics.DirectWrite.ParagraphAlignment GetParagraphAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, Graphics.DirectWrite.ParagraphAlignment>)(lpVtbl[12]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public Graphics.DirectWrite.WordWrapping GetWordWrapping()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, Graphics.DirectWrite.WordWrapping>)(lpVtbl[13]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public Graphics.DirectWrite.ReadingDirection GetReadingDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, Graphics.DirectWrite.ReadingDirection>)(lpVtbl[14]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public Graphics.DirectWrite.FlowDirection GetFlowDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, Graphics.DirectWrite.FlowDirection>)(lpVtbl[15]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public float GetIncrementalTabStop()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, float>)(lpVtbl[16]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetTrimming(Trimming* trimmingOptions, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, Trimming*, IDWriteInlineObject**, int>)(lpVtbl[17]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult GetLineSpacing(LineSpacingMethod* lineSpacingMethod, float* lineSpacing, float* baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, LineSpacingMethod*, float*, float*, int>)(lpVtbl[18]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetFontCollection(IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, IDWriteFontCollection**, int>)(lpVtbl[19]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), fontCollection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public uint GetFontFamilyNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, uint>)(lpVtbl[20]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetFontFamilyName(ushort* fontFamilyName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, ushort*, uint, int>)(lpVtbl[21]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), fontFamilyName, nameSize);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public Graphics.DirectWrite.FontWeight GetFontWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, Graphics.DirectWrite.FontWeight>)(lpVtbl[22]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public Graphics.DirectWrite.FontStyle GetFontStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, Graphics.DirectWrite.FontStyle>)(lpVtbl[23]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public Graphics.DirectWrite.FontStretch GetFontStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, Graphics.DirectWrite.FontStretch>)(lpVtbl[24]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public float GetFontSize()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, float>)(lpVtbl[25]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public uint GetLocaleNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, uint>)(lpVtbl[26]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult GetLocaleName(ushort* localeName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, ushort*, uint, int>)(lpVtbl[27]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), localeName, nameSize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat1::SetVerticalGlyphOrientation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult SetVerticalGlyphOrientation(VerticalGlyphOrientation glyphOrientation)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, VerticalGlyphOrientation, int>)(lpVtbl[28]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), glyphOrientation);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat1::GetVerticalGlyphOrientation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public Graphics.DirectWrite.VerticalGlyphOrientation GetVerticalGlyphOrientation()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, Graphics.DirectWrite.VerticalGlyphOrientation>)(lpVtbl[29]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat1::SetLastLineWrapping"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult SetLastLineWrapping(Bool32 isLastLineWrappingEnabled)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, Bool32, int>)(lpVtbl[30]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), isLastLineWrappingEnabled);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat1::GetLastLineWrapping"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public Bool32 GetLastLineWrapping()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, Bool32>)(lpVtbl[31]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat1::SetOpticalAlignment"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult SetOpticalAlignment(OpticalAlignment opticalAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, OpticalAlignment, int>)(lpVtbl[32]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), opticalAlignment);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat1::GetOpticalAlignment"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public Graphics.DirectWrite.OpticalAlignment GetOpticalAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, Graphics.DirectWrite.OpticalAlignment>)(lpVtbl[33]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat1::SetFontFallback"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult SetFontFallback(IDWriteFontFallback* fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, IDWriteFontFallback*, int>)(lpVtbl[34]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat1::GetFontFallback"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult GetFontFallback(IDWriteFontFallback** fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat1*, IDWriteFontFallback**, int>)(lpVtbl[35]))((IDWriteTextFormat1*)Unsafe.AsPointer(ref this), fontFallback);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout2"]/*' />
/// <unmanaged>IDWriteTextLayout2</unmanaged>
[Guid("1093c18f-8d5e-43f0-b064-0917311b525e")]
[NativeTypeName("struct IDWriteTextLayout2 : IDWriteTextLayout1")]
[NativeInheritance("IDWriteTextLayout1")]
public unsafe partial struct IDWriteTextLayout2
{
	public static ref readonly Guid IID_IDWriteTextLayout2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8F, 0xC1, 0x93, 0x10,
				0x5E, 0x8D,
				0xF0, 0x43,
				0xB0,
				0x64,
				0x09,
				0x17,
				0x31,
				0x1B,
				0x52,
				0x5E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextLayout2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout1.SetPairKerning" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetPairKerning(Bool32 isPairKerningEnabled, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Bool32, TextRange*, int>)(lpVtbl[3]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), isPairKerningEnabled, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout1.GetPairKerning" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPairKerning(uint currentPosition, Bool32* isPairKerningEnabled, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, Bool32*, TextRange*, int>)(lpVtbl[4]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), currentPosition, isPairKerningEnabled, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout1.SetCharacterSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetCharacterSpacing(float leadingSpacing, float trailingSpacing, float minimumAdvanceWidth, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, float, float, float, TextRange*, int>)(lpVtbl[5]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout1.GetCharacterSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetCharacterSpacing(uint currentPosition, float* leadingSpacing, float* trailingSpacing, float* minimumAdvanceWidth, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, float*, float*, float*, TextRange*, int>)(lpVtbl[6]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), currentPosition, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetMaxWidth" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetMaxWidth(float maxWidth)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, float, int>)(lpVtbl[7]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), maxWidth);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetMaxHeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetMaxHeight(float maxHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, float, int>)(lpVtbl[8]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), maxHeight);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetFontCollection(IDWriteFontCollection* fontCollection, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, IDWriteFontCollection*, TextRange*, int>)(lpVtbl[9]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), fontCollection, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetFontFamilyName(ushort* fontFamilyName, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, ushort*, TextRange*, int>)(lpVtbl[10]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), fontFamilyName, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult SetFontWeight(FontWeight fontWeight, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, FontWeight, TextRange*, int>)(lpVtbl[11]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), fontWeight, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult SetFontStyle(FontStyle fontStyle, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, FontStyle, TextRange*, int>)(lpVtbl[12]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), fontStyle, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult SetFontStretch(FontStretch fontStretch, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, FontStretch, TextRange*, int>)(lpVtbl[13]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), fontStretch, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult SetFontSize(float fontSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, float, TextRange*, int>)(lpVtbl[14]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), fontSize, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetUnderline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult SetUnderline(Bool32 hasUnderline, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Bool32, TextRange*, int>)(lpVtbl[15]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), hasUnderline, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetStrikethrough" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult SetStrikethrough(Bool32 hasStrikethrough, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Bool32, TextRange*, int>)(lpVtbl[16]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), hasStrikethrough, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetDrawingEffect" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult SetDrawingEffect(IUnknown* drawingEffect, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, IUnknown*, TextRange*, int>)(lpVtbl[17]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), drawingEffect, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetInlineObject" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult SetInlineObject(IDWriteInlineObject* inlineObject, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, IDWriteInlineObject*, TextRange*, int>)(lpVtbl[18]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), inlineObject, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetTypography" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult SetTypography(IDWriteTypography* typography, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, IDWriteTypography*, TextRange*, int>)(lpVtbl[19]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), typography, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult SetLocaleName(ushort* localeName, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, ushort*, TextRange*, int>)(lpVtbl[20]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), localeName, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetMaxWidth" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public float GetMaxWidth()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, float>)(lpVtbl[21]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetMaxHeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public float GetMaxHeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, float>)(lpVtbl[22]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult GetFontCollection(uint currentPosition, IDWriteFontCollection** fontCollection, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, IDWriteFontCollection**, TextRange*, int>)(lpVtbl[23]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), currentPosition, fontCollection, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontFamilyNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult GetFontFamilyNameLength(uint currentPosition, uint* nameLength, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, uint*, TextRange*, int>)(lpVtbl[24]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), currentPosition, nameLength, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult GetFontFamilyName(uint currentPosition, ushort* fontFamilyName, uint nameSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, ushort*, uint, TextRange*, int>)(lpVtbl[25]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), currentPosition, fontFamilyName, nameSize, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult GetFontWeight(uint currentPosition, FontWeight* fontWeight, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, FontWeight*, TextRange*, int>)(lpVtbl[26]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), currentPosition, fontWeight, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult GetFontStyle(uint currentPosition, FontStyle* fontStyle, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, FontStyle*, TextRange*, int>)(lpVtbl[27]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), currentPosition, fontStyle, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult GetFontStretch(uint currentPosition, FontStretch* fontStretch, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, FontStretch*, TextRange*, int>)(lpVtbl[28]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), currentPosition, fontStretch, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult GetFontSize(uint currentPosition, float* fontSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, float*, TextRange*, int>)(lpVtbl[29]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), currentPosition, fontSize, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetUnderline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult GetUnderline(uint currentPosition, Bool32* hasUnderline, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, Bool32*, TextRange*, int>)(lpVtbl[30]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), currentPosition, hasUnderline, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetStrikethrough" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult GetStrikethrough(uint currentPosition, Bool32* hasStrikethrough, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, Bool32*, TextRange*, int>)(lpVtbl[31]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), currentPosition, hasStrikethrough, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetDrawingEffect" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult GetDrawingEffect(uint currentPosition, IUnknown** drawingEffect, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, IUnknown**, TextRange*, int>)(lpVtbl[32]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), currentPosition, drawingEffect, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetInlineObject" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult GetInlineObject(uint currentPosition, IDWriteInlineObject** inlineObject, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, IDWriteInlineObject**, TextRange*, int>)(lpVtbl[33]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), currentPosition, inlineObject, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetTypography" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult GetTypography(uint currentPosition, IDWriteTypography** typography, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, IDWriteTypography**, TextRange*, int>)(lpVtbl[34]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), currentPosition, typography, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetLocaleNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult GetLocaleNameLength(uint currentPosition, uint* nameLength, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, uint*, TextRange*, int>)(lpVtbl[35]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), currentPosition, nameLength, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult GetLocaleName(uint currentPosition, ushort* localeName, uint nameSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, ushort*, uint, TextRange*, int>)(lpVtbl[36]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), currentPosition, localeName, nameSize, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.Draw" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult Draw(void* clientDrawingContext, IDWriteTextRenderer* renderer, float originX, float originY)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, void*, IDWriteTextRenderer*, float, float, int>)(lpVtbl[37]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), clientDrawingContext, renderer, originX, originY);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetLineMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult GetLineMetrics(LineMetrics* lineMetrics, uint maxLineCount, uint* actualLineCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, LineMetrics*, uint, uint*, int>)(lpVtbl[38]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), lineMetrics, maxLineCount, actualLineCount);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult GetMetrics(TextMetrics* textMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, TextMetrics*, int>)(lpVtbl[39]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), textMetrics);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetOverhangMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult GetOverhangMetrics(OverhangMetrics* overhangs)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, OverhangMetrics*, int>)(lpVtbl[40]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), overhangs);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetClusterMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult GetClusterMetrics(ClusterMetrics* clusterMetrics, uint maxClusterCount, uint* actualClusterCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, ClusterMetrics*, uint, uint*, int>)(lpVtbl[41]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), clusterMetrics, maxClusterCount, actualClusterCount);
	}

	/// <inheritdoc cref="IDWriteTextLayout.DetermineMinWidth" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public HResult DetermineMinWidth(float* minWidth)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, float*, int>)(lpVtbl[42]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), minWidth);
	}

	/// <inheritdoc cref="IDWriteTextLayout.HitTestPoint" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public HResult HitTestPoint(float pointX, float pointY, Bool32* isTrailingHit, Bool32* isInside, HitTestMetrics* hitTestMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, float, float, Bool32*, Bool32*, HitTestMetrics*, int>)(lpVtbl[43]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), pointX, pointY, isTrailingHit, isInside, hitTestMetrics);
	}

	/// <inheritdoc cref="IDWriteTextLayout.HitTestTextPosition" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public HResult HitTestTextPosition(uint textPosition, Bool32 isTrailingHit, float* pointX, float* pointY, HitTestMetrics* hitTestMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, Bool32, float*, float*, HitTestMetrics*, int>)(lpVtbl[44]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), textPosition, isTrailingHit, pointX, pointY, hitTestMetrics);
	}

	/// <inheritdoc cref="IDWriteTextLayout.HitTestTextRange" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public HResult HitTestTextRange(uint textPosition, uint textLength, float originX, float originY, HitTestMetrics* hitTestMetrics, uint maxHitTestMetricsCount, uint* actualHitTestMetricsCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint, uint, float, float, HitTestMetrics*, uint, uint*, int>)(lpVtbl[45]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), textPosition, textLength, originX, originY, hitTestMetrics, maxHitTestMetricsCount, actualHitTestMetricsCount);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public HResult SetTextAlignment(TextAlignment textAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, TextAlignment, int>)(lpVtbl[46]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), textAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult SetParagraphAlignment(ParagraphAlignment paragraphAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, ParagraphAlignment, int>)(lpVtbl[47]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), paragraphAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public HResult SetWordWrapping(WordWrapping wordWrapping)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, WordWrapping, int>)(lpVtbl[48]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), wordWrapping);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public HResult SetReadingDirection(ReadingDirection readingDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, ReadingDirection, int>)(lpVtbl[49]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), readingDirection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public HResult SetFlowDirection(FlowDirection flowDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, FlowDirection, int>)(lpVtbl[50]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), flowDirection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public HResult SetIncrementalTabStop(float incrementalTabStop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, float, int>)(lpVtbl[51]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), incrementalTabStop);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public HResult SetTrimming(Trimming* trimmingOptions, IDWriteInlineObject* trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Trimming*, IDWriteInlineObject*, int>)(lpVtbl[52]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public HResult SetLineSpacing(LineSpacingMethod lineSpacingMethod, float lineSpacing, float baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, LineSpacingMethod, float, float, int>)(lpVtbl[53]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public Graphics.DirectWrite.TextAlignment GetTextAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Graphics.DirectWrite.TextAlignment>)(lpVtbl[54]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public Graphics.DirectWrite.ParagraphAlignment GetParagraphAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Graphics.DirectWrite.ParagraphAlignment>)(lpVtbl[55]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public Graphics.DirectWrite.WordWrapping GetWordWrapping()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Graphics.DirectWrite.WordWrapping>)(lpVtbl[56]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public Graphics.DirectWrite.ReadingDirection GetReadingDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Graphics.DirectWrite.ReadingDirection>)(lpVtbl[57]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public Graphics.DirectWrite.FlowDirection GetFlowDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Graphics.DirectWrite.FlowDirection>)(lpVtbl[58]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public float GetIncrementalTabStop()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, float>)(lpVtbl[59]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(60)]
	public HResult GetTrimming(Trimming* trimmingOptions, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Trimming*, IDWriteInlineObject**, int>)(lpVtbl[60]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(61)]
	public HResult GetLineSpacing(LineSpacingMethod* lineSpacingMethod, float* lineSpacing, float* baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, LineSpacingMethod*, float*, float*, int>)(lpVtbl[61]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(62)]
	public HResult GetFontCollection(IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, IDWriteFontCollection**, int>)(lpVtbl[62]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), fontCollection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(63)]
	public uint GetFontFamilyNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint>)(lpVtbl[63]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(64)]
	public HResult GetFontFamilyName(ushort* fontFamilyName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, ushort*, uint, int>)(lpVtbl[64]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), fontFamilyName, nameSize);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(65)]
	public Graphics.DirectWrite.FontWeight GetFontWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Graphics.DirectWrite.FontWeight>)(lpVtbl[65]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(66)]
	public Graphics.DirectWrite.FontStyle GetFontStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Graphics.DirectWrite.FontStyle>)(lpVtbl[66]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(67)]
	public Graphics.DirectWrite.FontStretch GetFontStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Graphics.DirectWrite.FontStretch>)(lpVtbl[67]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(68)]
	public float GetFontSize()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, float>)(lpVtbl[68]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(69)]
	public uint GetLocaleNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, uint>)(lpVtbl[69]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(70)]
	public HResult GetLocaleName(ushort* localeName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, ushort*, uint, int>)(lpVtbl[70]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), localeName, nameSize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout2::GetMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(71)]
	public HResult GetMetrics(TextMetrics1* textMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, TextMetrics1*, int>)(lpVtbl[71]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), textMetrics);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout2::SetVerticalGlyphOrientation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(72)]
	public HResult SetVerticalGlyphOrientation(VerticalGlyphOrientation glyphOrientation)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, VerticalGlyphOrientation, int>)(lpVtbl[72]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), glyphOrientation);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout2::GetVerticalGlyphOrientation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(73)]
	public Graphics.DirectWrite.VerticalGlyphOrientation GetVerticalGlyphOrientation()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Graphics.DirectWrite.VerticalGlyphOrientation>)(lpVtbl[73]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout2::SetLastLineWrapping"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(74)]
	public HResult SetLastLineWrapping(Bool32 isLastLineWrappingEnabled)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Bool32, int>)(lpVtbl[74]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), isLastLineWrappingEnabled);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout2::GetLastLineWrapping"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(75)]
	public Bool32 GetLastLineWrapping()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Bool32>)(lpVtbl[75]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout2::SetOpticalAlignment"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(76)]
	public HResult SetOpticalAlignment(OpticalAlignment opticalAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, OpticalAlignment, int>)(lpVtbl[76]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), opticalAlignment);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout2::GetOpticalAlignment"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(77)]
	public Graphics.DirectWrite.OpticalAlignment GetOpticalAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, Graphics.DirectWrite.OpticalAlignment>)(lpVtbl[77]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout2::SetFontFallback"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(78)]
	public HResult SetFontFallback(IDWriteFontFallback* fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, IDWriteFontFallback*, int>)(lpVtbl[78]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout2::GetFontFallback"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(79)]
	public HResult GetFontFallback(IDWriteFontFallback** fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout2*, IDWriteFontFallback**, int>)(lpVtbl[79]))((IDWriteTextLayout2*)Unsafe.AsPointer(ref this), fontFallback);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer2"]/*' />
/// <unmanaged>IDWriteTextAnalyzer2</unmanaged>
[Guid("553a9ff3-5693-4df7-b52b-74806f7f2eb9")]
[NativeTypeName("struct IDWriteTextAnalyzer2 : IDWriteTextAnalyzer1")]
[NativeInheritance("IDWriteTextAnalyzer1")]
public unsafe partial struct IDWriteTextAnalyzer2
{
	public static ref readonly Guid IID_IDWriteTextAnalyzer2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF3, 0x9F, 0x3A, 0x55,
				0x93, 0x56,
				0xF7, 0x4D,
				0xB5,
				0x2B,
				0x74,
				0x80,
				0x6F,
				0x7F,
				0x2E,
				0xB9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextAnalyzer2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer1.ApplyCharacterSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult ApplyCharacterSpacing(float leadingSpacing, float trailingSpacing, float minimumAdvanceWidth, uint textLength, uint glyphCount, ushort* clusterMap, float* glyphAdvances, GlyphOffset* glyphOffsets, ShapingGlyphProperties* glyphProperties, float* modifiedGlyphAdvances, GlyphOffset* modifiedGlyphOffsets)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, float, float, float, uint, uint, ushort*, float*, GlyphOffset*, ShapingGlyphProperties*, float*, GlyphOffset*, int>)(lpVtbl[3]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), leadingSpacing, trailingSpacing, minimumAdvanceWidth, textLength, glyphCount, clusterMap, glyphAdvances, glyphOffsets, glyphProperties, modifiedGlyphAdvances, modifiedGlyphOffsets);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer1.GetBaseline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetBaseline(IDWriteFontFace* fontFace, Baseline baseline, Bool32 isVertical, Bool32 isSimulationAllowed, ScriptAnalysis* scriptAnalysis, ushort* localeName, int* baselineCoordinate, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, IDWriteFontFace*, Baseline, Bool32, Bool32, ScriptAnalysis*, ushort*, int*, Bool32*, int>)(lpVtbl[4]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), fontFace, baseline, isVertical, isSimulationAllowed, scriptAnalysis, localeName, baselineCoordinate, exists);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer1.AnalyzeVerticalGlyphOrientation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult AnalyzeVerticalGlyphOrientation(IDWriteTextAnalysisSource1* analysisSource, uint textPosition, uint textLength, IDWriteTextAnalysisSink1* analysisSink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource1*, uint, uint, IDWriteTextAnalysisSink1*, int>)(lpVtbl[5]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, analysisSink);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer1.GetGlyphOrientationTransform" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetGlyphOrientationTransform(GlyphOrientationAngle glyphOrientationAngle, Bool32 isSideways, Matrix* transform)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, GlyphOrientationAngle, Bool32, Matrix*, int>)(lpVtbl[6]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), glyphOrientationAngle, isSideways, transform);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer1.GetScriptProperties" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetScriptProperties(ScriptAnalysis* scriptAnalysis, ScriptProperties* scriptProperties)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, ScriptAnalysis*, ScriptProperties*, int>)(lpVtbl[7]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), scriptAnalysis, scriptProperties);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer1.GetTextComplexity" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetTextComplexity(ushort* textString, uint textLength, IDWriteFontFace* fontFace, Bool32* isTextSimple, uint* textLengthRead, ushort* glyphIndices)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, ushort*, uint, IDWriteFontFace*, Bool32*, uint*, ushort*, int>)(lpVtbl[8]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), textString, textLength, fontFace, isTextSimple, textLengthRead, glyphIndices);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer1.GetJustificationOpportunities" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetJustificationOpportunities(IDWriteFontFace* fontFace, float fontEmSize, ScriptAnalysis* scriptAnalysis, uint textLength, uint glyphCount, ushort* textString, ushort* clusterMap, ShapingGlyphProperties* glyphProperties, JustificationOpportunity* justificationOpportunities)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, IDWriteFontFace*, float, ScriptAnalysis*, uint, uint, ushort*, ushort*, ShapingGlyphProperties*, JustificationOpportunity*, int>)(lpVtbl[9]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), fontFace, fontEmSize, scriptAnalysis, textLength, glyphCount, textString, clusterMap, glyphProperties, justificationOpportunities);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer1.JustifyGlyphAdvances" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult JustifyGlyphAdvances(float lineWidth, uint glyphCount, JustificationOpportunity* justificationOpportunities, float* glyphAdvances, GlyphOffset* glyphOffsets, float* justifiedGlyphAdvances, GlyphOffset* justifiedGlyphOffsets)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, float, uint, JustificationOpportunity*, float*, GlyphOffset*, float*, GlyphOffset*, int>)(lpVtbl[10]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), lineWidth, glyphCount, justificationOpportunities, glyphAdvances, glyphOffsets, justifiedGlyphAdvances, justifiedGlyphOffsets);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer1.GetJustifiedGlyphs" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetJustifiedGlyphs(IDWriteFontFace* fontFace, float fontEmSize, ScriptAnalysis* scriptAnalysis, uint textLength, uint glyphCount, uint maxGlyphCount, ushort* clusterMap, ushort* glyphIndices, float* glyphAdvances, float* justifiedGlyphAdvances, GlyphOffset* justifiedGlyphOffsets, ShapingGlyphProperties* glyphProperties, uint* actualGlyphCount, ushort* modifiedClusterMap, ushort* modifiedGlyphIndices, float* modifiedGlyphAdvances, GlyphOffset* modifiedGlyphOffsets)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, IDWriteFontFace*, float, ScriptAnalysis*, uint, uint, uint, ushort*, ushort*, float*, float*, GlyphOffset*, ShapingGlyphProperties*, uint*, ushort*, ushort*, float*, GlyphOffset*, int>)(lpVtbl[11]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), fontFace, fontEmSize, scriptAnalysis, textLength, glyphCount, maxGlyphCount, clusterMap, glyphIndices, glyphAdvances, justifiedGlyphAdvances, justifiedGlyphOffsets, glyphProperties, actualGlyphCount, modifiedClusterMap, modifiedGlyphIndices, modifiedGlyphAdvances, modifiedGlyphOffsets);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer.AnalyzeScript" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult AnalyzeScript(IDWriteTextAnalysisSource* analysisSource, uint textPosition, uint textLength, IDWriteTextAnalysisSink* analysisSink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource*, uint, uint, IDWriteTextAnalysisSink*, int>)(lpVtbl[12]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, analysisSink);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer.AnalyzeBidi" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult AnalyzeBidi(IDWriteTextAnalysisSource* analysisSource, uint textPosition, uint textLength, IDWriteTextAnalysisSink* analysisSink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource*, uint, uint, IDWriteTextAnalysisSink*, int>)(lpVtbl[13]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, analysisSink);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer.AnalyzeNumberSubstitution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult AnalyzeNumberSubstitution(IDWriteTextAnalysisSource* analysisSource, uint textPosition, uint textLength, IDWriteTextAnalysisSink* analysisSink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource*, uint, uint, IDWriteTextAnalysisSink*, int>)(lpVtbl[14]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, analysisSink);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer.AnalyzeLineBreakpoints" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult AnalyzeLineBreakpoints(IDWriteTextAnalysisSource* analysisSource, uint textPosition, uint textLength, IDWriteTextAnalysisSink* analysisSink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource*, uint, uint, IDWriteTextAnalysisSink*, int>)(lpVtbl[15]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, analysisSink);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer.GetGlyphs" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult GetGlyphs(ushort* textString, uint textLength, IDWriteFontFace* fontFace, Bool32 isSideways, Bool32 isRightToLeft, ScriptAnalysis* scriptAnalysis, ushort* localeName, IDWriteNumberSubstitution* numberSubstitution, TypographicFeatures** features, uint* featureRangeLengths, uint featureRanges, uint maxGlyphCount, ushort* clusterMap, ShapingTextProperties* textProps, ushort* glyphIndices, ShapingGlyphProperties* glyphProps, uint* actualGlyphCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, ushort*, uint, IDWriteFontFace*, Bool32, Bool32, ScriptAnalysis*, ushort*, IDWriteNumberSubstitution*, TypographicFeatures**, uint*, uint, uint, ushort*, ShapingTextProperties*, ushort*, ShapingGlyphProperties*, uint*, int>)(lpVtbl[16]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), textString, textLength, fontFace, isSideways, isRightToLeft, scriptAnalysis, localeName, numberSubstitution, features, featureRangeLengths, featureRanges, maxGlyphCount, clusterMap, textProps, glyphIndices, glyphProps, actualGlyphCount);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer.GetGlyphPlacements" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetGlyphPlacements(ushort* textString, ushort* clusterMap, ShapingTextProperties* textProps, uint textLength, ushort* glyphIndices, ShapingGlyphProperties* glyphProps, uint glyphCount, IDWriteFontFace* fontFace, float fontEmSize, Bool32 isSideways, Bool32 isRightToLeft, ScriptAnalysis* scriptAnalysis, ushort* localeName, TypographicFeatures** features, uint* featureRangeLengths, uint featureRanges, float* glyphAdvances, GlyphOffset* glyphOffsets)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, ushort*, ushort*, ShapingTextProperties*, uint, ushort*, ShapingGlyphProperties*, uint, IDWriteFontFace*, float, Bool32, Bool32, ScriptAnalysis*, ushort*, TypographicFeatures**, uint*, uint, float*, GlyphOffset*, int>)(lpVtbl[17]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), textString, clusterMap, textProps, textLength, glyphIndices, glyphProps, glyphCount, fontFace, fontEmSize, isSideways, isRightToLeft, scriptAnalysis, localeName, features, featureRangeLengths, featureRanges, glyphAdvances, glyphOffsets);
	}

	/// <inheritdoc cref="IDWriteTextAnalyzer.GetGdiCompatibleGlyphPlacements" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult GetGdiCompatibleGlyphPlacements(ushort* textString, ushort* clusterMap, ShapingTextProperties* textProps, uint textLength, ushort* glyphIndices, ShapingGlyphProperties* glyphProps, uint glyphCount, IDWriteFontFace* fontFace, float fontEmSize, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, Bool32 isSideways, Bool32 isRightToLeft, ScriptAnalysis* scriptAnalysis, ushort* localeName, TypographicFeatures** features, uint* featureRangeLengths, uint featureRanges, float* glyphAdvances, GlyphOffset* glyphOffsets)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, ushort*, ushort*, ShapingTextProperties*, uint, ushort*, ShapingGlyphProperties*, uint, IDWriteFontFace*, float, float, Matrix*, Bool32, Bool32, Bool32, ScriptAnalysis*, ushort*, TypographicFeatures**, uint*, uint, float*, GlyphOffset*, int>)(lpVtbl[18]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), textString, clusterMap, textProps, textLength, glyphIndices, glyphProps, glyphCount, fontFace, fontEmSize, pixelsPerDip, transform, useGdiNatural, isSideways, isRightToLeft, scriptAnalysis, localeName, features, featureRangeLengths, featureRanges, glyphAdvances, glyphOffsets);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer2::GetGlyphOrientationTransform"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetGlyphOrientationTransform(GlyphOrientationAngle glyphOrientationAngle, Bool32 isSideways, float originX, float originY, Matrix* transform)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, GlyphOrientationAngle, Bool32, float, float, Matrix*, int>)(lpVtbl[19]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), glyphOrientationAngle, isSideways, originX, originY, transform);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer2::GetTypographicFeatures"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult GetTypographicFeatures(IDWriteFontFace* fontFace, ScriptAnalysis* scriptAnalysis, ushort* localeName, uint maxTagCount, uint* actualTagCount, FontFeatureTag* tags)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, IDWriteFontFace*, ScriptAnalysis*, ushort*, uint, uint*, FontFeatureTag*, int>)(lpVtbl[20]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), fontFace, scriptAnalysis, localeName, maxTagCount, actualTagCount, tags);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextAnalyzer2::CheckTypographicFeature"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult CheckTypographicFeature(IDWriteFontFace* fontFace, ScriptAnalysis* scriptAnalysis, ushort* localeName, FontFeatureTag featureTag, uint glyphCount, ushort* glyphIndices, byte* featureApplies)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextAnalyzer2*, IDWriteFontFace*, ScriptAnalysis*, ushort*, FontFeatureTag, uint, ushort*, byte*, int>)(lpVtbl[21]))((IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this), fontFace, scriptAnalysis, localeName, featureTag, glyphCount, glyphIndices, featureApplies);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFallback"]/*' />
/// <unmanaged>IDWriteFontFallback</unmanaged>
[Guid("efa008f9-f7a1-48bf-b05c-f224713cc0ff")]
[NativeTypeName("struct IDWriteFontFallback : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFontFallback
{
	public static ref readonly Guid IID_IDWriteFontFallback
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF9, 0x08, 0xA0, 0xEF,
				0xA1, 0xF7,
				0xBF, 0x48,
				0xB0,
				0x5C,
				0xF2,
				0x24,
				0x71,
				0x3C,
				0xC0,
				0xFF
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFallback));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFallback::MapCharacters"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult MapCharacters(IDWriteTextAnalysisSource* analysisSource, uint textPosition, uint textLength, IDWriteFontCollection* baseFontCollection, ushort* baseFamilyName, FontWeight baseWeight, FontStyle baseStyle, FontStretch baseStretch, uint* mappedLength, IDWriteFont** mappedFont, float* scale)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFallback*, IDWriteTextAnalysisSource*, uint, uint, IDWriteFontCollection*, ushort*, FontWeight, FontStyle, FontStretch, uint*, IDWriteFont**, float*, int>)(lpVtbl[3]))((IDWriteFontFallback*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, baseFontCollection, baseFamilyName, baseWeight, baseStyle, baseStretch, mappedLength, mappedFont, scale);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFallbackBuilder"]/*' />
/// <unmanaged>IDWriteFontFallbackBuilder</unmanaged>
[Guid("fd882d06-8aba-4fb8-b849-8be8b73e14de")]
[NativeTypeName("struct IDWriteFontFallbackBuilder : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFontFallbackBuilder
{
	public static ref readonly Guid IID_IDWriteFontFallbackBuilder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x06, 0x2D, 0x88, 0xFD,
				0xBA, 0x8A,
				0xB8, 0x4F,
				0xB8,
				0x49,
				0x8B,
				0xE8,
				0xB7,
				0x3E,
				0x14,
				0xDE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFallbackBuilder));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFallbackBuilder::AddMapping"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult AddMapping(UnicodeRange* ranges, uint rangesCount, ushort** targetFamilyNames, uint targetFamilyNamesCount, IDWriteFontCollection* fontCollection, ushort* localeName, ushort* baseFamilyName, float scale)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFallbackBuilder*, UnicodeRange*, uint, ushort**, uint, IDWriteFontCollection*, ushort*, ushort*, float, int>)(lpVtbl[3]))((IDWriteFontFallbackBuilder*)Unsafe.AsPointer(ref this), ranges, rangesCount, targetFamilyNames, targetFamilyNamesCount, fontCollection, localeName, baseFamilyName, scale);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFallbackBuilder::AddMappings"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult AddMappings(IDWriteFontFallback* fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFallbackBuilder*, IDWriteFontFallback*, int>)(lpVtbl[4]))((IDWriteFontFallbackBuilder*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFallbackBuilder::CreateFontFallback"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult CreateFontFallback(IDWriteFontFallback** fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFallbackBuilder*, IDWriteFontFallback**, int>)(lpVtbl[5]))((IDWriteFontFallbackBuilder*)Unsafe.AsPointer(ref this), fontFallback);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont2"]/*' />
/// <unmanaged>IDWriteFont2</unmanaged>
[Guid("29748ed6-8c9c-4a6a-be0b-d912e8538944")]
[NativeTypeName("struct IDWriteFont2 : IDWriteFont1")]
[NativeInheritance("IDWriteFont1")]
public unsafe partial struct IDWriteFont2
{
	public static ref readonly Guid IID_IDWriteFont2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xD6, 0x8E, 0x74, 0x29,
				0x9C, 0x8C,
				0x6A, 0x4A,
				0xBE,
				0x0B,
				0xD9,
				0x12,
				0xE8,
				0x53,
				0x89,
				0x44
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFont2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont1.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void GetMetrics(FontMetrics1* fontMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFont2*, FontMetrics1*, void>)(lpVtbl[3]))((IDWriteFont2*)Unsafe.AsPointer(ref this), fontMetrics);
	}

	/// <inheritdoc cref="IDWriteFont1.GetPanose" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void GetPanose(Panose* panose)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFont2*, Panose*, void>)(lpVtbl[4]))((IDWriteFont2*)Unsafe.AsPointer(ref this), panose);
	}

	/// <inheritdoc cref="IDWriteFont1.GetUnicodeRanges" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetUnicodeRanges(uint maxRangeCount, UnicodeRange* unicodeRanges, uint* actualRangeCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont2*, uint, UnicodeRange*, uint*, int>)(lpVtbl[5]))((IDWriteFont2*)Unsafe.AsPointer(ref this), maxRangeCount, unicodeRanges, actualRangeCount);
	}

	/// <inheritdoc cref="IDWriteFont1.IsMonospacedFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public Bool32 IsMonospacedFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont2*, Bool32>)(lpVtbl[6]))((IDWriteFont2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.GetFontFamily" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetFontFamily(IDWriteFontFamily** fontFamily)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont2*, IDWriteFontFamily**, int>)(lpVtbl[7]))((IDWriteFont2*)Unsafe.AsPointer(ref this), fontFamily);
	}

	/// <inheritdoc cref="IDWriteFont.GetWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public Graphics.DirectWrite.FontWeight GetWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont2*, Graphics.DirectWrite.FontWeight>)(lpVtbl[8]))((IDWriteFont2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.GetStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public Graphics.DirectWrite.FontStretch GetStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont2*, Graphics.DirectWrite.FontStretch>)(lpVtbl[9]))((IDWriteFont2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.GetStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public Graphics.DirectWrite.FontStyle GetStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont2*, Graphics.DirectWrite.FontStyle>)(lpVtbl[10]))((IDWriteFont2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.IsSymbolFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public Bool32 IsSymbolFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont2*, Bool32>)(lpVtbl[11]))((IDWriteFont2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.GetFaceNames" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetFaceNames(IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont2*, IDWriteLocalizedStrings**, int>)(lpVtbl[12]))((IDWriteFont2*)Unsafe.AsPointer(ref this), names);
	}

	/// <inheritdoc cref="IDWriteFont.GetInformationalStrings" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetInformationalStrings(InformationalStringId informationalStringID, IDWriteLocalizedStrings** informationalStrings, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont2*, InformationalStringId, IDWriteLocalizedStrings**, Bool32*, int>)(lpVtbl[13]))((IDWriteFont2*)Unsafe.AsPointer(ref this), informationalStringID, informationalStrings, exists);
	}

	/// <inheritdoc cref="IDWriteFont.GetSimulations" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public Graphics.DirectWrite.FontSimulations GetSimulations()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont2*, Graphics.DirectWrite.FontSimulations>)(lpVtbl[14]))((IDWriteFont2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public void GetMetrics(FontMetrics* fontMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFont2*, FontMetrics*, void>)(lpVtbl[15]))((IDWriteFont2*)Unsafe.AsPointer(ref this), fontMetrics);
	}

	/// <inheritdoc cref="IDWriteFont.HasCharacter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult HasCharacter(uint unicodeValue, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont2*, uint, Bool32*, int>)(lpVtbl[16]))((IDWriteFont2*)Unsafe.AsPointer(ref this), unicodeValue, exists);
	}

	/// <inheritdoc cref="IDWriteFont.CreateFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult CreateFontFace(IDWriteFontFace** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont2*, IDWriteFontFace**, int>)(lpVtbl[17]))((IDWriteFont2*)Unsafe.AsPointer(ref this), fontFace);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont2::IsColorFont"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public Bool32 IsColorFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont2*, Bool32>)(lpVtbl[18]))((IDWriteFont2*)Unsafe.AsPointer(ref this));
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace2"]/*' />
/// <unmanaged>IDWriteFontFace2</unmanaged>
[Guid("d8b768ff-64bc-4e66-982b-ec8e87f693f7")]
[NativeTypeName("struct IDWriteFontFace2 : IDWriteFontFace1")]
[NativeInheritance("IDWriteFontFace1")]
public unsafe partial struct IDWriteFontFace2
{
	public static ref readonly Guid IID_IDWriteFontFace2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFF, 0x68, 0xB7, 0xD8,
				0xBC, 0x64,
				0x66, 0x4E,
				0x98,
				0x2B,
				0xEC,
				0x8E,
				0x87,
				0xF6,
				0x93,
				0xF7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFace2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void GetMetrics(FontMetrics1* fontMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, FontMetrics1*, void>)(lpVtbl[3]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), fontMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetGdiCompatibleMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, Matrix* transform, FontMetrics1* fontMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, float, float, Matrix*, FontMetrics1*, int>)(lpVtbl[4]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, fontMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetCaretMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void GetCaretMetrics(CaretMetrics* caretMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, CaretMetrics*, void>)(lpVtbl[5]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), caretMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetUnicodeRanges" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetUnicodeRanges(uint maxRangeCount, UnicodeRange* unicodeRanges, uint* actualRangeCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, uint, UnicodeRange*, uint*, int>)(lpVtbl[6]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), maxRangeCount, unicodeRanges, actualRangeCount);
	}

	/// <inheritdoc cref="IDWriteFontFace1.IsMonospacedFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public Bool32 IsMonospacedFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, Bool32>)(lpVtbl[7]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetDesignGlyphAdvances" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetDesignGlyphAdvances(uint glyphCount, ushort* glyphIndices, int* glyphAdvances, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, uint, ushort*, int*, Bool32, int>)(lpVtbl[8]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), glyphCount, glyphIndices, glyphAdvances, isSideways);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetGdiCompatibleGlyphAdvances" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetGdiCompatibleGlyphAdvances(float emSize, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, Bool32 isSideways, uint glyphCount, ushort* glyphIndices, int* glyphAdvances)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, float, float, Matrix*, Bool32, Bool32, uint, ushort*, int*, int>)(lpVtbl[9]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, useGdiNatural, isSideways, glyphCount, glyphIndices, glyphAdvances);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetKerningPairAdjustments" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetKerningPairAdjustments(uint glyphCount, ushort* glyphIndices, int* glyphAdvanceAdjustments)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, uint, ushort*, int*, int>)(lpVtbl[10]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), glyphCount, glyphIndices, glyphAdvanceAdjustments);
	}

	/// <inheritdoc cref="IDWriteFontFace1.HasKerningPairs" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public Bool32 HasKerningPairs()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, Bool32>)(lpVtbl[11]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Matrix* transform, Bool32 isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, RenderingMode* renderingMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, float, float, float, Matrix*, Bool32, OutlineThreshold, MeasuringMode, RenderingMode*, int>)(lpVtbl[12]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingMode);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetVerticalGlyphVariants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetVerticalGlyphVariants(uint glyphCount, ushort* nominalGlyphIndices, ushort* verticalGlyphIndices)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, uint, ushort*, ushort*, int>)(lpVtbl[13]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), glyphCount, nominalGlyphIndices, verticalGlyphIndices);
	}

	/// <inheritdoc cref="IDWriteFontFace1.HasVerticalGlyphVariants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public Bool32 HasVerticalGlyphVariants()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, Bool32>)(lpVtbl[14]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public new Graphics.DirectWrite.FontFaceType GetType()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, Graphics.DirectWrite.FontFaceType>)(lpVtbl[15]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetFiles" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult GetFiles(uint* numberOfFiles, IDWriteFontFile** fontFiles)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, uint*, IDWriteFontFile**, int>)(lpVtbl[16]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), numberOfFiles, fontFiles);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetIndex" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public uint GetIndex()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, uint>)(lpVtbl[17]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetSimulations" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public Graphics.DirectWrite.FontSimulations GetSimulations()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, Graphics.DirectWrite.FontSimulations>)(lpVtbl[18]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.IsSymbolFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public Bool32 IsSymbolFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, Bool32>)(lpVtbl[19]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public void GetMetrics(FontMetrics* fontFaceMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, FontMetrics*, void>)(lpVtbl[20]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), fontFaceMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public ushort GetGlyphCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, ushort>)(lpVtbl[21]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetDesignGlyphMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult GetDesignGlyphMetrics(ushort* glyphIndices, uint glyphCount, GlyphMetrics* glyphMetrics, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, ushort*, uint, GlyphMetrics*, Bool32, int>)(lpVtbl[22]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), glyphIndices, glyphCount, glyphMetrics, isSideways);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphIndices" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult GetGlyphIndices(uint* codePoints, uint codePointCount, ushort* glyphIndices)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, uint*, uint, ushort*, int>)(lpVtbl[23]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), codePoints, codePointCount, glyphIndices);
	}

	/// <inheritdoc cref="IDWriteFontFace.TryGetFontTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult TryGetFontTable(uint openTypeTableTag, void** tableData, uint* tableSize, void** tableContext, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, uint, void**, uint*, void**, Bool32*, int>)(lpVtbl[24]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), openTypeTableTag, tableData, tableSize, tableContext, exists);
	}

	/// <inheritdoc cref="IDWriteFontFace.ReleaseFontTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public void ReleaseFontTable(void* tableContext)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, void*, void>)(lpVtbl[25]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), tableContext);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphRunOutline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult GetGlyphRunOutline(float emSize, ushort* glyphIndices, float* glyphAdvances, GlyphOffset* glyphOffsets, uint glyphCount, Bool32 isSideways, Bool32 isRightToLeft, Graphics.Direct2D.Common.ID2D1SimplifiedGeometrySink* geometrySink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, float, ushort*, float*, GlyphOffset*, uint, Bool32, Bool32, Graphics.Direct2D.Common.ID2D1SimplifiedGeometrySink*, int>)(lpVtbl[26]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult GetRecommendedRenderingMode(float emSize, float pixelsPerDip, MeasuringMode measuringMode, IDWriteRenderingParams* renderingParams, RenderingMode* renderingMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, float, float, MeasuringMode, IDWriteRenderingParams*, RenderingMode*, int>)(lpVtbl[27]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGdiCompatibleMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, Matrix* transform, FontMetrics* fontFaceMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, float, float, Matrix*, FontMetrics*, int>)(lpVtbl[28]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, fontFaceMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGdiCompatibleGlyphMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult GetGdiCompatibleGlyphMetrics(float emSize, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, ushort* glyphIndices, uint glyphCount, GlyphMetrics* glyphMetrics, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, float, float, Matrix*, Bool32, ushort*, uint, GlyphMetrics*, Bool32, int>)(lpVtbl[29]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace2::IsColorFont"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public Bool32 IsColorFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, Bool32>)(lpVtbl[30]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace2::GetColorPaletteCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public uint GetColorPaletteCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, uint>)(lpVtbl[31]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace2::GetPaletteEntryCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public uint GetPaletteEntryCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, uint>)(lpVtbl[32]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace2::GetPaletteEntries"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult GetPaletteEntries(uint colorPaletteIndex, uint firstEntryIndex, uint entryCount, ColorF* paletteEntries)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, uint, uint, uint, ColorF*, int>)(lpVtbl[33]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), colorPaletteIndex, firstEntryIndex, entryCount, paletteEntries);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace2::GetRecommendedRenderingMode"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Matrix* transform, Bool32 isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, IDWriteRenderingParams* renderingParams, RenderingMode* renderingMode, GridFitMode* gridFitMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace2*, float, float, float, Matrix*, Bool32, OutlineThreshold, MeasuringMode, IDWriteRenderingParams*, RenderingMode*, GridFitMode*, int>)(lpVtbl[34]))((IDWriteFontFace2*)Unsafe.AsPointer(ref this), fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteColorGlyphRunEnumerator"]/*' />
/// <unmanaged>IDWriteColorGlyphRunEnumerator</unmanaged>
[Guid("d31fbe17-f157-41a2-8d24-cb779e0560e8")]
[NativeTypeName("struct IDWriteColorGlyphRunEnumerator : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteColorGlyphRunEnumerator
{
	public static ref readonly Guid IID_IDWriteColorGlyphRunEnumerator
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x17, 0xBE, 0x1F, 0xD3,
				0x57, 0xF1,
				0xA2, 0x41,
				0x8D,
				0x24,
				0xCB,
				0x77,
				0x9E,
				0x05,
				0x60,
				0xE8
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteColorGlyphRunEnumerator));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteColorGlyphRunEnumerator::MoveNext"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult MoveNext(Bool32* hasRun)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteColorGlyphRunEnumerator*, Bool32*, int>)(lpVtbl[3]))((IDWriteColorGlyphRunEnumerator*)Unsafe.AsPointer(ref this), hasRun);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteColorGlyphRunEnumerator::GetCurrentRun"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetCurrentRun(ColorGlyphRun** colorGlyphRun)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteColorGlyphRunEnumerator*, ColorGlyphRun**, int>)(lpVtbl[4]))((IDWriteColorGlyphRunEnumerator*)Unsafe.AsPointer(ref this), colorGlyphRun);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRenderingParams2"]/*' />
/// <unmanaged>IDWriteRenderingParams2</unmanaged>
[Guid("f9d711c3-9777-40ae-87e8-3e5af9bf0948")]
[NativeTypeName("struct IDWriteRenderingParams2 : IDWriteRenderingParams1")]
[NativeInheritance("IDWriteRenderingParams1")]
public unsafe partial struct IDWriteRenderingParams2
{
	public static ref readonly Guid IID_IDWriteRenderingParams2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC3, 0x11, 0xD7, 0xF9,
				0x77, 0x97,
				0xAE, 0x40,
				0x87,
				0xE8,
				0x3E,
				0x5A,
				0xF9,
				0xBF,
				0x09,
				0x48
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteRenderingParams2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams1.GetGrayscaleEnhancedContrast" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public float GetGrayscaleEnhancedContrast()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams2*, float>)(lpVtbl[3]))((IDWriteRenderingParams2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams.GetGamma" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public float GetGamma()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams2*, float>)(lpVtbl[4]))((IDWriteRenderingParams2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams.GetEnhancedContrast" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public float GetEnhancedContrast()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams2*, float>)(lpVtbl[5]))((IDWriteRenderingParams2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams.GetClearTypeLevel" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public float GetClearTypeLevel()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams2*, float>)(lpVtbl[6]))((IDWriteRenderingParams2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams.GetPixelGeometry" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public Graphics.DirectWrite.PixelGeometry GetPixelGeometry()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams2*, Graphics.DirectWrite.PixelGeometry>)(lpVtbl[7]))((IDWriteRenderingParams2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams.GetRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public Graphics.DirectWrite.RenderingMode GetRenderingMode()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams2*, Graphics.DirectWrite.RenderingMode>)(lpVtbl[8]))((IDWriteRenderingParams2*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRenderingParams2::GetGridFitMode"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public Graphics.DirectWrite.GridFitMode GetGridFitMode()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams2*, Graphics.DirectWrite.GridFitMode>)(lpVtbl[9]))((IDWriteRenderingParams2*)Unsafe.AsPointer(ref this));
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory2"]/*' />
/// <unmanaged>IDWriteFactory2</unmanaged>
[Guid("0439fc60-ca44-4994-8dee-3a9af7b732ec")]
[NativeTypeName("struct IDWriteFactory2 : IDWriteFactory1")]
[NativeInheritance("IDWriteFactory1")]
public unsafe partial struct IDWriteFactory2
{
	public static ref readonly Guid IID_IDWriteFactory2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x60, 0xFC, 0x39, 0x04,
				0x44, 0xCA,
				0x94, 0x49,
				0x8D,
				0xEE,
				0x3A,
				0x9A,
				0xF7,
				0xB7,
				0x32,
				0xEC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFactory2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFactory1.GetEudcFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetEudcFontCollection(IDWriteFontCollection** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, IDWriteFontCollection**, Bool32, int>)(lpVtbl[3]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory1.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float enhancedContrastGrayscale, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, IDWriteRenderingParams1** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, float, float, float, float, PixelGeometry, RenderingMode, IDWriteRenderingParams1**, int>)(lpVtbl[4]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.GetSystemFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetSystemFontCollection(IDWriteFontCollection** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, IDWriteFontCollection**, Bool32, int>)(lpVtbl[5]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CreateCustomFontCollection(IDWriteFontCollectionLoader* collectionLoader, void* collectionKey, uint collectionKeySize, IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, IDWriteFontCollectionLoader*, void*, uint, IDWriteFontCollection**, int>)(lpVtbl[6]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), collectionLoader, collectionKey, collectionKeySize, fontCollection);
	}

	/// <inheritdoc cref="IDWriteFactory.RegisterFontCollectionLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult RegisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, IDWriteFontCollectionLoader*, int>)(lpVtbl[7]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), fontCollectionLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.UnregisterFontCollectionLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult UnregisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, IDWriteFontCollectionLoader*, int>)(lpVtbl[8]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), fontCollectionLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateFontFileReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CreateFontFileReference(ushort* filePath, ulong* lastWriteTime, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, ushort*, ulong*, IDWriteFontFile**, int>)(lpVtbl[9]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), filePath, lastWriteTime, fontFile);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomFontFileReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult CreateCustomFontFileReference(void* fontFileReferenceKey, uint fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, void*, uint, IDWriteFontFileLoader*, IDWriteFontFile**, int>)(lpVtbl[10]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CreateFontFace(FontFaceType fontFaceType, uint numberOfFiles, IDWriteFontFile** fontFiles, uint faceIndex, FontSimulations fontFaceSimulationFlags, IDWriteFontFace** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, FontFaceType, uint, IDWriteFontFile**, uint, FontSimulations, IDWriteFontFace**, int>)(lpVtbl[11]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CreateRenderingParams(IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, IDWriteRenderingParams**, int>)(lpVtbl[12]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateMonitorRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult CreateMonitorRenderingParams(IntPtr monitor, IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, IntPtr, IDWriteRenderingParams**, int>)(lpVtbl[13]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), monitor, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, float, float, float, PixelGeometry, RenderingMode, IDWriteRenderingParams**, int>)(lpVtbl[14]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.RegisterFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult RegisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, IDWriteFontFileLoader*, int>)(lpVtbl[15]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.UnregisterFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult UnregisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, IDWriteFontFileLoader*, int>)(lpVtbl[16]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult CreateTextFormat(ushort* fontFamilyName, IDWriteFontCollection* fontCollection, FontWeight fontWeight, FontStyle fontStyle, FontStretch fontStretch, float fontSize, ushort* localeName, IDWriteTextFormat** textFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, ushort*, IDWriteFontCollection*, FontWeight, FontStyle, FontStretch, float, ushort*, IDWriteTextFormat**, int>)(lpVtbl[17]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTypography" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult CreateTypography(IDWriteTypography** typography)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, IDWriteTypography**, int>)(lpVtbl[18]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), typography);
	}

	/// <inheritdoc cref="IDWriteFactory.GetGdiInterop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetGdiInterop(IDWriteGdiInterop** gdiInterop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, IDWriteGdiInterop**, int>)(lpVtbl[19]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), gdiInterop);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextLayout" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult CreateTextLayout(ushort* @string, uint stringLength, IDWriteTextFormat* textFormat, float maxWidth, float maxHeight, IDWriteTextLayout** textLayout)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, ushort*, uint, IDWriteTextFormat*, float, float, IDWriteTextLayout**, int>)(lpVtbl[20]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), @string, stringLength, textFormat, maxWidth, maxHeight, textLayout);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateGdiCompatibleTextLayout" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult CreateGdiCompatibleTextLayout(ushort* @string, uint stringLength, IDWriteTextFormat* textFormat, float layoutWidth, float layoutHeight, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, IDWriteTextLayout** textLayout)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, ushort*, uint, IDWriteTextFormat*, float, float, float, Matrix*, Bool32, IDWriteTextLayout**, int>)(lpVtbl[21]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), @string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateEllipsisTrimmingSign" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult CreateEllipsisTrimmingSign(IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, IDWriteTextFormat*, IDWriteInlineObject**, int>)(lpVtbl[22]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), textFormat, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextAnalyzer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult CreateTextAnalyzer(IDWriteTextAnalyzer** textAnalyzer)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, IDWriteTextAnalyzer**, int>)(lpVtbl[23]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), textAnalyzer);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateNumberSubstitution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult CreateNumberSubstitution(NumberSubstitutionMethod substitutionMethod, ushort* localeName, Bool32 ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, NumberSubstitutionMethod, ushort*, Bool32, IDWriteNumberSubstitution**, int>)(lpVtbl[24]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), substitutionMethod, localeName, ignoreUserOverride, numberSubstitution);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateGlyphRunAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, float pixelsPerDip, Matrix* transform, RenderingMode renderingMode, MeasuringMode measuringMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, GlyphRun*, float, Matrix*, RenderingMode, MeasuringMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[25]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory2::GetSystemFontFallback"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult GetSystemFontFallback(IDWriteFontFallback** fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, IDWriteFontFallback**, int>)(lpVtbl[26]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory2::CreateFontFallbackBuilder"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult CreateFontFallbackBuilder(IDWriteFontFallbackBuilder** fontFallbackBuilder)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, IDWriteFontFallbackBuilder**, int>)(lpVtbl[27]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), fontFallbackBuilder);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory2::TranslateColorGlyphRun"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult TranslateColorGlyphRun(float baselineOriginX, float baselineOriginY, GlyphRun* glyphRun, GlyphRunDescription* glyphRunDescription, MeasuringMode measuringMode, Matrix* worldToDeviceTransform, uint colorPaletteIndex, IDWriteColorGlyphRunEnumerator** colorLayers)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, float, float, GlyphRun*, GlyphRunDescription*, MeasuringMode, Matrix*, uint, IDWriteColorGlyphRunEnumerator**, int>)(lpVtbl[28]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), baselineOriginX, baselineOriginY, glyphRun, glyphRunDescription, measuringMode, worldToDeviceTransform, colorPaletteIndex, colorLayers);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory2::CreateCustomRenderingParams"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, GridFitMode gridFitMode, IDWriteRenderingParams2** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, float, float, float, float, PixelGeometry, RenderingMode, GridFitMode, IDWriteRenderingParams2**, int>)(lpVtbl[29]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory2::CreateGlyphRunAnalysis"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, Matrix* transform, RenderingMode renderingMode, MeasuringMode measuringMode, GridFitMode gridFitMode, TextAntialiasMode antialiasMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory2*, GlyphRun*, Matrix*, RenderingMode, MeasuringMode, GridFitMode, TextAntialiasMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[30]))((IDWriteFactory2*)Unsafe.AsPointer(ref this), glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRenderingParams3"]/*' />
/// <unmanaged>IDWriteRenderingParams3</unmanaged>
[Guid("b7924baa-391b-412a-8c5c-e44cc2d867dc")]
[NativeTypeName("struct IDWriteRenderingParams3 : IDWriteRenderingParams2")]
[NativeInheritance("IDWriteRenderingParams2")]
public unsafe partial struct IDWriteRenderingParams3
{
	public static ref readonly Guid IID_IDWriteRenderingParams3
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xAA, 0x4B, 0x92, 0xB7,
				0x1B, 0x39,
				0x2A, 0x41,
				0x8C,
				0x5C,
				0xE4,
				0x4C,
				0xC2,
				0xD8,
				0x67,
				0xDC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteRenderingParams3));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams2.GetGridFitMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public Graphics.DirectWrite.GridFitMode GetGridFitMode()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams3*, Graphics.DirectWrite.GridFitMode>)(lpVtbl[3]))((IDWriteRenderingParams3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams1.GetGrayscaleEnhancedContrast" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public float GetGrayscaleEnhancedContrast()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams3*, float>)(lpVtbl[4]))((IDWriteRenderingParams3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams.GetGamma" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public float GetGamma()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams3*, float>)(lpVtbl[5]))((IDWriteRenderingParams3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams.GetEnhancedContrast" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public float GetEnhancedContrast()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams3*, float>)(lpVtbl[6]))((IDWriteRenderingParams3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams.GetClearTypeLevel" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public float GetClearTypeLevel()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams3*, float>)(lpVtbl[7]))((IDWriteRenderingParams3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams.GetPixelGeometry" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public Graphics.DirectWrite.PixelGeometry GetPixelGeometry()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams3*, Graphics.DirectWrite.PixelGeometry>)(lpVtbl[8]))((IDWriteRenderingParams3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteRenderingParams.GetRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public Graphics.DirectWrite.RenderingMode GetRenderingMode()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams3*, Graphics.DirectWrite.RenderingMode>)(lpVtbl[9]))((IDWriteRenderingParams3*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRenderingParams3::GetRenderingMode1"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public Graphics.DirectWrite.RenderingMode1 GetRenderingMode1()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRenderingParams3*, Graphics.DirectWrite.RenderingMode1>)(lpVtbl[10]))((IDWriteRenderingParams3*)Unsafe.AsPointer(ref this));
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory3"]/*' />
/// <unmanaged>IDWriteFactory3</unmanaged>
[Guid("9a1b41c3-d3bb-466a-87fc-fe67556a3b65")]
[NativeTypeName("struct IDWriteFactory3 : IDWriteFactory2")]
[NativeInheritance("IDWriteFactory2")]
public unsafe partial struct IDWriteFactory3
{
	public static ref readonly Guid IID_IDWriteFactory3
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC3, 0x41, 0x1B, 0x9A,
				0xBB, 0xD3,
				0x6A, 0x46,
				0x87,
				0xFC,
				0xFE,
				0x67,
				0x55,
				0x6A,
				0x3B,
				0x65
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFactory3));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFactory2.GetSystemFontFallback" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetSystemFontFallback(IDWriteFontFallback** fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteFontFallback**, int>)(lpVtbl[3]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <inheritdoc cref="IDWriteFactory2.CreateFontFallbackBuilder" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateFontFallbackBuilder(IDWriteFontFallbackBuilder** fontFallbackBuilder)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteFontFallbackBuilder**, int>)(lpVtbl[4]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), fontFallbackBuilder);
	}

	/// <inheritdoc cref="IDWriteFactory2.TranslateColorGlyphRun" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult TranslateColorGlyphRun(float baselineOriginX, float baselineOriginY, GlyphRun* glyphRun, GlyphRunDescription* glyphRunDescription, MeasuringMode measuringMode, Matrix* worldToDeviceTransform, uint colorPaletteIndex, IDWriteColorGlyphRunEnumerator** colorLayers)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, float, float, GlyphRun*, GlyphRunDescription*, MeasuringMode, Matrix*, uint, IDWriteColorGlyphRunEnumerator**, int>)(lpVtbl[5]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), baselineOriginX, baselineOriginY, glyphRun, glyphRunDescription, measuringMode, worldToDeviceTransform, colorPaletteIndex, colorLayers);
	}

	/// <inheritdoc cref="IDWriteFactory2.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, GridFitMode gridFitMode, IDWriteRenderingParams2** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, float, float, float, float, PixelGeometry, RenderingMode, GridFitMode, IDWriteRenderingParams2**, int>)(lpVtbl[6]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory2.CreateGlyphRunAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, Matrix* transform, RenderingMode renderingMode, MeasuringMode measuringMode, GridFitMode gridFitMode, TextAntialiasMode antialiasMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, GlyphRun*, Matrix*, RenderingMode, MeasuringMode, GridFitMode, TextAntialiasMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[7]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <inheritdoc cref="IDWriteFactory1.GetEudcFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetEudcFontCollection(IDWriteFontCollection** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteFontCollection**, Bool32, int>)(lpVtbl[8]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory1.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float enhancedContrastGrayscale, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, IDWriteRenderingParams1** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, float, float, float, float, PixelGeometry, RenderingMode, IDWriteRenderingParams1**, int>)(lpVtbl[9]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.GetSystemFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetSystemFontCollection(IDWriteFontCollection** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteFontCollection**, Bool32, int>)(lpVtbl[10]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CreateCustomFontCollection(IDWriteFontCollectionLoader* collectionLoader, void* collectionKey, uint collectionKeySize, IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteFontCollectionLoader*, void*, uint, IDWriteFontCollection**, int>)(lpVtbl[11]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), collectionLoader, collectionKey, collectionKeySize, fontCollection);
	}

	/// <inheritdoc cref="IDWriteFactory.RegisterFontCollectionLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult RegisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteFontCollectionLoader*, int>)(lpVtbl[12]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), fontCollectionLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.UnregisterFontCollectionLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult UnregisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteFontCollectionLoader*, int>)(lpVtbl[13]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), fontCollectionLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateFontFileReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult CreateFontFileReference(ushort* filePath, ulong* lastWriteTime, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, ushort*, ulong*, IDWriteFontFile**, int>)(lpVtbl[14]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), filePath, lastWriteTime, fontFile);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomFontFileReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult CreateCustomFontFileReference(void* fontFileReferenceKey, uint fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, void*, uint, IDWriteFontFileLoader*, IDWriteFontFile**, int>)(lpVtbl[15]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult CreateFontFace(FontFaceType fontFaceType, uint numberOfFiles, IDWriteFontFile** fontFiles, uint faceIndex, FontSimulations fontFaceSimulationFlags, IDWriteFontFace** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, FontFaceType, uint, IDWriteFontFile**, uint, FontSimulations, IDWriteFontFace**, int>)(lpVtbl[16]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult CreateRenderingParams(IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteRenderingParams**, int>)(lpVtbl[17]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateMonitorRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult CreateMonitorRenderingParams(IntPtr monitor, IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IntPtr, IDWriteRenderingParams**, int>)(lpVtbl[18]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), monitor, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, float, float, float, PixelGeometry, RenderingMode, IDWriteRenderingParams**, int>)(lpVtbl[19]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.RegisterFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult RegisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteFontFileLoader*, int>)(lpVtbl[20]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.UnregisterFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult UnregisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteFontFileLoader*, int>)(lpVtbl[21]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult CreateTextFormat(ushort* fontFamilyName, IDWriteFontCollection* fontCollection, FontWeight fontWeight, FontStyle fontStyle, FontStretch fontStretch, float fontSize, ushort* localeName, IDWriteTextFormat** textFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, ushort*, IDWriteFontCollection*, FontWeight, FontStyle, FontStretch, float, ushort*, IDWriteTextFormat**, int>)(lpVtbl[22]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTypography" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult CreateTypography(IDWriteTypography** typography)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteTypography**, int>)(lpVtbl[23]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), typography);
	}

	/// <inheritdoc cref="IDWriteFactory.GetGdiInterop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult GetGdiInterop(IDWriteGdiInterop** gdiInterop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteGdiInterop**, int>)(lpVtbl[24]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), gdiInterop);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextLayout" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult CreateTextLayout(ushort* @string, uint stringLength, IDWriteTextFormat* textFormat, float maxWidth, float maxHeight, IDWriteTextLayout** textLayout)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, ushort*, uint, IDWriteTextFormat*, float, float, IDWriteTextLayout**, int>)(lpVtbl[25]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), @string, stringLength, textFormat, maxWidth, maxHeight, textLayout);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateGdiCompatibleTextLayout" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult CreateGdiCompatibleTextLayout(ushort* @string, uint stringLength, IDWriteTextFormat* textFormat, float layoutWidth, float layoutHeight, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, IDWriteTextLayout** textLayout)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, ushort*, uint, IDWriteTextFormat*, float, float, float, Matrix*, Bool32, IDWriteTextLayout**, int>)(lpVtbl[26]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), @string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateEllipsisTrimmingSign" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult CreateEllipsisTrimmingSign(IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteTextFormat*, IDWriteInlineObject**, int>)(lpVtbl[27]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), textFormat, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextAnalyzer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult CreateTextAnalyzer(IDWriteTextAnalyzer** textAnalyzer)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteTextAnalyzer**, int>)(lpVtbl[28]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), textAnalyzer);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateNumberSubstitution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult CreateNumberSubstitution(NumberSubstitutionMethod substitutionMethod, ushort* localeName, Bool32 ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, NumberSubstitutionMethod, ushort*, Bool32, IDWriteNumberSubstitution**, int>)(lpVtbl[29]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), substitutionMethod, localeName, ignoreUserOverride, numberSubstitution);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateGlyphRunAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, float pixelsPerDip, Matrix* transform, RenderingMode renderingMode, MeasuringMode measuringMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, GlyphRun*, float, Matrix*, RenderingMode, MeasuringMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[30]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory3::CreateGlyphRunAnalysis"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, Matrix* transform, RenderingMode1 renderingMode, MeasuringMode measuringMode, GridFitMode gridFitMode, TextAntialiasMode antialiasMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, GlyphRun*, Matrix*, RenderingMode1, MeasuringMode, GridFitMode, TextAntialiasMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[31]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory3::CreateCustomRenderingParams"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode1 renderingMode, GridFitMode gridFitMode, IDWriteRenderingParams3** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, float, float, float, float, PixelGeometry, RenderingMode1, GridFitMode, IDWriteRenderingParams3**, int>)(lpVtbl[32]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory3::CreateFontFaceReference"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult CreateFontFaceReference(IDWriteFontFile* fontFile, uint faceIndex, FontSimulations fontSimulations, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteFontFile*, uint, FontSimulations, IDWriteFontFaceReference**, int>)(lpVtbl[33]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), fontFile, faceIndex, fontSimulations, fontFaceReference);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory3::CreateFontFaceReference"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult CreateFontFaceReference(ushort* filePath, ulong* lastWriteTime, uint faceIndex, FontSimulations fontSimulations, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, ushort*, ulong*, uint, FontSimulations, IDWriteFontFaceReference**, int>)(lpVtbl[34]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), filePath, lastWriteTime, faceIndex, fontSimulations, fontFaceReference);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory3::GetSystemFontSet"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult GetSystemFontSet(IDWriteFontSet** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteFontSet**, int>)(lpVtbl[35]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), fontSet);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory3::CreateFontSetBuilder"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult CreateFontSetBuilder(IDWriteFontSetBuilder** fontSetBuilder)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteFontSetBuilder**, int>)(lpVtbl[36]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), fontSetBuilder);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory3::CreateFontCollectionFromFontSet"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult CreateFontCollectionFromFontSet(IDWriteFontSet* fontSet, IDWriteFontCollection1** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteFontSet*, IDWriteFontCollection1**, int>)(lpVtbl[37]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), fontSet, fontCollection);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory3::GetSystemFontCollection"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult GetSystemFontCollection(Bool32 includeDownloadableFonts, IDWriteFontCollection1** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, Bool32, IDWriteFontCollection1**, Bool32, int>)(lpVtbl[38]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), includeDownloadableFonts, fontCollection, checkForUpdates);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory3::GetFontDownloadQueue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult GetFontDownloadQueue(IDWriteFontDownloadQueue** fontDownloadQueue)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory3*, IDWriteFontDownloadQueue**, int>)(lpVtbl[39]))((IDWriteFactory3*)Unsafe.AsPointer(ref this), fontDownloadQueue);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet"]/*' />
/// <unmanaged>IDWriteFontSet</unmanaged>
[Guid("53585141-d9f8-4095-8321-d73cf6bd116b")]
[NativeTypeName("struct IDWriteFontSet : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFontSet
{
	public static ref readonly Guid IID_IDWriteFontSet
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x41, 0x51, 0x58, 0x53,
				0xF8, 0xD9,
				0x95, 0x40,
				0x83,
				0x21,
				0xD7,
				0x3C,
				0xF6,
				0xBD,
				0x11,
				0x6B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontSet));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet::GetFontCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public uint GetFontCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet*, uint>)(lpVtbl[3]))((IDWriteFontSet*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet::GetFontFaceReference"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetFontFaceReference(uint listIndex, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet*, uint, IDWriteFontFaceReference**, int>)(lpVtbl[4]))((IDWriteFontSet*)Unsafe.AsPointer(ref this), listIndex, fontFaceReference);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet::FindFontFaceReference"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult FindFontFaceReference(IDWriteFontFaceReference* fontFaceReference, uint* listIndex, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet*, IDWriteFontFaceReference*, uint*, Bool32*, int>)(lpVtbl[5]))((IDWriteFontSet*)Unsafe.AsPointer(ref this), fontFaceReference, listIndex, exists);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet::FindFontFace"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult FindFontFace(IDWriteFontFace* fontFace, uint* listIndex, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet*, IDWriteFontFace*, uint*, Bool32*, int>)(lpVtbl[6]))((IDWriteFontSet*)Unsafe.AsPointer(ref this), fontFace, listIndex, exists);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet::GetPropertyValues"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetPropertyValues(FontPropertyId propertyID, IDWriteStringList** values)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet*, FontPropertyId, IDWriteStringList**, int>)(lpVtbl[7]))((IDWriteFontSet*)Unsafe.AsPointer(ref this), propertyID, values);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet::GetPropertyValues"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetPropertyValues(FontPropertyId propertyID, ushort* preferredLocaleNames, IDWriteStringList** values)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet*, FontPropertyId, ushort*, IDWriteStringList**, int>)(lpVtbl[8]))((IDWriteFontSet*)Unsafe.AsPointer(ref this), propertyID, preferredLocaleNames, values);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet::GetPropertyValues"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetPropertyValues(uint listIndex, FontPropertyId propertyId, Bool32* exists, IDWriteLocalizedStrings** values)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet*, uint, FontPropertyId, Bool32*, IDWriteLocalizedStrings**, int>)(lpVtbl[9]))((IDWriteFontSet*)Unsafe.AsPointer(ref this), listIndex, propertyId, exists, values);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet::GetPropertyOccurrenceCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetPropertyOccurrenceCount(FontProperty* property, uint* propertyOccurrenceCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet*, FontProperty*, uint*, int>)(lpVtbl[10]))((IDWriteFontSet*)Unsafe.AsPointer(ref this), property, propertyOccurrenceCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet::GetMatchingFonts"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetMatchingFonts(ushort* familyName, FontWeight fontWeight, FontStretch fontStretch, FontStyle fontStyle, IDWriteFontSet** filteredSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet*, ushort*, FontWeight, FontStretch, FontStyle, IDWriteFontSet**, int>)(lpVtbl[11]))((IDWriteFontSet*)Unsafe.AsPointer(ref this), familyName, fontWeight, fontStretch, fontStyle, filteredSet);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet::GetMatchingFonts"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetMatchingFonts(FontProperty* properties, uint propertyCount, IDWriteFontSet** filteredSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet*, FontProperty*, uint, IDWriteFontSet**, int>)(lpVtbl[12]))((IDWriteFontSet*)Unsafe.AsPointer(ref this), properties, propertyCount, filteredSet);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSetBuilder"]/*' />
/// <unmanaged>IDWriteFontSetBuilder</unmanaged>
[Guid("2f642afe-9c68-4f40-b8be-457401afcb3d")]
[NativeTypeName("struct IDWriteFontSetBuilder : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFontSetBuilder
{
	public static ref readonly Guid IID_IDWriteFontSetBuilder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFE, 0x2A, 0x64, 0x2F,
				0x68, 0x9C,
				0x40, 0x4F,
				0xB8,
				0xBE,
				0x45,
				0x74,
				0x01,
				0xAF,
				0xCB,
				0x3D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontSetBuilder));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSetBuilder::AddFontFaceReference"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult AddFontFaceReference(IDWriteFontFaceReference* fontFaceReference, FontProperty* properties, uint propertyCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSetBuilder*, IDWriteFontFaceReference*, FontProperty*, uint, int>)(lpVtbl[3]))((IDWriteFontSetBuilder*)Unsafe.AsPointer(ref this), fontFaceReference, properties, propertyCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSetBuilder::AddFontFaceReference"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult AddFontFaceReference(IDWriteFontFaceReference* fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSetBuilder*, IDWriteFontFaceReference*, int>)(lpVtbl[4]))((IDWriteFontSetBuilder*)Unsafe.AsPointer(ref this), fontFaceReference);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSetBuilder::AddFontSet"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult AddFontSet(IDWriteFontSet* fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSetBuilder*, IDWriteFontSet*, int>)(lpVtbl[5]))((IDWriteFontSetBuilder*)Unsafe.AsPointer(ref this), fontSet);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSetBuilder::CreateFontSet"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CreateFontSet(IDWriteFontSet** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSetBuilder*, IDWriteFontSet**, int>)(lpVtbl[6]))((IDWriteFontSetBuilder*)Unsafe.AsPointer(ref this), fontSet);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollection1"]/*' />
/// <unmanaged>IDWriteFontCollection1</unmanaged>
[Guid("53585141-d9f8-4095-8321-d73cf6bd116c")]
[NativeTypeName("struct IDWriteFontCollection1 : IDWriteFontCollection")]
[NativeInheritance("IDWriteFontCollection")]
public unsafe partial struct IDWriteFontCollection1
{
	public static ref readonly Guid IID_IDWriteFontCollection1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x41, 0x51, 0x58, 0x53,
				0xF8, 0xD9,
				0x95, 0x40,
				0x83,
				0x21,
				0xD7,
				0x3C,
				0xF6,
				0xBD,
				0x11,
				0x6C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontCollection1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontCollection.GetFontFamilyCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public uint GetFontFamilyCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection1*, uint>)(lpVtbl[3]))((IDWriteFontCollection1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontCollection.GetFontFamily" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetFontFamily(uint index, IDWriteFontFamily** fontFamily)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection1*, uint, IDWriteFontFamily**, int>)(lpVtbl[4]))((IDWriteFontCollection1*)Unsafe.AsPointer(ref this), index, fontFamily);
	}

	/// <inheritdoc cref="IDWriteFontCollection.FindFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult FindFamilyName(ushort* familyName, uint* index, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection1*, ushort*, uint*, Bool32*, int>)(lpVtbl[5]))((IDWriteFontCollection1*)Unsafe.AsPointer(ref this), familyName, index, exists);
	}

	/// <inheritdoc cref="IDWriteFontCollection.GetFontFromFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetFontFromFontFace(IDWriteFontFace* fontFace, IDWriteFont** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection1*, IDWriteFontFace*, IDWriteFont**, int>)(lpVtbl[6]))((IDWriteFontCollection1*)Unsafe.AsPointer(ref this), fontFace, font);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollection1::GetFontSet"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetFontSet(IDWriteFontSet** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection1*, IDWriteFontSet**, int>)(lpVtbl[7]))((IDWriteFontCollection1*)Unsafe.AsPointer(ref this), fontSet);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollection1::GetFontFamily"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetFontFamily(uint index, IDWriteFontFamily1** fontFamily)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection1*, uint, IDWriteFontFamily1**, int>)(lpVtbl[8]))((IDWriteFontCollection1*)Unsafe.AsPointer(ref this), index, fontFamily);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFamily1"]/*' />
/// <unmanaged>IDWriteFontFamily1</unmanaged>
[Guid("da20d8ef-812a-4c43-9802-62ec4abd7adf")]
[NativeTypeName("struct IDWriteFontFamily1 : IDWriteFontFamily")]
[NativeInheritance("IDWriteFontFamily")]
public unsafe partial struct IDWriteFontFamily1
{
	public static ref readonly Guid IID_IDWriteFontFamily1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xEF, 0xD8, 0x20, 0xDA,
				0x2A, 0x81,
				0x43, 0x4C,
				0x98,
				0x02,
				0x62,
				0xEC,
				0x4A,
				0xBD,
				0x7A,
				0xDF
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFamily1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFamily.GetFamilyNames" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetFamilyNames(IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily1*, IDWriteLocalizedStrings**, int>)(lpVtbl[3]))((IDWriteFontFamily1*)Unsafe.AsPointer(ref this), names);
	}

	/// <inheritdoc cref="IDWriteFontFamily.GetFirstMatchingFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetFirstMatchingFont(FontWeight weight, FontStretch stretch, FontStyle style, IDWriteFont** matchingFont)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily1*, FontWeight, FontStretch, FontStyle, IDWriteFont**, int>)(lpVtbl[4]))((IDWriteFontFamily1*)Unsafe.AsPointer(ref this), weight, stretch, style, matchingFont);
	}

	/// <inheritdoc cref="IDWriteFontFamily.GetMatchingFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetMatchingFonts(FontWeight weight, FontStretch stretch, FontStyle style, IDWriteFontList** matchingFonts)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily1*, FontWeight, FontStretch, FontStyle, IDWriteFontList**, int>)(lpVtbl[5]))((IDWriteFontFamily1*)Unsafe.AsPointer(ref this), weight, stretch, style, matchingFonts);
	}

	/// <inheritdoc cref="IDWriteFontList.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetFontCollection(IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily1*, IDWriteFontCollection**, int>)(lpVtbl[6]))((IDWriteFontFamily1*)Unsafe.AsPointer(ref this), fontCollection);
	}

	/// <inheritdoc cref="IDWriteFontList.GetFontCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public uint GetFontCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily1*, uint>)(lpVtbl[7]))((IDWriteFontFamily1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontList.GetFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetFont(uint index, IDWriteFont** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily1*, uint, IDWriteFont**, int>)(lpVtbl[8]))((IDWriteFontFamily1*)Unsafe.AsPointer(ref this), index, font);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFamily1::GetFontLocality"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public Graphics.DirectWrite.Locality GetFontLocality(uint listIndex)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily1*, uint, Graphics.DirectWrite.Locality>)(lpVtbl[9]))((IDWriteFontFamily1*)Unsafe.AsPointer(ref this), listIndex);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFamily1::GetFont"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetFont(uint listIndex, IDWriteFont3** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily1*, uint, IDWriteFont3**, int>)(lpVtbl[10]))((IDWriteFontFamily1*)Unsafe.AsPointer(ref this), listIndex, font);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFamily1::GetFontFaceReference"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetFontFaceReference(uint listIndex, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily1*, uint, IDWriteFontFaceReference**, int>)(lpVtbl[11]))((IDWriteFontFamily1*)Unsafe.AsPointer(ref this), listIndex, fontFaceReference);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontList1"]/*' />
/// <unmanaged>IDWriteFontList1</unmanaged>
[Guid("da20d8ef-812a-4c43-9802-62ec4abd7ade")]
[NativeTypeName("struct IDWriteFontList1 : IDWriteFontList")]
[NativeInheritance("IDWriteFontList")]
public unsafe partial struct IDWriteFontList1
{
	public static ref readonly Guid IID_IDWriteFontList1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xEF, 0xD8, 0x20, 0xDA,
				0x2A, 0x81,
				0x43, 0x4C,
				0x98,
				0x02,
				0x62,
				0xEC,
				0x4A,
				0xBD,
				0x7A,
				0xDE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontList1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontList.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetFontCollection(IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontList1*, IDWriteFontCollection**, int>)(lpVtbl[3]))((IDWriteFontList1*)Unsafe.AsPointer(ref this), fontCollection);
	}

	/// <inheritdoc cref="IDWriteFontList.GetFontCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public uint GetFontCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontList1*, uint>)(lpVtbl[4]))((IDWriteFontList1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontList.GetFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetFont(uint index, IDWriteFont** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontList1*, uint, IDWriteFont**, int>)(lpVtbl[5]))((IDWriteFontList1*)Unsafe.AsPointer(ref this), index, font);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontList1::GetFontLocality"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public Graphics.DirectWrite.Locality GetFontLocality(uint listIndex)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontList1*, uint, Graphics.DirectWrite.Locality>)(lpVtbl[6]))((IDWriteFontList1*)Unsafe.AsPointer(ref this), listIndex);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontList1::GetFont"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetFont(uint listIndex, IDWriteFont3** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontList1*, uint, IDWriteFont3**, int>)(lpVtbl[7]))((IDWriteFontList1*)Unsafe.AsPointer(ref this), listIndex, font);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontList1::GetFontFaceReference"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetFontFaceReference(uint listIndex, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontList1*, uint, IDWriteFontFaceReference**, int>)(lpVtbl[8]))((IDWriteFontList1*)Unsafe.AsPointer(ref this), listIndex, fontFaceReference);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference"]/*' />
/// <unmanaged>IDWriteFontFaceReference</unmanaged>
[Guid("5e7fa7ca-dde3-424c-89f0-9fcd6fed58cd")]
[NativeTypeName("struct IDWriteFontFaceReference : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFontFaceReference
{
	public static ref readonly Guid IID_IDWriteFontFaceReference
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCA, 0xA7, 0x7F, 0x5E,
				0xE3, 0xDD,
				0x4C, 0x42,
				0x89,
				0xF0,
				0x9F,
				0xCD,
				0x6F,
				0xED,
				0x58,
				0xCD
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFaceReference));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference::CreateFontFace"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreateFontFace(IDWriteFontFace3** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference*, IDWriteFontFace3**, int>)(lpVtbl[3]))((IDWriteFontFaceReference*)Unsafe.AsPointer(ref this), fontFace);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference::CreateFontFaceWithSimulations"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateFontFaceWithSimulations(FontSimulations fontFaceSimulationFlags, IDWriteFontFace3** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference*, FontSimulations, IDWriteFontFace3**, int>)(lpVtbl[4]))((IDWriteFontFaceReference*)Unsafe.AsPointer(ref this), fontFaceSimulationFlags, fontFace);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference::Equals"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Bool32 Equals(IDWriteFontFaceReference* fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference*, IDWriteFontFaceReference*, Bool32>)(lpVtbl[5]))((IDWriteFontFaceReference*)Unsafe.AsPointer(ref this), fontFaceReference);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference::GetFontFaceIndex"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public uint GetFontFaceIndex()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference*, uint>)(lpVtbl[6]))((IDWriteFontFaceReference*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference::GetSimulations"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public Graphics.DirectWrite.FontSimulations GetSimulations()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference*, Graphics.DirectWrite.FontSimulations>)(lpVtbl[7]))((IDWriteFontFaceReference*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference::GetFontFile"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetFontFile(IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference*, IDWriteFontFile**, int>)(lpVtbl[8]))((IDWriteFontFaceReference*)Unsafe.AsPointer(ref this), fontFile);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference::GetLocalFileSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public ulong GetLocalFileSize()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference*, ulong>)(lpVtbl[9]))((IDWriteFontFaceReference*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference::GetFileSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public ulong GetFileSize()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference*, ulong>)(lpVtbl[10]))((IDWriteFontFaceReference*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference::GetFileTime"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetFileTime(ulong* lastWriteTime)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference*, ulong*, int>)(lpVtbl[11]))((IDWriteFontFaceReference*)Unsafe.AsPointer(ref this), lastWriteTime);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference::GetLocality"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public Graphics.DirectWrite.Locality GetLocality()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference*, Graphics.DirectWrite.Locality>)(lpVtbl[12]))((IDWriteFontFaceReference*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference::EnqueueFontDownloadRequest"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult EnqueueFontDownloadRequest()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference*, int>)(lpVtbl[13]))((IDWriteFontFaceReference*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference::EnqueueCharacterDownloadRequest"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult EnqueueCharacterDownloadRequest(ushort* characters, uint characterCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference*, ushort*, uint, int>)(lpVtbl[14]))((IDWriteFontFaceReference*)Unsafe.AsPointer(ref this), characters, characterCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference::EnqueueGlyphDownloadRequest"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult EnqueueGlyphDownloadRequest(ushort* glyphIndices, uint glyphCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference*, ushort*, uint, int>)(lpVtbl[15]))((IDWriteFontFaceReference*)Unsafe.AsPointer(ref this), glyphIndices, glyphCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference::EnqueueFileFragmentDownloadRequest"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult EnqueueFileFragmentDownloadRequest(ulong fileOffset, ulong fragmentSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference*, ulong, ulong, int>)(lpVtbl[16]))((IDWriteFontFaceReference*)Unsafe.AsPointer(ref this), fileOffset, fragmentSize);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont3"]/*' />
/// <unmanaged>IDWriteFont3</unmanaged>
[Guid("29748ed6-8c9c-4a6a-be0b-d912e8538944")]
[NativeTypeName("struct IDWriteFont3 : IDWriteFont2")]
[NativeInheritance("IDWriteFont2")]
public unsafe partial struct IDWriteFont3
{
	public static ref readonly Guid IID_IDWriteFont3
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xD6, 0x8E, 0x74, 0x29,
				0x9C, 0x8C,
				0x6A, 0x4A,
				0xBE,
				0x0B,
				0xD9,
				0x12,
				0xE8,
				0x53,
				0x89,
				0x44
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFont3));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont2.IsColorFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public Bool32 IsColorFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, Bool32>)(lpVtbl[3]))((IDWriteFont3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont1.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void GetMetrics(FontMetrics1* fontMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFont3*, FontMetrics1*, void>)(lpVtbl[4]))((IDWriteFont3*)Unsafe.AsPointer(ref this), fontMetrics);
	}

	/// <inheritdoc cref="IDWriteFont1.GetPanose" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void GetPanose(Panose* panose)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFont3*, Panose*, void>)(lpVtbl[5]))((IDWriteFont3*)Unsafe.AsPointer(ref this), panose);
	}

	/// <inheritdoc cref="IDWriteFont1.GetUnicodeRanges" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetUnicodeRanges(uint maxRangeCount, UnicodeRange* unicodeRanges, uint* actualRangeCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, uint, UnicodeRange*, uint*, int>)(lpVtbl[6]))((IDWriteFont3*)Unsafe.AsPointer(ref this), maxRangeCount, unicodeRanges, actualRangeCount);
	}

	/// <inheritdoc cref="IDWriteFont1.IsMonospacedFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public Bool32 IsMonospacedFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, Bool32>)(lpVtbl[7]))((IDWriteFont3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.GetFontFamily" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetFontFamily(IDWriteFontFamily** fontFamily)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, IDWriteFontFamily**, int>)(lpVtbl[8]))((IDWriteFont3*)Unsafe.AsPointer(ref this), fontFamily);
	}

	/// <inheritdoc cref="IDWriteFont.GetWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public Graphics.DirectWrite.FontWeight GetWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, Graphics.DirectWrite.FontWeight>)(lpVtbl[9]))((IDWriteFont3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.GetStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public Graphics.DirectWrite.FontStretch GetStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, Graphics.DirectWrite.FontStretch>)(lpVtbl[10]))((IDWriteFont3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.GetStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public Graphics.DirectWrite.FontStyle GetStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, Graphics.DirectWrite.FontStyle>)(lpVtbl[11]))((IDWriteFont3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.IsSymbolFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public Bool32 IsSymbolFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, Bool32>)(lpVtbl[12]))((IDWriteFont3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.GetFaceNames" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetFaceNames(IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, IDWriteLocalizedStrings**, int>)(lpVtbl[13]))((IDWriteFont3*)Unsafe.AsPointer(ref this), names);
	}

	/// <inheritdoc cref="IDWriteFont.GetInformationalStrings" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult GetInformationalStrings(InformationalStringId informationalStringID, IDWriteLocalizedStrings** informationalStrings, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, InformationalStringId, IDWriteLocalizedStrings**, Bool32*, int>)(lpVtbl[14]))((IDWriteFont3*)Unsafe.AsPointer(ref this), informationalStringID, informationalStrings, exists);
	}

	/// <inheritdoc cref="IDWriteFont.GetSimulations" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public Graphics.DirectWrite.FontSimulations GetSimulations()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, Graphics.DirectWrite.FontSimulations>)(lpVtbl[15]))((IDWriteFont3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFont.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public void GetMetrics(FontMetrics* fontMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFont3*, FontMetrics*, void>)(lpVtbl[16]))((IDWriteFont3*)Unsafe.AsPointer(ref this), fontMetrics);
	}

	/// <inheritdoc cref="IDWriteFont.HasCharacter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult HasCharacter(uint unicodeValue, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, uint, Bool32*, int>)(lpVtbl[17]))((IDWriteFont3*)Unsafe.AsPointer(ref this), unicodeValue, exists);
	}

	/// <inheritdoc cref="IDWriteFont.CreateFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult CreateFontFace(IDWriteFontFace** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, IDWriteFontFace**, int>)(lpVtbl[18]))((IDWriteFont3*)Unsafe.AsPointer(ref this), fontFace);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont3::CreateFontFace"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult CreateFontFace(IDWriteFontFace3** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, IDWriteFontFace3**, int>)(lpVtbl[19]))((IDWriteFont3*)Unsafe.AsPointer(ref this), fontFace);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont3::Equals"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public Bool32 Equals(IDWriteFont* font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, IDWriteFont*, Bool32>)(lpVtbl[20]))((IDWriteFont3*)Unsafe.AsPointer(ref this), font);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont3::GetFontFaceReference"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetFontFaceReference(IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, IDWriteFontFaceReference**, int>)(lpVtbl[21]))((IDWriteFont3*)Unsafe.AsPointer(ref this), fontFaceReference);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont3::HasCharacter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public Bool32 HasCharacter(uint unicodeValue)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, uint, Bool32>)(lpVtbl[22]))((IDWriteFont3*)Unsafe.AsPointer(ref this), unicodeValue);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFont3::GetLocality"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public Graphics.DirectWrite.Locality GetLocality()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFont3*, Graphics.DirectWrite.Locality>)(lpVtbl[23]))((IDWriteFont3*)Unsafe.AsPointer(ref this));
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace3"]/*' />
/// <unmanaged>IDWriteFontFace3</unmanaged>
[Guid("d37d7598-09be-4222-a236-2081341cc1f2")]
[NativeTypeName("struct IDWriteFontFace3 : IDWriteFontFace2")]
[NativeInheritance("IDWriteFontFace2")]
public unsafe partial struct IDWriteFontFace3
{
	public static ref readonly Guid IID_IDWriteFontFace3
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x98, 0x75, 0x7D, 0xD3,
				0xBE, 0x09,
				0x22, 0x42,
				0xA2,
				0x36,
				0x20,
				0x81,
				0x34,
				0x1C,
				0xC1,
				0xF2
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFace3));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace2.IsColorFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public Bool32 IsColorFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, Bool32>)(lpVtbl[3]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace2.GetColorPaletteCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public uint GetColorPaletteCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, uint>)(lpVtbl[4]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace2.GetPaletteEntryCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public uint GetPaletteEntryCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, uint>)(lpVtbl[5]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace2.GetPaletteEntries" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetPaletteEntries(uint colorPaletteIndex, uint firstEntryIndex, uint entryCount, ColorF* paletteEntries)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, uint, uint, uint, ColorF*, int>)(lpVtbl[6]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), colorPaletteIndex, firstEntryIndex, entryCount, paletteEntries);
	}

	/// <inheritdoc cref="IDWriteFontFace2.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Matrix* transform, Bool32 isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, IDWriteRenderingParams* renderingParams, RenderingMode* renderingMode, GridFitMode* gridFitMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, float, float, float, Matrix*, Bool32, OutlineThreshold, MeasuringMode, IDWriteRenderingParams*, RenderingMode*, GridFitMode*, int>)(lpVtbl[7]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public void GetMetrics(FontMetrics1* fontMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, FontMetrics1*, void>)(lpVtbl[8]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), fontMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetGdiCompatibleMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, Matrix* transform, FontMetrics1* fontMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, float, float, Matrix*, FontMetrics1*, int>)(lpVtbl[9]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, fontMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetCaretMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public void GetCaretMetrics(CaretMetrics* caretMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, CaretMetrics*, void>)(lpVtbl[10]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), caretMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetUnicodeRanges" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetUnicodeRanges(uint maxRangeCount, UnicodeRange* unicodeRanges, uint* actualRangeCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, uint, UnicodeRange*, uint*, int>)(lpVtbl[11]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), maxRangeCount, unicodeRanges, actualRangeCount);
	}

	/// <inheritdoc cref="IDWriteFontFace1.IsMonospacedFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public Bool32 IsMonospacedFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, Bool32>)(lpVtbl[12]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetDesignGlyphAdvances" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetDesignGlyphAdvances(uint glyphCount, ushort* glyphIndices, int* glyphAdvances, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, uint, ushort*, int*, Bool32, int>)(lpVtbl[13]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), glyphCount, glyphIndices, glyphAdvances, isSideways);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetGdiCompatibleGlyphAdvances" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult GetGdiCompatibleGlyphAdvances(float emSize, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, Bool32 isSideways, uint glyphCount, ushort* glyphIndices, int* glyphAdvances)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, float, float, Matrix*, Bool32, Bool32, uint, ushort*, int*, int>)(lpVtbl[14]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, useGdiNatural, isSideways, glyphCount, glyphIndices, glyphAdvances);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetKerningPairAdjustments" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetKerningPairAdjustments(uint glyphCount, ushort* glyphIndices, int* glyphAdvanceAdjustments)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, uint, ushort*, int*, int>)(lpVtbl[15]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), glyphCount, glyphIndices, glyphAdvanceAdjustments);
	}

	/// <inheritdoc cref="IDWriteFontFace1.HasKerningPairs" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public Bool32 HasKerningPairs()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, Bool32>)(lpVtbl[16]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Matrix* transform, Bool32 isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, RenderingMode* renderingMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, float, float, float, Matrix*, Bool32, OutlineThreshold, MeasuringMode, RenderingMode*, int>)(lpVtbl[17]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingMode);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetVerticalGlyphVariants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult GetVerticalGlyphVariants(uint glyphCount, ushort* nominalGlyphIndices, ushort* verticalGlyphIndices)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, uint, ushort*, ushort*, int>)(lpVtbl[18]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), glyphCount, nominalGlyphIndices, verticalGlyphIndices);
	}

	/// <inheritdoc cref="IDWriteFontFace1.HasVerticalGlyphVariants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public Bool32 HasVerticalGlyphVariants()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, Bool32>)(lpVtbl[19]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public new Graphics.DirectWrite.FontFaceType GetType()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, Graphics.DirectWrite.FontFaceType>)(lpVtbl[20]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetFiles" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetFiles(uint* numberOfFiles, IDWriteFontFile** fontFiles)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, uint*, IDWriteFontFile**, int>)(lpVtbl[21]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), numberOfFiles, fontFiles);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetIndex" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public uint GetIndex()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, uint>)(lpVtbl[22]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetSimulations" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public Graphics.DirectWrite.FontSimulations GetSimulations()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, Graphics.DirectWrite.FontSimulations>)(lpVtbl[23]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.IsSymbolFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public Bool32 IsSymbolFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, Bool32>)(lpVtbl[24]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public void GetMetrics(FontMetrics* fontFaceMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, FontMetrics*, void>)(lpVtbl[25]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), fontFaceMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public ushort GetGlyphCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, ushort>)(lpVtbl[26]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetDesignGlyphMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult GetDesignGlyphMetrics(ushort* glyphIndices, uint glyphCount, GlyphMetrics* glyphMetrics, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, ushort*, uint, GlyphMetrics*, Bool32, int>)(lpVtbl[27]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), glyphIndices, glyphCount, glyphMetrics, isSideways);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphIndices" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult GetGlyphIndices(uint* codePoints, uint codePointCount, ushort* glyphIndices)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, uint*, uint, ushort*, int>)(lpVtbl[28]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), codePoints, codePointCount, glyphIndices);
	}

	/// <inheritdoc cref="IDWriteFontFace.TryGetFontTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult TryGetFontTable(uint openTypeTableTag, void** tableData, uint* tableSize, void** tableContext, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, uint, void**, uint*, void**, Bool32*, int>)(lpVtbl[29]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), openTypeTableTag, tableData, tableSize, tableContext, exists);
	}

	/// <inheritdoc cref="IDWriteFontFace.ReleaseFontTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public void ReleaseFontTable(void* tableContext)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, void*, void>)(lpVtbl[30]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), tableContext);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphRunOutline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult GetGlyphRunOutline(float emSize, ushort* glyphIndices, float* glyphAdvances, GlyphOffset* glyphOffsets, uint glyphCount, Bool32 isSideways, Bool32 isRightToLeft, Graphics.Direct2D.Common.ID2D1SimplifiedGeometrySink* geometrySink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, float, ushort*, float*, GlyphOffset*, uint, Bool32, Bool32, Graphics.Direct2D.Common.ID2D1SimplifiedGeometrySink*, int>)(lpVtbl[31]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult GetRecommendedRenderingMode(float emSize, float pixelsPerDip, MeasuringMode measuringMode, IDWriteRenderingParams* renderingParams, RenderingMode* renderingMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, float, float, MeasuringMode, IDWriteRenderingParams*, RenderingMode*, int>)(lpVtbl[32]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGdiCompatibleMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, Matrix* transform, FontMetrics* fontFaceMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, float, float, Matrix*, FontMetrics*, int>)(lpVtbl[33]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, fontFaceMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGdiCompatibleGlyphMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult GetGdiCompatibleGlyphMetrics(float emSize, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, ushort* glyphIndices, uint glyphCount, GlyphMetrics* glyphMetrics, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, float, float, Matrix*, Bool32, ushort*, uint, GlyphMetrics*, Bool32, int>)(lpVtbl[34]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace3::GetFontFaceReference"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult GetFontFaceReference(IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, IDWriteFontFaceReference**, int>)(lpVtbl[35]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), fontFaceReference);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace3::GetPanose"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public void GetPanose(Panose* panose)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, Panose*, void>)(lpVtbl[36]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), panose);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace3::GetWeight"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public Graphics.DirectWrite.FontWeight GetWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, Graphics.DirectWrite.FontWeight>)(lpVtbl[37]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace3::GetStretch"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public Graphics.DirectWrite.FontStretch GetStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, Graphics.DirectWrite.FontStretch>)(lpVtbl[38]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace3::GetStyle"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public Graphics.DirectWrite.FontStyle GetStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, Graphics.DirectWrite.FontStyle>)(lpVtbl[39]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace3::GetFamilyNames"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult GetFamilyNames(IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, IDWriteLocalizedStrings**, int>)(lpVtbl[40]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), names);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace3::GetFaceNames"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult GetFaceNames(IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, IDWriteLocalizedStrings**, int>)(lpVtbl[41]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), names);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace3::GetInformationalStrings"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public HResult GetInformationalStrings(InformationalStringId informationalStringID, IDWriteLocalizedStrings** informationalStrings, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, InformationalStringId, IDWriteLocalizedStrings**, Bool32*, int>)(lpVtbl[42]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), informationalStringID, informationalStrings, exists);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace3::HasCharacter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public Bool32 HasCharacter(uint unicodeValue)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, uint, Bool32>)(lpVtbl[43]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), unicodeValue);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace3::GetRecommendedRenderingMode"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public HResult GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Matrix* transform, Bool32 isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, IDWriteRenderingParams* renderingParams, RenderingMode1* renderingMode, GridFitMode* gridFitMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, float, float, float, Matrix*, Bool32, OutlineThreshold, MeasuringMode, IDWriteRenderingParams*, RenderingMode1*, GridFitMode*, int>)(lpVtbl[44]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace3::IsCharacterLocal"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public Bool32 IsCharacterLocal(uint unicodeValue)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, uint, Bool32>)(lpVtbl[45]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), unicodeValue);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace3::IsGlyphLocal"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public Bool32 IsGlyphLocal(ushort glyphId)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, ushort, Bool32>)(lpVtbl[46]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), glyphId);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace3::AreCharactersLocal"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult AreCharactersLocal(ushort* characters, uint characterCount, Bool32 enqueueIfNotLocal, Bool32* isLocal)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, ushort*, uint, Bool32, Bool32*, int>)(lpVtbl[47]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), characters, characterCount, enqueueIfNotLocal, isLocal);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace3::AreGlyphsLocal"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public HResult AreGlyphsLocal(ushort* glyphIndices, uint glyphCount, Bool32 enqueueIfNotLocal, Bool32* isLocal)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace3*, ushort*, uint, Bool32, Bool32*, int>)(lpVtbl[48]))((IDWriteFontFace3*)Unsafe.AsPointer(ref this), glyphIndices, glyphCount, enqueueIfNotLocal, isLocal);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteStringList"]/*' />
/// <unmanaged>IDWriteStringList</unmanaged>
[Guid("cfee3140-1157-47ca-8b85-31bfcf3f2d0e")]
[NativeTypeName("struct IDWriteStringList : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteStringList
{
	public static ref readonly Guid IID_IDWriteStringList
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x40, 0x31, 0xEE, 0xCF,
				0x57, 0x11,
				0xCA, 0x47,
				0x8B,
				0x85,
				0x31,
				0xBF,
				0xCF,
				0x3F,
				0x2D,
				0x0E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteStringList));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteStringList::GetCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public uint GetCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteStringList*, uint>)(lpVtbl[3]))((IDWriteStringList*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteStringList::GetLocaleNameLength"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetLocaleNameLength(uint listIndex, uint* length)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteStringList*, uint, uint*, int>)(lpVtbl[4]))((IDWriteStringList*)Unsafe.AsPointer(ref this), listIndex, length);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteStringList::GetLocaleName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetLocaleName(uint listIndex, ushort* localeName, uint size)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteStringList*, uint, ushort*, uint, int>)(lpVtbl[5]))((IDWriteStringList*)Unsafe.AsPointer(ref this), listIndex, localeName, size);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteStringList::GetStringLength"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetStringLength(uint listIndex, uint* length)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteStringList*, uint, uint*, int>)(lpVtbl[6]))((IDWriteStringList*)Unsafe.AsPointer(ref this), listIndex, length);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteStringList::GetString"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetString(uint listIndex, ushort* stringBuffer, uint stringBufferSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteStringList*, uint, ushort*, uint, int>)(lpVtbl[7]))((IDWriteStringList*)Unsafe.AsPointer(ref this), listIndex, stringBuffer, stringBufferSize);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontDownloadListener"]/*' />
/// <unmanaged>IDWriteFontDownloadListener</unmanaged>
[Guid("b06fe5b9-43ec-4393-881b-dbe4dc72fda7")]
[NativeTypeName("struct IDWriteFontDownloadListener : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFontDownloadListener
{
	public static ref readonly Guid IID_IDWriteFontDownloadListener
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB9, 0xE5, 0x6F, 0xB0,
				0xEC, 0x43,
				0x93, 0x43,
				0x88,
				0x1B,
				0xDB,
				0xE4,
				0xDC,
				0x72,
				0xFD,
				0xA7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontDownloadListener));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontDownloadListener::DownloadCompleted"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void DownloadCompleted(IDWriteFontDownloadQueue* downloadQueue, IUnknown* context, HResult downloadResult)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontDownloadListener*, IDWriteFontDownloadQueue*, IUnknown*, HResult, void>)(lpVtbl[3]))((IDWriteFontDownloadListener*)Unsafe.AsPointer(ref this), downloadQueue, context, downloadResult);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontDownloadQueue"]/*' />
/// <unmanaged>IDWriteFontDownloadQueue</unmanaged>
[Guid("b71e6052-5aea-4fa3-832e-f60d431f7e91")]
[NativeTypeName("struct IDWriteFontDownloadQueue : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFontDownloadQueue
{
	public static ref readonly Guid IID_IDWriteFontDownloadQueue
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x52, 0x60, 0x1E, 0xB7,
				0xEA, 0x5A,
				0xA3, 0x4F,
				0x83,
				0x2E,
				0xF6,
				0x0D,
				0x43,
				0x1F,
				0x7E,
				0x91
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontDownloadQueue));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontDownloadQueue::AddListener"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult AddListener(IDWriteFontDownloadListener* listener, uint* token)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontDownloadQueue*, IDWriteFontDownloadListener*, uint*, int>)(lpVtbl[3]))((IDWriteFontDownloadQueue*)Unsafe.AsPointer(ref this), listener, token);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontDownloadQueue::RemoveListener"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult RemoveListener(uint token)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontDownloadQueue*, uint, int>)(lpVtbl[4]))((IDWriteFontDownloadQueue*)Unsafe.AsPointer(ref this), token);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontDownloadQueue::IsEmpty"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Bool32 IsEmpty()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontDownloadQueue*, Bool32>)(lpVtbl[5]))((IDWriteFontDownloadQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontDownloadQueue::BeginDownload"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult BeginDownload(IUnknown* context)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontDownloadQueue*, IUnknown*, int>)(lpVtbl[6]))((IDWriteFontDownloadQueue*)Unsafe.AsPointer(ref this), context);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontDownloadQueue::CancelDownload"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CancelDownload()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontDownloadQueue*, int>)(lpVtbl[7]))((IDWriteFontDownloadQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontDownloadQueue::GetGenerationCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public ulong GetGenerationCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontDownloadQueue*, ulong>)(lpVtbl[8]))((IDWriteFontDownloadQueue*)Unsafe.AsPointer(ref this));
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteGdiInterop1"]/*' />
/// <unmanaged>IDWriteGdiInterop1</unmanaged>
[Guid("4556be70-3abd-4f70-90be-421780a6f515")]
[NativeTypeName("struct IDWriteGdiInterop1 : IDWriteGdiInterop")]
[NativeInheritance("IDWriteGdiInterop")]
public unsafe partial struct IDWriteGdiInterop1
{
	public static ref readonly Guid IID_IDWriteGdiInterop1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x70, 0xBE, 0x56, 0x45,
				0xBD, 0x3A,
				0x70, 0x4F,
				0x90,
				0xBE,
				0x42,
				0x17,
				0x80,
				0xA6,
				0xF5,
				0x15
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteGdiInterop1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteGdiInterop.CreateFontFromLOGFONT" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreateFontFromLOGFONT(Win32.Graphics.Gdi.LogFontW* logFont, IDWriteFont** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGdiInterop1*, Win32.Graphics.Gdi.LogFontW*, IDWriteFont**, int>)(lpVtbl[3]))((IDWriteGdiInterop1*)Unsafe.AsPointer(ref this), logFont, font);
	}

	/// <inheritdoc cref="IDWriteGdiInterop.ConvertFontToLOGFONT" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult ConvertFontToLOGFONT(IDWriteFont* font, Win32.Graphics.Gdi.LogFontW** logFont, Bool32* isSystemFont)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGdiInterop1*, IDWriteFont*, Win32.Graphics.Gdi.LogFontW**, Bool32*, int>)(lpVtbl[4]))((IDWriteGdiInterop1*)Unsafe.AsPointer(ref this), font, logFont, isSystemFont);
	}

	/// <inheritdoc cref="IDWriteGdiInterop.ConvertFontFaceToLOGFONT" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult ConvertFontFaceToLOGFONT(IDWriteFontFace* font, Win32.Graphics.Gdi.LogFontW** logFont)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGdiInterop1*, IDWriteFontFace*, Win32.Graphics.Gdi.LogFontW**, int>)(lpVtbl[5]))((IDWriteGdiInterop1*)Unsafe.AsPointer(ref this), font, logFont);
	}

	/// <inheritdoc cref="IDWriteGdiInterop.CreateFontFaceFromHdc" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CreateFontFaceFromHdc(IntPtr hdc, IDWriteFontFace** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGdiInterop1*, IntPtr, IDWriteFontFace**, int>)(lpVtbl[6]))((IDWriteGdiInterop1*)Unsafe.AsPointer(ref this), hdc, fontFace);
	}

	/// <inheritdoc cref="IDWriteGdiInterop.CreateBitmapRenderTarget" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CreateBitmapRenderTarget(IntPtr hdc, uint width, uint height, IDWriteBitmapRenderTarget** renderTarget)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGdiInterop1*, IntPtr, uint, uint, IDWriteBitmapRenderTarget**, int>)(lpVtbl[7]))((IDWriteGdiInterop1*)Unsafe.AsPointer(ref this), hdc, width, height, renderTarget);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteGdiInterop1::CreateFontFromLOGFONT"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult CreateFontFromLOGFONT(Win32.Graphics.Gdi.LogFontW* logFont, IDWriteFontCollection* fontCollection, IDWriteFont** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGdiInterop1*, Win32.Graphics.Gdi.LogFontW*, IDWriteFontCollection*, IDWriteFont**, int>)(lpVtbl[8]))((IDWriteGdiInterop1*)Unsafe.AsPointer(ref this), logFont, fontCollection, font);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteGdiInterop1::GetFontSignature"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetFontSignature(IDWriteFontFace* fontFace, Win32.Graphics.Gdi.FontSignature** fontSignature)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGdiInterop1*, IDWriteFontFace*, Win32.Graphics.Gdi.FontSignature**, int>)(lpVtbl[9]))((IDWriteGdiInterop1*)Unsafe.AsPointer(ref this), fontFace, fontSignature);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteGdiInterop1::GetFontSignature"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetFontSignature(IDWriteFont* font, Win32.Graphics.Gdi.FontSignature** fontSignature)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGdiInterop1*, IDWriteFont*, Win32.Graphics.Gdi.FontSignature**, int>)(lpVtbl[10]))((IDWriteGdiInterop1*)Unsafe.AsPointer(ref this), font, fontSignature);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteGdiInterop1::GetMatchingFontsByLOGFONT"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetMatchingFontsByLOGFONT(Win32.Graphics.Gdi.LogFontA* logFont, IDWriteFontSet* fontSet, IDWriteFontSet** filteredSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteGdiInterop1*, Win32.Graphics.Gdi.LogFontA*, IDWriteFontSet*, IDWriteFontSet**, int>)(lpVtbl[11]))((IDWriteGdiInterop1*)Unsafe.AsPointer(ref this), logFont, fontSet, filteredSet);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat2"]/*' />
/// <unmanaged>IDWriteTextFormat2</unmanaged>
[Guid("f67e0edd-9e3d-4ecc-8c32-4183253dfe70")]
[NativeTypeName("struct IDWriteTextFormat2 : IDWriteTextFormat1")]
[NativeInheritance("IDWriteTextFormat1")]
public unsafe partial struct IDWriteTextFormat2
{
	public static ref readonly Guid IID_IDWriteTextFormat2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDD, 0x0E, 0x7E, 0xF6,
				0x3D, 0x9E,
				0xCC, 0x4E,
				0x8C,
				0x32,
				0x41,
				0x83,
				0x25,
				0x3D,
				0xFE,
				0x70
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextFormat2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat1.SetVerticalGlyphOrientation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetVerticalGlyphOrientation(VerticalGlyphOrientation glyphOrientation)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, VerticalGlyphOrientation, int>)(lpVtbl[3]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), glyphOrientation);
	}

	/// <inheritdoc cref="IDWriteTextFormat1.GetVerticalGlyphOrientation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public Graphics.DirectWrite.VerticalGlyphOrientation GetVerticalGlyphOrientation()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Graphics.DirectWrite.VerticalGlyphOrientation>)(lpVtbl[4]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat1.SetLastLineWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetLastLineWrapping(Bool32 isLastLineWrappingEnabled)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Bool32, int>)(lpVtbl[5]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), isLastLineWrappingEnabled);
	}

	/// <inheritdoc cref="IDWriteTextFormat1.GetLastLineWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public Bool32 GetLastLineWrapping()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Bool32>)(lpVtbl[6]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat1.SetOpticalAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetOpticalAlignment(OpticalAlignment opticalAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, OpticalAlignment, int>)(lpVtbl[7]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), opticalAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat1.GetOpticalAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public Graphics.DirectWrite.OpticalAlignment GetOpticalAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Graphics.DirectWrite.OpticalAlignment>)(lpVtbl[8]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat1.SetFontFallback" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetFontFallback(IDWriteFontFallback* fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, IDWriteFontFallback*, int>)(lpVtbl[9]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <inheritdoc cref="IDWriteTextFormat1.GetFontFallback" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetFontFallback(IDWriteFontFallback** fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, IDWriteFontFallback**, int>)(lpVtbl[10]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult SetTextAlignment(TextAlignment textAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, TextAlignment, int>)(lpVtbl[11]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), textAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult SetParagraphAlignment(ParagraphAlignment paragraphAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, ParagraphAlignment, int>)(lpVtbl[12]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), paragraphAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult SetWordWrapping(WordWrapping wordWrapping)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, WordWrapping, int>)(lpVtbl[13]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), wordWrapping);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult SetReadingDirection(ReadingDirection readingDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, ReadingDirection, int>)(lpVtbl[14]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), readingDirection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult SetFlowDirection(FlowDirection flowDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, FlowDirection, int>)(lpVtbl[15]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), flowDirection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult SetIncrementalTabStop(float incrementalTabStop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, float, int>)(lpVtbl[16]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), incrementalTabStop);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult SetTrimming(Trimming* trimmingOptions, IDWriteInlineObject* trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Trimming*, IDWriteInlineObject*, int>)(lpVtbl[17]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult SetLineSpacing(LineSpacingMethod lineSpacingMethod, float lineSpacing, float baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, LineSpacingMethod, float, float, int>)(lpVtbl[18]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public Graphics.DirectWrite.TextAlignment GetTextAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Graphics.DirectWrite.TextAlignment>)(lpVtbl[19]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public Graphics.DirectWrite.ParagraphAlignment GetParagraphAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Graphics.DirectWrite.ParagraphAlignment>)(lpVtbl[20]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public Graphics.DirectWrite.WordWrapping GetWordWrapping()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Graphics.DirectWrite.WordWrapping>)(lpVtbl[21]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public Graphics.DirectWrite.ReadingDirection GetReadingDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Graphics.DirectWrite.ReadingDirection>)(lpVtbl[22]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public Graphics.DirectWrite.FlowDirection GetFlowDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Graphics.DirectWrite.FlowDirection>)(lpVtbl[23]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public float GetIncrementalTabStop()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, float>)(lpVtbl[24]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult GetTrimming(Trimming* trimmingOptions, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Trimming*, IDWriteInlineObject**, int>)(lpVtbl[25]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult GetLineSpacing(LineSpacingMethod* lineSpacingMethod, float* lineSpacing, float* baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, LineSpacingMethod*, float*, float*, int>)(lpVtbl[26]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult GetFontCollection(IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, IDWriteFontCollection**, int>)(lpVtbl[27]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), fontCollection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public uint GetFontFamilyNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, uint>)(lpVtbl[28]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult GetFontFamilyName(ushort* fontFamilyName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, ushort*, uint, int>)(lpVtbl[29]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), fontFamilyName, nameSize);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public Graphics.DirectWrite.FontWeight GetFontWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Graphics.DirectWrite.FontWeight>)(lpVtbl[30]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public Graphics.DirectWrite.FontStyle GetFontStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Graphics.DirectWrite.FontStyle>)(lpVtbl[31]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public Graphics.DirectWrite.FontStretch GetFontStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Graphics.DirectWrite.FontStretch>)(lpVtbl[32]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public float GetFontSize()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, float>)(lpVtbl[33]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public uint GetLocaleNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, uint>)(lpVtbl[34]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult GetLocaleName(ushort* localeName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, ushort*, uint, int>)(lpVtbl[35]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), localeName, nameSize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat2::SetLineSpacing"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult SetLineSpacing(LineSpacing* lineSpacingOptions)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, LineSpacing*, int>)(lpVtbl[36]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), lineSpacingOptions);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat2::GetLineSpacing"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult GetLineSpacing(LineSpacing* lineSpacingOptions)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, LineSpacing*, int>)(lpVtbl[37]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), lineSpacingOptions);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout3"]/*' />
/// <unmanaged>IDWriteTextLayout3</unmanaged>
[Guid("07ddcd52-020e-4de8-ac33-6c953d83f92d")]
[NativeTypeName("struct IDWriteTextLayout3 : IDWriteTextLayout2")]
[NativeInheritance("IDWriteTextLayout2")]
public unsafe partial struct IDWriteTextLayout3
{
	public static ref readonly Guid IID_IDWriteTextLayout3
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x52, 0xCD, 0xDD, 0x07,
				0x0E, 0x02,
				0xE8, 0x4D,
				0xAC,
				0x33,
				0x6C,
				0x95,
				0x3D,
				0x83,
				0xF9,
				0x2D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextLayout3));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout2.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetMetrics(TextMetrics1* textMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, TextMetrics1*, int>)(lpVtbl[3]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), textMetrics);
	}

	/// <inheritdoc cref="IDWriteTextLayout2.SetVerticalGlyphOrientation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetVerticalGlyphOrientation(VerticalGlyphOrientation glyphOrientation)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, VerticalGlyphOrientation, int>)(lpVtbl[4]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), glyphOrientation);
	}

	/// <inheritdoc cref="IDWriteTextLayout2.GetVerticalGlyphOrientation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Graphics.DirectWrite.VerticalGlyphOrientation GetVerticalGlyphOrientation()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Graphics.DirectWrite.VerticalGlyphOrientation>)(lpVtbl[5]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout2.SetLastLineWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetLastLineWrapping(Bool32 isLastLineWrappingEnabled)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Bool32, int>)(lpVtbl[6]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), isLastLineWrappingEnabled);
	}

	/// <inheritdoc cref="IDWriteTextLayout2.GetLastLineWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public Bool32 GetLastLineWrapping()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Bool32>)(lpVtbl[7]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout2.SetOpticalAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetOpticalAlignment(OpticalAlignment opticalAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, OpticalAlignment, int>)(lpVtbl[8]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), opticalAlignment);
	}

	/// <inheritdoc cref="IDWriteTextLayout2.GetOpticalAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public Graphics.DirectWrite.OpticalAlignment GetOpticalAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Graphics.DirectWrite.OpticalAlignment>)(lpVtbl[9]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout2.SetFontFallback" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetFontFallback(IDWriteFontFallback* fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, IDWriteFontFallback*, int>)(lpVtbl[10]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <inheritdoc cref="IDWriteTextLayout2.GetFontFallback" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetFontFallback(IDWriteFontFallback** fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, IDWriteFontFallback**, int>)(lpVtbl[11]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <inheritdoc cref="IDWriteTextLayout1.SetPairKerning" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult SetPairKerning(Bool32 isPairKerningEnabled, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Bool32, TextRange*, int>)(lpVtbl[12]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), isPairKerningEnabled, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout1.GetPairKerning" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetPairKerning(uint currentPosition, Bool32* isPairKerningEnabled, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, Bool32*, TextRange*, int>)(lpVtbl[13]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), currentPosition, isPairKerningEnabled, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout1.SetCharacterSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult SetCharacterSpacing(float leadingSpacing, float trailingSpacing, float minimumAdvanceWidth, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, float, float, float, TextRange*, int>)(lpVtbl[14]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout1.GetCharacterSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetCharacterSpacing(uint currentPosition, float* leadingSpacing, float* trailingSpacing, float* minimumAdvanceWidth, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, float*, float*, float*, TextRange*, int>)(lpVtbl[15]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), currentPosition, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetMaxWidth" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult SetMaxWidth(float maxWidth)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, float, int>)(lpVtbl[16]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), maxWidth);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetMaxHeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult SetMaxHeight(float maxHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, float, int>)(lpVtbl[17]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), maxHeight);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult SetFontCollection(IDWriteFontCollection* fontCollection, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, IDWriteFontCollection*, TextRange*, int>)(lpVtbl[18]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), fontCollection, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult SetFontFamilyName(ushort* fontFamilyName, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, ushort*, TextRange*, int>)(lpVtbl[19]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), fontFamilyName, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult SetFontWeight(FontWeight fontWeight, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, FontWeight, TextRange*, int>)(lpVtbl[20]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), fontWeight, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult SetFontStyle(FontStyle fontStyle, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, FontStyle, TextRange*, int>)(lpVtbl[21]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), fontStyle, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult SetFontStretch(FontStretch fontStretch, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, FontStretch, TextRange*, int>)(lpVtbl[22]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), fontStretch, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult SetFontSize(float fontSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, float, TextRange*, int>)(lpVtbl[23]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), fontSize, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetUnderline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult SetUnderline(Bool32 hasUnderline, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Bool32, TextRange*, int>)(lpVtbl[24]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), hasUnderline, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetStrikethrough" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult SetStrikethrough(Bool32 hasStrikethrough, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Bool32, TextRange*, int>)(lpVtbl[25]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), hasStrikethrough, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetDrawingEffect" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult SetDrawingEffect(IUnknown* drawingEffect, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, IUnknown*, TextRange*, int>)(lpVtbl[26]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), drawingEffect, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetInlineObject" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult SetInlineObject(IDWriteInlineObject* inlineObject, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, IDWriteInlineObject*, TextRange*, int>)(lpVtbl[27]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), inlineObject, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetTypography" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult SetTypography(IDWriteTypography* typography, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, IDWriteTypography*, TextRange*, int>)(lpVtbl[28]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), typography, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult SetLocaleName(ushort* localeName, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, ushort*, TextRange*, int>)(lpVtbl[29]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), localeName, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetMaxWidth" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public float GetMaxWidth()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, float>)(lpVtbl[30]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetMaxHeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public float GetMaxHeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, float>)(lpVtbl[31]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult GetFontCollection(uint currentPosition, IDWriteFontCollection** fontCollection, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, IDWriteFontCollection**, TextRange*, int>)(lpVtbl[32]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), currentPosition, fontCollection, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontFamilyNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult GetFontFamilyNameLength(uint currentPosition, uint* nameLength, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, uint*, TextRange*, int>)(lpVtbl[33]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), currentPosition, nameLength, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult GetFontFamilyName(uint currentPosition, ushort* fontFamilyName, uint nameSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, ushort*, uint, TextRange*, int>)(lpVtbl[34]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), currentPosition, fontFamilyName, nameSize, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult GetFontWeight(uint currentPosition, FontWeight* fontWeight, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, FontWeight*, TextRange*, int>)(lpVtbl[35]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), currentPosition, fontWeight, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult GetFontStyle(uint currentPosition, FontStyle* fontStyle, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, FontStyle*, TextRange*, int>)(lpVtbl[36]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), currentPosition, fontStyle, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult GetFontStretch(uint currentPosition, FontStretch* fontStretch, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, FontStretch*, TextRange*, int>)(lpVtbl[37]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), currentPosition, fontStretch, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult GetFontSize(uint currentPosition, float* fontSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, float*, TextRange*, int>)(lpVtbl[38]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), currentPosition, fontSize, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetUnderline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult GetUnderline(uint currentPosition, Bool32* hasUnderline, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, Bool32*, TextRange*, int>)(lpVtbl[39]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), currentPosition, hasUnderline, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetStrikethrough" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult GetStrikethrough(uint currentPosition, Bool32* hasStrikethrough, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, Bool32*, TextRange*, int>)(lpVtbl[40]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), currentPosition, hasStrikethrough, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetDrawingEffect" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult GetDrawingEffect(uint currentPosition, IUnknown** drawingEffect, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, IUnknown**, TextRange*, int>)(lpVtbl[41]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), currentPosition, drawingEffect, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetInlineObject" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public HResult GetInlineObject(uint currentPosition, IDWriteInlineObject** inlineObject, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, IDWriteInlineObject**, TextRange*, int>)(lpVtbl[42]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), currentPosition, inlineObject, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetTypography" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public HResult GetTypography(uint currentPosition, IDWriteTypography** typography, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, IDWriteTypography**, TextRange*, int>)(lpVtbl[43]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), currentPosition, typography, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetLocaleNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public HResult GetLocaleNameLength(uint currentPosition, uint* nameLength, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, uint*, TextRange*, int>)(lpVtbl[44]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), currentPosition, nameLength, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public HResult GetLocaleName(uint currentPosition, ushort* localeName, uint nameSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, ushort*, uint, TextRange*, int>)(lpVtbl[45]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), currentPosition, localeName, nameSize, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.Draw" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public HResult Draw(void* clientDrawingContext, IDWriteTextRenderer* renderer, float originX, float originY)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, void*, IDWriteTextRenderer*, float, float, int>)(lpVtbl[46]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), clientDrawingContext, renderer, originX, originY);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetLineMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult GetLineMetrics(LineMetrics* lineMetrics, uint maxLineCount, uint* actualLineCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, LineMetrics*, uint, uint*, int>)(lpVtbl[47]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), lineMetrics, maxLineCount, actualLineCount);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public HResult GetMetrics(TextMetrics* textMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, TextMetrics*, int>)(lpVtbl[48]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), textMetrics);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetOverhangMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public HResult GetOverhangMetrics(OverhangMetrics* overhangs)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, OverhangMetrics*, int>)(lpVtbl[49]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), overhangs);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetClusterMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public HResult GetClusterMetrics(ClusterMetrics* clusterMetrics, uint maxClusterCount, uint* actualClusterCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, ClusterMetrics*, uint, uint*, int>)(lpVtbl[50]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), clusterMetrics, maxClusterCount, actualClusterCount);
	}

	/// <inheritdoc cref="IDWriteTextLayout.DetermineMinWidth" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public HResult DetermineMinWidth(float* minWidth)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, float*, int>)(lpVtbl[51]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), minWidth);
	}

	/// <inheritdoc cref="IDWriteTextLayout.HitTestPoint" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public HResult HitTestPoint(float pointX, float pointY, Bool32* isTrailingHit, Bool32* isInside, HitTestMetrics* hitTestMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, float, float, Bool32*, Bool32*, HitTestMetrics*, int>)(lpVtbl[52]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), pointX, pointY, isTrailingHit, isInside, hitTestMetrics);
	}

	/// <inheritdoc cref="IDWriteTextLayout.HitTestTextPosition" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public HResult HitTestTextPosition(uint textPosition, Bool32 isTrailingHit, float* pointX, float* pointY, HitTestMetrics* hitTestMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, Bool32, float*, float*, HitTestMetrics*, int>)(lpVtbl[53]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), textPosition, isTrailingHit, pointX, pointY, hitTestMetrics);
	}

	/// <inheritdoc cref="IDWriteTextLayout.HitTestTextRange" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public HResult HitTestTextRange(uint textPosition, uint textLength, float originX, float originY, HitTestMetrics* hitTestMetrics, uint maxHitTestMetricsCount, uint* actualHitTestMetricsCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint, uint, float, float, HitTestMetrics*, uint, uint*, int>)(lpVtbl[54]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), textPosition, textLength, originX, originY, hitTestMetrics, maxHitTestMetricsCount, actualHitTestMetricsCount);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public HResult SetTextAlignment(TextAlignment textAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, TextAlignment, int>)(lpVtbl[55]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), textAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public HResult SetParagraphAlignment(ParagraphAlignment paragraphAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, ParagraphAlignment, int>)(lpVtbl[56]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), paragraphAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public HResult SetWordWrapping(WordWrapping wordWrapping)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, WordWrapping, int>)(lpVtbl[57]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), wordWrapping);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public HResult SetReadingDirection(ReadingDirection readingDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, ReadingDirection, int>)(lpVtbl[58]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), readingDirection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public HResult SetFlowDirection(FlowDirection flowDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, FlowDirection, int>)(lpVtbl[59]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), flowDirection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(60)]
	public HResult SetIncrementalTabStop(float incrementalTabStop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, float, int>)(lpVtbl[60]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), incrementalTabStop);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(61)]
	public HResult SetTrimming(Trimming* trimmingOptions, IDWriteInlineObject* trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Trimming*, IDWriteInlineObject*, int>)(lpVtbl[61]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(62)]
	public HResult SetLineSpacing(LineSpacingMethod lineSpacingMethod, float lineSpacing, float baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, LineSpacingMethod, float, float, int>)(lpVtbl[62]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(63)]
	public Graphics.DirectWrite.TextAlignment GetTextAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Graphics.DirectWrite.TextAlignment>)(lpVtbl[63]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(64)]
	public Graphics.DirectWrite.ParagraphAlignment GetParagraphAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Graphics.DirectWrite.ParagraphAlignment>)(lpVtbl[64]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(65)]
	public Graphics.DirectWrite.WordWrapping GetWordWrapping()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Graphics.DirectWrite.WordWrapping>)(lpVtbl[65]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(66)]
	public Graphics.DirectWrite.ReadingDirection GetReadingDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Graphics.DirectWrite.ReadingDirection>)(lpVtbl[66]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(67)]
	public Graphics.DirectWrite.FlowDirection GetFlowDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Graphics.DirectWrite.FlowDirection>)(lpVtbl[67]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(68)]
	public float GetIncrementalTabStop()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, float>)(lpVtbl[68]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(69)]
	public HResult GetTrimming(Trimming* trimmingOptions, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Trimming*, IDWriteInlineObject**, int>)(lpVtbl[69]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(70)]
	public HResult GetLineSpacing(LineSpacingMethod* lineSpacingMethod, float* lineSpacing, float* baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, LineSpacingMethod*, float*, float*, int>)(lpVtbl[70]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(71)]
	public HResult GetFontCollection(IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, IDWriteFontCollection**, int>)(lpVtbl[71]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), fontCollection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(72)]
	public uint GetFontFamilyNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint>)(lpVtbl[72]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(73)]
	public HResult GetFontFamilyName(ushort* fontFamilyName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, ushort*, uint, int>)(lpVtbl[73]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), fontFamilyName, nameSize);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(74)]
	public Graphics.DirectWrite.FontWeight GetFontWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Graphics.DirectWrite.FontWeight>)(lpVtbl[74]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(75)]
	public Graphics.DirectWrite.FontStyle GetFontStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Graphics.DirectWrite.FontStyle>)(lpVtbl[75]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(76)]
	public Graphics.DirectWrite.FontStretch GetFontStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, Graphics.DirectWrite.FontStretch>)(lpVtbl[76]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(77)]
	public float GetFontSize()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, float>)(lpVtbl[77]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(78)]
	public uint GetLocaleNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, uint>)(lpVtbl[78]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(79)]
	public HResult GetLocaleName(ushort* localeName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, ushort*, uint, int>)(lpVtbl[79]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), localeName, nameSize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout3::InvalidateLayout"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(80)]
	public HResult InvalidateLayout()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, int>)(lpVtbl[80]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout3::SetLineSpacing"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(81)]
	public HResult SetLineSpacing(LineSpacing* lineSpacingOptions)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, LineSpacing*, int>)(lpVtbl[81]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), lineSpacingOptions);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout3::GetLineSpacing"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(82)]
	public HResult GetLineSpacing(LineSpacing* lineSpacingOptions)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, LineSpacing*, int>)(lpVtbl[82]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), lineSpacingOptions);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout3::GetLineMetrics"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(83)]
	public HResult GetLineMetrics(LineMetrics1* lineMetrics, uint maxLineCount, uint* actualLineCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout3*, LineMetrics1*, uint, uint*, int>)(lpVtbl[83]))((IDWriteTextLayout3*)Unsafe.AsPointer(ref this), lineMetrics, maxLineCount, actualLineCount);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteColorGlyphRunEnumerator1"]/*' />
/// <unmanaged>IDWriteColorGlyphRunEnumerator1</unmanaged>
[Guid("7c5f86da-c7a1-4f05-b8e1-55a179fe5a35")]
[NativeTypeName("struct IDWriteColorGlyphRunEnumerator1 : IDWriteColorGlyphRunEnumerator")]
[NativeInheritance("IDWriteColorGlyphRunEnumerator")]
public unsafe partial struct IDWriteColorGlyphRunEnumerator1
{
	public static ref readonly Guid IID_IDWriteColorGlyphRunEnumerator1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDA, 0x86, 0x5F, 0x7C,
				0xA1, 0xC7,
				0x05, 0x4F,
				0xB8,
				0xE1,
				0x55,
				0xA1,
				0x79,
				0xFE,
				0x5A,
				0x35
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteColorGlyphRunEnumerator1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteColorGlyphRunEnumerator.MoveNext" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult MoveNext(Bool32* hasRun)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteColorGlyphRunEnumerator1*, Bool32*, int>)(lpVtbl[3]))((IDWriteColorGlyphRunEnumerator1*)Unsafe.AsPointer(ref this), hasRun);
	}

	/// <inheritdoc cref="IDWriteColorGlyphRunEnumerator.GetCurrentRun" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetCurrentRun(ColorGlyphRun** colorGlyphRun)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteColorGlyphRunEnumerator1*, ColorGlyphRun**, int>)(lpVtbl[4]))((IDWriteColorGlyphRunEnumerator1*)Unsafe.AsPointer(ref this), colorGlyphRun);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteColorGlyphRunEnumerator1::GetCurrentRun"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetCurrentRun(ColorGlyphRun1** colorGlyphRun)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteColorGlyphRunEnumerator1*, ColorGlyphRun1**, int>)(lpVtbl[5]))((IDWriteColorGlyphRunEnumerator1*)Unsafe.AsPointer(ref this), colorGlyphRun);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace4"]/*' />
/// <unmanaged>IDWriteFontFace4</unmanaged>
[Guid("27f2a904-4eb8-441d-9678-0563f53e3e2f")]
[NativeTypeName("struct IDWriteFontFace4 : IDWriteFontFace3")]
[NativeInheritance("IDWriteFontFace3")]
public unsafe partial struct IDWriteFontFace4
{
	public static ref readonly Guid IID_IDWriteFontFace4
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x04, 0xA9, 0xF2, 0x27,
				0xB8, 0x4E,
				0x1D, 0x44,
				0x96,
				0x78,
				0x05,
				0x63,
				0xF5,
				0x3E,
				0x3E,
				0x2F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFace4));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetFontFaceReference(IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, IDWriteFontFaceReference**, int>)(lpVtbl[3]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetPanose" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void GetPanose(Panose* panose)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, Panose*, void>)(lpVtbl[4]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), panose);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Graphics.DirectWrite.FontWeight GetWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, Graphics.DirectWrite.FontWeight>)(lpVtbl[5]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public Graphics.DirectWrite.FontStretch GetStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, Graphics.DirectWrite.FontStretch>)(lpVtbl[6]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public Graphics.DirectWrite.FontStyle GetStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, Graphics.DirectWrite.FontStyle>)(lpVtbl[7]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetFamilyNames" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetFamilyNames(IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, IDWriteLocalizedStrings**, int>)(lpVtbl[8]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), names);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetFaceNames" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetFaceNames(IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, IDWriteLocalizedStrings**, int>)(lpVtbl[9]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), names);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetInformationalStrings" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetInformationalStrings(InformationalStringId informationalStringID, IDWriteLocalizedStrings** informationalStrings, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, InformationalStringId, IDWriteLocalizedStrings**, Bool32*, int>)(lpVtbl[10]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), informationalStringID, informationalStrings, exists);
	}

	/// <inheritdoc cref="IDWriteFontFace3.HasCharacter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public Bool32 HasCharacter(uint unicodeValue)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, uint, Bool32>)(lpVtbl[11]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), unicodeValue);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Matrix* transform, Bool32 isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, IDWriteRenderingParams* renderingParams, RenderingMode1* renderingMode, GridFitMode* gridFitMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, float, float, float, Matrix*, Bool32, OutlineThreshold, MeasuringMode, IDWriteRenderingParams*, RenderingMode1*, GridFitMode*, int>)(lpVtbl[12]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode);
	}

	/// <inheritdoc cref="IDWriteFontFace3.IsCharacterLocal" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public Bool32 IsCharacterLocal(uint unicodeValue)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, uint, Bool32>)(lpVtbl[13]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), unicodeValue);
	}

	/// <inheritdoc cref="IDWriteFontFace3.IsGlyphLocal" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public Bool32 IsGlyphLocal(ushort glyphId)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, ushort, Bool32>)(lpVtbl[14]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), glyphId);
	}

	/// <inheritdoc cref="IDWriteFontFace3.AreCharactersLocal" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult AreCharactersLocal(ushort* characters, uint characterCount, Bool32 enqueueIfNotLocal, Bool32* isLocal)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, ushort*, uint, Bool32, Bool32*, int>)(lpVtbl[15]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), characters, characterCount, enqueueIfNotLocal, isLocal);
	}

	/// <inheritdoc cref="IDWriteFontFace3.AreGlyphsLocal" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult AreGlyphsLocal(ushort* glyphIndices, uint glyphCount, Bool32 enqueueIfNotLocal, Bool32* isLocal)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, ushort*, uint, Bool32, Bool32*, int>)(lpVtbl[16]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), glyphIndices, glyphCount, enqueueIfNotLocal, isLocal);
	}

	/// <inheritdoc cref="IDWriteFontFace2.IsColorFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public Bool32 IsColorFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, Bool32>)(lpVtbl[17]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace2.GetColorPaletteCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public uint GetColorPaletteCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, uint>)(lpVtbl[18]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace2.GetPaletteEntryCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public uint GetPaletteEntryCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, uint>)(lpVtbl[19]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace2.GetPaletteEntries" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult GetPaletteEntries(uint colorPaletteIndex, uint firstEntryIndex, uint entryCount, ColorF* paletteEntries)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, uint, uint, uint, ColorF*, int>)(lpVtbl[20]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), colorPaletteIndex, firstEntryIndex, entryCount, paletteEntries);
	}

	/// <inheritdoc cref="IDWriteFontFace2.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Matrix* transform, Bool32 isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, IDWriteRenderingParams* renderingParams, RenderingMode* renderingMode, GridFitMode* gridFitMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, float, float, float, Matrix*, Bool32, OutlineThreshold, MeasuringMode, IDWriteRenderingParams*, RenderingMode*, GridFitMode*, int>)(lpVtbl[21]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public void GetMetrics(FontMetrics1* fontMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, FontMetrics1*, void>)(lpVtbl[22]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), fontMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetGdiCompatibleMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, Matrix* transform, FontMetrics1* fontMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, float, float, Matrix*, FontMetrics1*, int>)(lpVtbl[23]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, fontMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetCaretMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public void GetCaretMetrics(CaretMetrics* caretMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, CaretMetrics*, void>)(lpVtbl[24]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), caretMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetUnicodeRanges" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult GetUnicodeRanges(uint maxRangeCount, UnicodeRange* unicodeRanges, uint* actualRangeCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, uint, UnicodeRange*, uint*, int>)(lpVtbl[25]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), maxRangeCount, unicodeRanges, actualRangeCount);
	}

	/// <inheritdoc cref="IDWriteFontFace1.IsMonospacedFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public Bool32 IsMonospacedFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, Bool32>)(lpVtbl[26]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetDesignGlyphAdvances" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult GetDesignGlyphAdvances(uint glyphCount, ushort* glyphIndices, int* glyphAdvances, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, uint, ushort*, int*, Bool32, int>)(lpVtbl[27]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), glyphCount, glyphIndices, glyphAdvances, isSideways);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetGdiCompatibleGlyphAdvances" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult GetGdiCompatibleGlyphAdvances(float emSize, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, Bool32 isSideways, uint glyphCount, ushort* glyphIndices, int* glyphAdvances)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, float, float, Matrix*, Bool32, Bool32, uint, ushort*, int*, int>)(lpVtbl[28]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, useGdiNatural, isSideways, glyphCount, glyphIndices, glyphAdvances);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetKerningPairAdjustments" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult GetKerningPairAdjustments(uint glyphCount, ushort* glyphIndices, int* glyphAdvanceAdjustments)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, uint, ushort*, int*, int>)(lpVtbl[29]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), glyphCount, glyphIndices, glyphAdvanceAdjustments);
	}

	/// <inheritdoc cref="IDWriteFontFace1.HasKerningPairs" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public Bool32 HasKerningPairs()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, Bool32>)(lpVtbl[30]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Matrix* transform, Bool32 isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, RenderingMode* renderingMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, float, float, float, Matrix*, Bool32, OutlineThreshold, MeasuringMode, RenderingMode*, int>)(lpVtbl[31]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingMode);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetVerticalGlyphVariants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult GetVerticalGlyphVariants(uint glyphCount, ushort* nominalGlyphIndices, ushort* verticalGlyphIndices)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, uint, ushort*, ushort*, int>)(lpVtbl[32]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), glyphCount, nominalGlyphIndices, verticalGlyphIndices);
	}

	/// <inheritdoc cref="IDWriteFontFace1.HasVerticalGlyphVariants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public Bool32 HasVerticalGlyphVariants()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, Bool32>)(lpVtbl[33]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public new Graphics.DirectWrite.FontFaceType GetType()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, Graphics.DirectWrite.FontFaceType>)(lpVtbl[34]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetFiles" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult GetFiles(uint* numberOfFiles, IDWriteFontFile** fontFiles)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, uint*, IDWriteFontFile**, int>)(lpVtbl[35]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), numberOfFiles, fontFiles);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetIndex" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public uint GetIndex()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, uint>)(lpVtbl[36]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetSimulations" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public Graphics.DirectWrite.FontSimulations GetSimulations()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, Graphics.DirectWrite.FontSimulations>)(lpVtbl[37]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.IsSymbolFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public Bool32 IsSymbolFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, Bool32>)(lpVtbl[38]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public void GetMetrics(FontMetrics* fontFaceMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, FontMetrics*, void>)(lpVtbl[39]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), fontFaceMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public ushort GetGlyphCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, ushort>)(lpVtbl[40]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetDesignGlyphMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult GetDesignGlyphMetrics(ushort* glyphIndices, uint glyphCount, GlyphMetrics* glyphMetrics, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, ushort*, uint, GlyphMetrics*, Bool32, int>)(lpVtbl[41]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), glyphIndices, glyphCount, glyphMetrics, isSideways);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphIndices" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public HResult GetGlyphIndices(uint* codePoints, uint codePointCount, ushort* glyphIndices)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, uint*, uint, ushort*, int>)(lpVtbl[42]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), codePoints, codePointCount, glyphIndices);
	}

	/// <inheritdoc cref="IDWriteFontFace.TryGetFontTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public HResult TryGetFontTable(uint openTypeTableTag, void** tableData, uint* tableSize, void** tableContext, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, uint, void**, uint*, void**, Bool32*, int>)(lpVtbl[43]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), openTypeTableTag, tableData, tableSize, tableContext, exists);
	}

	/// <inheritdoc cref="IDWriteFontFace.ReleaseFontTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public void ReleaseFontTable(void* tableContext)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, void*, void>)(lpVtbl[44]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), tableContext);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphRunOutline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public HResult GetGlyphRunOutline(float emSize, ushort* glyphIndices, float* glyphAdvances, GlyphOffset* glyphOffsets, uint glyphCount, Bool32 isSideways, Bool32 isRightToLeft, Graphics.Direct2D.Common.ID2D1SimplifiedGeometrySink* geometrySink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, float, ushort*, float*, GlyphOffset*, uint, Bool32, Bool32, Graphics.Direct2D.Common.ID2D1SimplifiedGeometrySink*, int>)(lpVtbl[45]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public HResult GetRecommendedRenderingMode(float emSize, float pixelsPerDip, MeasuringMode measuringMode, IDWriteRenderingParams* renderingParams, RenderingMode* renderingMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, float, float, MeasuringMode, IDWriteRenderingParams*, RenderingMode*, int>)(lpVtbl[46]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGdiCompatibleMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, Matrix* transform, FontMetrics* fontFaceMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, float, float, Matrix*, FontMetrics*, int>)(lpVtbl[47]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, fontFaceMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGdiCompatibleGlyphMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public HResult GetGdiCompatibleGlyphMetrics(float emSize, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, ushort* glyphIndices, uint glyphCount, GlyphMetrics* glyphMetrics, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, float, float, Matrix*, Bool32, ushort*, uint, GlyphMetrics*, Bool32, int>)(lpVtbl[48]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace4::GetGlyphImageFormats"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public HResult GetGlyphImageFormats(ushort glyphId, uint pixelsPerEmFirst, uint pixelsPerEmLast, GlyphImageFormats* glyphImageFormats)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, ushort, uint, uint, GlyphImageFormats*, int>)(lpVtbl[49]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), glyphId, pixelsPerEmFirst, pixelsPerEmLast, glyphImageFormats);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace4::GetGlyphImageFormats"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public Graphics.DirectWrite.GlyphImageFormats GetGlyphImageFormats()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, Graphics.DirectWrite.GlyphImageFormats>)(lpVtbl[50]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace4::GetGlyphImageData"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public HResult GetGlyphImageData(ushort glyphId, uint pixelsPerEm, GlyphImageFormats glyphImageFormat, GlyphImageData* glyphData, void** glyphDataContext)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, ushort, uint, GlyphImageFormats, GlyphImageData*, void**, int>)(lpVtbl[51]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), glyphId, pixelsPerEm, glyphImageFormat, glyphData, glyphDataContext);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace4::ReleaseGlyphImageData"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public void ReleaseGlyphImageData(void* glyphDataContext)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace4*, void*, void>)(lpVtbl[52]))((IDWriteFontFace4*)Unsafe.AsPointer(ref this), glyphDataContext);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory4"]/*' />
/// <unmanaged>IDWriteFactory4</unmanaged>
[Guid("4b0b5bd3-0797-4549-8ac5-fe915cc53856")]
[NativeTypeName("struct IDWriteFactory4 : IDWriteFactory3")]
[NativeInheritance("IDWriteFactory3")]
public unsafe partial struct IDWriteFactory4
{
	public static ref readonly Guid IID_IDWriteFactory4
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xD3, 0x5B, 0x0B, 0x4B,
				0x97, 0x07,
				0x49, 0x45,
				0x8A,
				0xC5,
				0xFE,
				0x91,
				0x5C,
				0xC5,
				0x38,
				0x56
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFactory4));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateGlyphRunAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, Matrix* transform, RenderingMode1 renderingMode, MeasuringMode measuringMode, GridFitMode gridFitMode, TextAntialiasMode antialiasMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, GlyphRun*, Matrix*, RenderingMode1, MeasuringMode, GridFitMode, TextAntialiasMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[3]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode1 renderingMode, GridFitMode gridFitMode, IDWriteRenderingParams3** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, float, float, float, float, PixelGeometry, RenderingMode1, GridFitMode, IDWriteRenderingParams3**, int>)(lpVtbl[4]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult CreateFontFaceReference(IDWriteFontFile* fontFile, uint faceIndex, FontSimulations fontSimulations, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteFontFile*, uint, FontSimulations, IDWriteFontFaceReference**, int>)(lpVtbl[5]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), fontFile, faceIndex, fontSimulations, fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CreateFontFaceReference(ushort* filePath, ulong* lastWriteTime, uint faceIndex, FontSimulations fontSimulations, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, ushort*, ulong*, uint, FontSimulations, IDWriteFontFaceReference**, int>)(lpVtbl[6]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), filePath, lastWriteTime, faceIndex, fontSimulations, fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFactory3.GetSystemFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetSystemFontSet(IDWriteFontSet** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteFontSet**, int>)(lpVtbl[7]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), fontSet);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateFontSetBuilder" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult CreateFontSetBuilder(IDWriteFontSetBuilder** fontSetBuilder)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteFontSetBuilder**, int>)(lpVtbl[8]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), fontSetBuilder);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateFontCollectionFromFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CreateFontCollectionFromFontSet(IDWriteFontSet* fontSet, IDWriteFontCollection1** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteFontSet*, IDWriteFontCollection1**, int>)(lpVtbl[9]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), fontSet, fontCollection);
	}

	/// <inheritdoc cref="IDWriteFactory3.GetSystemFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetSystemFontCollection(Bool32 includeDownloadableFonts, IDWriteFontCollection1** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, Bool32, IDWriteFontCollection1**, Bool32, int>)(lpVtbl[10]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), includeDownloadableFonts, fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory3.GetFontDownloadQueue" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetFontDownloadQueue(IDWriteFontDownloadQueue** fontDownloadQueue)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteFontDownloadQueue**, int>)(lpVtbl[11]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), fontDownloadQueue);
	}

	/// <inheritdoc cref="IDWriteFactory2.GetSystemFontFallback" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetSystemFontFallback(IDWriteFontFallback** fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteFontFallback**, int>)(lpVtbl[12]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <inheritdoc cref="IDWriteFactory2.CreateFontFallbackBuilder" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult CreateFontFallbackBuilder(IDWriteFontFallbackBuilder** fontFallbackBuilder)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteFontFallbackBuilder**, int>)(lpVtbl[13]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), fontFallbackBuilder);
	}

	/// <inheritdoc cref="IDWriteFactory2.TranslateColorGlyphRun" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult TranslateColorGlyphRun(float baselineOriginX, float baselineOriginY, GlyphRun* glyphRun, GlyphRunDescription* glyphRunDescription, MeasuringMode measuringMode, Matrix* worldToDeviceTransform, uint colorPaletteIndex, IDWriteColorGlyphRunEnumerator** colorLayers)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, float, float, GlyphRun*, GlyphRunDescription*, MeasuringMode, Matrix*, uint, IDWriteColorGlyphRunEnumerator**, int>)(lpVtbl[14]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), baselineOriginX, baselineOriginY, glyphRun, glyphRunDescription, measuringMode, worldToDeviceTransform, colorPaletteIndex, colorLayers);
	}

	/// <inheritdoc cref="IDWriteFactory2.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, GridFitMode gridFitMode, IDWriteRenderingParams2** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, float, float, float, float, PixelGeometry, RenderingMode, GridFitMode, IDWriteRenderingParams2**, int>)(lpVtbl[15]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory2.CreateGlyphRunAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, Matrix* transform, RenderingMode renderingMode, MeasuringMode measuringMode, GridFitMode gridFitMode, TextAntialiasMode antialiasMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, GlyphRun*, Matrix*, RenderingMode, MeasuringMode, GridFitMode, TextAntialiasMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[16]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <inheritdoc cref="IDWriteFactory1.GetEudcFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetEudcFontCollection(IDWriteFontCollection** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteFontCollection**, Bool32, int>)(lpVtbl[17]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory1.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float enhancedContrastGrayscale, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, IDWriteRenderingParams1** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, float, float, float, float, PixelGeometry, RenderingMode, IDWriteRenderingParams1**, int>)(lpVtbl[18]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.GetSystemFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetSystemFontCollection(IDWriteFontCollection** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteFontCollection**, Bool32, int>)(lpVtbl[19]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult CreateCustomFontCollection(IDWriteFontCollectionLoader* collectionLoader, void* collectionKey, uint collectionKeySize, IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteFontCollectionLoader*, void*, uint, IDWriteFontCollection**, int>)(lpVtbl[20]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), collectionLoader, collectionKey, collectionKeySize, fontCollection);
	}

	/// <inheritdoc cref="IDWriteFactory.RegisterFontCollectionLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult RegisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteFontCollectionLoader*, int>)(lpVtbl[21]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), fontCollectionLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.UnregisterFontCollectionLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult UnregisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteFontCollectionLoader*, int>)(lpVtbl[22]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), fontCollectionLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateFontFileReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult CreateFontFileReference(ushort* filePath, ulong* lastWriteTime, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, ushort*, ulong*, IDWriteFontFile**, int>)(lpVtbl[23]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), filePath, lastWriteTime, fontFile);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomFontFileReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult CreateCustomFontFileReference(void* fontFileReferenceKey, uint fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, void*, uint, IDWriteFontFileLoader*, IDWriteFontFile**, int>)(lpVtbl[24]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult CreateFontFace(FontFaceType fontFaceType, uint numberOfFiles, IDWriteFontFile** fontFiles, uint faceIndex, FontSimulations fontFaceSimulationFlags, IDWriteFontFace** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, FontFaceType, uint, IDWriteFontFile**, uint, FontSimulations, IDWriteFontFace**, int>)(lpVtbl[25]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult CreateRenderingParams(IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteRenderingParams**, int>)(lpVtbl[26]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateMonitorRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult CreateMonitorRenderingParams(IntPtr monitor, IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IntPtr, IDWriteRenderingParams**, int>)(lpVtbl[27]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), monitor, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, float, float, float, PixelGeometry, RenderingMode, IDWriteRenderingParams**, int>)(lpVtbl[28]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.RegisterFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult RegisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteFontFileLoader*, int>)(lpVtbl[29]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.UnregisterFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult UnregisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteFontFileLoader*, int>)(lpVtbl[30]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult CreateTextFormat(ushort* fontFamilyName, IDWriteFontCollection* fontCollection, FontWeight fontWeight, FontStyle fontStyle, FontStretch fontStretch, float fontSize, ushort* localeName, IDWriteTextFormat** textFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, ushort*, IDWriteFontCollection*, FontWeight, FontStyle, FontStretch, float, ushort*, IDWriteTextFormat**, int>)(lpVtbl[31]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTypography" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult CreateTypography(IDWriteTypography** typography)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteTypography**, int>)(lpVtbl[32]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), typography);
	}

	/// <inheritdoc cref="IDWriteFactory.GetGdiInterop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult GetGdiInterop(IDWriteGdiInterop** gdiInterop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteGdiInterop**, int>)(lpVtbl[33]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), gdiInterop);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextLayout" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult CreateTextLayout(ushort* @string, uint stringLength, IDWriteTextFormat* textFormat, float maxWidth, float maxHeight, IDWriteTextLayout** textLayout)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, ushort*, uint, IDWriteTextFormat*, float, float, IDWriteTextLayout**, int>)(lpVtbl[34]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), @string, stringLength, textFormat, maxWidth, maxHeight, textLayout);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateGdiCompatibleTextLayout" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult CreateGdiCompatibleTextLayout(ushort* @string, uint stringLength, IDWriteTextFormat* textFormat, float layoutWidth, float layoutHeight, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, IDWriteTextLayout** textLayout)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, ushort*, uint, IDWriteTextFormat*, float, float, float, Matrix*, Bool32, IDWriteTextLayout**, int>)(lpVtbl[35]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), @string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateEllipsisTrimmingSign" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult CreateEllipsisTrimmingSign(IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteTextFormat*, IDWriteInlineObject**, int>)(lpVtbl[36]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), textFormat, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextAnalyzer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult CreateTextAnalyzer(IDWriteTextAnalyzer** textAnalyzer)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, IDWriteTextAnalyzer**, int>)(lpVtbl[37]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), textAnalyzer);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateNumberSubstitution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult CreateNumberSubstitution(NumberSubstitutionMethod substitutionMethod, ushort* localeName, Bool32 ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, NumberSubstitutionMethod, ushort*, Bool32, IDWriteNumberSubstitution**, int>)(lpVtbl[38]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), substitutionMethod, localeName, ignoreUserOverride, numberSubstitution);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateGlyphRunAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, float pixelsPerDip, Matrix* transform, RenderingMode renderingMode, MeasuringMode measuringMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, GlyphRun*, float, Matrix*, RenderingMode, MeasuringMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[39]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory4::TranslateColorGlyphRun"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult TranslateColorGlyphRun(System.Drawing.PointF* baselineOrigin, GlyphRun* glyphRun, GlyphRunDescription* glyphRunDescription, GlyphImageFormats desiredGlyphImageFormats, MeasuringMode measuringMode, Matrix* worldAndDpiTransform, uint colorPaletteIndex, IDWriteColorGlyphRunEnumerator1** colorLayers)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, System.Drawing.PointF*, GlyphRun*, GlyphRunDescription*, GlyphImageFormats, MeasuringMode, Matrix*, uint, IDWriteColorGlyphRunEnumerator1**, int>)(lpVtbl[40]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), baselineOrigin, glyphRun, glyphRunDescription, desiredGlyphImageFormats, measuringMode, worldAndDpiTransform, colorPaletteIndex, colorLayers);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory4::ComputeGlyphOrigins"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult ComputeGlyphOrigins(GlyphRun* glyphRun, System.Drawing.PointF* baselineOrigin, System.Drawing.PointF** glyphOrigins)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, GlyphRun*, System.Drawing.PointF*, System.Drawing.PointF**, int>)(lpVtbl[41]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), glyphRun, baselineOrigin, glyphOrigins);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory4::ComputeGlyphOrigins"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public HResult ComputeGlyphOrigins(GlyphRun* glyphRun, MeasuringMode measuringMode, System.Drawing.PointF* baselineOrigin, Matrix* worldAndDpiTransform, System.Drawing.PointF** glyphOrigins)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory4*, GlyphRun*, MeasuringMode, System.Drawing.PointF*, Matrix*, System.Drawing.PointF**, int>)(lpVtbl[42]))((IDWriteFactory4*)Unsafe.AsPointer(ref this), glyphRun, measuringMode, baselineOrigin, worldAndDpiTransform, glyphOrigins);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSetBuilder1"]/*' />
/// <unmanaged>IDWriteFontSetBuilder1</unmanaged>
[Guid("3ff7715f-3cdc-4dc6-9b72-ec5621dccafd")]
[NativeTypeName("struct IDWriteFontSetBuilder1 : IDWriteFontSetBuilder")]
[NativeInheritance("IDWriteFontSetBuilder")]
public unsafe partial struct IDWriteFontSetBuilder1
{
	public static ref readonly Guid IID_IDWriteFontSetBuilder1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5F, 0x71, 0xF7, 0x3F,
				0xDC, 0x3C,
				0xC6, 0x4D,
				0x9B,
				0x72,
				0xEC,
				0x56,
				0x21,
				0xDC,
				0xCA,
				0xFD
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontSetBuilder1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontSetBuilder.AddFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult AddFontFaceReference(IDWriteFontFaceReference* fontFaceReference, FontProperty* properties, uint propertyCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSetBuilder1*, IDWriteFontFaceReference*, FontProperty*, uint, int>)(lpVtbl[3]))((IDWriteFontSetBuilder1*)Unsafe.AsPointer(ref this), fontFaceReference, properties, propertyCount);
	}

	/// <inheritdoc cref="IDWriteFontSetBuilder.AddFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult AddFontFaceReference(IDWriteFontFaceReference* fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSetBuilder1*, IDWriteFontFaceReference*, int>)(lpVtbl[4]))((IDWriteFontSetBuilder1*)Unsafe.AsPointer(ref this), fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFontSetBuilder.AddFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult AddFontSet(IDWriteFontSet* fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSetBuilder1*, IDWriteFontSet*, int>)(lpVtbl[5]))((IDWriteFontSetBuilder1*)Unsafe.AsPointer(ref this), fontSet);
	}

	/// <inheritdoc cref="IDWriteFontSetBuilder.CreateFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CreateFontSet(IDWriteFontSet** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSetBuilder1*, IDWriteFontSet**, int>)(lpVtbl[6]))((IDWriteFontSetBuilder1*)Unsafe.AsPointer(ref this), fontSet);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSetBuilder1::AddFontFile"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult AddFontFile(IDWriteFontFile* fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSetBuilder1*, IDWriteFontFile*, int>)(lpVtbl[7]))((IDWriteFontSetBuilder1*)Unsafe.AsPointer(ref this), fontFile);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteAsyncResult"]/*' />
/// <unmanaged>IDWriteAsyncResult</unmanaged>
[Guid("ce25f8fd-863b-4d13-9651-c1f88dc73fe2")]
[NativeTypeName("struct IDWriteAsyncResult : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteAsyncResult
{
	public static ref readonly Guid IID_IDWriteAsyncResult
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFD, 0xF8, 0x25, 0xCE,
				0x3B, 0x86,
				0x13, 0x4D,
				0x96,
				0x51,
				0xC1,
				0xF8,
				0x8D,
				0xC7,
				0x3F,
				0xE2
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteAsyncResult));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteAsyncResult::GetWaitHandle"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public IntPtr GetWaitHandle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteAsyncResult*, IntPtr>)(lpVtbl[3]))((IDWriteAsyncResult*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteAsyncResult::GetResult"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetResult()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteAsyncResult*, int>)(lpVtbl[4]))((IDWriteAsyncResult*)Unsafe.AsPointer(ref this));
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRemoteFontFileStream"]/*' />
/// <unmanaged>IDWriteRemoteFontFileStream</unmanaged>
[Guid("4db3757a-2c72-4ed9-b2b6-1ababe1aff9c")]
[NativeTypeName("struct IDWriteRemoteFontFileStream : IDWriteFontFileStream")]
[NativeInheritance("IDWriteFontFileStream")]
public unsafe partial struct IDWriteRemoteFontFileStream
{
	public static ref readonly Guid IID_IDWriteRemoteFontFileStream
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7A, 0x75, 0xB3, 0x4D,
				0x72, 0x2C,
				0xD9, 0x4E,
				0xB2,
				0xB6,
				0x1A,
				0xBA,
				0xBE,
				0x1A,
				0xFF,
				0x9C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteRemoteFontFileStream));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFileStream.ReadFileFragment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult ReadFileFragment(void** fragmentStart, ulong fileOffset, ulong fragmentSize, void** fragmentContext)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRemoteFontFileStream*, void**, ulong, ulong, void**, int>)(lpVtbl[3]))((IDWriteRemoteFontFileStream*)Unsafe.AsPointer(ref this), fragmentStart, fileOffset, fragmentSize, fragmentContext);
	}

	/// <inheritdoc cref="IDWriteFontFileStream.ReleaseFileFragment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void ReleaseFileFragment(void* fragmentContext)
	{
		((delegate* unmanaged[Stdcall]<IDWriteRemoteFontFileStream*, void*, void>)(lpVtbl[4]))((IDWriteRemoteFontFileStream*)Unsafe.AsPointer(ref this), fragmentContext);
	}

	/// <inheritdoc cref="IDWriteFontFileStream.GetFileSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetFileSize(ulong* fileSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRemoteFontFileStream*, ulong*, int>)(lpVtbl[5]))((IDWriteRemoteFontFileStream*)Unsafe.AsPointer(ref this), fileSize);
	}

	/// <inheritdoc cref="IDWriteFontFileStream.GetLastWriteTime" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetLastWriteTime(ulong* lastWriteTime)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRemoteFontFileStream*, ulong*, int>)(lpVtbl[6]))((IDWriteRemoteFontFileStream*)Unsafe.AsPointer(ref this), lastWriteTime);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRemoteFontFileStream::GetLocalFileSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetLocalFileSize(ulong* localFileSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRemoteFontFileStream*, ulong*, int>)(lpVtbl[7]))((IDWriteRemoteFontFileStream*)Unsafe.AsPointer(ref this), localFileSize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRemoteFontFileStream::GetFileFragmentLocality"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetFileFragmentLocality(ulong fileOffset, ulong fragmentSize, Bool32* isLocal, ulong* partialSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRemoteFontFileStream*, ulong, ulong, Bool32*, ulong*, int>)(lpVtbl[8]))((IDWriteRemoteFontFileStream*)Unsafe.AsPointer(ref this), fileOffset, fragmentSize, isLocal, partialSize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRemoteFontFileStream::GetLocality"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public Graphics.DirectWrite.Locality GetLocality()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRemoteFontFileStream*, Graphics.DirectWrite.Locality>)(lpVtbl[9]))((IDWriteRemoteFontFileStream*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRemoteFontFileStream::BeginDownload"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult BeginDownload(Guid* downloadOperationID, FileFragment* fileFragments, uint fragmentCount, IDWriteAsyncResult** asyncResult)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRemoteFontFileStream*, Guid*, FileFragment*, uint, IDWriteAsyncResult**, int>)(lpVtbl[10]))((IDWriteRemoteFontFileStream*)Unsafe.AsPointer(ref this), downloadOperationID, fileFragments, fragmentCount, asyncResult);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRemoteFontFileLoader"]/*' />
/// <unmanaged>IDWriteRemoteFontFileLoader</unmanaged>
[Guid("68648c83-6ede-46c0-ab46-20083a887fde")]
[NativeTypeName("struct IDWriteRemoteFontFileLoader : IDWriteFontFileLoader")]
[NativeInheritance("IDWriteFontFileLoader")]
public unsafe partial struct IDWriteRemoteFontFileLoader
{
	public static ref readonly Guid IID_IDWriteRemoteFontFileLoader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x83, 0x8C, 0x64, 0x68,
				0xDE, 0x6E,
				0xC0, 0x46,
				0xAB,
				0x46,
				0x20,
				0x08,
				0x3A,
				0x88,
				0x7F,
				0xDE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteRemoteFontFileLoader));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFileLoader.CreateStreamFromKey" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreateStreamFromKey(void* fontFileReferenceKey, uint fontFileReferenceKeySize, IDWriteFontFileStream** fontFileStream)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRemoteFontFileLoader*, void*, uint, IDWriteFontFileStream**, int>)(lpVtbl[3]))((IDWriteRemoteFontFileLoader*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, fontFileStream);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRemoteFontFileLoader::CreateRemoteStreamFromKey"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateRemoteStreamFromKey(void* fontFileReferenceKey, uint fontFileReferenceKeySize, IDWriteRemoteFontFileStream** fontFileStream)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRemoteFontFileLoader*, void*, uint, IDWriteRemoteFontFileStream**, int>)(lpVtbl[4]))((IDWriteRemoteFontFileLoader*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, fontFileStream);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRemoteFontFileLoader::GetLocalityFromKey"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetLocalityFromKey(void* fontFileReferenceKey, uint fontFileReferenceKeySize, Locality* locality)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRemoteFontFileLoader*, void*, uint, Locality*, int>)(lpVtbl[5]))((IDWriteRemoteFontFileLoader*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, locality);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteRemoteFontFileLoader::CreateFontFileReferenceFromUrl"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CreateFontFileReferenceFromUrl(IDWriteFactory* factory, ushort* baseUrl, ushort* fontFileUrl, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteRemoteFontFileLoader*, IDWriteFactory*, ushort*, ushort*, IDWriteFontFile**, int>)(lpVtbl[6]))((IDWriteRemoteFontFileLoader*)Unsafe.AsPointer(ref this), factory, baseUrl, fontFileUrl, fontFile);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteInMemoryFontFileLoader"]/*' />
/// <unmanaged>IDWriteInMemoryFontFileLoader</unmanaged>
[Guid("dc102f47-a12d-4b1c-822d-9e117e33043f")]
[NativeTypeName("struct IDWriteInMemoryFontFileLoader : IDWriteFontFileLoader")]
[NativeInheritance("IDWriteFontFileLoader")]
public unsafe partial struct IDWriteInMemoryFontFileLoader
{
	public static ref readonly Guid IID_IDWriteInMemoryFontFileLoader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x47, 0x2F, 0x10, 0xDC,
				0x2D, 0xA1,
				0x1C, 0x4B,
				0x82,
				0x2D,
				0x9E,
				0x11,
				0x7E,
				0x33,
				0x04,
				0x3F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteInMemoryFontFileLoader));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFileLoader.CreateStreamFromKey" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreateStreamFromKey(void* fontFileReferenceKey, uint fontFileReferenceKeySize, IDWriteFontFileStream** fontFileStream)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteInMemoryFontFileLoader*, void*, uint, IDWriteFontFileStream**, int>)(lpVtbl[3]))((IDWriteInMemoryFontFileLoader*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, fontFileStream);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteInMemoryFontFileLoader::CreateInMemoryFontFileReference"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateInMemoryFontFileReference(IDWriteFactory* factory, void* fontData, uint fontDataSize, IUnknown* ownerObject, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteInMemoryFontFileLoader*, IDWriteFactory*, void*, uint, IUnknown*, IDWriteFontFile**, int>)(lpVtbl[4]))((IDWriteInMemoryFontFileLoader*)Unsafe.AsPointer(ref this), factory, fontData, fontDataSize, ownerObject, fontFile);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteInMemoryFontFileLoader::GetFileCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public uint GetFileCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteInMemoryFontFileLoader*, uint>)(lpVtbl[5]))((IDWriteInMemoryFontFileLoader*)Unsafe.AsPointer(ref this));
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory5"]/*' />
/// <unmanaged>IDWriteFactory5</unmanaged>
[Guid("958db99a-be2a-4f09-af7d-65189803d1d3")]
[NativeTypeName("struct IDWriteFactory5 : IDWriteFactory4")]
[NativeInheritance("IDWriteFactory4")]
public unsafe partial struct IDWriteFactory5
{
	public static ref readonly Guid IID_IDWriteFactory5
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x9A, 0xB9, 0x8D, 0x95,
				0x2A, 0xBE,
				0x09, 0x4F,
				0xAF,
				0x7D,
				0x65,
				0x18,
				0x98,
				0x03,
				0xD1,
				0xD3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFactory5));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFactory4.TranslateColorGlyphRun" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult TranslateColorGlyphRun(System.Drawing.PointF* baselineOrigin, GlyphRun* glyphRun, GlyphRunDescription* glyphRunDescription, GlyphImageFormats desiredGlyphImageFormats, MeasuringMode measuringMode, Matrix* worldAndDpiTransform, uint colorPaletteIndex, IDWriteColorGlyphRunEnumerator1** colorLayers)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, System.Drawing.PointF*, GlyphRun*, GlyphRunDescription*, GlyphImageFormats, MeasuringMode, Matrix*, uint, IDWriteColorGlyphRunEnumerator1**, int>)(lpVtbl[3]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), baselineOrigin, glyphRun, glyphRunDescription, desiredGlyphImageFormats, measuringMode, worldAndDpiTransform, colorPaletteIndex, colorLayers);
	}

	/// <inheritdoc cref="IDWriteFactory4.ComputeGlyphOrigins" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult ComputeGlyphOrigins(GlyphRun* glyphRun, System.Drawing.PointF* baselineOrigin, System.Drawing.PointF** glyphOrigins)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, GlyphRun*, System.Drawing.PointF*, System.Drawing.PointF**, int>)(lpVtbl[4]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), glyphRun, baselineOrigin, glyphOrigins);
	}

	/// <inheritdoc cref="IDWriteFactory4.ComputeGlyphOrigins" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult ComputeGlyphOrigins(GlyphRun* glyphRun, MeasuringMode measuringMode, System.Drawing.PointF* baselineOrigin, Matrix* worldAndDpiTransform, System.Drawing.PointF** glyphOrigins)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, GlyphRun*, MeasuringMode, System.Drawing.PointF*, Matrix*, System.Drawing.PointF**, int>)(lpVtbl[5]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), glyphRun, measuringMode, baselineOrigin, worldAndDpiTransform, glyphOrigins);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateGlyphRunAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, Matrix* transform, RenderingMode1 renderingMode, MeasuringMode measuringMode, GridFitMode gridFitMode, TextAntialiasMode antialiasMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, GlyphRun*, Matrix*, RenderingMode1, MeasuringMode, GridFitMode, TextAntialiasMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[6]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode1 renderingMode, GridFitMode gridFitMode, IDWriteRenderingParams3** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, float, float, float, float, PixelGeometry, RenderingMode1, GridFitMode, IDWriteRenderingParams3**, int>)(lpVtbl[7]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult CreateFontFaceReference(IDWriteFontFile* fontFile, uint faceIndex, FontSimulations fontSimulations, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteFontFile*, uint, FontSimulations, IDWriteFontFaceReference**, int>)(lpVtbl[8]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontFile, faceIndex, fontSimulations, fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CreateFontFaceReference(ushort* filePath, ulong* lastWriteTime, uint faceIndex, FontSimulations fontSimulations, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, ushort*, ulong*, uint, FontSimulations, IDWriteFontFaceReference**, int>)(lpVtbl[9]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), filePath, lastWriteTime, faceIndex, fontSimulations, fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFactory3.GetSystemFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetSystemFontSet(IDWriteFontSet** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteFontSet**, int>)(lpVtbl[10]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontSet);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateFontSetBuilder" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CreateFontSetBuilder(IDWriteFontSetBuilder** fontSetBuilder)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteFontSetBuilder**, int>)(lpVtbl[11]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontSetBuilder);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateFontCollectionFromFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CreateFontCollectionFromFontSet(IDWriteFontSet* fontSet, IDWriteFontCollection1** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteFontSet*, IDWriteFontCollection1**, int>)(lpVtbl[12]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontSet, fontCollection);
	}

	/// <inheritdoc cref="IDWriteFactory3.GetSystemFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetSystemFontCollection(Bool32 includeDownloadableFonts, IDWriteFontCollection1** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, Bool32, IDWriteFontCollection1**, Bool32, int>)(lpVtbl[13]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), includeDownloadableFonts, fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory3.GetFontDownloadQueue" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult GetFontDownloadQueue(IDWriteFontDownloadQueue** fontDownloadQueue)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteFontDownloadQueue**, int>)(lpVtbl[14]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontDownloadQueue);
	}

	/// <inheritdoc cref="IDWriteFactory2.GetSystemFontFallback" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetSystemFontFallback(IDWriteFontFallback** fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteFontFallback**, int>)(lpVtbl[15]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <inheritdoc cref="IDWriteFactory2.CreateFontFallbackBuilder" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult CreateFontFallbackBuilder(IDWriteFontFallbackBuilder** fontFallbackBuilder)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteFontFallbackBuilder**, int>)(lpVtbl[16]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontFallbackBuilder);
	}

	/// <inheritdoc cref="IDWriteFactory2.TranslateColorGlyphRun" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult TranslateColorGlyphRun(float baselineOriginX, float baselineOriginY, GlyphRun* glyphRun, GlyphRunDescription* glyphRunDescription, MeasuringMode measuringMode, Matrix* worldToDeviceTransform, uint colorPaletteIndex, IDWriteColorGlyphRunEnumerator** colorLayers)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, float, float, GlyphRun*, GlyphRunDescription*, MeasuringMode, Matrix*, uint, IDWriteColorGlyphRunEnumerator**, int>)(lpVtbl[17]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), baselineOriginX, baselineOriginY, glyphRun, glyphRunDescription, measuringMode, worldToDeviceTransform, colorPaletteIndex, colorLayers);
	}

	/// <inheritdoc cref="IDWriteFactory2.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, GridFitMode gridFitMode, IDWriteRenderingParams2** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, float, float, float, float, PixelGeometry, RenderingMode, GridFitMode, IDWriteRenderingParams2**, int>)(lpVtbl[18]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory2.CreateGlyphRunAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, Matrix* transform, RenderingMode renderingMode, MeasuringMode measuringMode, GridFitMode gridFitMode, TextAntialiasMode antialiasMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, GlyphRun*, Matrix*, RenderingMode, MeasuringMode, GridFitMode, TextAntialiasMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[19]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <inheritdoc cref="IDWriteFactory1.GetEudcFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult GetEudcFontCollection(IDWriteFontCollection** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteFontCollection**, Bool32, int>)(lpVtbl[20]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory1.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float enhancedContrastGrayscale, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, IDWriteRenderingParams1** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, float, float, float, float, PixelGeometry, RenderingMode, IDWriteRenderingParams1**, int>)(lpVtbl[21]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.GetSystemFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult GetSystemFontCollection(IDWriteFontCollection** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteFontCollection**, Bool32, int>)(lpVtbl[22]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult CreateCustomFontCollection(IDWriteFontCollectionLoader* collectionLoader, void* collectionKey, uint collectionKeySize, IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteFontCollectionLoader*, void*, uint, IDWriteFontCollection**, int>)(lpVtbl[23]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), collectionLoader, collectionKey, collectionKeySize, fontCollection);
	}

	/// <inheritdoc cref="IDWriteFactory.RegisterFontCollectionLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult RegisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteFontCollectionLoader*, int>)(lpVtbl[24]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontCollectionLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.UnregisterFontCollectionLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult UnregisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteFontCollectionLoader*, int>)(lpVtbl[25]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontCollectionLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateFontFileReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult CreateFontFileReference(ushort* filePath, ulong* lastWriteTime, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, ushort*, ulong*, IDWriteFontFile**, int>)(lpVtbl[26]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), filePath, lastWriteTime, fontFile);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomFontFileReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult CreateCustomFontFileReference(void* fontFileReferenceKey, uint fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, void*, uint, IDWriteFontFileLoader*, IDWriteFontFile**, int>)(lpVtbl[27]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult CreateFontFace(FontFaceType fontFaceType, uint numberOfFiles, IDWriteFontFile** fontFiles, uint faceIndex, FontSimulations fontFaceSimulationFlags, IDWriteFontFace** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, FontFaceType, uint, IDWriteFontFile**, uint, FontSimulations, IDWriteFontFace**, int>)(lpVtbl[28]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult CreateRenderingParams(IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteRenderingParams**, int>)(lpVtbl[29]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateMonitorRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult CreateMonitorRenderingParams(IntPtr monitor, IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IntPtr, IDWriteRenderingParams**, int>)(lpVtbl[30]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), monitor, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, float, float, float, PixelGeometry, RenderingMode, IDWriteRenderingParams**, int>)(lpVtbl[31]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.RegisterFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult RegisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteFontFileLoader*, int>)(lpVtbl[32]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.UnregisterFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult UnregisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteFontFileLoader*, int>)(lpVtbl[33]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult CreateTextFormat(ushort* fontFamilyName, IDWriteFontCollection* fontCollection, FontWeight fontWeight, FontStyle fontStyle, FontStretch fontStretch, float fontSize, ushort* localeName, IDWriteTextFormat** textFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, ushort*, IDWriteFontCollection*, FontWeight, FontStyle, FontStretch, float, ushort*, IDWriteTextFormat**, int>)(lpVtbl[34]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTypography" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult CreateTypography(IDWriteTypography** typography)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteTypography**, int>)(lpVtbl[35]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), typography);
	}

	/// <inheritdoc cref="IDWriteFactory.GetGdiInterop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult GetGdiInterop(IDWriteGdiInterop** gdiInterop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteGdiInterop**, int>)(lpVtbl[36]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), gdiInterop);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextLayout" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult CreateTextLayout(ushort* @string, uint stringLength, IDWriteTextFormat* textFormat, float maxWidth, float maxHeight, IDWriteTextLayout** textLayout)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, ushort*, uint, IDWriteTextFormat*, float, float, IDWriteTextLayout**, int>)(lpVtbl[37]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), @string, stringLength, textFormat, maxWidth, maxHeight, textLayout);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateGdiCompatibleTextLayout" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult CreateGdiCompatibleTextLayout(ushort* @string, uint stringLength, IDWriteTextFormat* textFormat, float layoutWidth, float layoutHeight, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, IDWriteTextLayout** textLayout)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, ushort*, uint, IDWriteTextFormat*, float, float, float, Matrix*, Bool32, IDWriteTextLayout**, int>)(lpVtbl[38]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), @string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateEllipsisTrimmingSign" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult CreateEllipsisTrimmingSign(IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteTextFormat*, IDWriteInlineObject**, int>)(lpVtbl[39]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), textFormat, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextAnalyzer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult CreateTextAnalyzer(IDWriteTextAnalyzer** textAnalyzer)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteTextAnalyzer**, int>)(lpVtbl[40]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), textAnalyzer);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateNumberSubstitution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult CreateNumberSubstitution(NumberSubstitutionMethod substitutionMethod, ushort* localeName, Bool32 ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, NumberSubstitutionMethod, ushort*, Bool32, IDWriteNumberSubstitution**, int>)(lpVtbl[41]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), substitutionMethod, localeName, ignoreUserOverride, numberSubstitution);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateGlyphRunAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, float pixelsPerDip, Matrix* transform, RenderingMode renderingMode, MeasuringMode measuringMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, GlyphRun*, float, Matrix*, RenderingMode, MeasuringMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[42]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory5::CreateFontSetBuilder"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public HResult CreateFontSetBuilder(IDWriteFontSetBuilder1** fontSetBuilder)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteFontSetBuilder1**, int>)(lpVtbl[43]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fontSetBuilder);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory5::CreateInMemoryFontFileLoader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public HResult CreateInMemoryFontFileLoader(IDWriteInMemoryFontFileLoader** newLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, IDWriteInMemoryFontFileLoader**, int>)(lpVtbl[44]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), newLoader);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory5::CreateHttpFontFileLoader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public HResult CreateHttpFontFileLoader(ushort* referrerUrl, ushort* extraHeaders, IDWriteRemoteFontFileLoader** newLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, ushort*, ushort*, IDWriteRemoteFontFileLoader**, int>)(lpVtbl[45]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), referrerUrl, extraHeaders, newLoader);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory5::AnalyzeContainerType"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public Graphics.DirectWrite.ContainerType AnalyzeContainerType(void* fileData, uint fileDataSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, void*, uint, Graphics.DirectWrite.ContainerType>)(lpVtbl[46]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), fileData, fileDataSize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory5::UnpackFontFile"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult UnpackFontFile(ContainerType containerType, void* fileData, uint fileDataSize, IDWriteFontFileStream** unpackedFontStream)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory5*, ContainerType, void*, uint, IDWriteFontFileStream**, int>)(lpVtbl[47]))((IDWriteFactory5*)Unsafe.AsPointer(ref this), containerType, fileData, fileDataSize, unpackedFontStream);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory6"]/*' />
/// <unmanaged>IDWriteFactory6</unmanaged>
[Guid("f3744d80-21f7-42eb-b35d-995bc72fc223")]
[NativeTypeName("struct IDWriteFactory6 : IDWriteFactory5")]
[NativeInheritance("IDWriteFactory5")]
public unsafe partial struct IDWriteFactory6
{
	public static ref readonly Guid IID_IDWriteFactory6
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x80, 0x4D, 0x74, 0xF3,
				0xF7, 0x21,
				0xEB, 0x42,
				0xB3,
				0x5D,
				0x99,
				0x5B,
				0xC7,
				0x2F,
				0xC2,
				0x23
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFactory6));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFactory5.CreateFontSetBuilder" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreateFontSetBuilder(IDWriteFontSetBuilder1** fontSetBuilder)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontSetBuilder1**, int>)(lpVtbl[3]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontSetBuilder);
	}

	/// <inheritdoc cref="IDWriteFactory5.CreateInMemoryFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateInMemoryFontFileLoader(IDWriteInMemoryFontFileLoader** newLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteInMemoryFontFileLoader**, int>)(lpVtbl[4]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), newLoader);
	}

	/// <inheritdoc cref="IDWriteFactory5.CreateHttpFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult CreateHttpFontFileLoader(ushort* referrerUrl, ushort* extraHeaders, IDWriteRemoteFontFileLoader** newLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, ushort*, ushort*, IDWriteRemoteFontFileLoader**, int>)(lpVtbl[5]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), referrerUrl, extraHeaders, newLoader);
	}

	/// <inheritdoc cref="IDWriteFactory5.AnalyzeContainerType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public Graphics.DirectWrite.ContainerType AnalyzeContainerType(void* fileData, uint fileDataSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, void*, uint, Graphics.DirectWrite.ContainerType>)(lpVtbl[6]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fileData, fileDataSize);
	}

	/// <inheritdoc cref="IDWriteFactory5.UnpackFontFile" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult UnpackFontFile(ContainerType containerType, void* fileData, uint fileDataSize, IDWriteFontFileStream** unpackedFontStream)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, ContainerType, void*, uint, IDWriteFontFileStream**, int>)(lpVtbl[7]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), containerType, fileData, fileDataSize, unpackedFontStream);
	}

	/// <inheritdoc cref="IDWriteFactory4.TranslateColorGlyphRun" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult TranslateColorGlyphRun(System.Drawing.PointF* baselineOrigin, GlyphRun* glyphRun, GlyphRunDescription* glyphRunDescription, GlyphImageFormats desiredGlyphImageFormats, MeasuringMode measuringMode, Matrix* worldAndDpiTransform, uint colorPaletteIndex, IDWriteColorGlyphRunEnumerator1** colorLayers)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, System.Drawing.PointF*, GlyphRun*, GlyphRunDescription*, GlyphImageFormats, MeasuringMode, Matrix*, uint, IDWriteColorGlyphRunEnumerator1**, int>)(lpVtbl[8]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), baselineOrigin, glyphRun, glyphRunDescription, desiredGlyphImageFormats, measuringMode, worldAndDpiTransform, colorPaletteIndex, colorLayers);
	}

	/// <inheritdoc cref="IDWriteFactory4.ComputeGlyphOrigins" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult ComputeGlyphOrigins(GlyphRun* glyphRun, System.Drawing.PointF* baselineOrigin, System.Drawing.PointF** glyphOrigins)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, GlyphRun*, System.Drawing.PointF*, System.Drawing.PointF**, int>)(lpVtbl[9]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), glyphRun, baselineOrigin, glyphOrigins);
	}

	/// <inheritdoc cref="IDWriteFactory4.ComputeGlyphOrigins" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult ComputeGlyphOrigins(GlyphRun* glyphRun, MeasuringMode measuringMode, System.Drawing.PointF* baselineOrigin, Matrix* worldAndDpiTransform, System.Drawing.PointF** glyphOrigins)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, GlyphRun*, MeasuringMode, System.Drawing.PointF*, Matrix*, System.Drawing.PointF**, int>)(lpVtbl[10]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), glyphRun, measuringMode, baselineOrigin, worldAndDpiTransform, glyphOrigins);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateGlyphRunAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, Matrix* transform, RenderingMode1 renderingMode, MeasuringMode measuringMode, GridFitMode gridFitMode, TextAntialiasMode antialiasMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, GlyphRun*, Matrix*, RenderingMode1, MeasuringMode, GridFitMode, TextAntialiasMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[11]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode1 renderingMode, GridFitMode gridFitMode, IDWriteRenderingParams3** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, float, float, float, float, PixelGeometry, RenderingMode1, GridFitMode, IDWriteRenderingParams3**, int>)(lpVtbl[12]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult CreateFontFaceReference(IDWriteFontFile* fontFile, uint faceIndex, FontSimulations fontSimulations, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontFile*, uint, FontSimulations, IDWriteFontFaceReference**, int>)(lpVtbl[13]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontFile, faceIndex, fontSimulations, fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult CreateFontFaceReference(ushort* filePath, ulong* lastWriteTime, uint faceIndex, FontSimulations fontSimulations, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, ushort*, ulong*, uint, FontSimulations, IDWriteFontFaceReference**, int>)(lpVtbl[14]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), filePath, lastWriteTime, faceIndex, fontSimulations, fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFactory3.GetSystemFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetSystemFontSet(IDWriteFontSet** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontSet**, int>)(lpVtbl[15]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontSet);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateFontSetBuilder" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult CreateFontSetBuilder(IDWriteFontSetBuilder** fontSetBuilder)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontSetBuilder**, int>)(lpVtbl[16]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontSetBuilder);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateFontCollectionFromFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult CreateFontCollectionFromFontSet(IDWriteFontSet* fontSet, IDWriteFontCollection1** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontSet*, IDWriteFontCollection1**, int>)(lpVtbl[17]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontSet, fontCollection);
	}

	/// <inheritdoc cref="IDWriteFactory3.GetSystemFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult GetSystemFontCollection(Bool32 includeDownloadableFonts, IDWriteFontCollection1** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, Bool32, IDWriteFontCollection1**, Bool32, int>)(lpVtbl[18]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), includeDownloadableFonts, fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory3.GetFontDownloadQueue" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetFontDownloadQueue(IDWriteFontDownloadQueue** fontDownloadQueue)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontDownloadQueue**, int>)(lpVtbl[19]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontDownloadQueue);
	}

	/// <inheritdoc cref="IDWriteFactory2.GetSystemFontFallback" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult GetSystemFontFallback(IDWriteFontFallback** fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontFallback**, int>)(lpVtbl[20]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <inheritdoc cref="IDWriteFactory2.CreateFontFallbackBuilder" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult CreateFontFallbackBuilder(IDWriteFontFallbackBuilder** fontFallbackBuilder)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontFallbackBuilder**, int>)(lpVtbl[21]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontFallbackBuilder);
	}

	/// <inheritdoc cref="IDWriteFactory2.TranslateColorGlyphRun" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult TranslateColorGlyphRun(float baselineOriginX, float baselineOriginY, GlyphRun* glyphRun, GlyphRunDescription* glyphRunDescription, MeasuringMode measuringMode, Matrix* worldToDeviceTransform, uint colorPaletteIndex, IDWriteColorGlyphRunEnumerator** colorLayers)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, float, float, GlyphRun*, GlyphRunDescription*, MeasuringMode, Matrix*, uint, IDWriteColorGlyphRunEnumerator**, int>)(lpVtbl[22]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), baselineOriginX, baselineOriginY, glyphRun, glyphRunDescription, measuringMode, worldToDeviceTransform, colorPaletteIndex, colorLayers);
	}

	/// <inheritdoc cref="IDWriteFactory2.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, GridFitMode gridFitMode, IDWriteRenderingParams2** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, float, float, float, float, PixelGeometry, RenderingMode, GridFitMode, IDWriteRenderingParams2**, int>)(lpVtbl[23]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory2.CreateGlyphRunAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, Matrix* transform, RenderingMode renderingMode, MeasuringMode measuringMode, GridFitMode gridFitMode, TextAntialiasMode antialiasMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, GlyphRun*, Matrix*, RenderingMode, MeasuringMode, GridFitMode, TextAntialiasMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[24]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <inheritdoc cref="IDWriteFactory1.GetEudcFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult GetEudcFontCollection(IDWriteFontCollection** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontCollection**, Bool32, int>)(lpVtbl[25]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory1.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float enhancedContrastGrayscale, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, IDWriteRenderingParams1** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, float, float, float, float, PixelGeometry, RenderingMode, IDWriteRenderingParams1**, int>)(lpVtbl[26]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.GetSystemFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult GetSystemFontCollection(IDWriteFontCollection** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontCollection**, Bool32, int>)(lpVtbl[27]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult CreateCustomFontCollection(IDWriteFontCollectionLoader* collectionLoader, void* collectionKey, uint collectionKeySize, IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontCollectionLoader*, void*, uint, IDWriteFontCollection**, int>)(lpVtbl[28]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), collectionLoader, collectionKey, collectionKeySize, fontCollection);
	}

	/// <inheritdoc cref="IDWriteFactory.RegisterFontCollectionLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult RegisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontCollectionLoader*, int>)(lpVtbl[29]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontCollectionLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.UnregisterFontCollectionLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult UnregisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontCollectionLoader*, int>)(lpVtbl[30]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontCollectionLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateFontFileReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult CreateFontFileReference(ushort* filePath, ulong* lastWriteTime, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, ushort*, ulong*, IDWriteFontFile**, int>)(lpVtbl[31]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), filePath, lastWriteTime, fontFile);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomFontFileReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult CreateCustomFontFileReference(void* fontFileReferenceKey, uint fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, void*, uint, IDWriteFontFileLoader*, IDWriteFontFile**, int>)(lpVtbl[32]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult CreateFontFace(FontFaceType fontFaceType, uint numberOfFiles, IDWriteFontFile** fontFiles, uint faceIndex, FontSimulations fontFaceSimulationFlags, IDWriteFontFace** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, FontFaceType, uint, IDWriteFontFile**, uint, FontSimulations, IDWriteFontFace**, int>)(lpVtbl[33]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult CreateRenderingParams(IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteRenderingParams**, int>)(lpVtbl[34]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateMonitorRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult CreateMonitorRenderingParams(IntPtr monitor, IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IntPtr, IDWriteRenderingParams**, int>)(lpVtbl[35]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), monitor, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, float, float, float, PixelGeometry, RenderingMode, IDWriteRenderingParams**, int>)(lpVtbl[36]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.RegisterFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult RegisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontFileLoader*, int>)(lpVtbl[37]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.UnregisterFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult UnregisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontFileLoader*, int>)(lpVtbl[38]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult CreateTextFormat(ushort* fontFamilyName, IDWriteFontCollection* fontCollection, FontWeight fontWeight, FontStyle fontStyle, FontStretch fontStretch, float fontSize, ushort* localeName, IDWriteTextFormat** textFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, ushort*, IDWriteFontCollection*, FontWeight, FontStyle, FontStretch, float, ushort*, IDWriteTextFormat**, int>)(lpVtbl[39]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTypography" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult CreateTypography(IDWriteTypography** typography)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteTypography**, int>)(lpVtbl[40]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), typography);
	}

	/// <inheritdoc cref="IDWriteFactory.GetGdiInterop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult GetGdiInterop(IDWriteGdiInterop** gdiInterop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteGdiInterop**, int>)(lpVtbl[41]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), gdiInterop);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextLayout" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public HResult CreateTextLayout(ushort* @string, uint stringLength, IDWriteTextFormat* textFormat, float maxWidth, float maxHeight, IDWriteTextLayout** textLayout)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, ushort*, uint, IDWriteTextFormat*, float, float, IDWriteTextLayout**, int>)(lpVtbl[42]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), @string, stringLength, textFormat, maxWidth, maxHeight, textLayout);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateGdiCompatibleTextLayout" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public HResult CreateGdiCompatibleTextLayout(ushort* @string, uint stringLength, IDWriteTextFormat* textFormat, float layoutWidth, float layoutHeight, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, IDWriteTextLayout** textLayout)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, ushort*, uint, IDWriteTextFormat*, float, float, float, Matrix*, Bool32, IDWriteTextLayout**, int>)(lpVtbl[43]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), @string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateEllipsisTrimmingSign" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public HResult CreateEllipsisTrimmingSign(IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteTextFormat*, IDWriteInlineObject**, int>)(lpVtbl[44]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), textFormat, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextAnalyzer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public HResult CreateTextAnalyzer(IDWriteTextAnalyzer** textAnalyzer)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteTextAnalyzer**, int>)(lpVtbl[45]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), textAnalyzer);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateNumberSubstitution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public HResult CreateNumberSubstitution(NumberSubstitutionMethod substitutionMethod, ushort* localeName, Bool32 ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, NumberSubstitutionMethod, ushort*, Bool32, IDWriteNumberSubstitution**, int>)(lpVtbl[46]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), substitutionMethod, localeName, ignoreUserOverride, numberSubstitution);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateGlyphRunAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, float pixelsPerDip, Matrix* transform, RenderingMode renderingMode, MeasuringMode measuringMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, GlyphRun*, float, Matrix*, RenderingMode, MeasuringMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[47]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory6::CreateFontFaceReference"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public HResult CreateFontFaceReference(IDWriteFontFile* fontFile, uint faceIndex, FontSimulations fontSimulations, FontAxisValue* fontAxisValues, uint fontAxisValueCount, IDWriteFontFaceReference1** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontFile*, uint, FontSimulations, FontAxisValue*, uint, IDWriteFontFaceReference1**, int>)(lpVtbl[48]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontFile, faceIndex, fontSimulations, fontAxisValues, fontAxisValueCount, fontFaceReference);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory6::CreateFontResource"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public HResult CreateFontResource(IDWriteFontFile* fontFile, uint faceIndex, IDWriteFontResource** fontResource)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontFile*, uint, IDWriteFontResource**, int>)(lpVtbl[49]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontFile, faceIndex, fontResource);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory6::GetSystemFontSet"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public HResult GetSystemFontSet(Bool32 includeDownloadableFonts, IDWriteFontSet1** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, Bool32, IDWriteFontSet1**, int>)(lpVtbl[50]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), includeDownloadableFonts, fontSet);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory6::GetSystemFontCollection"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public HResult GetSystemFontCollection(Bool32 includeDownloadableFonts, FontFamilyModel fontFamilyModel, IDWriteFontCollection2** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, Bool32, FontFamilyModel, IDWriteFontCollection2**, int>)(lpVtbl[51]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), includeDownloadableFonts, fontFamilyModel, fontCollection);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory6::CreateFontCollectionFromFontSet"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public HResult CreateFontCollectionFromFontSet(IDWriteFontSet* fontSet, FontFamilyModel fontFamilyModel, IDWriteFontCollection2** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontSet*, FontFamilyModel, IDWriteFontCollection2**, int>)(lpVtbl[52]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontSet, fontFamilyModel, fontCollection);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory6::CreateFontSetBuilder"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public HResult CreateFontSetBuilder(IDWriteFontSetBuilder2** fontSetBuilder)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, IDWriteFontSetBuilder2**, int>)(lpVtbl[53]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontSetBuilder);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory6::CreateTextFormat"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public HResult CreateTextFormat(ushort* fontFamilyName, IDWriteFontCollection* fontCollection, FontAxisValue* fontAxisValues, uint fontAxisValueCount, float fontSize, ushort* localeName, IDWriteTextFormat3** textFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory6*, ushort*, IDWriteFontCollection*, FontAxisValue*, uint, float, ushort*, IDWriteTextFormat3**, int>)(lpVtbl[54]))((IDWriteFactory6*)Unsafe.AsPointer(ref this), fontFamilyName, fontCollection, fontAxisValues, fontAxisValueCount, fontSize, localeName, textFormat);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace5"]/*' />
/// <unmanaged>IDWriteFontFace5</unmanaged>
[Guid("98eff3a5-b667-479a-b145-e2fa5b9fdc29")]
[NativeTypeName("struct IDWriteFontFace5 : IDWriteFontFace4")]
[NativeInheritance("IDWriteFontFace4")]
public unsafe partial struct IDWriteFontFace5
{
	public static ref readonly Guid IID_IDWriteFontFace5
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA5, 0xF3, 0xEF, 0x98,
				0x67, 0xB6,
				0x9A, 0x47,
				0xB1,
				0x45,
				0xE2,
				0xFA,
				0x5B,
				0x9F,
				0xDC,
				0x29
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFace5));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace4.GetGlyphImageFormats" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetGlyphImageFormats(ushort glyphId, uint pixelsPerEmFirst, uint pixelsPerEmLast, GlyphImageFormats* glyphImageFormats)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, ushort, uint, uint, GlyphImageFormats*, int>)(lpVtbl[3]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), glyphId, pixelsPerEmFirst, pixelsPerEmLast, glyphImageFormats);
	}

	/// <inheritdoc cref="IDWriteFontFace4.GetGlyphImageFormats" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public Graphics.DirectWrite.GlyphImageFormats GetGlyphImageFormats()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, Graphics.DirectWrite.GlyphImageFormats>)(lpVtbl[4]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace4.GetGlyphImageData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetGlyphImageData(ushort glyphId, uint pixelsPerEm, GlyphImageFormats glyphImageFormat, GlyphImageData* glyphData, void** glyphDataContext)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, ushort, uint, GlyphImageFormats, GlyphImageData*, void**, int>)(lpVtbl[5]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), glyphId, pixelsPerEm, glyphImageFormat, glyphData, glyphDataContext);
	}

	/// <inheritdoc cref="IDWriteFontFace4.ReleaseGlyphImageData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public void ReleaseGlyphImageData(void* glyphDataContext)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, void*, void>)(lpVtbl[6]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), glyphDataContext);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetFontFaceReference(IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, IDWriteFontFaceReference**, int>)(lpVtbl[7]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetPanose" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public void GetPanose(Panose* panose)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, Panose*, void>)(lpVtbl[8]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), panose);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public Graphics.DirectWrite.FontWeight GetWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, Graphics.DirectWrite.FontWeight>)(lpVtbl[9]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public Graphics.DirectWrite.FontStretch GetStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, Graphics.DirectWrite.FontStretch>)(lpVtbl[10]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public Graphics.DirectWrite.FontStyle GetStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, Graphics.DirectWrite.FontStyle>)(lpVtbl[11]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetFamilyNames" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetFamilyNames(IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, IDWriteLocalizedStrings**, int>)(lpVtbl[12]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), names);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetFaceNames" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetFaceNames(IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, IDWriteLocalizedStrings**, int>)(lpVtbl[13]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), names);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetInformationalStrings" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult GetInformationalStrings(InformationalStringId informationalStringID, IDWriteLocalizedStrings** informationalStrings, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, InformationalStringId, IDWriteLocalizedStrings**, Bool32*, int>)(lpVtbl[14]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), informationalStringID, informationalStrings, exists);
	}

	/// <inheritdoc cref="IDWriteFontFace3.HasCharacter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public Bool32 HasCharacter(uint unicodeValue)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, uint, Bool32>)(lpVtbl[15]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), unicodeValue);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Matrix* transform, Bool32 isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, IDWriteRenderingParams* renderingParams, RenderingMode1* renderingMode, GridFitMode* gridFitMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, float, float, float, Matrix*, Bool32, OutlineThreshold, MeasuringMode, IDWriteRenderingParams*, RenderingMode1*, GridFitMode*, int>)(lpVtbl[16]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode);
	}

	/// <inheritdoc cref="IDWriteFontFace3.IsCharacterLocal" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public Bool32 IsCharacterLocal(uint unicodeValue)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, uint, Bool32>)(lpVtbl[17]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), unicodeValue);
	}

	/// <inheritdoc cref="IDWriteFontFace3.IsGlyphLocal" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public Bool32 IsGlyphLocal(ushort glyphId)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, ushort, Bool32>)(lpVtbl[18]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), glyphId);
	}

	/// <inheritdoc cref="IDWriteFontFace3.AreCharactersLocal" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult AreCharactersLocal(ushort* characters, uint characterCount, Bool32 enqueueIfNotLocal, Bool32* isLocal)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, ushort*, uint, Bool32, Bool32*, int>)(lpVtbl[19]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), characters, characterCount, enqueueIfNotLocal, isLocal);
	}

	/// <inheritdoc cref="IDWriteFontFace3.AreGlyphsLocal" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult AreGlyphsLocal(ushort* glyphIndices, uint glyphCount, Bool32 enqueueIfNotLocal, Bool32* isLocal)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, ushort*, uint, Bool32, Bool32*, int>)(lpVtbl[20]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), glyphIndices, glyphCount, enqueueIfNotLocal, isLocal);
	}

	/// <inheritdoc cref="IDWriteFontFace2.IsColorFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public Bool32 IsColorFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, Bool32>)(lpVtbl[21]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace2.GetColorPaletteCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public uint GetColorPaletteCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, uint>)(lpVtbl[22]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace2.GetPaletteEntryCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public uint GetPaletteEntryCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, uint>)(lpVtbl[23]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace2.GetPaletteEntries" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult GetPaletteEntries(uint colorPaletteIndex, uint firstEntryIndex, uint entryCount, ColorF* paletteEntries)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, uint, uint, uint, ColorF*, int>)(lpVtbl[24]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), colorPaletteIndex, firstEntryIndex, entryCount, paletteEntries);
	}

	/// <inheritdoc cref="IDWriteFontFace2.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Matrix* transform, Bool32 isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, IDWriteRenderingParams* renderingParams, RenderingMode* renderingMode, GridFitMode* gridFitMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, float, float, float, Matrix*, Bool32, OutlineThreshold, MeasuringMode, IDWriteRenderingParams*, RenderingMode*, GridFitMode*, int>)(lpVtbl[25]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public void GetMetrics(FontMetrics1* fontMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, FontMetrics1*, void>)(lpVtbl[26]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), fontMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetGdiCompatibleMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, Matrix* transform, FontMetrics1* fontMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, float, float, Matrix*, FontMetrics1*, int>)(lpVtbl[27]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, fontMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetCaretMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public void GetCaretMetrics(CaretMetrics* caretMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, CaretMetrics*, void>)(lpVtbl[28]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), caretMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetUnicodeRanges" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult GetUnicodeRanges(uint maxRangeCount, UnicodeRange* unicodeRanges, uint* actualRangeCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, uint, UnicodeRange*, uint*, int>)(lpVtbl[29]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), maxRangeCount, unicodeRanges, actualRangeCount);
	}

	/// <inheritdoc cref="IDWriteFontFace1.IsMonospacedFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public Bool32 IsMonospacedFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, Bool32>)(lpVtbl[30]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetDesignGlyphAdvances" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult GetDesignGlyphAdvances(uint glyphCount, ushort* glyphIndices, int* glyphAdvances, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, uint, ushort*, int*, Bool32, int>)(lpVtbl[31]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), glyphCount, glyphIndices, glyphAdvances, isSideways);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetGdiCompatibleGlyphAdvances" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult GetGdiCompatibleGlyphAdvances(float emSize, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, Bool32 isSideways, uint glyphCount, ushort* glyphIndices, int* glyphAdvances)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, float, float, Matrix*, Bool32, Bool32, uint, ushort*, int*, int>)(lpVtbl[32]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, useGdiNatural, isSideways, glyphCount, glyphIndices, glyphAdvances);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetKerningPairAdjustments" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult GetKerningPairAdjustments(uint glyphCount, ushort* glyphIndices, int* glyphAdvanceAdjustments)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, uint, ushort*, int*, int>)(lpVtbl[33]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), glyphCount, glyphIndices, glyphAdvanceAdjustments);
	}

	/// <inheritdoc cref="IDWriteFontFace1.HasKerningPairs" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public Bool32 HasKerningPairs()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, Bool32>)(lpVtbl[34]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Matrix* transform, Bool32 isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, RenderingMode* renderingMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, float, float, float, Matrix*, Bool32, OutlineThreshold, MeasuringMode, RenderingMode*, int>)(lpVtbl[35]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingMode);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetVerticalGlyphVariants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult GetVerticalGlyphVariants(uint glyphCount, ushort* nominalGlyphIndices, ushort* verticalGlyphIndices)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, uint, ushort*, ushort*, int>)(lpVtbl[36]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), glyphCount, nominalGlyphIndices, verticalGlyphIndices);
	}

	/// <inheritdoc cref="IDWriteFontFace1.HasVerticalGlyphVariants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public Bool32 HasVerticalGlyphVariants()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, Bool32>)(lpVtbl[37]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public new Graphics.DirectWrite.FontFaceType GetType()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, Graphics.DirectWrite.FontFaceType>)(lpVtbl[38]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetFiles" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult GetFiles(uint* numberOfFiles, IDWriteFontFile** fontFiles)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, uint*, IDWriteFontFile**, int>)(lpVtbl[39]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), numberOfFiles, fontFiles);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetIndex" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public uint GetIndex()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, uint>)(lpVtbl[40]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetSimulations" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public Graphics.DirectWrite.FontSimulations GetSimulations()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, Graphics.DirectWrite.FontSimulations>)(lpVtbl[41]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.IsSymbolFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public Bool32 IsSymbolFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, Bool32>)(lpVtbl[42]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public void GetMetrics(FontMetrics* fontFaceMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, FontMetrics*, void>)(lpVtbl[43]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), fontFaceMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public ushort GetGlyphCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, ushort>)(lpVtbl[44]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetDesignGlyphMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public HResult GetDesignGlyphMetrics(ushort* glyphIndices, uint glyphCount, GlyphMetrics* glyphMetrics, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, ushort*, uint, GlyphMetrics*, Bool32, int>)(lpVtbl[45]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), glyphIndices, glyphCount, glyphMetrics, isSideways);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphIndices" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public HResult GetGlyphIndices(uint* codePoints, uint codePointCount, ushort* glyphIndices)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, uint*, uint, ushort*, int>)(lpVtbl[46]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), codePoints, codePointCount, glyphIndices);
	}

	/// <inheritdoc cref="IDWriteFontFace.TryGetFontTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult TryGetFontTable(uint openTypeTableTag, void** tableData, uint* tableSize, void** tableContext, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, uint, void**, uint*, void**, Bool32*, int>)(lpVtbl[47]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), openTypeTableTag, tableData, tableSize, tableContext, exists);
	}

	/// <inheritdoc cref="IDWriteFontFace.ReleaseFontTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public void ReleaseFontTable(void* tableContext)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, void*, void>)(lpVtbl[48]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), tableContext);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphRunOutline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public HResult GetGlyphRunOutline(float emSize, ushort* glyphIndices, float* glyphAdvances, GlyphOffset* glyphOffsets, uint glyphCount, Bool32 isSideways, Bool32 isRightToLeft, Graphics.Direct2D.Common.ID2D1SimplifiedGeometrySink* geometrySink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, float, ushort*, float*, GlyphOffset*, uint, Bool32, Bool32, Graphics.Direct2D.Common.ID2D1SimplifiedGeometrySink*, int>)(lpVtbl[49]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public HResult GetRecommendedRenderingMode(float emSize, float pixelsPerDip, MeasuringMode measuringMode, IDWriteRenderingParams* renderingParams, RenderingMode* renderingMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, float, float, MeasuringMode, IDWriteRenderingParams*, RenderingMode*, int>)(lpVtbl[50]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGdiCompatibleMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public HResult GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, Matrix* transform, FontMetrics* fontFaceMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, float, float, Matrix*, FontMetrics*, int>)(lpVtbl[51]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, fontFaceMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGdiCompatibleGlyphMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public HResult GetGdiCompatibleGlyphMetrics(float emSize, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, ushort* glyphIndices, uint glyphCount, GlyphMetrics* glyphMetrics, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, float, float, Matrix*, Bool32, ushort*, uint, GlyphMetrics*, Bool32, int>)(lpVtbl[52]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace5::GetFontAxisValueCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public uint GetFontAxisValueCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, uint>)(lpVtbl[53]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace5::GetFontAxisValues"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public HResult GetFontAxisValues(FontAxisValue* fontAxisValues, uint fontAxisValueCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, FontAxisValue*, uint, int>)(lpVtbl[54]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), fontAxisValues, fontAxisValueCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace5::HasVariations"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public Bool32 HasVariations()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, Bool32>)(lpVtbl[55]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace5::GetFontResource"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public HResult GetFontResource(IDWriteFontResource** fontResource)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, IDWriteFontResource**, int>)(lpVtbl[56]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), fontResource);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace5::Equals"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public Bool32 Equals(IDWriteFontFace* fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace5*, IDWriteFontFace*, Bool32>)(lpVtbl[57]))((IDWriteFontFace5*)Unsafe.AsPointer(ref this), fontFace);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontResource"]/*' />
/// <unmanaged>IDWriteFontResource</unmanaged>
[Guid("1f803a76-6871-48e8-987f-b975551c50f2")]
[NativeTypeName("struct IDWriteFontResource : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IDWriteFontResource
{
	public static ref readonly Guid IID_IDWriteFontResource
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x76, 0x3A, 0x80, 0x1F,
				0x71, 0x68,
				0xE8, 0x48,
				0x98,
				0x7F,
				0xB9,
				0x75,
				0x55,
				0x1C,
				0x50,
				0xF2
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontResource));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontResource::GetFontFile"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetFontFile(IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontResource*, IDWriteFontFile**, int>)(lpVtbl[3]))((IDWriteFontResource*)Unsafe.AsPointer(ref this), fontFile);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontResource::GetFontFaceIndex"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public uint GetFontFaceIndex()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontResource*, uint>)(lpVtbl[4]))((IDWriteFontResource*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontResource::GetFontAxisCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public uint GetFontAxisCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontResource*, uint>)(lpVtbl[5]))((IDWriteFontResource*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontResource::GetDefaultFontAxisValues"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetDefaultFontAxisValues(FontAxisValue* fontAxisValues, uint fontAxisValueCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontResource*, FontAxisValue*, uint, int>)(lpVtbl[6]))((IDWriteFontResource*)Unsafe.AsPointer(ref this), fontAxisValues, fontAxisValueCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontResource::GetFontAxisRanges"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetFontAxisRanges(FontAxisRange* fontAxisRanges, uint fontAxisRangeCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontResource*, FontAxisRange*, uint, int>)(lpVtbl[7]))((IDWriteFontResource*)Unsafe.AsPointer(ref this), fontAxisRanges, fontAxisRangeCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontResource::GetFontAxisAttributes"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public Graphics.DirectWrite.FontAxisAttributes GetFontAxisAttributes(uint axisIndex)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontResource*, uint, Graphics.DirectWrite.FontAxisAttributes>)(lpVtbl[8]))((IDWriteFontResource*)Unsafe.AsPointer(ref this), axisIndex);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontResource::GetAxisNames"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetAxisNames(uint axisIndex, IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontResource*, uint, IDWriteLocalizedStrings**, int>)(lpVtbl[9]))((IDWriteFontResource*)Unsafe.AsPointer(ref this), axisIndex, names);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontResource::GetAxisValueNameCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public uint GetAxisValueNameCount(uint axisIndex)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontResource*, uint, uint>)(lpVtbl[10]))((IDWriteFontResource*)Unsafe.AsPointer(ref this), axisIndex);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontResource::GetAxisValueNames"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetAxisValueNames(uint axisIndex, uint axisValueIndex, FontAxisRange* fontAxisRange, IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontResource*, uint, uint, FontAxisRange*, IDWriteLocalizedStrings**, int>)(lpVtbl[11]))((IDWriteFontResource*)Unsafe.AsPointer(ref this), axisIndex, axisValueIndex, fontAxisRange, names);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontResource::HasVariations"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public Bool32 HasVariations()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontResource*, Bool32>)(lpVtbl[12]))((IDWriteFontResource*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontResource::CreateFontFace"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult CreateFontFace(FontSimulations fontSimulations, FontAxisValue* fontAxisValues, uint fontAxisValueCount, IDWriteFontFace5** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontResource*, FontSimulations, FontAxisValue*, uint, IDWriteFontFace5**, int>)(lpVtbl[13]))((IDWriteFontResource*)Unsafe.AsPointer(ref this), fontSimulations, fontAxisValues, fontAxisValueCount, fontFace);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontResource::CreateFontFaceReference"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult CreateFontFaceReference(FontSimulations fontSimulations, FontAxisValue* fontAxisValues, uint fontAxisValueCount, IDWriteFontFaceReference1** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontResource*, FontSimulations, FontAxisValue*, uint, IDWriteFontFaceReference1**, int>)(lpVtbl[14]))((IDWriteFontResource*)Unsafe.AsPointer(ref this), fontSimulations, fontAxisValues, fontAxisValueCount, fontFaceReference);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference1"]/*' />
/// <unmanaged>IDWriteFontFaceReference1</unmanaged>
[Guid("c081fe77-2fd1-41ac-a5a3-34983c4ba61a")]
[NativeTypeName("struct IDWriteFontFaceReference1 : IDWriteFontFaceReference")]
[NativeInheritance("IDWriteFontFaceReference")]
public unsafe partial struct IDWriteFontFaceReference1
{
	public static ref readonly Guid IID_IDWriteFontFaceReference1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x77, 0xFE, 0x81, 0xC0,
				0xD1, 0x2F,
				0xAC, 0x41,
				0xA5,
				0xA3,
				0x34,
				0x98,
				0x3C,
				0x4B,
				0xA6,
				0x1A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFaceReference1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFaceReference.CreateFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreateFontFace(IDWriteFontFace3** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, IDWriteFontFace3**, int>)(lpVtbl[3]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this), fontFace);
	}

	/// <inheritdoc cref="IDWriteFontFaceReference.CreateFontFaceWithSimulations" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateFontFaceWithSimulations(FontSimulations fontFaceSimulationFlags, IDWriteFontFace3** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, FontSimulations, IDWriteFontFace3**, int>)(lpVtbl[4]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this), fontFaceSimulationFlags, fontFace);
	}

	/// <inheritdoc cref="IDWriteFontFaceReference.Equals" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Bool32 Equals(IDWriteFontFaceReference* fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, IDWriteFontFaceReference*, Bool32>)(lpVtbl[5]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this), fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFontFaceReference.GetFontFaceIndex" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public uint GetFontFaceIndex()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, uint>)(lpVtbl[6]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFaceReference.GetSimulations" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public Graphics.DirectWrite.FontSimulations GetSimulations()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, Graphics.DirectWrite.FontSimulations>)(lpVtbl[7]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFaceReference.GetFontFile" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetFontFile(IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, IDWriteFontFile**, int>)(lpVtbl[8]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this), fontFile);
	}

	/// <inheritdoc cref="IDWriteFontFaceReference.GetLocalFileSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public ulong GetLocalFileSize()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, ulong>)(lpVtbl[9]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFaceReference.GetFileSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public ulong GetFileSize()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, ulong>)(lpVtbl[10]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFaceReference.GetFileTime" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetFileTime(ulong* lastWriteTime)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, ulong*, int>)(lpVtbl[11]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this), lastWriteTime);
	}

	/// <inheritdoc cref="IDWriteFontFaceReference.GetLocality" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public Graphics.DirectWrite.Locality GetLocality()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, Graphics.DirectWrite.Locality>)(lpVtbl[12]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFaceReference.EnqueueFontDownloadRequest" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult EnqueueFontDownloadRequest()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, int>)(lpVtbl[13]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFaceReference.EnqueueCharacterDownloadRequest" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult EnqueueCharacterDownloadRequest(ushort* characters, uint characterCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, ushort*, uint, int>)(lpVtbl[14]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this), characters, characterCount);
	}

	/// <inheritdoc cref="IDWriteFontFaceReference.EnqueueGlyphDownloadRequest" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult EnqueueGlyphDownloadRequest(ushort* glyphIndices, uint glyphCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, ushort*, uint, int>)(lpVtbl[15]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this), glyphIndices, glyphCount);
	}

	/// <inheritdoc cref="IDWriteFontFaceReference.EnqueueFileFragmentDownloadRequest" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult EnqueueFileFragmentDownloadRequest(ulong fileOffset, ulong fragmentSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, ulong, ulong, int>)(lpVtbl[16]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this), fileOffset, fragmentSize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference1::CreateFontFace"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult CreateFontFace(IDWriteFontFace5** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, IDWriteFontFace5**, int>)(lpVtbl[17]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this), fontFace);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference1::GetFontAxisValueCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public uint GetFontAxisValueCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, uint>)(lpVtbl[18]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFaceReference1::GetFontAxisValues"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetFontAxisValues(FontAxisValue* fontAxisValues, uint fontAxisValueCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFaceReference1*, FontAxisValue*, uint, int>)(lpVtbl[19]))((IDWriteFontFaceReference1*)Unsafe.AsPointer(ref this), fontAxisValues, fontAxisValueCount);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSetBuilder2"]/*' />
/// <unmanaged>IDWriteFontSetBuilder2</unmanaged>
[Guid("ee5ba612-b131-463c-8f4f-3189b9401e45")]
[NativeTypeName("struct IDWriteFontSetBuilder2 : IDWriteFontSetBuilder1")]
[NativeInheritance("IDWriteFontSetBuilder1")]
public unsafe partial struct IDWriteFontSetBuilder2
{
	public static ref readonly Guid IID_IDWriteFontSetBuilder2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x12, 0xA6, 0x5B, 0xEE,
				0x31, 0xB1,
				0x3C, 0x46,
				0x8F,
				0x4F,
				0x31,
				0x89,
				0xB9,
				0x40,
				0x1E,
				0x45
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontSetBuilder2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontSetBuilder1.AddFontFile" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult AddFontFile(IDWriteFontFile* fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSetBuilder2*, IDWriteFontFile*, int>)(lpVtbl[3]))((IDWriteFontSetBuilder2*)Unsafe.AsPointer(ref this), fontFile);
	}

	/// <inheritdoc cref="IDWriteFontSetBuilder.AddFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult AddFontFaceReference(IDWriteFontFaceReference* fontFaceReference, FontProperty* properties, uint propertyCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSetBuilder2*, IDWriteFontFaceReference*, FontProperty*, uint, int>)(lpVtbl[4]))((IDWriteFontSetBuilder2*)Unsafe.AsPointer(ref this), fontFaceReference, properties, propertyCount);
	}

	/// <inheritdoc cref="IDWriteFontSetBuilder.AddFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult AddFontFaceReference(IDWriteFontFaceReference* fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSetBuilder2*, IDWriteFontFaceReference*, int>)(lpVtbl[5]))((IDWriteFontSetBuilder2*)Unsafe.AsPointer(ref this), fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFontSetBuilder.AddFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult AddFontSet(IDWriteFontSet* fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSetBuilder2*, IDWriteFontSet*, int>)(lpVtbl[6]))((IDWriteFontSetBuilder2*)Unsafe.AsPointer(ref this), fontSet);
	}

	/// <inheritdoc cref="IDWriteFontSetBuilder.CreateFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CreateFontSet(IDWriteFontSet** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSetBuilder2*, IDWriteFontSet**, int>)(lpVtbl[7]))((IDWriteFontSetBuilder2*)Unsafe.AsPointer(ref this), fontSet);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSetBuilder2::AddFont"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult AddFont(IDWriteFontFile* fontFile, uint fontFaceIndex, FontSimulations fontSimulations, FontAxisValue* fontAxisValues, uint fontAxisValueCount, FontAxisRange* fontAxisRanges, uint fontAxisRangeCount, FontProperty* properties, uint propertyCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSetBuilder2*, IDWriteFontFile*, uint, FontSimulations, FontAxisValue*, uint, FontAxisRange*, uint, FontProperty*, uint, int>)(lpVtbl[8]))((IDWriteFontSetBuilder2*)Unsafe.AsPointer(ref this), fontFile, fontFaceIndex, fontSimulations, fontAxisValues, fontAxisValueCount, fontAxisRanges, fontAxisRangeCount, properties, propertyCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSetBuilder2::AddFontFile"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult AddFontFile(ushort* filePath)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSetBuilder2*, ushort*, int>)(lpVtbl[9]))((IDWriteFontSetBuilder2*)Unsafe.AsPointer(ref this), filePath);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet1"]/*' />
/// <unmanaged>IDWriteFontSet1</unmanaged>
[Guid("7e9fda85-6c92-4053-bc47-7ae3530db4d3")]
[NativeTypeName("struct IDWriteFontSet1 : IDWriteFontSet")]
[NativeInheritance("IDWriteFontSet")]
public unsafe partial struct IDWriteFontSet1
{
	public static ref readonly Guid IID_IDWriteFontSet1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x85, 0xDA, 0x9F, 0x7E,
				0x92, 0x6C,
				0x53, 0x40,
				0xBC,
				0x47,
				0x7A,
				0xE3,
				0x53,
				0x0D,
				0xB4,
				0xD3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontSet1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontSet.GetFontCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public uint GetFontCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, uint>)(lpVtbl[3]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontSet.GetFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetFontFaceReference(uint listIndex, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, uint, IDWriteFontFaceReference**, int>)(lpVtbl[4]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), listIndex, fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFontSet.FindFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult FindFontFaceReference(IDWriteFontFaceReference* fontFaceReference, uint* listIndex, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, IDWriteFontFaceReference*, uint*, Bool32*, int>)(lpVtbl[5]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), fontFaceReference, listIndex, exists);
	}

	/// <inheritdoc cref="IDWriteFontSet.FindFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult FindFontFace(IDWriteFontFace* fontFace, uint* listIndex, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, IDWriteFontFace*, uint*, Bool32*, int>)(lpVtbl[6]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), fontFace, listIndex, exists);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetPropertyValues" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetPropertyValues(FontPropertyId propertyID, IDWriteStringList** values)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, FontPropertyId, IDWriteStringList**, int>)(lpVtbl[7]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), propertyID, values);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetPropertyValues" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetPropertyValues(FontPropertyId propertyID, ushort* preferredLocaleNames, IDWriteStringList** values)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, FontPropertyId, ushort*, IDWriteStringList**, int>)(lpVtbl[8]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), propertyID, preferredLocaleNames, values);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetPropertyValues" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetPropertyValues(uint listIndex, FontPropertyId propertyId, Bool32* exists, IDWriteLocalizedStrings** values)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, uint, FontPropertyId, Bool32*, IDWriteLocalizedStrings**, int>)(lpVtbl[9]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), listIndex, propertyId, exists, values);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetPropertyOccurrenceCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetPropertyOccurrenceCount(FontProperty* property, uint* propertyOccurrenceCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, FontProperty*, uint*, int>)(lpVtbl[10]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), property, propertyOccurrenceCount);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetMatchingFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetMatchingFonts(ushort* familyName, FontWeight fontWeight, FontStretch fontStretch, FontStyle fontStyle, IDWriteFontSet** filteredSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, ushort*, FontWeight, FontStretch, FontStyle, IDWriteFontSet**, int>)(lpVtbl[11]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), familyName, fontWeight, fontStretch, fontStyle, filteredSet);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetMatchingFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetMatchingFonts(FontProperty* properties, uint propertyCount, IDWriteFontSet** filteredSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, FontProperty*, uint, IDWriteFontSet**, int>)(lpVtbl[12]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), properties, propertyCount, filteredSet);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet1::GetMatchingFonts"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetMatchingFonts(FontProperty* fontProperty, FontAxisValue* fontAxisValues, uint fontAxisValueCount, IDWriteFontSet1** matchingFonts)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, FontProperty*, FontAxisValue*, uint, IDWriteFontSet1**, int>)(lpVtbl[13]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), fontProperty, fontAxisValues, fontAxisValueCount, matchingFonts);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet1::GetFirstFontResources"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult GetFirstFontResources(IDWriteFontSet1** filteredFontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, IDWriteFontSet1**, int>)(lpVtbl[14]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), filteredFontSet);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet1::GetFilteredFonts"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetFilteredFonts(uint* indices, uint indexCount, IDWriteFontSet1** filteredFontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, uint*, uint, IDWriteFontSet1**, int>)(lpVtbl[15]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), indices, indexCount, filteredFontSet);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet1::GetFilteredFonts"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult GetFilteredFonts(FontAxisRange* fontAxisRanges, uint fontAxisRangeCount, Bool32 selectAnyRange, IDWriteFontSet1** filteredFontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, FontAxisRange*, uint, Bool32, IDWriteFontSet1**, int>)(lpVtbl[16]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), fontAxisRanges, fontAxisRangeCount, selectAnyRange, filteredFontSet);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet1::GetFilteredFonts"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetFilteredFonts(FontProperty* properties, uint propertyCount, Bool32 selectAnyProperty, IDWriteFontSet1** filteredFontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, FontProperty*, uint, Bool32, IDWriteFontSet1**, int>)(lpVtbl[17]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), properties, propertyCount, selectAnyProperty, filteredFontSet);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet1::GetFilteredFontIndices"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult GetFilteredFontIndices(FontAxisRange* fontAxisRanges, uint fontAxisRangeCount, Bool32 selectAnyRange, uint* indices, uint maxIndexCount, uint* actualIndexCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, FontAxisRange*, uint, Bool32, uint*, uint, uint*, int>)(lpVtbl[18]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), fontAxisRanges, fontAxisRangeCount, selectAnyRange, indices, maxIndexCount, actualIndexCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet1::GetFilteredFontIndices"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetFilteredFontIndices(FontProperty* properties, uint propertyCount, Bool32 selectAnyProperty, uint* indices, uint maxIndexCount, uint* actualIndexCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, FontProperty*, uint, Bool32, uint*, uint, uint*, int>)(lpVtbl[19]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), properties, propertyCount, selectAnyProperty, indices, maxIndexCount, actualIndexCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet1::GetFontAxisRanges"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult GetFontAxisRanges(uint listIndex, FontAxisRange* fontAxisRanges, uint maxFontAxisRangeCount, uint* actualFontAxisRangeCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, uint, FontAxisRange*, uint, uint*, int>)(lpVtbl[20]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), listIndex, fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet1::GetFontAxisRanges"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetFontAxisRanges(FontAxisRange* fontAxisRanges, uint maxFontAxisRangeCount, uint* actualFontAxisRangeCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, FontAxisRange*, uint, uint*, int>)(lpVtbl[21]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet1::GetFontFaceReference"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult GetFontFaceReference(uint listIndex, IDWriteFontFaceReference1** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, uint, IDWriteFontFaceReference1**, int>)(lpVtbl[22]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), listIndex, fontFaceReference);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet1::CreateFontResource"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult CreateFontResource(uint listIndex, IDWriteFontResource** fontResource)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, uint, IDWriteFontResource**, int>)(lpVtbl[23]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), listIndex, fontResource);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet1::CreateFontFace"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult CreateFontFace(uint listIndex, IDWriteFontFace5** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, uint, IDWriteFontFace5**, int>)(lpVtbl[24]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), listIndex, fontFace);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet1::GetFontLocality"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public Graphics.DirectWrite.Locality GetFontLocality(uint listIndex)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet1*, uint, Graphics.DirectWrite.Locality>)(lpVtbl[25]))((IDWriteFontSet1*)Unsafe.AsPointer(ref this), listIndex);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontList2"]/*' />
/// <unmanaged>IDWriteFontList2</unmanaged>
[Guid("c0763a34-77af-445a-b735-08c37b0a5bf5")]
[NativeTypeName("struct IDWriteFontList2 : IDWriteFontList1")]
[NativeInheritance("IDWriteFontList1")]
public unsafe partial struct IDWriteFontList2
{
	public static ref readonly Guid IID_IDWriteFontList2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x34, 0x3A, 0x76, 0xC0,
				0xAF, 0x77,
				0x5A, 0x44,
				0xB7,
				0x35,
				0x08,
				0xC3,
				0x7B,
				0x0A,
				0x5B,
				0xF5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontList2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontList1.GetFontLocality" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public Graphics.DirectWrite.Locality GetFontLocality(uint listIndex)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontList2*, uint, Graphics.DirectWrite.Locality>)(lpVtbl[3]))((IDWriteFontList2*)Unsafe.AsPointer(ref this), listIndex);
	}

	/// <inheritdoc cref="IDWriteFontList1.GetFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetFont(uint listIndex, IDWriteFont3** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontList2*, uint, IDWriteFont3**, int>)(lpVtbl[4]))((IDWriteFontList2*)Unsafe.AsPointer(ref this), listIndex, font);
	}

	/// <inheritdoc cref="IDWriteFontList1.GetFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetFontFaceReference(uint listIndex, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontList2*, uint, IDWriteFontFaceReference**, int>)(lpVtbl[5]))((IDWriteFontList2*)Unsafe.AsPointer(ref this), listIndex, fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFontList.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetFontCollection(IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontList2*, IDWriteFontCollection**, int>)(lpVtbl[6]))((IDWriteFontList2*)Unsafe.AsPointer(ref this), fontCollection);
	}

	/// <inheritdoc cref="IDWriteFontList.GetFontCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public uint GetFontCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontList2*, uint>)(lpVtbl[7]))((IDWriteFontList2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontList.GetFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetFont(uint index, IDWriteFont** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontList2*, uint, IDWriteFont**, int>)(lpVtbl[8]))((IDWriteFontList2*)Unsafe.AsPointer(ref this), index, font);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontList2::GetFontSet"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetFontSet(IDWriteFontSet1** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontList2*, IDWriteFontSet1**, int>)(lpVtbl[9]))((IDWriteFontList2*)Unsafe.AsPointer(ref this), fontSet);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFamily2"]/*' />
/// <unmanaged>IDWriteFontFamily2</unmanaged>
[Guid("3ed49e77-a398-4261-b9cf-c126c2131ef3")]
[NativeTypeName("struct IDWriteFontFamily2 : IDWriteFontFamily1")]
[NativeInheritance("IDWriteFontFamily1")]
public unsafe partial struct IDWriteFontFamily2
{
	public static ref readonly Guid IID_IDWriteFontFamily2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x77, 0x9E, 0xD4, 0x3E,
				0x98, 0xA3,
				0x61, 0x42,
				0xB9,
				0xCF,
				0xC1,
				0x26,
				0xC2,
				0x13,
				0x1E,
				0xF3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFamily2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFamily1.GetFontLocality" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public Graphics.DirectWrite.Locality GetFontLocality(uint listIndex)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily2*, uint, Graphics.DirectWrite.Locality>)(lpVtbl[3]))((IDWriteFontFamily2*)Unsafe.AsPointer(ref this), listIndex);
	}

	/// <inheritdoc cref="IDWriteFontFamily1.GetFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetFont(uint listIndex, IDWriteFont3** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily2*, uint, IDWriteFont3**, int>)(lpVtbl[4]))((IDWriteFontFamily2*)Unsafe.AsPointer(ref this), listIndex, font);
	}

	/// <inheritdoc cref="IDWriteFontFamily1.GetFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetFontFaceReference(uint listIndex, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily2*, uint, IDWriteFontFaceReference**, int>)(lpVtbl[5]))((IDWriteFontFamily2*)Unsafe.AsPointer(ref this), listIndex, fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFontFamily.GetFamilyNames" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetFamilyNames(IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily2*, IDWriteLocalizedStrings**, int>)(lpVtbl[6]))((IDWriteFontFamily2*)Unsafe.AsPointer(ref this), names);
	}

	/// <inheritdoc cref="IDWriteFontFamily.GetFirstMatchingFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetFirstMatchingFont(FontWeight weight, FontStretch stretch, FontStyle style, IDWriteFont** matchingFont)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily2*, FontWeight, FontStretch, FontStyle, IDWriteFont**, int>)(lpVtbl[7]))((IDWriteFontFamily2*)Unsafe.AsPointer(ref this), weight, stretch, style, matchingFont);
	}

	/// <inheritdoc cref="IDWriteFontFamily.GetMatchingFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetMatchingFonts(FontWeight weight, FontStretch stretch, FontStyle style, IDWriteFontList** matchingFonts)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily2*, FontWeight, FontStretch, FontStyle, IDWriteFontList**, int>)(lpVtbl[8]))((IDWriteFontFamily2*)Unsafe.AsPointer(ref this), weight, stretch, style, matchingFonts);
	}

	/// <inheritdoc cref="IDWriteFontList.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetFontCollection(IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily2*, IDWriteFontCollection**, int>)(lpVtbl[9]))((IDWriteFontFamily2*)Unsafe.AsPointer(ref this), fontCollection);
	}

	/// <inheritdoc cref="IDWriteFontList.GetFontCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public uint GetFontCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily2*, uint>)(lpVtbl[10]))((IDWriteFontFamily2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontList.GetFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetFont(uint index, IDWriteFont** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily2*, uint, IDWriteFont**, int>)(lpVtbl[11]))((IDWriteFontFamily2*)Unsafe.AsPointer(ref this), index, font);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFamily2::GetMatchingFonts"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetMatchingFonts(FontAxisValue* fontAxisValues, uint fontAxisValueCount, IDWriteFontList2** matchingFonts)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily2*, FontAxisValue*, uint, IDWriteFontList2**, int>)(lpVtbl[12]))((IDWriteFontFamily2*)Unsafe.AsPointer(ref this), fontAxisValues, fontAxisValueCount, matchingFonts);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFamily2::GetFontSet"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetFontSet(IDWriteFontSet1** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFamily2*, IDWriteFontSet1**, int>)(lpVtbl[13]))((IDWriteFontFamily2*)Unsafe.AsPointer(ref this), fontSet);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollection2"]/*' />
/// <unmanaged>IDWriteFontCollection2</unmanaged>
[Guid("514039c6-4617-4064-bf8b-92ea83e506e0")]
[NativeTypeName("struct IDWriteFontCollection2 : IDWriteFontCollection1")]
[NativeInheritance("IDWriteFontCollection1")]
public unsafe partial struct IDWriteFontCollection2
{
	public static ref readonly Guid IID_IDWriteFontCollection2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC6, 0x39, 0x40, 0x51,
				0x17, 0x46,
				0x64, 0x40,
				0xBF,
				0x8B,
				0x92,
				0xEA,
				0x83,
				0xE5,
				0x06,
				0xE0
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontCollection2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontCollection1.GetFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetFontSet(IDWriteFontSet** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection2*, IDWriteFontSet**, int>)(lpVtbl[3]))((IDWriteFontCollection2*)Unsafe.AsPointer(ref this), fontSet);
	}

	/// <inheritdoc cref="IDWriteFontCollection1.GetFontFamily" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetFontFamily(uint index, IDWriteFontFamily1** fontFamily)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection2*, uint, IDWriteFontFamily1**, int>)(lpVtbl[4]))((IDWriteFontCollection2*)Unsafe.AsPointer(ref this), index, fontFamily);
	}

	/// <inheritdoc cref="IDWriteFontCollection.GetFontFamilyCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public uint GetFontFamilyCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection2*, uint>)(lpVtbl[5]))((IDWriteFontCollection2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontCollection.GetFontFamily" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetFontFamily(uint index, IDWriteFontFamily** fontFamily)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection2*, uint, IDWriteFontFamily**, int>)(lpVtbl[6]))((IDWriteFontCollection2*)Unsafe.AsPointer(ref this), index, fontFamily);
	}

	/// <inheritdoc cref="IDWriteFontCollection.FindFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult FindFamilyName(ushort* familyName, uint* index, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection2*, ushort*, uint*, Bool32*, int>)(lpVtbl[7]))((IDWriteFontCollection2*)Unsafe.AsPointer(ref this), familyName, index, exists);
	}

	/// <inheritdoc cref="IDWriteFontCollection.GetFontFromFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetFontFromFontFace(IDWriteFontFace* fontFace, IDWriteFont** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection2*, IDWriteFontFace*, IDWriteFont**, int>)(lpVtbl[8]))((IDWriteFontCollection2*)Unsafe.AsPointer(ref this), fontFace, font);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollection2::GetFontFamily"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetFontFamily(uint index, IDWriteFontFamily2** fontFamily)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection2*, uint, IDWriteFontFamily2**, int>)(lpVtbl[9]))((IDWriteFontCollection2*)Unsafe.AsPointer(ref this), index, fontFamily);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollection2::GetMatchingFonts"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetMatchingFonts(ushort* familyName, FontAxisValue* fontAxisValues, uint fontAxisValueCount, IDWriteFontList2** fontList)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection2*, ushort*, FontAxisValue*, uint, IDWriteFontList2**, int>)(lpVtbl[10]))((IDWriteFontCollection2*)Unsafe.AsPointer(ref this), familyName, fontAxisValues, fontAxisValueCount, fontList);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollection2::GetFontFamilyModel"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public Graphics.DirectWrite.FontFamilyModel GetFontFamilyModel()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection2*, Graphics.DirectWrite.FontFamilyModel>)(lpVtbl[11]))((IDWriteFontCollection2*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollection2::GetFontSet"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetFontSet(IDWriteFontSet1** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection2*, IDWriteFontSet1**, int>)(lpVtbl[12]))((IDWriteFontCollection2*)Unsafe.AsPointer(ref this), fontSet);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout4"]/*' />
/// <unmanaged>IDWriteTextLayout4</unmanaged>
[Guid("05a9bf42-223f-4441-b5fb-8263685f55e9")]
[NativeTypeName("struct IDWriteTextLayout4 : IDWriteTextLayout3")]
[NativeInheritance("IDWriteTextLayout3")]
public unsafe partial struct IDWriteTextLayout4
{
	public static ref readonly Guid IID_IDWriteTextLayout4
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x42, 0xBF, 0xA9, 0x05,
				0x3F, 0x22,
				0x41, 0x44,
				0xB5,
				0xFB,
				0x82,
				0x63,
				0x68,
				0x5F,
				0x55,
				0xE9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextLayout4));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout3.InvalidateLayout" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult InvalidateLayout()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, int>)(lpVtbl[3]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout3.SetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetLineSpacing(LineSpacing* lineSpacingOptions)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, LineSpacing*, int>)(lpVtbl[4]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), lineSpacingOptions);
	}

	/// <inheritdoc cref="IDWriteTextLayout3.GetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetLineSpacing(LineSpacing* lineSpacingOptions)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, LineSpacing*, int>)(lpVtbl[5]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), lineSpacingOptions);
	}

	/// <inheritdoc cref="IDWriteTextLayout3.GetLineMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetLineMetrics(LineMetrics1* lineMetrics, uint maxLineCount, uint* actualLineCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, LineMetrics1*, uint, uint*, int>)(lpVtbl[6]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), lineMetrics, maxLineCount, actualLineCount);
	}

	/// <inheritdoc cref="IDWriteTextLayout2.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetMetrics(TextMetrics1* textMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, TextMetrics1*, int>)(lpVtbl[7]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), textMetrics);
	}

	/// <inheritdoc cref="IDWriteTextLayout2.SetVerticalGlyphOrientation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetVerticalGlyphOrientation(VerticalGlyphOrientation glyphOrientation)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, VerticalGlyphOrientation, int>)(lpVtbl[8]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), glyphOrientation);
	}

	/// <inheritdoc cref="IDWriteTextLayout2.GetVerticalGlyphOrientation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public Graphics.DirectWrite.VerticalGlyphOrientation GetVerticalGlyphOrientation()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Graphics.DirectWrite.VerticalGlyphOrientation>)(lpVtbl[9]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout2.SetLastLineWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetLastLineWrapping(Bool32 isLastLineWrappingEnabled)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Bool32, int>)(lpVtbl[10]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), isLastLineWrappingEnabled);
	}

	/// <inheritdoc cref="IDWriteTextLayout2.GetLastLineWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public Bool32 GetLastLineWrapping()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Bool32>)(lpVtbl[11]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout2.SetOpticalAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult SetOpticalAlignment(OpticalAlignment opticalAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, OpticalAlignment, int>)(lpVtbl[12]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), opticalAlignment);
	}

	/// <inheritdoc cref="IDWriteTextLayout2.GetOpticalAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public Graphics.DirectWrite.OpticalAlignment GetOpticalAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Graphics.DirectWrite.OpticalAlignment>)(lpVtbl[13]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout2.SetFontFallback" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult SetFontFallback(IDWriteFontFallback* fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, IDWriteFontFallback*, int>)(lpVtbl[14]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <inheritdoc cref="IDWriteTextLayout2.GetFontFallback" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetFontFallback(IDWriteFontFallback** fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, IDWriteFontFallback**, int>)(lpVtbl[15]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <inheritdoc cref="IDWriteTextLayout1.SetPairKerning" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult SetPairKerning(Bool32 isPairKerningEnabled, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Bool32, TextRange*, int>)(lpVtbl[16]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), isPairKerningEnabled, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout1.GetPairKerning" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetPairKerning(uint currentPosition, Bool32* isPairKerningEnabled, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, Bool32*, TextRange*, int>)(lpVtbl[17]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, isPairKerningEnabled, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout1.SetCharacterSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult SetCharacterSpacing(float leadingSpacing, float trailingSpacing, float minimumAdvanceWidth, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, float, float, float, TextRange*, int>)(lpVtbl[18]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout1.GetCharacterSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetCharacterSpacing(uint currentPosition, float* leadingSpacing, float* trailingSpacing, float* minimumAdvanceWidth, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, float*, float*, float*, TextRange*, int>)(lpVtbl[19]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetMaxWidth" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult SetMaxWidth(float maxWidth)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, float, int>)(lpVtbl[20]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), maxWidth);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetMaxHeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult SetMaxHeight(float maxHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, float, int>)(lpVtbl[21]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), maxHeight);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult SetFontCollection(IDWriteFontCollection* fontCollection, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, IDWriteFontCollection*, TextRange*, int>)(lpVtbl[22]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), fontCollection, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult SetFontFamilyName(ushort* fontFamilyName, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, ushort*, TextRange*, int>)(lpVtbl[23]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), fontFamilyName, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult SetFontWeight(FontWeight fontWeight, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, FontWeight, TextRange*, int>)(lpVtbl[24]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), fontWeight, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult SetFontStyle(FontStyle fontStyle, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, FontStyle, TextRange*, int>)(lpVtbl[25]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), fontStyle, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult SetFontStretch(FontStretch fontStretch, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, FontStretch, TextRange*, int>)(lpVtbl[26]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), fontStretch, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult SetFontSize(float fontSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, float, TextRange*, int>)(lpVtbl[27]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), fontSize, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetUnderline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult SetUnderline(Bool32 hasUnderline, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Bool32, TextRange*, int>)(lpVtbl[28]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), hasUnderline, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetStrikethrough" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult SetStrikethrough(Bool32 hasStrikethrough, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Bool32, TextRange*, int>)(lpVtbl[29]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), hasStrikethrough, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetDrawingEffect" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult SetDrawingEffect(IUnknown* drawingEffect, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, IUnknown*, TextRange*, int>)(lpVtbl[30]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), drawingEffect, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetInlineObject" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult SetInlineObject(IDWriteInlineObject* inlineObject, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, IDWriteInlineObject*, TextRange*, int>)(lpVtbl[31]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), inlineObject, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetTypography" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult SetTypography(IDWriteTypography* typography, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, IDWriteTypography*, TextRange*, int>)(lpVtbl[32]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), typography, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.SetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult SetLocaleName(ushort* localeName, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, ushort*, TextRange*, int>)(lpVtbl[33]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), localeName, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetMaxWidth" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public float GetMaxWidth()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, float>)(lpVtbl[34]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetMaxHeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public float GetMaxHeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, float>)(lpVtbl[35]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult GetFontCollection(uint currentPosition, IDWriteFontCollection** fontCollection, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, IDWriteFontCollection**, TextRange*, int>)(lpVtbl[36]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, fontCollection, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontFamilyNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult GetFontFamilyNameLength(uint currentPosition, uint* nameLength, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, uint*, TextRange*, int>)(lpVtbl[37]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, nameLength, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult GetFontFamilyName(uint currentPosition, ushort* fontFamilyName, uint nameSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, ushort*, uint, TextRange*, int>)(lpVtbl[38]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, fontFamilyName, nameSize, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult GetFontWeight(uint currentPosition, FontWeight* fontWeight, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, FontWeight*, TextRange*, int>)(lpVtbl[39]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, fontWeight, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult GetFontStyle(uint currentPosition, FontStyle* fontStyle, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, FontStyle*, TextRange*, int>)(lpVtbl[40]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, fontStyle, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult GetFontStretch(uint currentPosition, FontStretch* fontStretch, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, FontStretch*, TextRange*, int>)(lpVtbl[41]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, fontStretch, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public HResult GetFontSize(uint currentPosition, float* fontSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, float*, TextRange*, int>)(lpVtbl[42]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, fontSize, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetUnderline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public HResult GetUnderline(uint currentPosition, Bool32* hasUnderline, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, Bool32*, TextRange*, int>)(lpVtbl[43]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, hasUnderline, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetStrikethrough" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public HResult GetStrikethrough(uint currentPosition, Bool32* hasStrikethrough, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, Bool32*, TextRange*, int>)(lpVtbl[44]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, hasStrikethrough, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetDrawingEffect" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public HResult GetDrawingEffect(uint currentPosition, IUnknown** drawingEffect, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, IUnknown**, TextRange*, int>)(lpVtbl[45]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, drawingEffect, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetInlineObject" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public HResult GetInlineObject(uint currentPosition, IDWriteInlineObject** inlineObject, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, IDWriteInlineObject**, TextRange*, int>)(lpVtbl[46]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, inlineObject, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetTypography" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult GetTypography(uint currentPosition, IDWriteTypography** typography, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, IDWriteTypography**, TextRange*, int>)(lpVtbl[47]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, typography, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetLocaleNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public HResult GetLocaleNameLength(uint currentPosition, uint* nameLength, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, uint*, TextRange*, int>)(lpVtbl[48]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, nameLength, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public HResult GetLocaleName(uint currentPosition, ushort* localeName, uint nameSize, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, ushort*, uint, TextRange*, int>)(lpVtbl[49]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, localeName, nameSize, textRange);
	}

	/// <inheritdoc cref="IDWriteTextLayout.Draw" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public HResult Draw(void* clientDrawingContext, IDWriteTextRenderer* renderer, float originX, float originY)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, void*, IDWriteTextRenderer*, float, float, int>)(lpVtbl[50]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), clientDrawingContext, renderer, originX, originY);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetLineMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public HResult GetLineMetrics(LineMetrics* lineMetrics, uint maxLineCount, uint* actualLineCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, LineMetrics*, uint, uint*, int>)(lpVtbl[51]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), lineMetrics, maxLineCount, actualLineCount);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public HResult GetMetrics(TextMetrics* textMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, TextMetrics*, int>)(lpVtbl[52]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), textMetrics);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetOverhangMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public HResult GetOverhangMetrics(OverhangMetrics* overhangs)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, OverhangMetrics*, int>)(lpVtbl[53]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), overhangs);
	}

	/// <inheritdoc cref="IDWriteTextLayout.GetClusterMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public HResult GetClusterMetrics(ClusterMetrics* clusterMetrics, uint maxClusterCount, uint* actualClusterCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, ClusterMetrics*, uint, uint*, int>)(lpVtbl[54]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), clusterMetrics, maxClusterCount, actualClusterCount);
	}

	/// <inheritdoc cref="IDWriteTextLayout.DetermineMinWidth" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public HResult DetermineMinWidth(float* minWidth)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, float*, int>)(lpVtbl[55]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), minWidth);
	}

	/// <inheritdoc cref="IDWriteTextLayout.HitTestPoint" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public HResult HitTestPoint(float pointX, float pointY, Bool32* isTrailingHit, Bool32* isInside, HitTestMetrics* hitTestMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, float, float, Bool32*, Bool32*, HitTestMetrics*, int>)(lpVtbl[56]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), pointX, pointY, isTrailingHit, isInside, hitTestMetrics);
	}

	/// <inheritdoc cref="IDWriteTextLayout.HitTestTextPosition" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public HResult HitTestTextPosition(uint textPosition, Bool32 isTrailingHit, float* pointX, float* pointY, HitTestMetrics* hitTestMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, Bool32, float*, float*, HitTestMetrics*, int>)(lpVtbl[57]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), textPosition, isTrailingHit, pointX, pointY, hitTestMetrics);
	}

	/// <inheritdoc cref="IDWriteTextLayout.HitTestTextRange" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public HResult HitTestTextRange(uint textPosition, uint textLength, float originX, float originY, HitTestMetrics* hitTestMetrics, uint maxHitTestMetricsCount, uint* actualHitTestMetricsCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, uint, float, float, HitTestMetrics*, uint, uint*, int>)(lpVtbl[58]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), textPosition, textLength, originX, originY, hitTestMetrics, maxHitTestMetricsCount, actualHitTestMetricsCount);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public HResult SetTextAlignment(TextAlignment textAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, TextAlignment, int>)(lpVtbl[59]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), textAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(60)]
	public HResult SetParagraphAlignment(ParagraphAlignment paragraphAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, ParagraphAlignment, int>)(lpVtbl[60]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), paragraphAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(61)]
	public HResult SetWordWrapping(WordWrapping wordWrapping)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, WordWrapping, int>)(lpVtbl[61]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), wordWrapping);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(62)]
	public HResult SetReadingDirection(ReadingDirection readingDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, ReadingDirection, int>)(lpVtbl[62]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), readingDirection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(63)]
	public HResult SetFlowDirection(FlowDirection flowDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, FlowDirection, int>)(lpVtbl[63]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), flowDirection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(64)]
	public HResult SetIncrementalTabStop(float incrementalTabStop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, float, int>)(lpVtbl[64]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), incrementalTabStop);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(65)]
	public HResult SetTrimming(Trimming* trimmingOptions, IDWriteInlineObject* trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Trimming*, IDWriteInlineObject*, int>)(lpVtbl[65]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(66)]
	public HResult SetLineSpacing(LineSpacingMethod lineSpacingMethod, float lineSpacing, float baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, LineSpacingMethod, float, float, int>)(lpVtbl[66]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(67)]
	public Graphics.DirectWrite.TextAlignment GetTextAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Graphics.DirectWrite.TextAlignment>)(lpVtbl[67]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(68)]
	public Graphics.DirectWrite.ParagraphAlignment GetParagraphAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Graphics.DirectWrite.ParagraphAlignment>)(lpVtbl[68]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(69)]
	public Graphics.DirectWrite.WordWrapping GetWordWrapping()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Graphics.DirectWrite.WordWrapping>)(lpVtbl[69]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(70)]
	public Graphics.DirectWrite.ReadingDirection GetReadingDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Graphics.DirectWrite.ReadingDirection>)(lpVtbl[70]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(71)]
	public Graphics.DirectWrite.FlowDirection GetFlowDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Graphics.DirectWrite.FlowDirection>)(lpVtbl[71]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(72)]
	public float GetIncrementalTabStop()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, float>)(lpVtbl[72]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(73)]
	public HResult GetTrimming(Trimming* trimmingOptions, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Trimming*, IDWriteInlineObject**, int>)(lpVtbl[73]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(74)]
	public HResult GetLineSpacing(LineSpacingMethod* lineSpacingMethod, float* lineSpacing, float* baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, LineSpacingMethod*, float*, float*, int>)(lpVtbl[74]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(75)]
	public HResult GetFontCollection(IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, IDWriteFontCollection**, int>)(lpVtbl[75]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), fontCollection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(76)]
	public uint GetFontFamilyNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint>)(lpVtbl[76]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(77)]
	public HResult GetFontFamilyName(ushort* fontFamilyName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, ushort*, uint, int>)(lpVtbl[77]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), fontFamilyName, nameSize);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(78)]
	public Graphics.DirectWrite.FontWeight GetFontWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Graphics.DirectWrite.FontWeight>)(lpVtbl[78]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(79)]
	public Graphics.DirectWrite.FontStyle GetFontStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Graphics.DirectWrite.FontStyle>)(lpVtbl[79]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(80)]
	public Graphics.DirectWrite.FontStretch GetFontStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Graphics.DirectWrite.FontStretch>)(lpVtbl[80]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(81)]
	public float GetFontSize()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, float>)(lpVtbl[81]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(82)]
	public uint GetLocaleNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint>)(lpVtbl[82]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(83)]
	public HResult GetLocaleName(ushort* localeName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, ushort*, uint, int>)(lpVtbl[83]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), localeName, nameSize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout4::SetFontAxisValues"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(84)]
	public HResult SetFontAxisValues(FontAxisValue* fontAxisValues, uint fontAxisValueCount, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, FontAxisValue*, uint, TextRange*, int>)(lpVtbl[84]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), fontAxisValues, fontAxisValueCount, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout4::GetFontAxisValueCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(85)]
	public uint GetFontAxisValueCount(uint currentPosition)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, uint>)(lpVtbl[85]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout4::GetFontAxisValues"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(86)]
	public HResult GetFontAxisValues(uint currentPosition, FontAxisValue* fontAxisValues, uint fontAxisValueCount, TextRange* textRange)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, uint, FontAxisValue*, uint, TextRange*, int>)(lpVtbl[86]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), currentPosition, fontAxisValues, fontAxisValueCount, textRange);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout4::GetAutomaticFontAxes"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(87)]
	public Graphics.DirectWrite.AutomaticFontAxes GetAutomaticFontAxes()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, Graphics.DirectWrite.AutomaticFontAxes>)(lpVtbl[87]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextLayout4::SetAutomaticFontAxes"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(88)]
	public HResult SetAutomaticFontAxes(AutomaticFontAxes automaticFontAxes)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextLayout4*, AutomaticFontAxes, int>)(lpVtbl[88]))((IDWriteTextLayout4*)Unsafe.AsPointer(ref this), automaticFontAxes);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat3"]/*' />
/// <unmanaged>IDWriteTextFormat3</unmanaged>
[Guid("6d3b5641-e550-430d-a85b-b7bf48a93427")]
[NativeTypeName("struct IDWriteTextFormat3 : IDWriteTextFormat2")]
[NativeInheritance("IDWriteTextFormat2")]
public unsafe partial struct IDWriteTextFormat3
{
	public static ref readonly Guid IID_IDWriteTextFormat3
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x41, 0x56, 0x3B, 0x6D,
				0x50, 0xE5,
				0x0D, 0x43,
				0xA8,
				0x5B,
				0xB7,
				0xBF,
				0x48,
				0xA9,
				0x34,
				0x27
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextFormat3));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat2.SetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetLineSpacing(LineSpacing* lineSpacingOptions)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, LineSpacing*, int>)(lpVtbl[3]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), lineSpacingOptions);
	}

	/// <inheritdoc cref="IDWriteTextFormat2.GetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetLineSpacing(LineSpacing* lineSpacingOptions)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, LineSpacing*, int>)(lpVtbl[4]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), lineSpacingOptions);
	}

	/// <inheritdoc cref="IDWriteTextFormat1.SetVerticalGlyphOrientation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetVerticalGlyphOrientation(VerticalGlyphOrientation glyphOrientation)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, VerticalGlyphOrientation, int>)(lpVtbl[5]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), glyphOrientation);
	}

	/// <inheritdoc cref="IDWriteTextFormat1.GetVerticalGlyphOrientation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public Graphics.DirectWrite.VerticalGlyphOrientation GetVerticalGlyphOrientation()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, Graphics.DirectWrite.VerticalGlyphOrientation>)(lpVtbl[6]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat1.SetLastLineWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetLastLineWrapping(Bool32 isLastLineWrappingEnabled)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, Bool32, int>)(lpVtbl[7]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), isLastLineWrappingEnabled);
	}

	/// <inheritdoc cref="IDWriteTextFormat1.GetLastLineWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public Bool32 GetLastLineWrapping()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, Bool32>)(lpVtbl[8]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat1.SetOpticalAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetOpticalAlignment(OpticalAlignment opticalAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, OpticalAlignment, int>)(lpVtbl[9]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), opticalAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat1.GetOpticalAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public Graphics.DirectWrite.OpticalAlignment GetOpticalAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, Graphics.DirectWrite.OpticalAlignment>)(lpVtbl[10]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat1.SetFontFallback" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult SetFontFallback(IDWriteFontFallback* fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, IDWriteFontFallback*, int>)(lpVtbl[11]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <inheritdoc cref="IDWriteTextFormat1.GetFontFallback" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetFontFallback(IDWriteFontFallback** fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, IDWriteFontFallback**, int>)(lpVtbl[12]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult SetTextAlignment(TextAlignment textAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, TextAlignment, int>)(lpVtbl[13]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), textAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult SetParagraphAlignment(ParagraphAlignment paragraphAlignment)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, ParagraphAlignment, int>)(lpVtbl[14]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), paragraphAlignment);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult SetWordWrapping(WordWrapping wordWrapping)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, WordWrapping, int>)(lpVtbl[15]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), wordWrapping);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult SetReadingDirection(ReadingDirection readingDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, ReadingDirection, int>)(lpVtbl[16]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), readingDirection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult SetFlowDirection(FlowDirection flowDirection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, FlowDirection, int>)(lpVtbl[17]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), flowDirection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult SetIncrementalTabStop(float incrementalTabStop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, float, int>)(lpVtbl[18]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), incrementalTabStop);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult SetTrimming(Trimming* trimmingOptions, IDWriteInlineObject* trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, Trimming*, IDWriteInlineObject*, int>)(lpVtbl[19]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult SetLineSpacing(LineSpacingMethod lineSpacingMethod, float lineSpacing, float baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, LineSpacingMethod, float, float, int>)(lpVtbl[20]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public Graphics.DirectWrite.TextAlignment GetTextAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, Graphics.DirectWrite.TextAlignment>)(lpVtbl[21]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public Graphics.DirectWrite.ParagraphAlignment GetParagraphAlignment()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, Graphics.DirectWrite.ParagraphAlignment>)(lpVtbl[22]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public Graphics.DirectWrite.WordWrapping GetWordWrapping()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, Graphics.DirectWrite.WordWrapping>)(lpVtbl[23]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public Graphics.DirectWrite.ReadingDirection GetReadingDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, Graphics.DirectWrite.ReadingDirection>)(lpVtbl[24]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public Graphics.DirectWrite.FlowDirection GetFlowDirection()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, Graphics.DirectWrite.FlowDirection>)(lpVtbl[25]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public float GetIncrementalTabStop()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, float>)(lpVtbl[26]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult GetTrimming(Trimming* trimmingOptions, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, Trimming*, IDWriteInlineObject**, int>)(lpVtbl[27]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult GetLineSpacing(LineSpacingMethod* lineSpacingMethod, float* lineSpacing, float* baseline)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, LineSpacingMethod*, float*, float*, int>)(lpVtbl[28]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult GetFontCollection(IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, IDWriteFontCollection**, int>)(lpVtbl[29]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), fontCollection);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public uint GetFontFamilyNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, uint>)(lpVtbl[30]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult GetFontFamilyName(ushort* fontFamilyName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, ushort*, uint, int>)(lpVtbl[31]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), fontFamilyName, nameSize);
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public Graphics.DirectWrite.FontWeight GetFontWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, Graphics.DirectWrite.FontWeight>)(lpVtbl[32]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public Graphics.DirectWrite.FontStyle GetFontStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, Graphics.DirectWrite.FontStyle>)(lpVtbl[33]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public Graphics.DirectWrite.FontStretch GetFontStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, Graphics.DirectWrite.FontStretch>)(lpVtbl[34]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public float GetFontSize()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, float>)(lpVtbl[35]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public uint GetLocaleNameLength()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, uint>)(lpVtbl[36]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult GetLocaleName(ushort* localeName, uint nameSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, ushort*, uint, int>)(lpVtbl[37]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), localeName, nameSize);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat3::SetFontAxisValues"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult SetFontAxisValues(FontAxisValue* fontAxisValues, uint fontAxisValueCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, FontAxisValue*, uint, int>)(lpVtbl[38]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), fontAxisValues, fontAxisValueCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat3::GetFontAxisValueCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public uint GetFontAxisValueCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, uint>)(lpVtbl[39]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat3::GetFontAxisValues"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult GetFontAxisValues(FontAxisValue* fontAxisValues, uint fontAxisValueCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, FontAxisValue*, uint, int>)(lpVtbl[40]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), fontAxisValues, fontAxisValueCount);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat3::GetAutomaticFontAxes"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public Graphics.DirectWrite.AutomaticFontAxes GetAutomaticFontAxes()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, Graphics.DirectWrite.AutomaticFontAxes>)(lpVtbl[41]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat3::SetAutomaticFontAxes"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public HResult SetAutomaticFontAxes(AutomaticFontAxes automaticFontAxes)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat3*, AutomaticFontAxes, int>)(lpVtbl[42]))((IDWriteTextFormat3*)Unsafe.AsPointer(ref this), automaticFontAxes);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFallback1"]/*' />
/// <unmanaged>IDWriteFontFallback1</unmanaged>
[Guid("2397599d-dd0d-4681-bd6a-f4f31eaade77")]
[NativeTypeName("struct IDWriteFontFallback1 : IDWriteFontFallback")]
[NativeInheritance("IDWriteFontFallback")]
public unsafe partial struct IDWriteFontFallback1
{
	public static ref readonly Guid IID_IDWriteFontFallback1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x9D, 0x59, 0x97, 0x23,
				0x0D, 0xDD,
				0x81, 0x46,
				0xBD,
				0x6A,
				0xF4,
				0xF3,
				0x1E,
				0xAA,
				0xDE,
				0x77
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFallback1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFallback.MapCharacters" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult MapCharacters(IDWriteTextAnalysisSource* analysisSource, uint textPosition, uint textLength, IDWriteFontCollection* baseFontCollection, ushort* baseFamilyName, FontWeight baseWeight, FontStyle baseStyle, FontStretch baseStretch, uint* mappedLength, IDWriteFont** mappedFont, float* scale)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFallback1*, IDWriteTextAnalysisSource*, uint, uint, IDWriteFontCollection*, ushort*, FontWeight, FontStyle, FontStretch, uint*, IDWriteFont**, float*, int>)(lpVtbl[3]))((IDWriteFontFallback1*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, baseFontCollection, baseFamilyName, baseWeight, baseStyle, baseStretch, mappedLength, mappedFont, scale);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFallback1::MapCharacters"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult MapCharacters(IDWriteTextAnalysisSource* analysisSource, uint textPosition, uint textLength, IDWriteFontCollection* baseFontCollection, ushort* baseFamilyName, FontAxisValue* fontAxisValues, uint fontAxisValueCount, uint* mappedLength, float* scale, IDWriteFontFace5** mappedFontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFallback1*, IDWriteTextAnalysisSource*, uint, uint, IDWriteFontCollection*, ushort*, FontAxisValue*, uint, uint*, float*, IDWriteFontFace5**, int>)(lpVtbl[4]))((IDWriteFontFallback1*)Unsafe.AsPointer(ref this), analysisSource, textPosition, textLength, baseFontCollection, baseFamilyName, fontAxisValues, fontAxisValueCount, mappedLength, scale, mappedFontFace);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet2"]/*' />
/// <unmanaged>IDWriteFontSet2</unmanaged>
[Guid("dc7ead19-e54c-43af-b2da-4e2b79ba3f7f")]
[NativeTypeName("struct IDWriteFontSet2 : IDWriteFontSet1")]
[NativeInheritance("IDWriteFontSet1")]
public unsafe partial struct IDWriteFontSet2
{
	public static ref readonly Guid IID_IDWriteFontSet2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x19, 0xAD, 0x7E, 0xDC,
				0x4C, 0xE5,
				0xAF, 0x43,
				0xB2,
				0xDA,
				0x4E,
				0x2B,
				0x79,
				0xBA,
				0x3F,
				0x7F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontSet2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetMatchingFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetMatchingFonts(FontProperty* fontProperty, FontAxisValue* fontAxisValues, uint fontAxisValueCount, IDWriteFontSet1** matchingFonts)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, FontProperty*, FontAxisValue*, uint, IDWriteFontSet1**, int>)(lpVtbl[3]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), fontProperty, fontAxisValues, fontAxisValueCount, matchingFonts);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFirstFontResources" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetFirstFontResources(IDWriteFontSet1** filteredFontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, IDWriteFontSet1**, int>)(lpVtbl[4]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), filteredFontSet);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFilteredFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetFilteredFonts(uint* indices, uint indexCount, IDWriteFontSet1** filteredFontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, uint*, uint, IDWriteFontSet1**, int>)(lpVtbl[5]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), indices, indexCount, filteredFontSet);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFilteredFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetFilteredFonts(FontAxisRange* fontAxisRanges, uint fontAxisRangeCount, Bool32 selectAnyRange, IDWriteFontSet1** filteredFontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, FontAxisRange*, uint, Bool32, IDWriteFontSet1**, int>)(lpVtbl[6]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), fontAxisRanges, fontAxisRangeCount, selectAnyRange, filteredFontSet);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFilteredFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetFilteredFonts(FontProperty* properties, uint propertyCount, Bool32 selectAnyProperty, IDWriteFontSet1** filteredFontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, FontProperty*, uint, Bool32, IDWriteFontSet1**, int>)(lpVtbl[7]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), properties, propertyCount, selectAnyProperty, filteredFontSet);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFilteredFontIndices" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetFilteredFontIndices(FontAxisRange* fontAxisRanges, uint fontAxisRangeCount, Bool32 selectAnyRange, uint* indices, uint maxIndexCount, uint* actualIndexCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, FontAxisRange*, uint, Bool32, uint*, uint, uint*, int>)(lpVtbl[8]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), fontAxisRanges, fontAxisRangeCount, selectAnyRange, indices, maxIndexCount, actualIndexCount);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFilteredFontIndices" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetFilteredFontIndices(FontProperty* properties, uint propertyCount, Bool32 selectAnyProperty, uint* indices, uint maxIndexCount, uint* actualIndexCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, FontProperty*, uint, Bool32, uint*, uint, uint*, int>)(lpVtbl[9]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), properties, propertyCount, selectAnyProperty, indices, maxIndexCount, actualIndexCount);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFontAxisRanges" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetFontAxisRanges(uint listIndex, FontAxisRange* fontAxisRanges, uint maxFontAxisRangeCount, uint* actualFontAxisRangeCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, uint, FontAxisRange*, uint, uint*, int>)(lpVtbl[10]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), listIndex, fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFontAxisRanges" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetFontAxisRanges(FontAxisRange* fontAxisRanges, uint maxFontAxisRangeCount, uint* actualFontAxisRangeCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, FontAxisRange*, uint, uint*, int>)(lpVtbl[11]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetFontFaceReference(uint listIndex, IDWriteFontFaceReference1** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, uint, IDWriteFontFaceReference1**, int>)(lpVtbl[12]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), listIndex, fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFontSet1.CreateFontResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult CreateFontResource(uint listIndex, IDWriteFontResource** fontResource)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, uint, IDWriteFontResource**, int>)(lpVtbl[13]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), listIndex, fontResource);
	}

	/// <inheritdoc cref="IDWriteFontSet1.CreateFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult CreateFontFace(uint listIndex, IDWriteFontFace5** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, uint, IDWriteFontFace5**, int>)(lpVtbl[14]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), listIndex, fontFace);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFontLocality" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public Graphics.DirectWrite.Locality GetFontLocality(uint listIndex)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, uint, Graphics.DirectWrite.Locality>)(lpVtbl[15]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), listIndex);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetFontCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public uint GetFontCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, uint>)(lpVtbl[16]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontSet.GetFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetFontFaceReference(uint listIndex, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, uint, IDWriteFontFaceReference**, int>)(lpVtbl[17]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), listIndex, fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFontSet.FindFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult FindFontFaceReference(IDWriteFontFaceReference* fontFaceReference, uint* listIndex, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, IDWriteFontFaceReference*, uint*, Bool32*, int>)(lpVtbl[18]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), fontFaceReference, listIndex, exists);
	}

	/// <inheritdoc cref="IDWriteFontSet.FindFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult FindFontFace(IDWriteFontFace* fontFace, uint* listIndex, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, IDWriteFontFace*, uint*, Bool32*, int>)(lpVtbl[19]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), fontFace, listIndex, exists);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetPropertyValues" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult GetPropertyValues(FontPropertyId propertyID, IDWriteStringList** values)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, FontPropertyId, IDWriteStringList**, int>)(lpVtbl[20]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), propertyID, values);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetPropertyValues" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetPropertyValues(FontPropertyId propertyID, ushort* preferredLocaleNames, IDWriteStringList** values)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, FontPropertyId, ushort*, IDWriteStringList**, int>)(lpVtbl[21]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), propertyID, preferredLocaleNames, values);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetPropertyValues" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult GetPropertyValues(uint listIndex, FontPropertyId propertyId, Bool32* exists, IDWriteLocalizedStrings** values)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, uint, FontPropertyId, Bool32*, IDWriteLocalizedStrings**, int>)(lpVtbl[22]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), listIndex, propertyId, exists, values);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetPropertyOccurrenceCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult GetPropertyOccurrenceCount(FontProperty* property, uint* propertyOccurrenceCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, FontProperty*, uint*, int>)(lpVtbl[23]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), property, propertyOccurrenceCount);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetMatchingFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult GetMatchingFonts(ushort* familyName, FontWeight fontWeight, FontStretch fontStretch, FontStyle fontStyle, IDWriteFontSet** filteredSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, ushort*, FontWeight, FontStretch, FontStyle, IDWriteFontSet**, int>)(lpVtbl[24]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), familyName, fontWeight, fontStretch, fontStyle, filteredSet);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetMatchingFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult GetMatchingFonts(FontProperty* properties, uint propertyCount, IDWriteFontSet** filteredSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, FontProperty*, uint, IDWriteFontSet**, int>)(lpVtbl[25]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this), properties, propertyCount, filteredSet);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet2::GetExpirationEvent"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public IntPtr GetExpirationEvent()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet2*, IntPtr>)(lpVtbl[26]))((IDWriteFontSet2*)Unsafe.AsPointer(ref this));
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollection3"]/*' />
/// <unmanaged>IDWriteFontCollection3</unmanaged>
[Guid("a4d055a6-f9e3-4e25-93b7-9e309f3af8e9")]
[NativeTypeName("struct IDWriteFontCollection3 : IDWriteFontCollection2")]
[NativeInheritance("IDWriteFontCollection2")]
public unsafe partial struct IDWriteFontCollection3
{
	public static ref readonly Guid IID_IDWriteFontCollection3
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA6, 0x55, 0xD0, 0xA4,
				0xE3, 0xF9,
				0x25, 0x4E,
				0x93,
				0xB7,
				0x9E,
				0x30,
				0x9F,
				0x3A,
				0xF8,
				0xE9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontCollection3));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontCollection2.GetFontFamily" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetFontFamily(uint index, IDWriteFontFamily2** fontFamily)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection3*, uint, IDWriteFontFamily2**, int>)(lpVtbl[3]))((IDWriteFontCollection3*)Unsafe.AsPointer(ref this), index, fontFamily);
	}

	/// <inheritdoc cref="IDWriteFontCollection2.GetMatchingFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetMatchingFonts(ushort* familyName, FontAxisValue* fontAxisValues, uint fontAxisValueCount, IDWriteFontList2** fontList)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection3*, ushort*, FontAxisValue*, uint, IDWriteFontList2**, int>)(lpVtbl[4]))((IDWriteFontCollection3*)Unsafe.AsPointer(ref this), familyName, fontAxisValues, fontAxisValueCount, fontList);
	}

	/// <inheritdoc cref="IDWriteFontCollection2.GetFontFamilyModel" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Graphics.DirectWrite.FontFamilyModel GetFontFamilyModel()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection3*, Graphics.DirectWrite.FontFamilyModel>)(lpVtbl[5]))((IDWriteFontCollection3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontCollection2.GetFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetFontSet(IDWriteFontSet1** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection3*, IDWriteFontSet1**, int>)(lpVtbl[6]))((IDWriteFontCollection3*)Unsafe.AsPointer(ref this), fontSet);
	}

	/// <inheritdoc cref="IDWriteFontCollection1.GetFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetFontSet(IDWriteFontSet** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection3*, IDWriteFontSet**, int>)(lpVtbl[7]))((IDWriteFontCollection3*)Unsafe.AsPointer(ref this), fontSet);
	}

	/// <inheritdoc cref="IDWriteFontCollection1.GetFontFamily" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetFontFamily(uint index, IDWriteFontFamily1** fontFamily)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection3*, uint, IDWriteFontFamily1**, int>)(lpVtbl[8]))((IDWriteFontCollection3*)Unsafe.AsPointer(ref this), index, fontFamily);
	}

	/// <inheritdoc cref="IDWriteFontCollection.GetFontFamilyCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public uint GetFontFamilyCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection3*, uint>)(lpVtbl[9]))((IDWriteFontCollection3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontCollection.GetFontFamily" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetFontFamily(uint index, IDWriteFontFamily** fontFamily)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection3*, uint, IDWriteFontFamily**, int>)(lpVtbl[10]))((IDWriteFontCollection3*)Unsafe.AsPointer(ref this), index, fontFamily);
	}

	/// <inheritdoc cref="IDWriteFontCollection.FindFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult FindFamilyName(ushort* familyName, uint* index, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection3*, ushort*, uint*, Bool32*, int>)(lpVtbl[11]))((IDWriteFontCollection3*)Unsafe.AsPointer(ref this), familyName, index, exists);
	}

	/// <inheritdoc cref="IDWriteFontCollection.GetFontFromFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetFontFromFontFace(IDWriteFontFace* fontFace, IDWriteFont** font)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection3*, IDWriteFontFace*, IDWriteFont**, int>)(lpVtbl[12]))((IDWriteFontCollection3*)Unsafe.AsPointer(ref this), fontFace, font);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontCollection3::GetExpirationEvent"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public IntPtr GetExpirationEvent()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontCollection3*, IntPtr>)(lpVtbl[13]))((IDWriteFontCollection3*)Unsafe.AsPointer(ref this));
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory7"]/*' />
/// <unmanaged>IDWriteFactory7</unmanaged>
[Guid("35d0e0b3-9076-4d2e-a016-a91b568a06b4")]
[NativeTypeName("struct IDWriteFactory7 : IDWriteFactory6")]
[NativeInheritance("IDWriteFactory6")]
public unsafe partial struct IDWriteFactory7
{
	public static ref readonly Guid IID_IDWriteFactory7
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB3, 0xE0, 0xD0, 0x35,
				0x76, 0x90,
				0x2E, 0x4D,
				0xA0,
				0x16,
				0xA9,
				0x1B,
				0x56,
				0x8A,
				0x06,
				0xB4
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFactory7));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFactory6.CreateFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreateFontFaceReference(IDWriteFontFile* fontFile, uint faceIndex, FontSimulations fontSimulations, FontAxisValue* fontAxisValues, uint fontAxisValueCount, IDWriteFontFaceReference1** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontFile*, uint, FontSimulations, FontAxisValue*, uint, IDWriteFontFaceReference1**, int>)(lpVtbl[3]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontFile, faceIndex, fontSimulations, fontAxisValues, fontAxisValueCount, fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFactory6.CreateFontResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateFontResource(IDWriteFontFile* fontFile, uint faceIndex, IDWriteFontResource** fontResource)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontFile*, uint, IDWriteFontResource**, int>)(lpVtbl[4]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontFile, faceIndex, fontResource);
	}

	/// <inheritdoc cref="IDWriteFactory6.GetSystemFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetSystemFontSet(Bool32 includeDownloadableFonts, IDWriteFontSet1** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, Bool32, IDWriteFontSet1**, int>)(lpVtbl[5]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), includeDownloadableFonts, fontSet);
	}

	/// <inheritdoc cref="IDWriteFactory6.GetSystemFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetSystemFontCollection(Bool32 includeDownloadableFonts, FontFamilyModel fontFamilyModel, IDWriteFontCollection2** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, Bool32, FontFamilyModel, IDWriteFontCollection2**, int>)(lpVtbl[6]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), includeDownloadableFonts, fontFamilyModel, fontCollection);
	}

	/// <inheritdoc cref="IDWriteFactory6.CreateFontCollectionFromFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CreateFontCollectionFromFontSet(IDWriteFontSet* fontSet, FontFamilyModel fontFamilyModel, IDWriteFontCollection2** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontSet*, FontFamilyModel, IDWriteFontCollection2**, int>)(lpVtbl[7]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontSet, fontFamilyModel, fontCollection);
	}

	/// <inheritdoc cref="IDWriteFactory6.CreateFontSetBuilder" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult CreateFontSetBuilder(IDWriteFontSetBuilder2** fontSetBuilder)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontSetBuilder2**, int>)(lpVtbl[8]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontSetBuilder);
	}

	/// <inheritdoc cref="IDWriteFactory6.CreateTextFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CreateTextFormat(ushort* fontFamilyName, IDWriteFontCollection* fontCollection, FontAxisValue* fontAxisValues, uint fontAxisValueCount, float fontSize, ushort* localeName, IDWriteTextFormat3** textFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, ushort*, IDWriteFontCollection*, FontAxisValue*, uint, float, ushort*, IDWriteTextFormat3**, int>)(lpVtbl[9]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontFamilyName, fontCollection, fontAxisValues, fontAxisValueCount, fontSize, localeName, textFormat);
	}

	/// <inheritdoc cref="IDWriteFactory5.CreateFontSetBuilder" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult CreateFontSetBuilder(IDWriteFontSetBuilder1** fontSetBuilder)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontSetBuilder1**, int>)(lpVtbl[10]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontSetBuilder);
	}

	/// <inheritdoc cref="IDWriteFactory5.CreateInMemoryFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CreateInMemoryFontFileLoader(IDWriteInMemoryFontFileLoader** newLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteInMemoryFontFileLoader**, int>)(lpVtbl[11]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), newLoader);
	}

	/// <inheritdoc cref="IDWriteFactory5.CreateHttpFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CreateHttpFontFileLoader(ushort* referrerUrl, ushort* extraHeaders, IDWriteRemoteFontFileLoader** newLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, ushort*, ushort*, IDWriteRemoteFontFileLoader**, int>)(lpVtbl[12]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), referrerUrl, extraHeaders, newLoader);
	}

	/// <inheritdoc cref="IDWriteFactory5.AnalyzeContainerType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public Graphics.DirectWrite.ContainerType AnalyzeContainerType(void* fileData, uint fileDataSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, void*, uint, Graphics.DirectWrite.ContainerType>)(lpVtbl[13]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fileData, fileDataSize);
	}

	/// <inheritdoc cref="IDWriteFactory5.UnpackFontFile" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult UnpackFontFile(ContainerType containerType, void* fileData, uint fileDataSize, IDWriteFontFileStream** unpackedFontStream)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, ContainerType, void*, uint, IDWriteFontFileStream**, int>)(lpVtbl[14]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), containerType, fileData, fileDataSize, unpackedFontStream);
	}

	/// <inheritdoc cref="IDWriteFactory4.TranslateColorGlyphRun" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult TranslateColorGlyphRun(System.Drawing.PointF* baselineOrigin, GlyphRun* glyphRun, GlyphRunDescription* glyphRunDescription, GlyphImageFormats desiredGlyphImageFormats, MeasuringMode measuringMode, Matrix* worldAndDpiTransform, uint colorPaletteIndex, IDWriteColorGlyphRunEnumerator1** colorLayers)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, System.Drawing.PointF*, GlyphRun*, GlyphRunDescription*, GlyphImageFormats, MeasuringMode, Matrix*, uint, IDWriteColorGlyphRunEnumerator1**, int>)(lpVtbl[15]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), baselineOrigin, glyphRun, glyphRunDescription, desiredGlyphImageFormats, measuringMode, worldAndDpiTransform, colorPaletteIndex, colorLayers);
	}

	/// <inheritdoc cref="IDWriteFactory4.ComputeGlyphOrigins" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult ComputeGlyphOrigins(GlyphRun* glyphRun, System.Drawing.PointF* baselineOrigin, System.Drawing.PointF** glyphOrigins)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, GlyphRun*, System.Drawing.PointF*, System.Drawing.PointF**, int>)(lpVtbl[16]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), glyphRun, baselineOrigin, glyphOrigins);
	}

	/// <inheritdoc cref="IDWriteFactory4.ComputeGlyphOrigins" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult ComputeGlyphOrigins(GlyphRun* glyphRun, MeasuringMode measuringMode, System.Drawing.PointF* baselineOrigin, Matrix* worldAndDpiTransform, System.Drawing.PointF** glyphOrigins)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, GlyphRun*, MeasuringMode, System.Drawing.PointF*, Matrix*, System.Drawing.PointF**, int>)(lpVtbl[17]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), glyphRun, measuringMode, baselineOrigin, worldAndDpiTransform, glyphOrigins);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateGlyphRunAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, Matrix* transform, RenderingMode1 renderingMode, MeasuringMode measuringMode, GridFitMode gridFitMode, TextAntialiasMode antialiasMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, GlyphRun*, Matrix*, RenderingMode1, MeasuringMode, GridFitMode, TextAntialiasMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[18]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode1 renderingMode, GridFitMode gridFitMode, IDWriteRenderingParams3** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, float, float, float, float, PixelGeometry, RenderingMode1, GridFitMode, IDWriteRenderingParams3**, int>)(lpVtbl[19]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult CreateFontFaceReference(IDWriteFontFile* fontFile, uint faceIndex, FontSimulations fontSimulations, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontFile*, uint, FontSimulations, IDWriteFontFaceReference**, int>)(lpVtbl[20]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontFile, faceIndex, fontSimulations, fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult CreateFontFaceReference(ushort* filePath, ulong* lastWriteTime, uint faceIndex, FontSimulations fontSimulations, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, ushort*, ulong*, uint, FontSimulations, IDWriteFontFaceReference**, int>)(lpVtbl[21]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), filePath, lastWriteTime, faceIndex, fontSimulations, fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFactory3.GetSystemFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult GetSystemFontSet(IDWriteFontSet** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontSet**, int>)(lpVtbl[22]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontSet);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateFontSetBuilder" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult CreateFontSetBuilder(IDWriteFontSetBuilder** fontSetBuilder)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontSetBuilder**, int>)(lpVtbl[23]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontSetBuilder);
	}

	/// <inheritdoc cref="IDWriteFactory3.CreateFontCollectionFromFontSet" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult CreateFontCollectionFromFontSet(IDWriteFontSet* fontSet, IDWriteFontCollection1** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontSet*, IDWriteFontCollection1**, int>)(lpVtbl[24]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontSet, fontCollection);
	}

	/// <inheritdoc cref="IDWriteFactory3.GetSystemFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult GetSystemFontCollection(Bool32 includeDownloadableFonts, IDWriteFontCollection1** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, Bool32, IDWriteFontCollection1**, Bool32, int>)(lpVtbl[25]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), includeDownloadableFonts, fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory3.GetFontDownloadQueue" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult GetFontDownloadQueue(IDWriteFontDownloadQueue** fontDownloadQueue)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontDownloadQueue**, int>)(lpVtbl[26]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontDownloadQueue);
	}

	/// <inheritdoc cref="IDWriteFactory2.GetSystemFontFallback" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult GetSystemFontFallback(IDWriteFontFallback** fontFallback)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontFallback**, int>)(lpVtbl[27]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontFallback);
	}

	/// <inheritdoc cref="IDWriteFactory2.CreateFontFallbackBuilder" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult CreateFontFallbackBuilder(IDWriteFontFallbackBuilder** fontFallbackBuilder)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontFallbackBuilder**, int>)(lpVtbl[28]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontFallbackBuilder);
	}

	/// <inheritdoc cref="IDWriteFactory2.TranslateColorGlyphRun" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult TranslateColorGlyphRun(float baselineOriginX, float baselineOriginY, GlyphRun* glyphRun, GlyphRunDescription* glyphRunDescription, MeasuringMode measuringMode, Matrix* worldToDeviceTransform, uint colorPaletteIndex, IDWriteColorGlyphRunEnumerator** colorLayers)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, float, float, GlyphRun*, GlyphRunDescription*, MeasuringMode, Matrix*, uint, IDWriteColorGlyphRunEnumerator**, int>)(lpVtbl[29]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), baselineOriginX, baselineOriginY, glyphRun, glyphRunDescription, measuringMode, worldToDeviceTransform, colorPaletteIndex, colorLayers);
	}

	/// <inheritdoc cref="IDWriteFactory2.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, GridFitMode gridFitMode, IDWriteRenderingParams2** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, float, float, float, float, PixelGeometry, RenderingMode, GridFitMode, IDWriteRenderingParams2**, int>)(lpVtbl[30]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, gridFitMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory2.CreateGlyphRunAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, Matrix* transform, RenderingMode renderingMode, MeasuringMode measuringMode, GridFitMode gridFitMode, TextAntialiasMode antialiasMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, GlyphRun*, Matrix*, RenderingMode, MeasuringMode, GridFitMode, TextAntialiasMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[31]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), glyphRun, transform, renderingMode, measuringMode, gridFitMode, antialiasMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <inheritdoc cref="IDWriteFactory1.GetEudcFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult GetEudcFontCollection(IDWriteFontCollection** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontCollection**, Bool32, int>)(lpVtbl[32]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory1.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float enhancedContrastGrayscale, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, IDWriteRenderingParams1** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, float, float, float, float, PixelGeometry, RenderingMode, IDWriteRenderingParams1**, int>)(lpVtbl[33]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.GetSystemFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult GetSystemFontCollection(IDWriteFontCollection** fontCollection, Bool32 checkForUpdates)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontCollection**, Bool32, int>)(lpVtbl[34]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontCollection, checkForUpdates);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult CreateCustomFontCollection(IDWriteFontCollectionLoader* collectionLoader, void* collectionKey, uint collectionKeySize, IDWriteFontCollection** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontCollectionLoader*, void*, uint, IDWriteFontCollection**, int>)(lpVtbl[35]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), collectionLoader, collectionKey, collectionKeySize, fontCollection);
	}

	/// <inheritdoc cref="IDWriteFactory.RegisterFontCollectionLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult RegisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontCollectionLoader*, int>)(lpVtbl[36]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontCollectionLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.UnregisterFontCollectionLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult UnregisterFontCollectionLoader(IDWriteFontCollectionLoader* fontCollectionLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontCollectionLoader*, int>)(lpVtbl[37]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontCollectionLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateFontFileReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult CreateFontFileReference(ushort* filePath, ulong* lastWriteTime, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, ushort*, ulong*, IDWriteFontFile**, int>)(lpVtbl[38]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), filePath, lastWriteTime, fontFile);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomFontFileReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult CreateCustomFontFileReference(void* fontFileReferenceKey, uint fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, IDWriteFontFile** fontFile)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, void*, uint, IDWriteFontFileLoader*, IDWriteFontFile**, int>)(lpVtbl[39]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader, fontFile);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult CreateFontFace(FontFaceType fontFaceType, uint numberOfFiles, IDWriteFontFile** fontFiles, uint faceIndex, FontSimulations fontFaceSimulationFlags, IDWriteFontFace** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, FontFaceType, uint, IDWriteFontFile**, uint, FontSimulations, IDWriteFontFace**, int>)(lpVtbl[40]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontFaceType, numberOfFiles, fontFiles, faceIndex, fontFaceSimulationFlags, fontFace);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult CreateRenderingParams(IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteRenderingParams**, int>)(lpVtbl[41]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateMonitorRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public HResult CreateMonitorRenderingParams(IntPtr monitor, IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IntPtr, IDWriteRenderingParams**, int>)(lpVtbl[42]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), monitor, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateCustomRenderingParams" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public HResult CreateCustomRenderingParams(float gamma, float enhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, IDWriteRenderingParams** renderingParams)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, float, float, float, PixelGeometry, RenderingMode, IDWriteRenderingParams**, int>)(lpVtbl[43]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, renderingParams);
	}

	/// <inheritdoc cref="IDWriteFactory.RegisterFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public HResult RegisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontFileLoader*, int>)(lpVtbl[44]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.UnregisterFontFileLoader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public HResult UnregisterFontFileLoader(IDWriteFontFileLoader* fontFileLoader)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteFontFileLoader*, int>)(lpVtbl[45]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontFileLoader);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public HResult CreateTextFormat(ushort* fontFamilyName, IDWriteFontCollection* fontCollection, FontWeight fontWeight, FontStyle fontStyle, FontStretch fontStretch, float fontSize, ushort* localeName, IDWriteTextFormat** textFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, ushort*, IDWriteFontCollection*, FontWeight, FontStyle, FontStretch, float, ushort*, IDWriteTextFormat**, int>)(lpVtbl[46]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), fontFamilyName, fontCollection, fontWeight, fontStyle, fontStretch, fontSize, localeName, textFormat);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTypography" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult CreateTypography(IDWriteTypography** typography)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteTypography**, int>)(lpVtbl[47]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), typography);
	}

	/// <inheritdoc cref="IDWriteFactory.GetGdiInterop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public HResult GetGdiInterop(IDWriteGdiInterop** gdiInterop)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteGdiInterop**, int>)(lpVtbl[48]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), gdiInterop);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextLayout" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public HResult CreateTextLayout(ushort* @string, uint stringLength, IDWriteTextFormat* textFormat, float maxWidth, float maxHeight, IDWriteTextLayout** textLayout)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, ushort*, uint, IDWriteTextFormat*, float, float, IDWriteTextLayout**, int>)(lpVtbl[49]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), @string, stringLength, textFormat, maxWidth, maxHeight, textLayout);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateGdiCompatibleTextLayout" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public HResult CreateGdiCompatibleTextLayout(ushort* @string, uint stringLength, IDWriteTextFormat* textFormat, float layoutWidth, float layoutHeight, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, IDWriteTextLayout** textLayout)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, ushort*, uint, IDWriteTextFormat*, float, float, float, Matrix*, Bool32, IDWriteTextLayout**, int>)(lpVtbl[50]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), @string, stringLength, textFormat, layoutWidth, layoutHeight, pixelsPerDip, transform, useGdiNatural, textLayout);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateEllipsisTrimmingSign" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public HResult CreateEllipsisTrimmingSign(IDWriteTextFormat* textFormat, IDWriteInlineObject** trimmingSign)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteTextFormat*, IDWriteInlineObject**, int>)(lpVtbl[51]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), textFormat, trimmingSign);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateTextAnalyzer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public HResult CreateTextAnalyzer(IDWriteTextAnalyzer** textAnalyzer)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, IDWriteTextAnalyzer**, int>)(lpVtbl[52]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), textAnalyzer);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateNumberSubstitution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public HResult CreateNumberSubstitution(NumberSubstitutionMethod substitutionMethod, ushort* localeName, Bool32 ignoreUserOverride, IDWriteNumberSubstitution** numberSubstitution)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, NumberSubstitutionMethod, ushort*, Bool32, IDWriteNumberSubstitution**, int>)(lpVtbl[53]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), substitutionMethod, localeName, ignoreUserOverride, numberSubstitution);
	}

	/// <inheritdoc cref="IDWriteFactory.CreateGlyphRunAnalysis" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public HResult CreateGlyphRunAnalysis(GlyphRun* glyphRun, float pixelsPerDip, Matrix* transform, RenderingMode renderingMode, MeasuringMode measuringMode, float baselineOriginX, float baselineOriginY, IDWriteGlyphRunAnalysis** glyphRunAnalysis)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, GlyphRun*, float, Matrix*, RenderingMode, MeasuringMode, float, float, IDWriteGlyphRunAnalysis**, int>)(lpVtbl[54]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), glyphRun, pixelsPerDip, transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, glyphRunAnalysis);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory7::GetSystemFontSet"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public HResult GetSystemFontSet(Bool32 includeDownloadableFonts, IDWriteFontSet2** fontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, Bool32, IDWriteFontSet2**, int>)(lpVtbl[55]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), includeDownloadableFonts, fontSet);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFactory7::GetSystemFontCollection"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public HResult GetSystemFontCollection(Bool32 includeDownloadableFonts, FontFamilyModel fontFamilyModel, IDWriteFontCollection3** fontCollection)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFactory7*, Bool32, FontFamilyModel, IDWriteFontCollection3**, int>)(lpVtbl[56]))((IDWriteFactory7*)Unsafe.AsPointer(ref this), includeDownloadableFonts, fontFamilyModel, fontCollection);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet3"]/*' />
/// <unmanaged>IDWriteFontSet3</unmanaged>
[Guid("7c073ef2-a7f4-4045-8c32-8ab8ae640f90")]
[NativeTypeName("struct IDWriteFontSet3 : IDWriteFontSet2")]
[NativeInheritance("IDWriteFontSet2")]
public unsafe partial struct IDWriteFontSet3
{
	public static ref readonly Guid IID_IDWriteFontSet3
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF2, 0x3E, 0x07, 0x7C,
				0xF4, 0xA7,
				0x45, 0x40,
				0x8C,
				0x32,
				0x8A,
				0xB8,
				0xAE,
				0x64,
				0x0F,
				0x90
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontSet3));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontSet2.GetExpirationEvent" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public IntPtr GetExpirationEvent()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, IntPtr>)(lpVtbl[3]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetMatchingFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetMatchingFonts(FontProperty* fontProperty, FontAxisValue* fontAxisValues, uint fontAxisValueCount, IDWriteFontSet1** matchingFonts)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, FontProperty*, FontAxisValue*, uint, IDWriteFontSet1**, int>)(lpVtbl[4]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), fontProperty, fontAxisValues, fontAxisValueCount, matchingFonts);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFirstFontResources" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetFirstFontResources(IDWriteFontSet1** filteredFontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, IDWriteFontSet1**, int>)(lpVtbl[5]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), filteredFontSet);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFilteredFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetFilteredFonts(uint* indices, uint indexCount, IDWriteFontSet1** filteredFontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, uint*, uint, IDWriteFontSet1**, int>)(lpVtbl[6]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), indices, indexCount, filteredFontSet);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFilteredFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetFilteredFonts(FontAxisRange* fontAxisRanges, uint fontAxisRangeCount, Bool32 selectAnyRange, IDWriteFontSet1** filteredFontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, FontAxisRange*, uint, Bool32, IDWriteFontSet1**, int>)(lpVtbl[7]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), fontAxisRanges, fontAxisRangeCount, selectAnyRange, filteredFontSet);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFilteredFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetFilteredFonts(FontProperty* properties, uint propertyCount, Bool32 selectAnyProperty, IDWriteFontSet1** filteredFontSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, FontProperty*, uint, Bool32, IDWriteFontSet1**, int>)(lpVtbl[8]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), properties, propertyCount, selectAnyProperty, filteredFontSet);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFilteredFontIndices" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetFilteredFontIndices(FontAxisRange* fontAxisRanges, uint fontAxisRangeCount, Bool32 selectAnyRange, uint* indices, uint maxIndexCount, uint* actualIndexCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, FontAxisRange*, uint, Bool32, uint*, uint, uint*, int>)(lpVtbl[9]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), fontAxisRanges, fontAxisRangeCount, selectAnyRange, indices, maxIndexCount, actualIndexCount);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFilteredFontIndices" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetFilteredFontIndices(FontProperty* properties, uint propertyCount, Bool32 selectAnyProperty, uint* indices, uint maxIndexCount, uint* actualIndexCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, FontProperty*, uint, Bool32, uint*, uint, uint*, int>)(lpVtbl[10]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), properties, propertyCount, selectAnyProperty, indices, maxIndexCount, actualIndexCount);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFontAxisRanges" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetFontAxisRanges(uint listIndex, FontAxisRange* fontAxisRanges, uint maxFontAxisRangeCount, uint* actualFontAxisRangeCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, uint, FontAxisRange*, uint, uint*, int>)(lpVtbl[11]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), listIndex, fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFontAxisRanges" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetFontAxisRanges(FontAxisRange* fontAxisRanges, uint maxFontAxisRangeCount, uint* actualFontAxisRangeCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, FontAxisRange*, uint, uint*, int>)(lpVtbl[12]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), fontAxisRanges, maxFontAxisRangeCount, actualFontAxisRangeCount);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetFontFaceReference(uint listIndex, IDWriteFontFaceReference1** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, uint, IDWriteFontFaceReference1**, int>)(lpVtbl[13]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), listIndex, fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFontSet1.CreateFontResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult CreateFontResource(uint listIndex, IDWriteFontResource** fontResource)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, uint, IDWriteFontResource**, int>)(lpVtbl[14]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), listIndex, fontResource);
	}

	/// <inheritdoc cref="IDWriteFontSet1.CreateFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult CreateFontFace(uint listIndex, IDWriteFontFace5** fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, uint, IDWriteFontFace5**, int>)(lpVtbl[15]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), listIndex, fontFace);
	}

	/// <inheritdoc cref="IDWriteFontSet1.GetFontLocality" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public Graphics.DirectWrite.Locality GetFontLocality(uint listIndex)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, uint, Graphics.DirectWrite.Locality>)(lpVtbl[16]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), listIndex);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetFontCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public uint GetFontCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, uint>)(lpVtbl[17]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontSet.GetFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult GetFontFaceReference(uint listIndex, IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, uint, IDWriteFontFaceReference**, int>)(lpVtbl[18]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), listIndex, fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFontSet.FindFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult FindFontFaceReference(IDWriteFontFaceReference* fontFaceReference, uint* listIndex, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, IDWriteFontFaceReference*, uint*, Bool32*, int>)(lpVtbl[19]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), fontFaceReference, listIndex, exists);
	}

	/// <inheritdoc cref="IDWriteFontSet.FindFontFace" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult FindFontFace(IDWriteFontFace* fontFace, uint* listIndex, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, IDWriteFontFace*, uint*, Bool32*, int>)(lpVtbl[20]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), fontFace, listIndex, exists);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetPropertyValues" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetPropertyValues(FontPropertyId propertyID, IDWriteStringList** values)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, FontPropertyId, IDWriteStringList**, int>)(lpVtbl[21]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), propertyID, values);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetPropertyValues" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult GetPropertyValues(FontPropertyId propertyID, ushort* preferredLocaleNames, IDWriteStringList** values)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, FontPropertyId, ushort*, IDWriteStringList**, int>)(lpVtbl[22]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), propertyID, preferredLocaleNames, values);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetPropertyValues" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult GetPropertyValues(uint listIndex, FontPropertyId propertyId, Bool32* exists, IDWriteLocalizedStrings** values)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, uint, FontPropertyId, Bool32*, IDWriteLocalizedStrings**, int>)(lpVtbl[23]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), listIndex, propertyId, exists, values);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetPropertyOccurrenceCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult GetPropertyOccurrenceCount(FontProperty* property, uint* propertyOccurrenceCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, FontProperty*, uint*, int>)(lpVtbl[24]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), property, propertyOccurrenceCount);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetMatchingFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult GetMatchingFonts(ushort* familyName, FontWeight fontWeight, FontStretch fontStretch, FontStyle fontStyle, IDWriteFontSet** filteredSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, ushort*, FontWeight, FontStretch, FontStyle, IDWriteFontSet**, int>)(lpVtbl[25]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), familyName, fontWeight, fontStretch, fontStyle, filteredSet);
	}

	/// <inheritdoc cref="IDWriteFontSet.GetMatchingFonts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult GetMatchingFonts(FontProperty* properties, uint propertyCount, IDWriteFontSet** filteredSet)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, FontProperty*, uint, IDWriteFontSet**, int>)(lpVtbl[26]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), properties, propertyCount, filteredSet);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet3::GetFontSourceType"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public Graphics.DirectWrite.FontSourceType GetFontSourceType(uint fontIndex)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, uint, Graphics.DirectWrite.FontSourceType>)(lpVtbl[27]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), fontIndex);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet3::GetFontSourceNameLength"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public uint GetFontSourceNameLength(uint listIndex)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, uint, uint>)(lpVtbl[28]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), listIndex);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontSet3::GetFontSourceName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult GetFontSourceName(uint listIndex, ushort* stringBuffer, uint stringBufferSize)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontSet3*, uint, ushort*, uint, int>)(lpVtbl[29]))((IDWriteFontSet3*)Unsafe.AsPointer(ref this), listIndex, stringBuffer, stringBufferSize);
	}
}

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace6"]/*' />
/// <unmanaged>IDWriteFontFace6</unmanaged>
[Guid("c4b1fe1b-6e84-47d5-b54c-a597981b06ad")]
[NativeTypeName("struct IDWriteFontFace6 : IDWriteFontFace5")]
[NativeInheritance("IDWriteFontFace5")]
public unsafe partial struct IDWriteFontFace6
{
	public static ref readonly Guid IID_IDWriteFontFace6
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1B, 0xFE, 0xB1, 0xC4,
				0x84, 0x6E,
				0xD5, 0x47,
				0xB5,
				0x4C,
				0xA5,
				0x97,
				0x98,
				0x1B,
				0x06,
				0xAD
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteFontFace6));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace5.GetFontAxisValueCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public uint GetFontAxisValueCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, uint>)(lpVtbl[3]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace5.GetFontAxisValues" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetFontAxisValues(FontAxisValue* fontAxisValues, uint fontAxisValueCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, FontAxisValue*, uint, int>)(lpVtbl[4]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), fontAxisValues, fontAxisValueCount);
	}

	/// <inheritdoc cref="IDWriteFontFace5.HasVariations" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Bool32 HasVariations()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, Bool32>)(lpVtbl[5]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace5.GetFontResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetFontResource(IDWriteFontResource** fontResource)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, IDWriteFontResource**, int>)(lpVtbl[6]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), fontResource);
	}

	/// <inheritdoc cref="IDWriteFontFace5.Equals" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public Bool32 Equals(IDWriteFontFace* fontFace)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, IDWriteFontFace*, Bool32>)(lpVtbl[7]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), fontFace);
	}

	/// <inheritdoc cref="IDWriteFontFace4.GetGlyphImageFormats" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetGlyphImageFormats(ushort glyphId, uint pixelsPerEmFirst, uint pixelsPerEmLast, GlyphImageFormats* glyphImageFormats)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, ushort, uint, uint, GlyphImageFormats*, int>)(lpVtbl[8]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), glyphId, pixelsPerEmFirst, pixelsPerEmLast, glyphImageFormats);
	}

	/// <inheritdoc cref="IDWriteFontFace4.GetGlyphImageFormats" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public Graphics.DirectWrite.GlyphImageFormats GetGlyphImageFormats()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, Graphics.DirectWrite.GlyphImageFormats>)(lpVtbl[9]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace4.GetGlyphImageData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetGlyphImageData(ushort glyphId, uint pixelsPerEm, GlyphImageFormats glyphImageFormat, GlyphImageData* glyphData, void** glyphDataContext)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, ushort, uint, GlyphImageFormats, GlyphImageData*, void**, int>)(lpVtbl[10]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), glyphId, pixelsPerEm, glyphImageFormat, glyphData, glyphDataContext);
	}

	/// <inheritdoc cref="IDWriteFontFace4.ReleaseGlyphImageData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public void ReleaseGlyphImageData(void* glyphDataContext)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, void*, void>)(lpVtbl[11]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), glyphDataContext);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetFontFaceReference" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetFontFaceReference(IDWriteFontFaceReference** fontFaceReference)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, IDWriteFontFaceReference**, int>)(lpVtbl[12]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), fontFaceReference);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetPanose" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public void GetPanose(Panose* panose)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, Panose*, void>)(lpVtbl[13]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), panose);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public Graphics.DirectWrite.FontWeight GetWeight()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, Graphics.DirectWrite.FontWeight>)(lpVtbl[14]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public Graphics.DirectWrite.FontStretch GetStretch()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, Graphics.DirectWrite.FontStretch>)(lpVtbl[15]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public Graphics.DirectWrite.FontStyle GetStyle()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, Graphics.DirectWrite.FontStyle>)(lpVtbl[16]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetFamilyNames" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetFamilyNames(IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, IDWriteLocalizedStrings**, int>)(lpVtbl[17]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), names);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetFaceNames" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult GetFaceNames(IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, IDWriteLocalizedStrings**, int>)(lpVtbl[18]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), names);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetInformationalStrings" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetInformationalStrings(InformationalStringId informationalStringID, IDWriteLocalizedStrings** informationalStrings, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, InformationalStringId, IDWriteLocalizedStrings**, Bool32*, int>)(lpVtbl[19]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), informationalStringID, informationalStrings, exists);
	}

	/// <inheritdoc cref="IDWriteFontFace3.HasCharacter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public Bool32 HasCharacter(uint unicodeValue)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, uint, Bool32>)(lpVtbl[20]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), unicodeValue);
	}

	/// <inheritdoc cref="IDWriteFontFace3.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Matrix* transform, Bool32 isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, IDWriteRenderingParams* renderingParams, RenderingMode1* renderingMode, GridFitMode* gridFitMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, float, float, float, Matrix*, Bool32, OutlineThreshold, MeasuringMode, IDWriteRenderingParams*, RenderingMode1*, GridFitMode*, int>)(lpVtbl[21]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode);
	}

	/// <inheritdoc cref="IDWriteFontFace3.IsCharacterLocal" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public Bool32 IsCharacterLocal(uint unicodeValue)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, uint, Bool32>)(lpVtbl[22]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), unicodeValue);
	}

	/// <inheritdoc cref="IDWriteFontFace3.IsGlyphLocal" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public Bool32 IsGlyphLocal(ushort glyphId)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, ushort, Bool32>)(lpVtbl[23]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), glyphId);
	}

	/// <inheritdoc cref="IDWriteFontFace3.AreCharactersLocal" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult AreCharactersLocal(ushort* characters, uint characterCount, Bool32 enqueueIfNotLocal, Bool32* isLocal)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, ushort*, uint, Bool32, Bool32*, int>)(lpVtbl[24]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), characters, characterCount, enqueueIfNotLocal, isLocal);
	}

	/// <inheritdoc cref="IDWriteFontFace3.AreGlyphsLocal" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult AreGlyphsLocal(ushort* glyphIndices, uint glyphCount, Bool32 enqueueIfNotLocal, Bool32* isLocal)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, ushort*, uint, Bool32, Bool32*, int>)(lpVtbl[25]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), glyphIndices, glyphCount, enqueueIfNotLocal, isLocal);
	}

	/// <inheritdoc cref="IDWriteFontFace2.IsColorFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public Bool32 IsColorFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, Bool32>)(lpVtbl[26]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace2.GetColorPaletteCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public uint GetColorPaletteCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, uint>)(lpVtbl[27]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace2.GetPaletteEntryCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public uint GetPaletteEntryCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, uint>)(lpVtbl[28]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace2.GetPaletteEntries" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult GetPaletteEntries(uint colorPaletteIndex, uint firstEntryIndex, uint entryCount, ColorF* paletteEntries)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, uint, uint, uint, ColorF*, int>)(lpVtbl[29]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), colorPaletteIndex, firstEntryIndex, entryCount, paletteEntries);
	}

	/// <inheritdoc cref="IDWriteFontFace2.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Matrix* transform, Bool32 isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, IDWriteRenderingParams* renderingParams, RenderingMode* renderingMode, GridFitMode* gridFitMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, float, float, float, Matrix*, Bool32, OutlineThreshold, MeasuringMode, IDWriteRenderingParams*, RenderingMode*, GridFitMode*, int>)(lpVtbl[30]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingParams, renderingMode, gridFitMode);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public void GetMetrics(FontMetrics1* fontMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, FontMetrics1*, void>)(lpVtbl[31]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), fontMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetGdiCompatibleMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, Matrix* transform, FontMetrics1* fontMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, float, float, Matrix*, FontMetrics1*, int>)(lpVtbl[32]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, fontMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetCaretMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public void GetCaretMetrics(CaretMetrics* caretMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, CaretMetrics*, void>)(lpVtbl[33]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), caretMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetUnicodeRanges" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult GetUnicodeRanges(uint maxRangeCount, UnicodeRange* unicodeRanges, uint* actualRangeCount)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, uint, UnicodeRange*, uint*, int>)(lpVtbl[34]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), maxRangeCount, unicodeRanges, actualRangeCount);
	}

	/// <inheritdoc cref="IDWriteFontFace1.IsMonospacedFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public Bool32 IsMonospacedFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, Bool32>)(lpVtbl[35]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetDesignGlyphAdvances" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult GetDesignGlyphAdvances(uint glyphCount, ushort* glyphIndices, int* glyphAdvances, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, uint, ushort*, int*, Bool32, int>)(lpVtbl[36]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), glyphCount, glyphIndices, glyphAdvances, isSideways);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetGdiCompatibleGlyphAdvances" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult GetGdiCompatibleGlyphAdvances(float emSize, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, Bool32 isSideways, uint glyphCount, ushort* glyphIndices, int* glyphAdvances)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, float, float, Matrix*, Bool32, Bool32, uint, ushort*, int*, int>)(lpVtbl[37]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, useGdiNatural, isSideways, glyphCount, glyphIndices, glyphAdvances);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetKerningPairAdjustments" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult GetKerningPairAdjustments(uint glyphCount, ushort* glyphIndices, int* glyphAdvanceAdjustments)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, uint, ushort*, int*, int>)(lpVtbl[38]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), glyphCount, glyphIndices, glyphAdvanceAdjustments);
	}

	/// <inheritdoc cref="IDWriteFontFace1.HasKerningPairs" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public Bool32 HasKerningPairs()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, Bool32>)(lpVtbl[39]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Matrix* transform, Bool32 isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, RenderingMode* renderingMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, float, float, float, Matrix*, Bool32, OutlineThreshold, MeasuringMode, RenderingMode*, int>)(lpVtbl[40]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), fontEmSize, dpiX, dpiY, transform, isSideways, outlineThreshold, measuringMode, renderingMode);
	}

	/// <inheritdoc cref="IDWriteFontFace1.GetVerticalGlyphVariants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult GetVerticalGlyphVariants(uint glyphCount, ushort* nominalGlyphIndices, ushort* verticalGlyphIndices)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, uint, ushort*, ushort*, int>)(lpVtbl[41]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), glyphCount, nominalGlyphIndices, verticalGlyphIndices);
	}

	/// <inheritdoc cref="IDWriteFontFace1.HasVerticalGlyphVariants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public Bool32 HasVerticalGlyphVariants()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, Bool32>)(lpVtbl[42]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public new Graphics.DirectWrite.FontFaceType GetType()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, Graphics.DirectWrite.FontFaceType>)(lpVtbl[43]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetFiles" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public HResult GetFiles(uint* numberOfFiles, IDWriteFontFile** fontFiles)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, uint*, IDWriteFontFile**, int>)(lpVtbl[44]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), numberOfFiles, fontFiles);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetIndex" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public uint GetIndex()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, uint>)(lpVtbl[45]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetSimulations" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public Graphics.DirectWrite.FontSimulations GetSimulations()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, Graphics.DirectWrite.FontSimulations>)(lpVtbl[46]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.IsSymbolFont" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public Bool32 IsSymbolFont()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, Bool32>)(lpVtbl[47]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public void GetMetrics(FontMetrics* fontFaceMetrics)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, FontMetrics*, void>)(lpVtbl[48]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), fontFaceMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public ushort GetGlyphCount()
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, ushort>)(lpVtbl[49]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IDWriteFontFace.GetDesignGlyphMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public HResult GetDesignGlyphMetrics(ushort* glyphIndices, uint glyphCount, GlyphMetrics* glyphMetrics, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, ushort*, uint, GlyphMetrics*, Bool32, int>)(lpVtbl[50]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), glyphIndices, glyphCount, glyphMetrics, isSideways);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphIndices" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public HResult GetGlyphIndices(uint* codePoints, uint codePointCount, ushort* glyphIndices)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, uint*, uint, ushort*, int>)(lpVtbl[51]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), codePoints, codePointCount, glyphIndices);
	}

	/// <inheritdoc cref="IDWriteFontFace.TryGetFontTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public HResult TryGetFontTable(uint openTypeTableTag, void** tableData, uint* tableSize, void** tableContext, Bool32* exists)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, uint, void**, uint*, void**, Bool32*, int>)(lpVtbl[52]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), openTypeTableTag, tableData, tableSize, tableContext, exists);
	}

	/// <inheritdoc cref="IDWriteFontFace.ReleaseFontTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public void ReleaseFontTable(void* tableContext)
	{
		((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, void*, void>)(lpVtbl[53]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), tableContext);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGlyphRunOutline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public HResult GetGlyphRunOutline(float emSize, ushort* glyphIndices, float* glyphAdvances, GlyphOffset* glyphOffsets, uint glyphCount, Bool32 isSideways, Bool32 isRightToLeft, Graphics.Direct2D.Common.ID2D1SimplifiedGeometrySink* geometrySink)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, float, ushort*, float*, GlyphOffset*, uint, Bool32, Bool32, Graphics.Direct2D.Common.ID2D1SimplifiedGeometrySink*, int>)(lpVtbl[54]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetRecommendedRenderingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public HResult GetRecommendedRenderingMode(float emSize, float pixelsPerDip, MeasuringMode measuringMode, IDWriteRenderingParams* renderingParams, RenderingMode* renderingMode)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, float, float, MeasuringMode, IDWriteRenderingParams*, RenderingMode*, int>)(lpVtbl[55]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGdiCompatibleMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public HResult GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, Matrix* transform, FontMetrics* fontFaceMetrics)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, float, float, Matrix*, FontMetrics*, int>)(lpVtbl[56]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, fontFaceMetrics);
	}

	/// <inheritdoc cref="IDWriteFontFace.GetGdiCompatibleGlyphMetrics" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public HResult GetGdiCompatibleGlyphMetrics(float emSize, float pixelsPerDip, Matrix* transform, Bool32 useGdiNatural, ushort* glyphIndices, uint glyphCount, GlyphMetrics* glyphMetrics, Bool32 isSideways)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, float, float, Matrix*, Bool32, ushort*, uint, GlyphMetrics*, Bool32, int>)(lpVtbl[57]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace6::GetFamilyNames"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public HResult GetFamilyNames(FontFamilyModel fontFamilyModel, IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, FontFamilyModel, IDWriteLocalizedStrings**, int>)(lpVtbl[58]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), fontFamilyModel, names);
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteFontFace6::GetFaceNames"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public HResult GetFaceNames(FontFamilyModel fontFamilyModel, IDWriteLocalizedStrings** names)
	{
		return ((delegate* unmanaged[Stdcall]<IDWriteFontFace6*, FontFamilyModel, IDWriteLocalizedStrings**, int>)(lpVtbl[59]))((IDWriteFontFace6*)Unsafe.AsPointer(ref this), fontFamilyModel, names);
	}
}

#endregion Com Types

#region Functions
public static unsafe partial class Apis
{
	[DllImport("DWrite", ExactSpelling = true)]
	public static extern HResult DWriteCreateFactory(FactoryType factoryType, Guid* iid, IUnknown** factory);

}
#endregion Functions
