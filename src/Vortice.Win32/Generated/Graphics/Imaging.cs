// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Diagnostics.CodeAnalysis;

#if !NET6_0_OR_GREATER
using MemoryMarshal = Win32.MemoryMarshal;
#endif

namespace Win32.Graphics.Imaging;

public static partial class Apis
{
	public const uint WINCODEC_SDK_VERSION1 = 566;
	public const uint WINCODEC_SDK_VERSION2 = 567;
	public static ref readonly Guid CLSID_WICImagingFactory
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x62, 0xF2, 0xCA, 0xCA,
				0x70, 0x93,
				0x15, 0x46,
				0xA1,
				0x3B,
				0x9F,
				0x55,
				0x39,
				0xDA,
				0x4C,
				0x0A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICImagingFactory1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x62, 0xF2, 0xCA, 0xCA,
				0x70, 0x93,
				0x15, 0x46,
				0xA1,
				0x3B,
				0x9F,
				0x55,
				0x39,
				0xDA,
				0x4C,
				0x0A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICImagingFactory2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE8, 0x06, 0x7D, 0x31,
				0x24, 0x5F,
				0x3D, 0x43,
				0xBD,
				0xF7,
				0x79,
				0xCE,
				0x68,
				0xD8,
				0xAB,
				0xC2
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public const uint WINCODEC_SDK_VERSION = 567;
	public static ref readonly Guid GUID_VendorMicrosoft
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCA, 0x49, 0xE7, 0xF0,
				0xEF, 0xED,
				0x89, 0x45,
				0xA7,
				0x3A,
				0xEE,
				0x0E,
				0x62,
				0x6A,
				0x2A,
				0x2B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_VendorMicrosoftBuiltIn
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFD, 0x30, 0x7A, 0x25,
				0xB6, 0x06,
				0x2B, 0x46,
				0xAE,
				0xA4,
				0x63,
				0xF7,
				0x0B,
				0x86,
				0xE5,
				0x33
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7B, 0xA1, 0x9E, 0x38,
				0x78, 0x50,
				0xDE, 0x4C,
				0xB6,
				0xEF,
				0x25,
				0xC1,
				0x51,
				0x75,
				0xC7,
				0x51
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngDecoder1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7B, 0xA1, 0x9E, 0x38,
				0x78, 0x50,
				0xDE, 0x4C,
				0xB6,
				0xEF,
				0x25,
				0xC1,
				0x51,
				0x75,
				0xC7,
				0x51
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngDecoder2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5B, 0x94, 0x18, 0xE0,
				0x86, 0xAA,
				0x08, 0x40,
				0x9B,
				0xD4,
				0x67,
				0x77,
				0xA1,
				0xE4,
				0x0C,
				0x11
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICBmpDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x62, 0x20, 0x46, 0x6B,
				0xBF, 0x7C,
				0x0D, 0x40,
				0x9F,
				0xDB,
				0x81,
				0x3D,
				0xD1,
				0x0F,
				0x27,
				0x78
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIcoDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDF, 0xFC, 0x1B, 0xC6,
				0x0F, 0x2E,
				0xAD, 0x4A,
				0xA8,
				0xD7,
				0xE0,
				0x6B,
				0xAF,
				0xEB,
				0xCD,
				0xFE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x80, 0xA4, 0x56, 0x94,
				0x8B, 0xE8,
				0xEA, 0x43,
				0x9E,
				0x73,
				0x0B,
				0x2D,
				0x9B,
				0x71,
				0xB1,
				0xCA
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICGifDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3C, 0xDA, 0x1D, 0x38,
				0xE9, 0x9C,
				0x34, 0x48,
				0xA2,
				0x3E,
				0x1F,
				0x98,
				0xF8,
				0xFC,
				0x52,
				0xBE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICTiffDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xD9, 0x85, 0x4E, 0xB5,
				0x23, 0xFE,
				0x9F, 0x49,
				0x8B,
				0x88,
				0x6A,
				0xCE,
				0xA7,
				0x13,
				0x75,
				0x2B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICWmpDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x36, 0xEC, 0x6C, 0xA2,
				0x4C, 0x23,
				0x50, 0x49,
				0xAE,
				0x16,
				0xE3,
				0x4A,
				0xAC,
				0xE7,
				0x1D,
				0x0D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICDdsDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x9F, 0x69, 0x53, 0x90,
				0x41, 0xA3,
				0x9D, 0x42,
				0x9E,
				0x90,
				0xEE,
				0x43,
				0x7C,
				0xF8,
				0x0C,
				0x73
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICBmpEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB4, 0x8B, 0xBE, 0x69,
				0x6D, 0xD6,
				0xC8, 0x47,
				0x86,
				0x5A,
				0xED,
				0x15,
				0x89,
				0x43,
				0x37,
				0x82
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x69, 0x99, 0x94, 0x27,
				0x6A, 0x87,
				0xD7, 0x41,
				0x94,
				0x47,
				0x56,
				0x8F,
				0x6A,
				0x35,
				0xA4,
				0xDC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC1, 0xF5, 0x34, 0x1A,
				0x5A, 0x4A,
				0xDC, 0x46,
				0xB6,
				0x44,
				0x1F,
				0x45,
				0x67,
				0xE7,
				0xA6,
				0x76
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICGifEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x98, 0x55, 0x4F, 0x11,
				0x22, 0x0B,
				0xA0, 0x40,
				0x86,
				0xA1,
				0xC8,
				0x3E,
				0xA4,
				0x95,
				0xAD,
				0xBD
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICTiffEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x10, 0xBE, 0x31, 0x01,
				0x01, 0x20,
				0x5F, 0x4C,
				0xA9,
				0xB0,
				0xCC,
				0x88,
				0xFA,
				0xB6,
				0x4C,
				0xE8
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICWmpEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCB, 0xE3, 0x4C, 0xAC,
				0xC1, 0xE1,
				0xCD, 0x44,
				0x82,
				0x15,
				0x5A,
				0x16,
				0x65,
				0x50,
				0x9E,
				0xC2
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICDdsEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x94, 0xDE, 0x1D, 0xA6,
				0xCE, 0x66,
				0xC1, 0x4A,
				0x88,
				0x1B,
				0x71,
				0x68,
				0x05,
				0x88,
				0x89,
				0x5E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICAdngDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x11, 0x94, 0x1D, 0x98,
				0x9E, 0x90,
				0xA7, 0x42,
				0x8F,
				0x5D,
				0xA7,
				0x47,
				0xFF,
				0x05,
				0x2E,
				0xDB
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegQualcommPhoneEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x62, 0x5C, 0xED, 0x68,
				0x34, 0xF5,
				0x79, 0x49,
				0xB2,
				0xB3,
				0x68,
				0x6A,
				0x12,
				0xB2,
				0xB3,
				0x4C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICHeifDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0A, 0xA8, 0xA4, 0xE9,
				0xFE, 0x44,
				0xE4, 0x4D,
				0x89,
				0x71,
				0x71,
				0x50,
				0xB1,
				0x0A,
				0x51,
				0x99
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICHeifEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC1, 0xCE, 0xBE, 0x0D,
				0xB3, 0x9E,
				0x60, 0x48,
				0x9C,
				0x6F,
				0xDD,
				0xBE,
				0x86,
				0x63,
				0x45,
				0x75
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICWebpDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x86, 0xE8, 0x93, 0x76,
				0xC9, 0x51,
				0x70, 0x40,
				0x84,
				0x19,
				0x9F,
				0x70,
				0x73,
				0x8E,
				0xC8,
				0xFA
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICRAWDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x02, 0x57, 0x94, 0x41,
				0x02, 0x83,
				0xA6, 0x44,
				0x94,
				0x45,
				0xAC,
				0x98,
				0xE8,
				0xAF,
				0xA0,
				0x86
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatBmp
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7E, 0xD8, 0xF1, 0x0A,
				0xFE, 0xFC,
				0x88, 0x41,
				0xBD,
				0xEB,
				0xA7,
				0x90,
				0x64,
				0x71,
				0xCB,
				0xE3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatPng
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF4, 0xFA, 0x7C, 0x1B,
				0x3F, 0x71,
				0x3C, 0x47,
				0xBB,
				0xCD,
				0x61,
				0x37,
				0x42,
				0x5F,
				0xAE,
				0xAF
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatIco
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC4, 0x60, 0xA8, 0xA3,
				0x8F, 0x33,
				0x17, 0x4C,
				0x91,
				0x9A,
				0xFB,
				0xA4,
				0xB5,
				0x62,
				0x8F,
				0x21
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatJpeg
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xAA, 0xA5, 0xE4, 0x19,
				0x62, 0x56,
				0xC5, 0x4F,
				0xA0,
				0xC0,
				0x17,
				0x58,
				0x02,
				0x8E,
				0x10,
				0x57
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatTiff
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x30, 0xCC, 0x3B, 0x16,
				0xE9, 0xE2,
				0x0B, 0x4F,
				0x96,
				0x1D,
				0xA3,
				0xE9,
				0xFD,
				0xB7,
				0x88,
				0xA3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatGif
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x01, 0x56, 0x8A, 0x1F,
				0x4D, 0x7D,
				0xBD, 0x4C,
				0x9C,
				0x82,
				0x1B,
				0xC8,
				0xD4,
				0xEE,
				0xB9,
				0xA5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatWmp
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xAA, 0x7C, 0xA3, 0x57,
				0x7A, 0x36,
				0x40, 0x45,
				0x91,
				0x6B,
				0xF1,
				0x83,
				0xC5,
				0x09,
				0x3A,
				0x4B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatDds
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x95, 0xCB, 0x67, 0x99,
				0x85, 0x2E,
				0xC8, 0x4A,
				0x8C,
				0xA2,
				0x83,
				0xD7,
				0xCC,
				0xD4,
				0x25,
				0xC9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatAdng
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0D, 0x6D, 0xFF, 0xF3,
				0xC0, 0x38,
				0xC4, 0x41,
				0xB1,
				0xFE,
				0x1F,
				0x38,
				0x24,
				0xF1,
				0x7B,
				0x84
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatHeif
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x21, 0x25, 0xE6, 0xE1,
				0x87, 0x67,
				0x5B, 0x40,
				0xA3,
				0x39,
				0x50,
				0x07,
				0x15,
				0xB5,
				0x76,
				0x3F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatWebp
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE2, 0xB0, 0x94, 0xE0,
				0xF2, 0x67,
				0xB3, 0x45,
				0xB0,
				0xEA,
				0x11,
				0x53,
				0x37,
				0xCA,
				0x7C,
				0xF3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatRaw
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x60, 0xCE, 0x99, 0xFE,
				0x9C, 0xF1,
				0x3C, 0x43,
				0xA3,
				0xAE,
				0x00,
				0xAC,
				0xEF,
				0xA9,
				0xCA,
				0x21
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICImagingCategories
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x80, 0xD3, 0xE3, 0xFA,
				0xA4, 0xFE,
				0x23, 0x46,
				0x8C,
				0x75,
				0xC6,
				0xB6,
				0x11,
				0x10,
				0xB6,
				0x81
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CATID_WICBitmapDecoders
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x37, 0x68, 0xD9, 0x7E,
				0xF0, 0x96,
				0x12, 0x48,
				0xB2,
				0x11,
				0xF1,
				0x3C,
				0x24,
				0x11,
				0x7E,
				0xD3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CATID_WICBitmapEncoders
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x96, 0x72, 0x75, 0xAC,
				0x22, 0x35,
				0x11, 0x4E,
				0x98,
				0x62,
				0xC1,
				0x7B,
				0xE5,
				0xA1,
				0x76,
				0x7E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CATID_WICPixelFormats
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0F, 0xE7, 0x46, 0x2B,
				0xA7, 0xCD,
				0x3E, 0x47,
				0x89,
				0xF6,
				0xDC,
				0x96,
				0x30,
				0xA2,
				0x39,
				0x0B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CATID_WICFormatConverters
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE8, 0xEA, 0x35, 0x78,
				0x14, 0xBF,
				0xD1, 0x49,
				0x93,
				0xCE,
				0x53,
				0x3A,
				0x40,
				0x7B,
				0x22,
				0x48
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CATID_WICMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xD8, 0x94, 0xAF, 0x05,
				0x74, 0x71,
				0xD2, 0x4C,
				0xBE,
				0x4A,
				0x41,
				0x24,
				0xB8,
				0x0E,
				0xE4,
				0xB8
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CATID_WICMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA4, 0xB9, 0xE3, 0xAB,
				0x7D, 0x25,
				0x97, 0x4B,
				0xBD,
				0x1A,
				0x29,
				0x4A,
				0xF4,
				0x96,
				0x22,
				0x2E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICDefaultFormatConverter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDC, 0x11, 0x3F, 0x1A,
				0x14, 0xB5,
				0x17, 0x4B,
				0x8C,
				0x5F,
				0x21,
				0x54,
				0x51,
				0x38,
				0x52,
				0xF1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICFormatConverterHighColor
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x54, 0xD4, 0x75, 0xAC,
				0x37, 0x9F,
				0xF8, 0x48,
				0xB9,
				0x72,
				0x4E,
				0x19,
				0xBC,
				0x85,
				0x60,
				0x11
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICFormatConverterNChannel
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB2, 0xAB, 0x7C, 0xC1,
				0xA3, 0xD4,
				0xD7, 0x47,
				0xA5,
				0x57,
				0x33,
				0x9B,
				0x2E,
				0xFB,
				0xD4,
				0xF1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICFormatConverterWMPhoto
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x2B, 0x17, 0xB5, 0x9C,
				0x00, 0xD6,
				0xBA, 0x46,
				0xAB,
				0x77,
				0x77,
				0xBB,
				0x7E,
				0x3A,
				0x00,
				0xD9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPlanarFormatConverter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB8, 0x32, 0x41, 0x18,
				0xF8, 0x32,
				0x84, 0x47,
				0x91,
				0x31,
				0xDD,
				0x72,
				0x24,
				0xB2,
				0x34,
				0x38
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public const uint WIC_JPEG_MAX_COMPONENT_COUNT = 4;
	public const uint WIC_JPEG_MAX_TABLE_INDEX = 3;
	public const uint WIC_JPEG_SAMPLE_FACTORS_ONE = 17;
	public const uint WIC_JPEG_SAMPLE_FACTORS_THREE_420 = 1118498;
	public const uint WIC_JPEG_SAMPLE_FACTORS_THREE_422 = 1118497;
	public const uint WIC_JPEG_SAMPLE_FACTORS_THREE_440 = 1118482;
	public const uint WIC_JPEG_SAMPLE_FACTORS_THREE_444 = 1118481;
	public const uint WIC_JPEG_QUANTIZATION_BASELINE_ONE = 0;
	public const uint WIC_JPEG_QUANTIZATION_BASELINE_THREE = 65792;
	public const uint WIC_JPEG_HUFFMAN_BASELINE_ONE = 0;
	public const uint WIC_JPEG_HUFFMAN_BASELINE_THREE = 1118464;
	public static ref readonly Guid GUID_WICPixelFormatDontCare
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x00
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat1bppIndexed
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x01
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat2bppIndexed
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x02
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat4bppIndexed
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x03
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat8bppIndexed
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x04
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormatBlackWhite
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x05
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat2bppGray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x06
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat4bppGray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x07
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat8bppGray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x08
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat8bppAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x16, 0x01, 0xCD, 0xE6,
				0xBA, 0xEE,
				0x61, 0x41,
				0xAA,
				0x85,
				0x27,
				0xDD,
				0x9F,
				0xB3,
				0xA8,
				0x95
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppBGR555
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x09
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppBGR565
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x0A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppBGRA5551
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x2B, 0x7C, 0xEC, 0x05,
				0xE6, 0xF1,
				0x61, 0x49,
				0xAD,
				0x46,
				0xE1,
				0xCC,
				0x81,
				0x0A,
				0x87,
				0xD2
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppGray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x0B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat24bppBGR
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x0C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat24bppRGB
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x0D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppBGR
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x0E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppBGRA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x0F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppPBGRA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x10
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppGrayFloat
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x11
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppRGB
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x95, 0x6B, 0x8C, 0xD9,
				0xFE, 0x3E,
				0xD6, 0x47,
				0xBB,
				0x25,
				0xEB,
				0x17,
				0x48,
				0xAB,
				0x0C,
				0xF1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppRGBA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x2D, 0xAD, 0xC7, 0xF5,
				0x8D, 0x6A,
				0xDD, 0x43,
				0xA7,
				0xA8,
				0xA2,
				0x99,
				0x35,
				0x26,
				0x1A,
				0xE9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppPRGBA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x50, 0xA6, 0xC4, 0x3C,
				0x27, 0xA5,
				0x37, 0x4D,
				0xA9,
				0x16,
				0x31,
				0x42,
				0xC7,
				0xEB,
				0xED,
				0xBA
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat48bppRGB
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x15
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat48bppBGR
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x84, 0xA3, 0x05, 0xE6,
				0x68, 0xB4,
				0xCE, 0x46,
				0xBB,
				0x2E,
				0x36,
				0xF1,
				0x80,
				0xE6,
				0x43,
				0x13
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppRGB
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x11, 0x21, 0x18, 0xA1,
				0x6D, 0x18,
				0x42, 0x4D,
				0xBC,
				0x6A,
				0x9C,
				0x83,
				0x03,
				0xA8,
				0xDF,
				0xF9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppRGBA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x16
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppBGRA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7C, 0xFF, 0x62, 0x15,
				0x52, 0xD3,
				0xF9, 0x46,
				0x97,
				0x9E,
				0x42,
				0x97,
				0x6B,
				0x79,
				0x22,
				0x46
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppPRGBA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x17
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppPBGRA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8E, 0x8E, 0x51, 0x8C,
				0xEC, 0xA4,
				0x8B, 0x46,
				0xAE,
				0x70,
				0xC9,
				0xA3,
				0x5A,
				0x9C,
				0x55,
				0x30
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppGrayFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x13
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppBGR101010
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x14
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat48bppRGBFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x12
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat48bppBGRFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0E, 0x14, 0xCA, 0x49,
				0xB6, 0xCA,
				0x3B, 0x49,
				0x9D,
				0xDF,
				0x60,
				0x18,
				0x7C,
				0x37,
				0x53,
				0x2A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat96bppRGBFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x18
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat96bppRGBFloat
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8F, 0xD7, 0xFE, 0xE3,
				0xDB, 0xE8,
				0xCF, 0x4A,
				0x84,
				0xC1,
				0xE9,
				0x7F,
				0x61,
				0x36,
				0xB3,
				0x27
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat128bppRGBAFloat
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x19
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat128bppPRGBAFloat
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x1A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat128bppRGBFloat
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x1B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppCMYK
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x1C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppRGBAFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x1D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppBGRAFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3C, 0xE3, 0x6D, 0x35,
				0xD2, 0x54,
				0x23, 0x4A,
				0xBB,
				0x04,
				0x9B,
				0x7B,
				0xF9,
				0xB1,
				0xD4,
				0x2D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppRGBFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x40
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat128bppRGBAFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x1E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat128bppRGBFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x41
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppRGBAHalf
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x3A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppPRGBAHalf
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC2, 0x26, 0xAD, 0x58,
				0x23, 0xC6,
				0x9D, 0x4D,
				0xB3,
				0x20,
				0x38,
				0x7E,
				0x49,
				0xF8,
				0xC4,
				0x42
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppRGBHalf
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x42
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat48bppRGBHalf
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x3B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppRGBE
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x3D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppGrayHalf
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x3E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppGrayFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x3F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppRGBA1010102
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x72, 0x8D, 0x23, 0x25,
				0xF9, 0xFC,
				0x22, 0x45,
				0xB5,
				0x14,
				0x55,
				0x78,
				0xE5,
				0xAD,
				0x55,
				0xE0
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppRGBA1010102XR
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x9A, 0x6B, 0xDE, 0x00,
				0x01, 0xC1,
				0x4B, 0x43,
				0xB5,
				0x02,
				0xD0,
				0x16,
				0x5E,
				0xE1,
				0x12,
				0x2C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppR10G10B10A2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB5, 0x1B, 0x4E, 0x60,
				0x3C, 0x8A,
				0x65, 0x4B,
				0xB1,
				0x1C,
				0xBC,
				0x0B,
				0x8D,
				0xD7,
				0x5B,
				0x7F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppR10G10B10A2HDR10
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5D, 0x5C, 0x21, 0x9C,
				0xCC, 0x1A,
				0x0E, 0x4F,
				0xA4,
				0xBC,
				0x70,
				0xFB,
				0x3A,
				0xE8,
				0xFD,
				0x28
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppCMYK
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x1F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat24bpp3Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x20
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bpp4Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x21
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat40bpp5Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x22
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat48bpp6Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x23
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat56bpp7Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x24
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bpp8Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x25
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat48bpp3Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x26
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bpp4Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x27
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat80bpp5Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x28
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat96bpp6Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x29
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat112bpp7Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x2A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat128bpp8Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x2B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat40bppCMYKAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x2C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat80bppCMYKAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x2D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bpp3ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x2E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat40bpp4ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x2F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat48bpp5ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x30
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat56bpp6ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x31
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bpp7ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x32
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat72bpp8ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x33
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bpp3ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x34
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat80bpp4ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x35
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat96bpp5ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x36
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat112bpp6ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x37
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat128bpp7ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x38
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat144bpp8ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x39
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat8bppY
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x54, 0xDB, 0xB4, 0x91,
				0xF9, 0x2D,
				0xF0, 0x42,
				0xB4,
				0x49,
				0x29,
				0x09,
				0xBB,
				0x3D,
				0xF8,
				0x8E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat8bppCb
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xF2, 0x39, 0x13,
				0xFE, 0x6B,
				0x3E, 0x4C,
				0x93,
				0x02,
				0xE4,
				0xF3,
				0xA6,
				0xD0,
				0xCA,
				0x2A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat8bppCr
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x53, 0x50, 0x14, 0xB8,
				0x16, 0x21,
				0xF0, 0x49,
				0x88,
				0x35,
				0xED,
				0x84,
				0x4B,
				0x20,
				0x5C,
				0x51
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppCbCr
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x6E, 0xBA, 0x95, 0xFF,
				0xE0, 0x11,
				0x63, 0x42,
				0xBB,
				0x45,
				0x01,
				0x72,
				0x1F,
				0x34,
				0x60,
				0xA4
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppYQuantizedDctCoefficients
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x33, 0xF4, 0x55, 0xA3,
				0xE8, 0x48,
				0x42, 0x4A,
				0x84,
				0xD8,
				0xE2,
				0xAA,
				0x26,
				0xCA,
				0x80,
				0xA4
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppCbQuantizedDctCoefficients
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x61, 0xFF, 0xC4, 0xD2,
				0xA5, 0x56,
				0xC2, 0x49,
				0x8B,
				0x5C,
				0x4C,
				0x19,
				0x25,
				0x96,
				0x48,
				0x37
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppCrQuantizedDctCoefficients
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF0, 0x54, 0xE3, 0x2F,
				0x80, 0x16,
				0xD8, 0x42,
				0x92,
				0x31,
				0xE7,
				0x3C,
				0x05,
				0x65,
				0xBF,
				0xC1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public const uint FACILITY_WINCODEC_ERR = 2200;
	public const uint WINCODEC_ERR_BASE = 8192;
	public const int WINCODEC_ERR_GENERIC_ERROR = -2147467259;
	public const int WINCODEC_ERR_INVALIDPARAMETER = -2147024809;
	public const int WINCODEC_ERR_OUTOFMEMORY = -2147024882;
	public const int WINCODEC_ERR_NOTIMPLEMENTED = -2147467263;
	public const int WINCODEC_ERR_ABORTED = -2147467260;
	public const int WINCODEC_ERR_ACCESSDENIED = -2147024891;
	public const uint WICRawChangeNotification_ExposureCompensation = 1;
	public const uint WICRawChangeNotification_NamedWhitePoint = 2;
	public const uint WICRawChangeNotification_KelvinWhitePoint = 4;
	public const uint WICRawChangeNotification_RGBWhitePoint = 8;
	public const uint WICRawChangeNotification_Contrast = 16;
	public const uint WICRawChangeNotification_Gamma = 32;
	public const uint WICRawChangeNotification_Sharpness = 64;
	public const uint WICRawChangeNotification_Saturation = 128;
	public const uint WICRawChangeNotification_Tint = 256;
	public const uint WICRawChangeNotification_NoiseReduction = 512;
	public const uint WICRawChangeNotification_DestinationColorContext = 1024;
	public const uint WICRawChangeNotification_ToneCurve = 2048;
	public const uint WICRawChangeNotification_Rotation = 4096;
	public const uint WICRawChangeNotification_RenderMode = 8192;
	public static ref readonly Guid GUID_MetadataFormatUnknown
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x2F, 0x59, 0x5E, 0xA4,
				0x78, 0x90,
				0x7C, 0x4A,
				0xAD,
				0xB5,
				0x4E,
				0xDC,
				0x4F,
				0xD6,
				0x1B,
				0x1F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatIfd
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC6, 0x96, 0x73, 0x53,
				0x8A, 0x2D,
				0xB6, 0x4B,
				0x9B,
				0xF8,
				0x2F,
				0x0A,
				0x8E,
				0x2A,
				0x3A,
				0xDF
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatSubIfd
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x28, 0xE1, 0xA2, 0x58,
				0xB9, 0x2D,
				0x57, 0x4E,
				0xBB,
				0x14,
				0x51,
				0x77,
				0x89,
				0x1E,
				0xD3,
				0x31
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatExif
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x9D, 0x4F, 0x3C, 0x1C,
				0x4A, 0xB8,
				0x7D, 0x46,
				0x94,
				0x93,
				0x36,
				0xCF,
				0xBD,
				0x59,
				0xEA,
				0x57
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatGps
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8A, 0xAB, 0x34, 0x71,
				0x51, 0x93,
				0xAD, 0x44,
				0xAF,
				0x62,
				0x44,
				0x8D,
				0xB6,
				0xB5,
				0x02,
				0xEC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatInterop
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8E, 0x6F, 0x68, 0xED,
				0x1F, 0x68,
				0x8B, 0x4C,
				0xBD,
				0x41,
				0xA8,
				0xAD,
				0xDB,
				0xF6,
				0xB3,
				0xFC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatApp0
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x28, 0x70, 0x00, 0x79,
				0x8D, 0x26,
				0xD6, 0x45,
				0xA3,
				0xC2,
				0x35,
				0x4E,
				0x6A,
				0x50,
				0x4B,
				0xC9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatApp1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC3, 0xDF, 0xD3, 0x8F,
				0x51, 0xF9,
				0x2B, 0x49,
				0x81,
				0x7F,
				0x69,
				0xC2,
				0xE6,
				0xD9,
				0xA5,
				0xB0
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatApp13
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA2, 0x56, 0x65, 0x32,
				0x02, 0xF5,
				0x54, 0x43,
				0x9C,
				0xC0,
				0x8E,
				0x3F,
				0x48,
				0xEA,
				0xF6,
				0xB5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatIPTC
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x14, 0x09, 0xAB, 0x4F,
				0x29, 0xE1,
				0x87, 0x40,
				0xA1,
				0xD1,
				0xBC,
				0x81,
				0x2D,
				0x45,
				0xA7,
				0xB5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatIRB
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x66, 0x0D, 0x10, 0x16,
				0x70, 0x85,
				0xB9, 0x4B,
				0xB9,
				0x2D,
				0xFD,
				0xA4,
				0xB2,
				0x3E,
				0xCE,
				0x67
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormat8BIMIPTC
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8C, 0x56, 0x10, 0x00,
				0x52, 0x08,
				0x6A, 0x4E,
				0xB1,
				0x91,
				0x5C,
				0x33,
				0xAC,
				0x5B,
				0x04,
				0x30
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormat8BIMResolutionInfo
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5D, 0x30, 0x9F, 0x73,
				0xDB, 0x81,
				0xCB, 0x43,
				0xAC,
				0x5E,
				0x55,
				0x01,
				0x3E,
				0xF9,
				0xF0,
				0x03
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormat8BIMIPTCDigest
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x85, 0x22, 0xA3, 0x1C,
				0xCD, 0x9C,
				0x86, 0x47,
				0x8B,
				0xD8,
				0x79,
				0x53,
				0x9D,
				0xB6,
				0xA0,
				0x06
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatXMP
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x38, 0xCC, 0x5A, 0xBB,
				0x16, 0xF2,
				0xEC, 0x4C,
				0xA6,
				0xC5,
				0x5F,
				0x6E,
				0x73,
				0x97,
				0x63,
				0xA9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatThumbnail
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE9, 0xCE, 0x3D, 0x24,
				0x03, 0x87,
				0xEE, 0x40,
				0x8E,
				0xF0,
				0x22,
				0xA6,
				0x00,
				0xB8,
				0x05,
				0x8C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunktEXt
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x36, 0x89, 0x8D, 0x56,
				0xA9, 0xC0,
				0x23, 0x49,
				0x90,
				0x5D,
				0xDF,
				0x2B,
				0x38,
				0x23,
				0x8F,
				0xBC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatXMPStruct
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF1, 0x3C, 0x38, 0x22,
				0x17, 0xED,
				0x2E, 0x4E,
				0xAF,
				0x17,
				0xD8,
				0x5B,
				0x8F,
				0x6B,
				0x30,
				0xD0
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatXMPBag
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5F, 0xCA, 0x3C, 0x83,
				0xB7, 0xDC,
				0x16, 0x45,
				0x80,
				0x6F,
				0x65,
				0x96,
				0xAB,
				0x26,
				0xDC,
				0xE4
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatXMPSeq
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x02, 0xDF, 0xE8, 0x63,
				0x6C, 0xEB,
				0x6C, 0x45,
				0xA2,
				0x24,
				0xB2,
				0x5E,
				0x79,
				0x4F,
				0xD6,
				0x48
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatXMPAlt
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x75, 0xA6, 0x08, 0x7B,
				0xAA, 0x91,
				0x1B, 0x48,
				0xA7,
				0x98,
				0x4D,
				0xA9,
				0x49,
				0x08,
				0x61,
				0x3B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatLSD
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1E, 0x03, 0x56, 0xE2,
				0x99, 0x62,
				0x29, 0x49,
				0xB9,
				0x8D,
				0x5A,
				0xC8,
				0x84,
				0xAF,
				0xBA,
				0x92
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatIMD
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x86, 0xB0, 0x2B, 0xBD,
				0x52, 0x4D,
				0xDD, 0x48,
				0x96,
				0x77,
				0xDB,
				0x48,
				0x3E,
				0x85,
				0xAE,
				0x8F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatGCE
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xD8, 0xCA, 0x25, 0x2A,
				0xEB, 0xDE,
				0x69, 0x4C,
				0xA7,
				0x88,
				0x0E,
				0xC2,
				0x26,
				0x6D,
				0xCA,
				0xFD
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatAPE
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC2, 0x3D, 0x04, 0x2E,
				0x67, 0xC9,
				0x05, 0x4E,
				0x87,
				0x5E,
				0x61,
				0x8B,
				0xF6,
				0x7E,
				0x85,
				0xC3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatJpegChrominance
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCF, 0x0D, 0x3D, 0xF7,
				0xC6, 0xCE,
				0x85, 0x4F,
				0x9B,
				0x0E,
				0x1C,
				0x39,
				0x56,
				0xB1,
				0xBE,
				0xF7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatJpegLuminance
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x07, 0x80, 0x90, 0x86,
				0xFC, 0xED,
				0x60, 0x48,
				0x8D,
				0x4B,
				0x4E,
				0xE6,
				0xE8,
				0x3E,
				0x60,
				0x58
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatJpegComment
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x33, 0x5F, 0x0E, 0x22,
				0xD3, 0xAF,
				0x4E, 0x47,
				0x9D,
				0x31,
				0x7D,
				0x4F,
				0xE7,
				0x30,
				0xF5,
				0x57
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatGifComment
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE0, 0xE0, 0xB6, 0xC4,
				0xB4, 0xCF,
				0xD3, 0x4A,
				0xAB,
				0x33,
				0x9A,
				0xAD,
				0x23,
				0x55,
				0xA3,
				0x4A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunkgAMA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA5, 0x35, 0x09, 0xF0,
				0x5D, 0x1D,
				0xD1, 0x4C,
				0x81,
				0xB2,
				0x93,
				0x24,
				0xD7,
				0xEC,
				0xA7,
				0x81
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunkbKGD
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x71, 0x35, 0x4D, 0xE1,
				0x47, 0x6B,
				0xEA, 0x4D,
				0xB6,
				0x0A,
				0x87,
				0xCE,
				0x0A,
				0x78,
				0xDF,
				0xB7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunkiTXt
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x29, 0xC7, 0xBE, 0xC2,
				0x68, 0x0B,
				0x77, 0x4B,
				0xAA,
				0x0E,
				0x62,
				0x95,
				0xA6,
				0xAC,
				0x18,
				0x14
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunkcHRM
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5B, 0x65, 0xB3, 0x9D,
				0x42, 0x28,
				0xB3, 0x44,
				0x80,
				0x67,
				0x12,
				0xE9,
				0xB3,
				0x75,
				0x55,
				0x6A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunkhIST
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDA, 0x82, 0x9A, 0xC5,
				0x74, 0xDB,
				0xA4, 0x48,
				0xBD,
				0x6A,
				0xB6,
				0x9C,
				0x49,
				0x31,
				0xEF,
				0x95
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunkiCCP
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xAB, 0x49, 0x43, 0xEB,
				0x85, 0xB6,
				0x0F, 0x45,
				0x91,
				0xB5,
				0xE8,
				0x02,
				0xE8,
				0x92,
				0x53,
				0x6C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunksRGB
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x36, 0xFD, 0x15, 0xC1,
				0x6F, 0xCC,
				0x3F, 0x4E,
				0x83,
				0x63,
				0x52,
				0x4B,
				0x87,
				0xC6,
				0xB0,
				0xD9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunktIME
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x2D, 0xAE, 0x00, 0x6B,
				0x4B, 0xE2,
				0x0A, 0x46,
				0x98,
				0xB6,
				0x87,
				0x8B,
				0xD0,
				0x30,
				0x72,
				0xFD
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatDds
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x03, 0x46, 0x06, 0x4A,
				0x33, 0x8C,
				0x60, 0x4E,
				0x9C,
				0x29,
				0x13,
				0x62,
				0x31,
				0x70,
				0x2D,
				0x08
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatHeif
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE1, 0xF3, 0x7E, 0x81,
				0x88, 0x12,
				0xF4, 0x45,
				0xA8,
				0x52,
				0x26,
				0x0D,
				0x9E,
				0x7C,
				0xCE,
				0x83
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatHeifHDR
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8A, 0x8D, 0x8B, 0x56,
				0x65, 0x1E,
				0x8C, 0x43,
				0x89,
				0x68,
				0xD6,
				0x0E,
				0x10,
				0x12,
				0xBE,
				0xB9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatWebpANIM
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA6, 0xFD, 0xC4, 0x6D,
				0xE6, 0x78,
				0x02, 0x41,
				0xAE,
				0x35,
				0xBC,
				0xFA,
				0x1E,
				0xDC,
				0xC7,
				0x8B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatWebpANMF
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xEE, 0x05, 0xC1, 0x43,
				0x3B, 0xB9,
				0xBB, 0x4A,
				0xB0,
				0x03,
				0xA0,
				0x8C,
				0x0D,
				0x87,
				0x04,
				0x71
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICUnknownMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC2, 0x45, 0x97, 0x69,
				0x66, 0x50,
				0x82, 0x4B,
				0xA8,
				0xE3,
				0xD4,
				0x04,
				0x78,
				0xDB,
				0xEC,
				0x8C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICUnknownMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x86, 0xCA, 0x9C, 0xA0,
				0xBA, 0x27,
				0x39, 0x4F,
				0x90,
				0x53,
				0x12,
				0x1F,
				0xA4,
				0xDC,
				0x08,
				0xFC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICApp0MetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA2, 0x33, 0xC6, 0xF3,
				0xC8, 0x46,
				0x8E, 0x49,
				0x8F,
				0xBB,
				0xCC,
				0x6F,
				0x72,
				0x1B,
				0xBC,
				0xDE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICApp0MetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x33, 0x4B, 0x32, 0x43,
				0x8F, 0xA7,
				0x0F, 0x48,
				0x91,
				0x11,
				0x96,
				0x38,
				0xAA,
				0xCC,
				0xC8,
				0x32
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICApp1MetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x69, 0x60, 0x36, 0xEE,
				0x32, 0x18,
				0x0F, 0x42,
				0xB3,
				0x81,
				0x04,
				0x79,
				0xAD,
				0x06,
				0x6F,
				0x19
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICApp1MetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x13, 0x35, 0xE3, 0xDD,
				0x4E, 0x77,
				0xCD, 0x4B,
				0xAE,
				0x79,
				0x02,
				0xF4,
				0xAD,
				0xFE,
				0x62,
				0xFC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICApp13MetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x19, 0xA9, 0x19, 0x7B,
				0xD6, 0xA9,
				0xE5, 0x49,
				0xBD,
				0x45,
				0x02,
				0xC3,
				0x4E,
				0x4E,
				0x4C,
				0xD5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICApp13MetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x50, 0x3C, 0x7E, 0xAA,
				0x4C, 0x86,
				0x04, 0x46,
				0xBC,
				0x04,
				0x8B,
				0x0B,
				0x76,
				0xE6,
				0x37,
				0xF6
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIfdMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x56, 0x46, 0x91, 0x8F,
				0x0A, 0x9D,
				0xB2, 0x4E,
				0x90,
				0x19,
				0x0B,
				0xF9,
				0x6D,
				0x8A,
				0x9E,
				0xE6
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIfdMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x28, 0xFC, 0xEB, 0xB1,
				0xBD, 0xC9,
				0xA2, 0x47,
				0x8D,
				0x33,
				0xB9,
				0x48,
				0x76,
				0x97,
				0x77,
				0xA7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICSubIfdMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x09, 0x2F, 0xD4, 0x50,
				0xD1, 0xEC,
				0x41, 0x4B,
				0xB6,
				0x5D,
				0xDA,
				0x1F,
				0xDA,
				0xA7,
				0x56,
				0x63
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICSubIfdMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x86, 0x53, 0xDE, 0x8A,
				0x9B, 0x8E,
				0x4C, 0x4F,
				0xAC,
				0xF2,
				0xF0,
				0x00,
				0x87,
				0x06,
				0xB2,
				0x38
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICExifMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x60, 0x38, 0x40, 0xD9,
				0x7F, 0x29,
				0x49, 0x4A,
				0xBF,
				0x9B,
				0x77,
				0x89,
				0x81,
				0x50,
				0xA4,
				0x42
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICExifMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDA, 0x4C, 0xA1, 0xC9,
				0x39, 0xC3,
				0x0B, 0x46,
				0x90,
				0x78,
				0xD4,
				0xDE,
				0xBC,
				0xFA,
				0xBE,
				0x91
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICGpsMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0B, 0x79, 0x97, 0x36,
				0x3B, 0x22,
				0x4E, 0x48,
				0x99,
				0x25,
				0xC4,
				0x86,
				0x92,
				0x18,
				0xF1,
				0x7A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICGpsMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE4, 0x13, 0x8C, 0xCB,
				0xB5, 0x62,
				0x96, 0x4C,
				0xA4,
				0x8B,
				0x6B,
				0xA6,
				0xAC,
				0xE3,
				0x9C,
				0x76
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICInteropMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x98, 0xB8, 0xC8, 0xB5,
				0x74, 0x00,
				0x9F, 0x45,
				0xB7,
				0x00,
				0x86,
				0x0D,
				0x46,
				0x51,
				0xEA,
				0x14
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICInteropMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x45, 0xC6, 0x2E, 0x12,
				0x7E, 0xCD,
				0xD8, 0x44,
				0xB1,
				0x86,
				0x2C,
				0x8C,
				0x20,
				0xC3,
				0xB5,
				0x0F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICThumbnailMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x59, 0x29, 0x01, 0xFB,
				0xF6, 0xF4,
				0xD7, 0x44,
				0x9D,
				0x09,
				0xDA,
				0xA0,
				0x87,
				0xA9,
				0xDB,
				0x57
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICThumbnailMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0C, 0xB2, 0x49, 0xD0,
				0xD0, 0x5D,
				0xFE, 0x44,
				0xB0,
				0xB3,
				0x8F,
				0x92,
				0xC8,
				0xE6,
				0xD0,
				0x80
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIPTCMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x59, 0x29, 0x01, 0x03,
				0xF6, 0xF4,
				0xD7, 0x44,
				0x9D,
				0x09,
				0xDA,
				0xA0,
				0x87,
				0xA9,
				0xDB,
				0x57
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIPTCMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0C, 0xB2, 0x49, 0x12,
				0xD0, 0x5D,
				0xFE, 0x44,
				0xB0,
				0xB3,
				0x8F,
				0x92,
				0xC8,
				0xE6,
				0xD0,
				0x80
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIRBMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xD7, 0xD3, 0xDC, 0xD4,
				0xC2, 0xB4,
				0xD9, 0x47,
				0xA6,
				0xBF,
				0xB8,
				0x9B,
				0xA3,
				0x96,
				0xA4,
				0xA3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIRBMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x35, 0x19, 0x5C, 0x5C,
				0x35, 0x02,
				0x34, 0x44,
				0x80,
				0xBC,
				0x25,
				0x1B,
				0xC1,
				0xEC,
				0x39,
				0xC6
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WIC8BIMIPTCMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8C, 0x66, 0x10, 0x00,
				0x01, 0x08,
				0xA6, 0x4D,
				0xA4,
				0xA4,
				0x82,
				0x65,
				0x22,
				0xB6,
				0xD2,
				0x8F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WIC8BIMIPTCMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x26, 0x82, 0x10, 0x00,
				0x41, 0xEE,
				0xA2, 0x44,
				0x9E,
				0x9C,
				0x4B,
				0xE4,
				0xD5,
				0xB1,
				0xD2,
				0xCD
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WIC8BIMResolutionInfoMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7A, 0x13, 0x05, 0x58,
				0x48, 0xE3,
				0x7C, 0x4F,
				0xB3,
				0xCC,
				0x6D,
				0xB9,
				0x96,
				0x5A,
				0x05,
				0x99
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WIC8BIMResolutionInfoMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0E, 0xFE, 0xF2, 0x4F,
				0x4A, 0xE7,
				0x71, 0x4B,
				0x98,
				0xC4,
				0xAB,
				0x7D,
				0xC1,
				0x67,
				0x07,
				0xBA
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WIC8BIMIPTCDigestMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1E, 0x5F, 0x80, 0x02,
				0xAA, 0xD5,
				0x5B, 0x41,
				0x82,
				0xC5,
				0x61,
				0xC0,
				0x33,
				0xA9,
				0x88,
				0xA6
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WIC8BIMIPTCDigestMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x2B, 0xE6, 0xB5, 0x2D,
				0x67, 0x0D,
				0x5F, 0x49,
				0x8F,
				0x9D,
				0xC2,
				0xF0,
				0x18,
				0x86,
				0x47,
				0xAC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngTextMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCC, 0xAF, 0x59, 0x4B,
				0xC3, 0xB8,
				0x8A, 0x40,
				0xB6,
				0x70,
				0x89,
				0xE5,
				0xFA,
				0xB6,
				0xFD,
				0xA7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngTextMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB9, 0xAF, 0xEB, 0xB5,
				0x3E, 0x25,
				0x72, 0x4A,
				0xA7,
				0x44,
				0x07,
				0x62,
				0xD2,
				0x68,
				0x56,
				0x83
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDF, 0x24, 0xB6, 0x72,
				0x11, 0xAE,
				0x48, 0x49,
				0xA6,
				0x5C,
				0x35,
				0x1E,
				0xB0,
				0x82,
				0x94,
				0x19
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x4E, 0xE1, 0x65, 0x17,
				0xD4, 0x1B,
				0x2E, 0x46,
				0xB6,
				0xB1,
				0x59,
				0x0B,
				0xF1,
				0x26,
				0x2A,
				0xC6
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPStructMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x9A, 0x0D, 0xB9, 0x01,
				0x09, 0x82,
				0xF7, 0x47,
				0x9C,
				0x52,
				0xE1,
				0x24,
				0x4B,
				0xF5,
				0x0C,
				0xED
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPStructMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x93, 0x1F, 0xC2, 0x22,
				0xDB, 0x7D,
				0x1C, 0x41,
				0x9B,
				0x17,
				0xC5,
				0xB7,
				0xBD,
				0x06,
				0x4A,
				0xBC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPBagMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x30, 0x9A, 0xE7, 0xE7,
				0x2C, 0x4F,
				0xAB, 0x4F,
				0x8D,
				0x00,
				0x39,
				0x4F,
				0x2D,
				0x6B,
				0xBE,
				0xBE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPBagMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8C, 0x2C, 0x82, 0xED,
				0xBE, 0xD6,
				0x01, 0x43,
				0xA6,
				0x31,
				0x0E,
				0x14,
				0x16,
				0xBA,
				0xD2,
				0x8F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPSeqMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x53, 0xE7, 0x12, 0x7F,
				0x71, 0xFC,
				0xD7, 0x43,
				0xA5,
				0x1D,
				0x92,
				0xF3,
				0x59,
				0x77,
				0xAB,
				0xB5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPSeqMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDE, 0xD1, 0x68, 0x6D,
				0x32, 0xD4,
				0x0F, 0x4B,
				0x92,
				0x3A,
				0x09,
				0x11,
				0x83,
				0xA9,
				0xBD,
				0xA7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPAltMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC2, 0xDC, 0x94, 0xAA,
				0xB0, 0xB8,
				0x98, 0x48,
				0xB8,
				0x35,
				0x00,
				0x0A,
				0xAB,
				0xD7,
				0x43,
				0x93
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPAltMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x6C, 0x2A, 0x6C, 0x07,
				0x8F, 0xF7,
				0x46, 0x4C,
				0xA7,
				0x23,
				0x35,
				0x83,
				0xE7,
				0x08,
				0x76,
				0xEA
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICLSDMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x93, 0x07, 0x07, 0x41,
				0xE4, 0x59,
				0x9A, 0x47,
				0xA1,
				0xF7,
				0x95,
				0x4A,
				0xDC,
				0x2E,
				0xF5,
				0xFC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICLSDMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE7, 0x37, 0xC0, 0x73,
				0xD9, 0xE5,
				0x54, 0x49,
				0x87,
				0x6A,
				0x6D,
				0xA8,
				0x1D,
				0x6E,
				0x57,
				0x68
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICGCEMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5D, 0x34, 0x2E, 0xB9,
				0x2D, 0xF5,
				0xF3, 0x41,
				0xB5,
				0x62,
				0x08,
				0x1B,
				0xC7,
				0x72,
				0xE3,
				0xB9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICGCEMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x76, 0xDC, 0x95, 0xAF,
				0xB2, 0x16,
				0xF4, 0x47,
				0xB3,
				0xEA,
				0x3C,
				0x31,
				0x79,
				0x66,
				0x93,
				0xE7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIMDMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x67, 0xA2, 0x47, 0x74,
				0x15, 0x00,
				0xC8, 0x42,
				0xA8,
				0xF1,
				0xFB,
				0x3B,
				0x94,
				0xC6,
				0x83,
				0x61
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIMDMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1F, 0x07, 0x89, 0x8C,
				0x2E, 0x45,
				0x95, 0x4E,
				0x96,
				0x82,
				0x9D,
				0x10,
				0x24,
				0x62,
				0x71,
				0x72
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICAPEMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3A, 0xB9, 0x67, 0x17,
				0x21, 0xB0,
				0xEA, 0x44,
				0x92,
				0x0F,
				0x86,
				0x3C,
				0x11,
				0xF4,
				0xF7,
				0x68
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICAPEMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCA, 0xDF, 0x6E, 0xBD,
				0x90, 0x28,
				0x2F, 0x48,
				0xB2,
				0x33,
				0x8D,
				0x73,
				0x39,
				0xA1,
				0xCF,
				0x8D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegChrominanceMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x4B, 0x90, 0xB1, 0x50,
				0x8F, 0xF2,
				0x74, 0x45,
				0x93,
				0xF4,
				0x0B,
				0xAD,
				0xE8,
				0x2C,
				0x69,
				0xE9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegChrominanceMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF0, 0x66, 0xF5, 0x3F,
				0x6B, 0x6E,
				0xD4, 0x49,
				0x96,
				0xE6,
				0xB7,
				0x88,
				0x86,
				0x69,
				0x2C,
				0x62
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegLuminanceMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x88, 0x2F, 0x6F, 0x35,
				0xA6, 0x05,
				0x28, 0x47,
				0xB9,
				0xA4,
				0x1B,
				0xFB,
				0xCE,
				0x04,
				0xD8,
				0x38
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegLuminanceMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xBC, 0x3A, 0x58, 0x1D,
				0x0E, 0x8A,
				0x57, 0x46,
				0x99,
				0x82,
				0xA3,
				0x80,
				0xCA,
				0x58,
				0xFB,
				0x4B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegCommentMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7C, 0x34, 0x66, 0x9F,
				0xC4, 0x60,
				0x4D, 0x4C,
				0xAB,
				0x58,
				0xD2,
				0x35,
				0x86,
				0x85,
				0xF6,
				0x07
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegCommentMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x6F, 0x23, 0x73, 0xE5,
				0xB1, 0x55,
				0xDA, 0x4E,
				0x81,
				0xEA,
				0x9F,
				0x65,
				0xDB,
				0x02,
				0x90,
				0xD3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICGifCommentMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3B, 0x7D, 0x55, 0x32,
				0xDC, 0x69,
				0x95, 0x4F,
				0x83,
				0x6E,
				0xF5,
				0x97,
				0x2B,
				0x2F,
				0x61,
				0x59
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICGifCommentMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFC, 0x97, 0x27, 0xA0,
				0xAE, 0xC4,
				0x8C, 0x41,
				0xAF,
				0x95,
				0xE6,
				0x37,
				0xC7,
				0xEA,
				0xD2,
				0xA1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngGamaMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x39, 0xCA, 0x92, 0x36,
				0x82, 0xE0,
				0x50, 0x43,
				0x9E,
				0x1F,
				0x37,
				0x04,
				0xCB,
				0x08,
				0x3C,
				0xD5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngGamaMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x13, 0x6D, 0x03, 0xFF,
				0x4B, 0x5D,
				0xDD, 0x46,
				0xB1,
				0x0F,
				0x10,
				0x66,
				0x93,
				0xD9,
				0xFE,
				0x4F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngBkgdMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA6, 0xA4, 0xE7, 0x0C,
				0xE8, 0x03,
				0x60, 0x4A,
				0x9D,
				0x15,
				0x28,
				0x2E,
				0xF3,
				0x2E,
				0xE7,
				0xDA
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngBkgdMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFD, 0xF2, 0xE3, 0x68,
				0xAE, 0x31,
				0x41, 0x44,
				0xBB,
				0x6A,
				0xFD,
				0x70,
				0x47,
				0x52,
				0x5F,
				0x90
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngItxtMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFA, 0xB2, 0xBF, 0xAA,
				0x1E, 0x3E,
				0x8F, 0x4A,
				0x89,
				0x77,
				0x55,
				0x56,
				0xFB,
				0x94,
				0xEA,
				0x23
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngItxtMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x19, 0x97, 0x87, 0x31,
				0x51, 0xE7,
				0xF8, 0x4D,
				0x98,
				0x1D,
				0x68,
				0xDF,
				0xF6,
				0x77,
				0x04,
				0xED
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngChrmMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x36, 0x5F, 0x0B, 0xF9,
				0x7B, 0x36,
				0x2A, 0x40,
				0x9D,
				0xD1,
				0xBC,
				0x0F,
				0xD5,
				0x9D,
				0x8F,
				0x62
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngChrmMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xEB, 0xE3, 0x3C, 0xE2,
				0x08, 0x56,
				0x83, 0x4E,
				0xBC,
				0xEF,
				0x27,
				0xB1,
				0x98,
				0x7E,
				0x51,
				0xD7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngHistMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB7, 0x0B, 0x7A, 0x87,
				0x13, 0xA3,
				0x91, 0x44,
				0x87,
				0xB5,
				0x2E,
				0x6D,
				0x05,
				0x94,
				0xF5,
				0x20
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngHistMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x49, 0xE7, 0x03, 0x8A,
				0x2E, 0x67,
				0x6E, 0x44,
				0xBF,
				0x1F,
				0x2C,
				0x11,
				0xD2,
				0x33,
				0xB6,
				0xFF
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngIccpMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3B, 0xE6, 0xD3, 0xF5,
				0x0F, 0xCB,
				0x28, 0x46,
				0xA4,
				0x78,
				0x6D,
				0x82,
				0x44,
				0xBE,
				0x36,
				0xB1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngIccpMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5F, 0x1E, 0x67, 0x16,
				0xE6, 0x0C,
				0xC4, 0x4C,
				0x97,
				0x68,
				0xE8,
				0x9F,
				0xE5,
				0x01,
				0x8A,
				0xDE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngSrgbMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0C, 0x36, 0x40, 0xFB,
				0x7E, 0x54,
				0x56, 0x49,
				0xA3,
				0xB9,
				0xD4,
				0x41,
				0x88,
				0x59,
				0xBA,
				0x66
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngSrgbMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC6, 0x35, 0xEE, 0xA6,
				0xEC, 0x87,
				0xDF, 0x47,
				0x9F,
				0x22,
				0x1D,
				0x5A,
				0xAD,
				0x84,
				0x0C,
				0x82
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngTimeMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x02, 0xDF, 0x4E, 0xD9,
				0xE5, 0xEF,
				0x0D, 0x4F,
				0x85,
				0xC8,
				0xF5,
				0xA6,
				0x8B,
				0x30,
				0x00,
				0xB1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngTimeMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x00, 0x84, 0xB7, 0x1A,
				0xA3, 0xB5,
				0x91, 0x4D,
				0x8A,
				0xCE,
				0x33,
				0xFC,
				0xD1,
				0x49,
				0x9B,
				0xE6
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICDdsMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCA, 0x88, 0x6C, 0x27,
				0x33, 0x75,
				0x86, 0x4A,
				0xB6,
				0x76,
				0x66,
				0xB3,
				0x60,
				0x80,
				0xD4,
				0x84
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICDdsMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xBD, 0x8B, 0x68, 0xFD,
				0xED, 0x31,
				0xB7, 0x4D,
				0xA7,
				0x23,
				0x93,
				0x49,
				0x27,
				0xD3,
				0x83,
				0x67
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICHeifMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3F, 0xFC, 0xDD, 0xAC,
				0xEC, 0x85,
				0xBC, 0x41,
				0xBD,
				0xEF,
				0x1B,
				0xC2,
				0x62,
				0xE4,
				0xDB,
				0x05
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICHeifMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x79, 0x5E, 0xE4, 0x3A,
				0xBC, 0x40,
				0x01, 0x44,
				0xAC,
				0xE5,
				0xDD,
				0x3C,
				0xB1,
				0x6E,
				0x6A,
				0xFE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICHeifHDRMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3D, 0xDE, 0x38, 0x24,
				0xD9, 0x94,
				0xE8, 0x4B,
				0x84,
				0xA8,
				0x4D,
				0xE9,
				0x5A,
				0x57,
				0x5E,
				0x75
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICWebpAnimMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x11, 0x99, 0x6F, 0x07,
				0x48, 0xA3,
				0x5C, 0x46,
				0xA8,
				0x07,
				0xA2,
				0x52,
				0xF3,
				0xF2,
				0xD3,
				0xDE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICWebpAnmfMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x03, 0x0B, 0xA1, 0x85,
				0xF6, 0xC9,
				0x9F, 0x43,
				0xBE,
				0x5E,
				0xC0,
				0xFB,
				0xEF,
				0x67,
				0x80,
				0x7C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

}

#region Enums
/// <include file='../Imaging.xml' path='doc/member[@name="WICColorContextType"]/*' />
/// <unmanaged>WICColorContextType</unmanaged>
public enum WICColorContextType : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICColorContextType::WICColorContextUninitialized"]/*' />
	/// <unmanaged>WICColorContextUninitialized</unmanaged>
	Uninitialized = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICColorContextType::WICColorContextProfile"]/*' />
	/// <unmanaged>WICColorContextProfile</unmanaged>
	Profile = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICColorContextType::WICColorContextExifColorSpace"]/*' />
	/// <unmanaged>WICColorContextExifColorSpace</unmanaged>
	ExifColorSpace = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapCreateCacheOption"]/*' />
/// <unmanaged>WICBitmapCreateCacheOption</unmanaged>
public enum WICBitmapCreateCacheOption : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapCreateCacheOption::WICBitmapNoCache"]/*' />
	/// <unmanaged>WICBitmapNoCache</unmanaged>
	NoCache = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapCreateCacheOption::WICBitmapCacheOnDemand"]/*' />
	/// <unmanaged>WICBitmapCacheOnDemand</unmanaged>
	CacheOnDemand = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapCreateCacheOption::WICBitmapCacheOnLoad"]/*' />
	/// <unmanaged>WICBitmapCacheOnLoad</unmanaged>
	CacheOnLoad = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICDecodeOptions"]/*' />
/// <unmanaged>WICDecodeOptions</unmanaged>
public enum WICDecodeOptions : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDecodeOptions::WICDecodeMetadataCacheOnDemand"]/*' />
	/// <unmanaged>WICDecodeMetadataCacheOnDemand</unmanaged>
	CacheOnDemand = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDecodeOptions::WICDecodeMetadataCacheOnLoad"]/*' />
	/// <unmanaged>WICDecodeMetadataCacheOnLoad</unmanaged>
	CacheOnLoad = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapEncoderCacheOption"]/*' />
/// <unmanaged>WICBitmapEncoderCacheOption</unmanaged>
public enum WICBitmapEncoderCacheOption : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapEncoderCacheOption::WICBitmapEncoderCacheInMemory"]/*' />
	/// <unmanaged>WICBitmapEncoderCacheInMemory</unmanaged>
	CacheInMemory = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapEncoderCacheOption::WICBitmapEncoderCacheTempFile"]/*' />
	/// <unmanaged>WICBitmapEncoderCacheTempFile</unmanaged>
	CacheTempFile = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapEncoderCacheOption::WICBitmapEncoderNoCache"]/*' />
	/// <unmanaged>WICBitmapEncoderNoCache</unmanaged>
	NoCache = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentType"]/*' />
/// <unmanaged>WICComponentType</unmanaged>
public enum WICComponentType : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentType::WICDecoder"]/*' />
	/// <unmanaged>WICDecoder</unmanaged>
	Decoder = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentType::WICEncoder"]/*' />
	/// <unmanaged>WICEncoder</unmanaged>
	Encoder = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentType::WICPixelFormatConverter"]/*' />
	/// <unmanaged>WICPixelFormatConverter</unmanaged>
	PixelFormatConverter = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentType::WICMetadataReader"]/*' />
	/// <unmanaged>WICMetadataReader</unmanaged>
	MetadataReader = 8,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentType::WICMetadataWriter"]/*' />
	/// <unmanaged>WICMetadataWriter</unmanaged>
	MetadataWriter = 16,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentType::WICPixelFormat"]/*' />
	/// <unmanaged>WICPixelFormat</unmanaged>
	PixelFormat = 32,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentType::WICAllComponents"]/*' />
	/// <unmanaged>WICAllComponents</unmanaged>
	AllComponents = 63,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentEnumerateOptions"]/*' />
/// <unmanaged>WICComponentEnumerateOptions</unmanaged>
public enum WICComponentEnumerateOptions : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentEnumerateOptions::WICComponentEnumerateDefault"]/*' />
	/// <unmanaged>WICComponentEnumerateDefault</unmanaged>
	Default = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentEnumerateOptions::WICComponentEnumerateRefresh"]/*' />
	/// <unmanaged>WICComponentEnumerateRefresh</unmanaged>
	Refresh = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentEnumerateOptions::WICComponentEnumerateDisabled"]/*' />
	/// <unmanaged>WICComponentEnumerateDisabled</unmanaged>
	Disabled = -2147483648,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentEnumerateOptions::WICComponentEnumerateUnsigned"]/*' />
	/// <unmanaged>WICComponentEnumerateUnsigned</unmanaged>
	Unsigned = 1073741824,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentEnumerateOptions::WICComponentEnumerateBuiltInOnly"]/*' />
	/// <unmanaged>WICComponentEnumerateBuiltInOnly</unmanaged>
	BuiltInOnly = 536870912,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapInterpolationMode"]/*' />
/// <unmanaged>WICBitmapInterpolationMode</unmanaged>
public enum WICBitmapInterpolationMode : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapInterpolationMode::WICBitmapInterpolationModeNearestNeighbor"]/*' />
	/// <unmanaged>WICBitmapInterpolationModeNearestNeighbor</unmanaged>
	ModeNearestNeighbor = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapInterpolationMode::WICBitmapInterpolationModeLinear"]/*' />
	/// <unmanaged>WICBitmapInterpolationModeLinear</unmanaged>
	ModeLinear = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapInterpolationMode::WICBitmapInterpolationModeCubic"]/*' />
	/// <unmanaged>WICBitmapInterpolationModeCubic</unmanaged>
	ModeCubic = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapInterpolationMode::WICBitmapInterpolationModeFant"]/*' />
	/// <unmanaged>WICBitmapInterpolationModeFant</unmanaged>
	ModeFant = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapInterpolationMode::WICBitmapInterpolationModeHighQualityCubic"]/*' />
	/// <unmanaged>WICBitmapInterpolationModeHighQualityCubic</unmanaged>
	ModeHighQualityCubic = 4,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType"]/*' />
/// <unmanaged>WICBitmapPaletteType</unmanaged>
public enum WICBitmapPaletteType : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeCustom"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeCustom</unmanaged>
	Custom = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeMedianCut"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeMedianCut</unmanaged>
	MedianCut = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedBW"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedBW</unmanaged>
	FixedBW = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedHalftone8"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedHalftone8</unmanaged>
	FixedHalftone8 = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedHalftone27"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedHalftone27</unmanaged>
	FixedHalftone27 = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedHalftone64"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedHalftone64</unmanaged>
	FixedHalftone64 = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedHalftone125"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedHalftone125</unmanaged>
	FixedHalftone125 = 6,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedHalftone216"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedHalftone216</unmanaged>
	FixedHalftone216 = 7,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedWebPalette"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedWebPalette</unmanaged>
	FixedWebPalette = 7,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedHalftone252"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedHalftone252</unmanaged>
	FixedHalftone252 = 8,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedHalftone256"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedHalftone256</unmanaged>
	FixedHalftone256 = 9,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedGray4"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedGray4</unmanaged>
	FixedGray4 = 10,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedGray16"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedGray16</unmanaged>
	FixedGray16 = 11,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedGray256"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedGray256</unmanaged>
	FixedGray256 = 12,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType"]/*' />
/// <unmanaged>WICBitmapDitherType</unmanaged>
public enum WICBitmapDitherType : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeNone"]/*' />
	/// <unmanaged>WICBitmapDitherTypeNone</unmanaged>
	None = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeSolid"]/*' />
	/// <unmanaged>WICBitmapDitherTypeSolid</unmanaged>
	Solid = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeOrdered4x4"]/*' />
	/// <unmanaged>WICBitmapDitherTypeOrdered4x4</unmanaged>
	Ordered4x4 = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeOrdered8x8"]/*' />
	/// <unmanaged>WICBitmapDitherTypeOrdered8x8</unmanaged>
	Ordered8x8 = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeOrdered16x16"]/*' />
	/// <unmanaged>WICBitmapDitherTypeOrdered16x16</unmanaged>
	Ordered16x16 = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeSpiral4x4"]/*' />
	/// <unmanaged>WICBitmapDitherTypeSpiral4x4</unmanaged>
	Spiral4x4 = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeSpiral8x8"]/*' />
	/// <unmanaged>WICBitmapDitherTypeSpiral8x8</unmanaged>
	Spiral8x8 = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeDualSpiral4x4"]/*' />
	/// <unmanaged>WICBitmapDitherTypeDualSpiral4x4</unmanaged>
	DualSpiral4x4 = 6,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeDualSpiral8x8"]/*' />
	/// <unmanaged>WICBitmapDitherTypeDualSpiral8x8</unmanaged>
	DualSpiral8x8 = 7,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeErrorDiffusion"]/*' />
	/// <unmanaged>WICBitmapDitherTypeErrorDiffusion</unmanaged>
	ErrorDiffusion = 8,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapAlphaChannelOption"]/*' />
/// <unmanaged>WICBitmapAlphaChannelOption</unmanaged>
public enum WICBitmapAlphaChannelOption : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapAlphaChannelOption::WICBitmapUseAlpha"]/*' />
	/// <unmanaged>WICBitmapUseAlpha</unmanaged>
	UseAlpha = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapAlphaChannelOption::WICBitmapUsePremultipliedAlpha"]/*' />
	/// <unmanaged>WICBitmapUsePremultipliedAlpha</unmanaged>
	UsePremultipliedAlpha = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapAlphaChannelOption::WICBitmapIgnoreAlpha"]/*' />
	/// <unmanaged>WICBitmapIgnoreAlpha</unmanaged>
	IgnoreAlpha = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapTransformOptions"]/*' />
/// <unmanaged>WICBitmapTransformOptions</unmanaged>
public enum WICBitmapTransformOptions : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapTransformOptions::WICBitmapTransformRotate0"]/*' />
	/// <unmanaged>WICBitmapTransformRotate0</unmanaged>
	Rotate0 = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapTransformOptions::WICBitmapTransformRotate90"]/*' />
	/// <unmanaged>WICBitmapTransformRotate90</unmanaged>
	Rotate90 = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapTransformOptions::WICBitmapTransformRotate180"]/*' />
	/// <unmanaged>WICBitmapTransformRotate180</unmanaged>
	Rotate180 = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapTransformOptions::WICBitmapTransformRotate270"]/*' />
	/// <unmanaged>WICBitmapTransformRotate270</unmanaged>
	Rotate270 = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapTransformOptions::WICBitmapTransformFlipHorizontal"]/*' />
	/// <unmanaged>WICBitmapTransformFlipHorizontal</unmanaged>
	FlipHorizontal = 8,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapTransformOptions::WICBitmapTransformFlipVertical"]/*' />
	/// <unmanaged>WICBitmapTransformFlipVertical</unmanaged>
	FlipVertical = 16,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapLockFlags"]/*' />
/// <unmanaged>WICBitmapLockFlags</unmanaged>
[Flags]
public enum WICBitmapLockFlags : int
{
	None = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapLockFlags::WICBitmapLockRead"]/*' />
	/// <unmanaged>WICBitmapLockRead</unmanaged>
	Read = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapLockFlags::WICBitmapLockWrite"]/*' />
	/// <unmanaged>WICBitmapLockWrite</unmanaged>
	Write = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDecoderCapabilities"]/*' />
/// <unmanaged>WICBitmapDecoderCapabilities</unmanaged>
public enum WICBitmapDecoderCapabilities : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDecoderCapabilities::WICBitmapDecoderCapabilitySameEncoder"]/*' />
	/// <unmanaged>WICBitmapDecoderCapabilitySameEncoder</unmanaged>
	SameEncoder = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDecoderCapabilities::WICBitmapDecoderCapabilityCanDecodeAllImages"]/*' />
	/// <unmanaged>WICBitmapDecoderCapabilityCanDecodeAllImages</unmanaged>
	CanDecodeAllImages = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDecoderCapabilities::WICBitmapDecoderCapabilityCanDecodeSomeImages"]/*' />
	/// <unmanaged>WICBitmapDecoderCapabilityCanDecodeSomeImages</unmanaged>
	CanDecodeSomeImages = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDecoderCapabilities::WICBitmapDecoderCapabilityCanEnumerateMetadata"]/*' />
	/// <unmanaged>WICBitmapDecoderCapabilityCanEnumerateMetadata</unmanaged>
	CanEnumerateMetadata = 8,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDecoderCapabilities::WICBitmapDecoderCapabilityCanDecodeThumbnail"]/*' />
	/// <unmanaged>WICBitmapDecoderCapabilityCanDecodeThumbnail</unmanaged>
	CanDecodeThumbnail = 16,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressOperation"]/*' />
/// <unmanaged>WICProgressOperation</unmanaged>
public enum WICProgressOperation : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressOperation::WICProgressOperationCopyPixels"]/*' />
	/// <unmanaged>WICProgressOperationCopyPixels</unmanaged>
	CopyPixels = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressOperation::WICProgressOperationWritePixels"]/*' />
	/// <unmanaged>WICProgressOperationWritePixels</unmanaged>
	WritePixels = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressOperation::WICProgressOperationAll"]/*' />
	/// <unmanaged>WICProgressOperationAll</unmanaged>
	All = 65535,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressNotification"]/*' />
/// <unmanaged>WICProgressNotification</unmanaged>
public enum WICProgressNotification : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressNotification::WICProgressNotificationBegin"]/*' />
	/// <unmanaged>WICProgressNotificationBegin</unmanaged>
	Begin = 65536,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressNotification::WICProgressNotificationEnd"]/*' />
	/// <unmanaged>WICProgressNotificationEnd</unmanaged>
	End = 131072,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressNotification::WICProgressNotificationFrequent"]/*' />
	/// <unmanaged>WICProgressNotificationFrequent</unmanaged>
	Frequent = 262144,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressNotification::WICProgressNotificationAll"]/*' />
	/// <unmanaged>WICProgressNotificationAll</unmanaged>
	All = -65536,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentSigning"]/*' />
/// <unmanaged>WICComponentSigning</unmanaged>
public enum WICComponentSigning : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentSigning::WICComponentSigned"]/*' />
	/// <unmanaged>WICComponentSigned</unmanaged>
	Signed = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentSigning::WICComponentUnsigned"]/*' />
	/// <unmanaged>WICComponentUnsigned</unmanaged>
	Unsigned = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentSigning::WICComponentSafe"]/*' />
	/// <unmanaged>WICComponentSafe</unmanaged>
	Safe = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentSigning::WICComponentDisabled"]/*' />
	/// <unmanaged>WICComponentDisabled</unmanaged>
	Disabled = -2147483648,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties"]/*' />
/// <unmanaged>WICGifLogicalScreenDescriptorProperties</unmanaged>
public enum WICGifLogicalScreenDescriptorProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenSignature"]/*' />
	/// <unmanaged>WICGifLogicalScreenSignature</unmanaged>
	WICGifLogicalScreenSignature = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenDescriptorWidth"]/*' />
	/// <unmanaged>WICGifLogicalScreenDescriptorWidth</unmanaged>
	WICGifLogicalScreenDescriptorWidth = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenDescriptorHeight"]/*' />
	/// <unmanaged>WICGifLogicalScreenDescriptorHeight</unmanaged>
	WICGifLogicalScreenDescriptorHeight = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenDescriptorGlobalColorTableFlag"]/*' />
	/// <unmanaged>WICGifLogicalScreenDescriptorGlobalColorTableFlag</unmanaged>
	WICGifLogicalScreenDescriptorGlobalColorTableFlag = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenDescriptorColorResolution"]/*' />
	/// <unmanaged>WICGifLogicalScreenDescriptorColorResolution</unmanaged>
	WICGifLogicalScreenDescriptorColorResolution = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenDescriptorSortFlag"]/*' />
	/// <unmanaged>WICGifLogicalScreenDescriptorSortFlag</unmanaged>
	WICGifLogicalScreenDescriptorSortFlag = 6,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenDescriptorGlobalColorTableSize"]/*' />
	/// <unmanaged>WICGifLogicalScreenDescriptorGlobalColorTableSize</unmanaged>
	WICGifLogicalScreenDescriptorGlobalColorTableSize = 7,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenDescriptorBackgroundColorIndex"]/*' />
	/// <unmanaged>WICGifLogicalScreenDescriptorBackgroundColorIndex</unmanaged>
	WICGifLogicalScreenDescriptorBackgroundColorIndex = 8,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenDescriptorPixelAspectRatio"]/*' />
	/// <unmanaged>WICGifLogicalScreenDescriptorPixelAspectRatio</unmanaged>
	WICGifLogicalScreenDescriptorPixelAspectRatio = 9,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties"]/*' />
/// <unmanaged>WICGifImageDescriptorProperties</unmanaged>
public enum WICGifImageDescriptorProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties::WICGifImageDescriptorLeft"]/*' />
	/// <unmanaged>WICGifImageDescriptorLeft</unmanaged>
	WICGifImageDescriptorLeft = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties::WICGifImageDescriptorTop"]/*' />
	/// <unmanaged>WICGifImageDescriptorTop</unmanaged>
	WICGifImageDescriptorTop = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties::WICGifImageDescriptorWidth"]/*' />
	/// <unmanaged>WICGifImageDescriptorWidth</unmanaged>
	WICGifImageDescriptorWidth = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties::WICGifImageDescriptorHeight"]/*' />
	/// <unmanaged>WICGifImageDescriptorHeight</unmanaged>
	WICGifImageDescriptorHeight = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties::WICGifImageDescriptorLocalColorTableFlag"]/*' />
	/// <unmanaged>WICGifImageDescriptorLocalColorTableFlag</unmanaged>
	WICGifImageDescriptorLocalColorTableFlag = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties::WICGifImageDescriptorInterlaceFlag"]/*' />
	/// <unmanaged>WICGifImageDescriptorInterlaceFlag</unmanaged>
	WICGifImageDescriptorInterlaceFlag = 6,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties::WICGifImageDescriptorSortFlag"]/*' />
	/// <unmanaged>WICGifImageDescriptorSortFlag</unmanaged>
	WICGifImageDescriptorSortFlag = 7,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties::WICGifImageDescriptorLocalColorTableSize"]/*' />
	/// <unmanaged>WICGifImageDescriptorLocalColorTableSize</unmanaged>
	WICGifImageDescriptorLocalColorTableSize = 8,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICGifGraphicControlExtensionProperties"]/*' />
/// <unmanaged>WICGifGraphicControlExtensionProperties</unmanaged>
public enum WICGifGraphicControlExtensionProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifGraphicControlExtensionProperties::WICGifGraphicControlExtensionDisposal"]/*' />
	/// <unmanaged>WICGifGraphicControlExtensionDisposal</unmanaged>
	WICGifGraphicControlExtensionDisposal = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifGraphicControlExtensionProperties::WICGifGraphicControlExtensionUserInputFlag"]/*' />
	/// <unmanaged>WICGifGraphicControlExtensionUserInputFlag</unmanaged>
	WICGifGraphicControlExtensionUserInputFlag = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifGraphicControlExtensionProperties::WICGifGraphicControlExtensionTransparencyFlag"]/*' />
	/// <unmanaged>WICGifGraphicControlExtensionTransparencyFlag</unmanaged>
	WICGifGraphicControlExtensionTransparencyFlag = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifGraphicControlExtensionProperties::WICGifGraphicControlExtensionDelay"]/*' />
	/// <unmanaged>WICGifGraphicControlExtensionDelay</unmanaged>
	WICGifGraphicControlExtensionDelay = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifGraphicControlExtensionProperties::WICGifGraphicControlExtensionTransparentColorIndex"]/*' />
	/// <unmanaged>WICGifGraphicControlExtensionTransparentColorIndex</unmanaged>
	WICGifGraphicControlExtensionTransparentColorIndex = 5,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICGifApplicationExtensionProperties"]/*' />
/// <unmanaged>WICGifApplicationExtensionProperties</unmanaged>
public enum WICGifApplicationExtensionProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifApplicationExtensionProperties::WICGifApplicationExtensionApplication"]/*' />
	/// <unmanaged>WICGifApplicationExtensionApplication</unmanaged>
	WICGifApplicationExtensionApplication = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifApplicationExtensionProperties::WICGifApplicationExtensionData"]/*' />
	/// <unmanaged>WICGifApplicationExtensionData</unmanaged>
	WICGifApplicationExtensionData = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICGifCommentExtensionProperties"]/*' />
/// <unmanaged>WICGifCommentExtensionProperties</unmanaged>
public enum WICGifCommentExtensionProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifCommentExtensionProperties::WICGifCommentExtensionText"]/*' />
	/// <unmanaged>WICGifCommentExtensionText</unmanaged>
	WICGifCommentExtensionText = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegCommentProperties"]/*' />
/// <unmanaged>WICJpegCommentProperties</unmanaged>
public enum WICJpegCommentProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegCommentProperties::WICJpegCommentText"]/*' />
	/// <unmanaged>WICJpegCommentText</unmanaged>
	WICJpegCommentText = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegLuminanceProperties"]/*' />
/// <unmanaged>WICJpegLuminanceProperties</unmanaged>
public enum WICJpegLuminanceProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegLuminanceProperties::WICJpegLuminanceTable"]/*' />
	/// <unmanaged>WICJpegLuminanceTable</unmanaged>
	WICJpegLuminanceTable = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegChrominanceProperties"]/*' />
/// <unmanaged>WICJpegChrominanceProperties</unmanaged>
public enum WICJpegChrominanceProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegChrominanceProperties::WICJpegChrominanceTable"]/*' />
	/// <unmanaged>WICJpegChrominanceTable</unmanaged>
	WICJpegChrominanceTable = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMIptcProperties"]/*' />
/// <unmanaged>WIC8BIMIptcProperties</unmanaged>
public enum WIC8BIMIptcProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMIptcProperties::WIC8BIMIptcPString"]/*' />
	/// <unmanaged>WIC8BIMIptcPString</unmanaged>
	WIC8BIMIptcPString = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMIptcProperties::WIC8BIMIptcEmbeddedIPTC"]/*' />
	/// <unmanaged>WIC8BIMIptcEmbeddedIPTC</unmanaged>
	WIC8BIMIptcEmbeddedIPTC = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMResolutionInfoProperties"]/*' />
/// <unmanaged>WIC8BIMResolutionInfoProperties</unmanaged>
public enum WIC8BIMResolutionInfoProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMResolutionInfoProperties::WIC8BIMResolutionInfoPString"]/*' />
	/// <unmanaged>WIC8BIMResolutionInfoPString</unmanaged>
	WIC8BIMResolutionInfoPString = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMResolutionInfoProperties::WIC8BIMResolutionInfoHResolution"]/*' />
	/// <unmanaged>WIC8BIMResolutionInfoHResolution</unmanaged>
	WIC8BIMResolutionInfoHResolution = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMResolutionInfoProperties::WIC8BIMResolutionInfoHResolutionUnit"]/*' />
	/// <unmanaged>WIC8BIMResolutionInfoHResolutionUnit</unmanaged>
	WIC8BIMResolutionInfoHResolutionUnit = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMResolutionInfoProperties::WIC8BIMResolutionInfoWidthUnit"]/*' />
	/// <unmanaged>WIC8BIMResolutionInfoWidthUnit</unmanaged>
	WIC8BIMResolutionInfoWidthUnit = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMResolutionInfoProperties::WIC8BIMResolutionInfoVResolution"]/*' />
	/// <unmanaged>WIC8BIMResolutionInfoVResolution</unmanaged>
	WIC8BIMResolutionInfoVResolution = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMResolutionInfoProperties::WIC8BIMResolutionInfoVResolutionUnit"]/*' />
	/// <unmanaged>WIC8BIMResolutionInfoVResolutionUnit</unmanaged>
	WIC8BIMResolutionInfoVResolutionUnit = 6,
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMResolutionInfoProperties::WIC8BIMResolutionInfoHeightUnit"]/*' />
	/// <unmanaged>WIC8BIMResolutionInfoHeightUnit</unmanaged>
	WIC8BIMResolutionInfoHeightUnit = 7,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMIptcDigestProperties"]/*' />
/// <unmanaged>WIC8BIMIptcDigestProperties</unmanaged>
public enum WIC8BIMIptcDigestProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMIptcDigestProperties::WIC8BIMIptcDigestPString"]/*' />
	/// <unmanaged>WIC8BIMIptcDigestPString</unmanaged>
	WIC8BIMIptcDigestPString = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMIptcDigestProperties::WIC8BIMIptcDigestIptcDigest"]/*' />
	/// <unmanaged>WIC8BIMIptcDigestIptcDigest</unmanaged>
	WIC8BIMIptcDigestIptcDigest = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngGamaProperties"]/*' />
/// <unmanaged>WICPngGamaProperties</unmanaged>
public enum WICPngGamaProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngGamaProperties::WICPngGamaGamma"]/*' />
	/// <unmanaged>WICPngGamaGamma</unmanaged>
	WICPngGamaGamma = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngBkgdProperties"]/*' />
/// <unmanaged>WICPngBkgdProperties</unmanaged>
public enum WICPngBkgdProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngBkgdProperties::WICPngBkgdBackgroundColor"]/*' />
	/// <unmanaged>WICPngBkgdBackgroundColor</unmanaged>
	WICPngBkgdBackgroundColor = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngItxtProperties"]/*' />
/// <unmanaged>WICPngItxtProperties</unmanaged>
public enum WICPngItxtProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngItxtProperties::WICPngItxtKeyword"]/*' />
	/// <unmanaged>WICPngItxtKeyword</unmanaged>
	WICPngItxtKeyword = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngItxtProperties::WICPngItxtCompressionFlag"]/*' />
	/// <unmanaged>WICPngItxtCompressionFlag</unmanaged>
	WICPngItxtCompressionFlag = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngItxtProperties::WICPngItxtLanguageTag"]/*' />
	/// <unmanaged>WICPngItxtLanguageTag</unmanaged>
	WICPngItxtLanguageTag = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngItxtProperties::WICPngItxtTranslatedKeyword"]/*' />
	/// <unmanaged>WICPngItxtTranslatedKeyword</unmanaged>
	WICPngItxtTranslatedKeyword = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngItxtProperties::WICPngItxtText"]/*' />
	/// <unmanaged>WICPngItxtText</unmanaged>
	WICPngItxtText = 5,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties"]/*' />
/// <unmanaged>WICPngChrmProperties</unmanaged>
public enum WICPngChrmProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties::WICPngChrmWhitePointX"]/*' />
	/// <unmanaged>WICPngChrmWhitePointX</unmanaged>
	WICPngChrmWhitePointX = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties::WICPngChrmWhitePointY"]/*' />
	/// <unmanaged>WICPngChrmWhitePointY</unmanaged>
	WICPngChrmWhitePointY = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties::WICPngChrmRedX"]/*' />
	/// <unmanaged>WICPngChrmRedX</unmanaged>
	WICPngChrmRedX = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties::WICPngChrmRedY"]/*' />
	/// <unmanaged>WICPngChrmRedY</unmanaged>
	WICPngChrmRedY = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties::WICPngChrmGreenX"]/*' />
	/// <unmanaged>WICPngChrmGreenX</unmanaged>
	WICPngChrmGreenX = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties::WICPngChrmGreenY"]/*' />
	/// <unmanaged>WICPngChrmGreenY</unmanaged>
	WICPngChrmGreenY = 6,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties::WICPngChrmBlueX"]/*' />
	/// <unmanaged>WICPngChrmBlueX</unmanaged>
	WICPngChrmBlueX = 7,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties::WICPngChrmBlueY"]/*' />
	/// <unmanaged>WICPngChrmBlueY</unmanaged>
	WICPngChrmBlueY = 8,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngHistProperties"]/*' />
/// <unmanaged>WICPngHistProperties</unmanaged>
public enum WICPngHistProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngHistProperties::WICPngHistFrequencies"]/*' />
	/// <unmanaged>WICPngHistFrequencies</unmanaged>
	WICPngHistFrequencies = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngIccpProperties"]/*' />
/// <unmanaged>WICPngIccpProperties</unmanaged>
public enum WICPngIccpProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngIccpProperties::WICPngIccpProfileName"]/*' />
	/// <unmanaged>WICPngIccpProfileName</unmanaged>
	WICPngIccpProfileName = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngIccpProperties::WICPngIccpProfileData"]/*' />
	/// <unmanaged>WICPngIccpProfileData</unmanaged>
	WICPngIccpProfileData = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngSrgbProperties"]/*' />
/// <unmanaged>WICPngSrgbProperties</unmanaged>
public enum WICPngSrgbProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngSrgbProperties::WICPngSrgbRenderingIntent"]/*' />
	/// <unmanaged>WICPngSrgbRenderingIntent</unmanaged>
	WICPngSrgbRenderingIntent = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngTimeProperties"]/*' />
/// <unmanaged>WICPngTimeProperties</unmanaged>
public enum WICPngTimeProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngTimeProperties::WICPngTimeYear"]/*' />
	/// <unmanaged>WICPngTimeYear</unmanaged>
	WICPngTimeYear = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngTimeProperties::WICPngTimeMonth"]/*' />
	/// <unmanaged>WICPngTimeMonth</unmanaged>
	WICPngTimeMonth = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngTimeProperties::WICPngTimeDay"]/*' />
	/// <unmanaged>WICPngTimeDay</unmanaged>
	WICPngTimeDay = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngTimeProperties::WICPngTimeHour"]/*' />
	/// <unmanaged>WICPngTimeHour</unmanaged>
	WICPngTimeHour = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngTimeProperties::WICPngTimeMinute"]/*' />
	/// <unmanaged>WICPngTimeMinute</unmanaged>
	WICPngTimeMinute = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngTimeProperties::WICPngTimeSecond"]/*' />
	/// <unmanaged>WICPngTimeSecond</unmanaged>
	WICPngTimeSecond = 6,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICHeifProperties"]/*' />
/// <unmanaged>WICHeifProperties</unmanaged>
public enum WICHeifProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICHeifProperties::WICHeifOrientation"]/*' />
	/// <unmanaged>WICHeifOrientation</unmanaged>
	WICHeifOrientation = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICHeifHdrProperties"]/*' />
/// <unmanaged>WICHeifHdrProperties</unmanaged>
public enum WICHeifHdrProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICHeifHdrProperties::WICHeifHdrMaximumLuminanceLevel"]/*' />
	/// <unmanaged>WICHeifHdrMaximumLuminanceLevel</unmanaged>
	WICHeifHdrMaximumLuminanceLevel = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICHeifHdrProperties::WICHeifHdrMaximumFrameAverageLuminanceLevel"]/*' />
	/// <unmanaged>WICHeifHdrMaximumFrameAverageLuminanceLevel</unmanaged>
	WICHeifHdrMaximumFrameAverageLuminanceLevel = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICHeifHdrProperties::WICHeifHdrMinimumMasteringDisplayLuminanceLevel"]/*' />
	/// <unmanaged>WICHeifHdrMinimumMasteringDisplayLuminanceLevel</unmanaged>
	WICHeifHdrMinimumMasteringDisplayLuminanceLevel = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICHeifHdrProperties::WICHeifHdrMaximumMasteringDisplayLuminanceLevel"]/*' />
	/// <unmanaged>WICHeifHdrMaximumMasteringDisplayLuminanceLevel</unmanaged>
	WICHeifHdrMaximumMasteringDisplayLuminanceLevel = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICHeifHdrProperties::WICHeifHdrCustomVideoPrimaries"]/*' />
	/// <unmanaged>WICHeifHdrCustomVideoPrimaries</unmanaged>
	WICHeifHdrCustomVideoPrimaries = 5,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICWebpAnimProperties"]/*' />
/// <unmanaged>WICWebpAnimProperties</unmanaged>
public enum WICWebpAnimProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICWebpAnimProperties::WICWebpAnimLoopCount"]/*' />
	/// <unmanaged>WICWebpAnimLoopCount</unmanaged>
	WICWebpAnimLoopCount = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICWebpAnmfProperties"]/*' />
/// <unmanaged>WICWebpAnmfProperties</unmanaged>
public enum WICWebpAnmfProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICWebpAnmfProperties::WICWebpAnmfFrameDuration"]/*' />
	/// <unmanaged>WICWebpAnmfFrameDuration</unmanaged>
	WICWebpAnmfFrameDuration = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICSectionAccessLevel"]/*' />
/// <unmanaged>WICSectionAccessLevel</unmanaged>
public enum WICSectionAccessLevel : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICSectionAccessLevel::WICSectionAccessLevelRead"]/*' />
	/// <unmanaged>WICSectionAccessLevelRead</unmanaged>
	WICSectionAccessLevelRead = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICSectionAccessLevel::WICSectionAccessLevelReadWrite"]/*' />
	/// <unmanaged>WICSectionAccessLevelReadWrite</unmanaged>
	WICSectionAccessLevelReadWrite = 3,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPixelFormatNumericRepresentation"]/*' />
/// <unmanaged>WICPixelFormatNumericRepresentation</unmanaged>
public enum WICPixelFormatNumericRepresentation : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPixelFormatNumericRepresentation::WICPixelFormatNumericRepresentationUnspecified"]/*' />
	/// <unmanaged>WICPixelFormatNumericRepresentationUnspecified</unmanaged>
	Unspecified = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPixelFormatNumericRepresentation::WICPixelFormatNumericRepresentationIndexed"]/*' />
	/// <unmanaged>WICPixelFormatNumericRepresentationIndexed</unmanaged>
	Indexed = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPixelFormatNumericRepresentation::WICPixelFormatNumericRepresentationUnsignedInteger"]/*' />
	/// <unmanaged>WICPixelFormatNumericRepresentationUnsignedInteger</unmanaged>
	UnsignedInteger = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPixelFormatNumericRepresentation::WICPixelFormatNumericRepresentationSignedInteger"]/*' />
	/// <unmanaged>WICPixelFormatNumericRepresentationSignedInteger</unmanaged>
	SignedInteger = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPixelFormatNumericRepresentation::WICPixelFormatNumericRepresentationFixed"]/*' />
	/// <unmanaged>WICPixelFormatNumericRepresentationFixed</unmanaged>
	Fixed = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPixelFormatNumericRepresentation::WICPixelFormatNumericRepresentationFloat"]/*' />
	/// <unmanaged>WICPixelFormatNumericRepresentationFloat</unmanaged>
	Float = 5,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPlanarOptions"]/*' />
/// <unmanaged>WICPlanarOptions</unmanaged>
public enum WICPlanarOptions : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPlanarOptions::WICPlanarOptionsDefault"]/*' />
	/// <unmanaged>WICPlanarOptionsDefault</unmanaged>
	Default = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPlanarOptions::WICPlanarOptionsPreserveSubsampling"]/*' />
	/// <unmanaged>WICPlanarOptionsPreserveSubsampling</unmanaged>
	PreserveSubsampling = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegIndexingOptions"]/*' />
/// <unmanaged>WICJpegIndexingOptions</unmanaged>
public enum WICJpegIndexingOptions : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegIndexingOptions::WICJpegIndexingOptionsGenerateOnDemand"]/*' />
	/// <unmanaged>WICJpegIndexingOptionsGenerateOnDemand</unmanaged>
	WICJpegIndexingOptionsGenerateOnDemand = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegIndexingOptions::WICJpegIndexingOptionsGenerateOnLoad"]/*' />
	/// <unmanaged>WICJpegIndexingOptionsGenerateOnLoad</unmanaged>
	WICJpegIndexingOptionsGenerateOnLoad = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegTransferMatrix"]/*' />
/// <unmanaged>WICJpegTransferMatrix</unmanaged>
public enum WICJpegTransferMatrix : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegTransferMatrix::WICJpegTransferMatrixIdentity"]/*' />
	/// <unmanaged>WICJpegTransferMatrixIdentity</unmanaged>
	WICJpegTransferMatrixIdentity = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegTransferMatrix::WICJpegTransferMatrixBT601"]/*' />
	/// <unmanaged>WICJpegTransferMatrixBT601</unmanaged>
	WICJpegTransferMatrixBT601 = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanType"]/*' />
/// <unmanaged>WICJpegScanType</unmanaged>
public enum WICJpegScanType : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanType::WICJpegScanTypeInterleaved"]/*' />
	/// <unmanaged>WICJpegScanTypeInterleaved</unmanaged>
	WICJpegScanTypeInterleaved = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanType::WICJpegScanTypePlanarComponents"]/*' />
	/// <unmanaged>WICJpegScanTypePlanarComponents</unmanaged>
	WICJpegScanTypePlanarComponents = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanType::WICJpegScanTypeProgressive"]/*' />
	/// <unmanaged>WICJpegScanTypeProgressive</unmanaged>
	WICJpegScanTypeProgressive = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption"]/*' />
/// <unmanaged>WICTiffCompressionOption</unmanaged>
public enum WICTiffCompressionOption : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption::WICTiffCompressionDontCare"]/*' />
	/// <unmanaged>WICTiffCompressionDontCare</unmanaged>
	WICTiffCompressionDontCare = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption::WICTiffCompressionNone"]/*' />
	/// <unmanaged>WICTiffCompressionNone</unmanaged>
	WICTiffCompressionNone = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption::WICTiffCompressionCCITT3"]/*' />
	/// <unmanaged>WICTiffCompressionCCITT3</unmanaged>
	WICTiffCompressionCCITT3 = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption::WICTiffCompressionCCITT4"]/*' />
	/// <unmanaged>WICTiffCompressionCCITT4</unmanaged>
	WICTiffCompressionCCITT4 = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption::WICTiffCompressionLZW"]/*' />
	/// <unmanaged>WICTiffCompressionLZW</unmanaged>
	WICTiffCompressionLZW = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption::WICTiffCompressionRLE"]/*' />
	/// <unmanaged>WICTiffCompressionRLE</unmanaged>
	WICTiffCompressionRLE = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption::WICTiffCompressionZIP"]/*' />
	/// <unmanaged>WICTiffCompressionZIP</unmanaged>
	WICTiffCompressionZIP = 6,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption::WICTiffCompressionLZWHDifferencing"]/*' />
	/// <unmanaged>WICTiffCompressionLZWHDifferencing</unmanaged>
	WICTiffCompressionLZWHDifferencing = 7,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegYCrCbSubsamplingOption"]/*' />
/// <unmanaged>WICJpegYCrCbSubsamplingOption</unmanaged>
public enum WICJpegYCrCbSubsamplingOption : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegYCrCbSubsamplingOption::WICJpegYCrCbSubsamplingDefault"]/*' />
	/// <unmanaged>WICJpegYCrCbSubsamplingDefault</unmanaged>
	WICJpegYCrCbSubsamplingDefault = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegYCrCbSubsamplingOption::WICJpegYCrCbSubsampling420"]/*' />
	/// <unmanaged>WICJpegYCrCbSubsampling420</unmanaged>
	WICJpegYCrCbSubsampling420 = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegYCrCbSubsamplingOption::WICJpegYCrCbSubsampling422"]/*' />
	/// <unmanaged>WICJpegYCrCbSubsampling422</unmanaged>
	WICJpegYCrCbSubsampling422 = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegYCrCbSubsamplingOption::WICJpegYCrCbSubsampling444"]/*' />
	/// <unmanaged>WICJpegYCrCbSubsampling444</unmanaged>
	WICJpegYCrCbSubsampling444 = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegYCrCbSubsamplingOption::WICJpegYCrCbSubsampling440"]/*' />
	/// <unmanaged>WICJpegYCrCbSubsampling440</unmanaged>
	WICJpegYCrCbSubsampling440 = 4,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngFilterOption"]/*' />
/// <unmanaged>WICPngFilterOption</unmanaged>
public enum WICPngFilterOption : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngFilterOption::WICPngFilterUnspecified"]/*' />
	/// <unmanaged>WICPngFilterUnspecified</unmanaged>
	WICPngFilterUnspecified = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngFilterOption::WICPngFilterNone"]/*' />
	/// <unmanaged>WICPngFilterNone</unmanaged>
	WICPngFilterNone = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngFilterOption::WICPngFilterSub"]/*' />
	/// <unmanaged>WICPngFilterSub</unmanaged>
	WICPngFilterSub = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngFilterOption::WICPngFilterUp"]/*' />
	/// <unmanaged>WICPngFilterUp</unmanaged>
	WICPngFilterUp = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngFilterOption::WICPngFilterAverage"]/*' />
	/// <unmanaged>WICPngFilterAverage</unmanaged>
	WICPngFilterAverage = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngFilterOption::WICPngFilterPaeth"]/*' />
	/// <unmanaged>WICPngFilterPaeth</unmanaged>
	WICPngFilterPaeth = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngFilterOption::WICPngFilterAdaptive"]/*' />
	/// <unmanaged>WICPngFilterAdaptive</unmanaged>
	WICPngFilterAdaptive = 6,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint"]/*' />
/// <unmanaged>WICNamedWhitePoint</unmanaged>
public enum WICNamedWhitePoint : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointDefault"]/*' />
	/// <unmanaged>WICWhitePointDefault</unmanaged>
	WICWhitePointDefault = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointDaylight"]/*' />
	/// <unmanaged>WICWhitePointDaylight</unmanaged>
	WICWhitePointDaylight = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointCloudy"]/*' />
	/// <unmanaged>WICWhitePointCloudy</unmanaged>
	WICWhitePointCloudy = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointShade"]/*' />
	/// <unmanaged>WICWhitePointShade</unmanaged>
	WICWhitePointShade = 8,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointTungsten"]/*' />
	/// <unmanaged>WICWhitePointTungsten</unmanaged>
	WICWhitePointTungsten = 16,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointFluorescent"]/*' />
	/// <unmanaged>WICWhitePointFluorescent</unmanaged>
	WICWhitePointFluorescent = 32,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointFlash"]/*' />
	/// <unmanaged>WICWhitePointFlash</unmanaged>
	WICWhitePointFlash = 64,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointUnderwater"]/*' />
	/// <unmanaged>WICWhitePointUnderwater</unmanaged>
	WICWhitePointUnderwater = 128,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointCustom"]/*' />
	/// <unmanaged>WICWhitePointCustom</unmanaged>
	WICWhitePointCustom = 256,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointAutoWhiteBalance"]/*' />
	/// <unmanaged>WICWhitePointAutoWhiteBalance</unmanaged>
	WICWhitePointAutoWhiteBalance = 512,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointAsShot"]/*' />
	/// <unmanaged>WICWhitePointAsShot</unmanaged>
	WICWhitePointAsShot = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilities"]/*' />
/// <unmanaged>WICRawCapabilities</unmanaged>
public enum WICRawCapabilities : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilities::WICRawCapabilityNotSupported"]/*' />
	/// <unmanaged>WICRawCapabilityNotSupported</unmanaged>
	WICRawCapabilityNotSupported = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilities::WICRawCapabilityGetSupported"]/*' />
	/// <unmanaged>WICRawCapabilityGetSupported</unmanaged>
	WICRawCapabilityGetSupported = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilities::WICRawCapabilityFullySupported"]/*' />
	/// <unmanaged>WICRawCapabilityFullySupported</unmanaged>
	WICRawCapabilityFullySupported = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRotationCapabilities"]/*' />
/// <unmanaged>WICRawRotationCapabilities</unmanaged>
public enum WICRawRotationCapabilities : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRotationCapabilities::WICRawRotationCapabilityNotSupported"]/*' />
	/// <unmanaged>WICRawRotationCapabilityNotSupported</unmanaged>
	WICRawRotationCapabilityNotSupported = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRotationCapabilities::WICRawRotationCapabilityGetSupported"]/*' />
	/// <unmanaged>WICRawRotationCapabilityGetSupported</unmanaged>
	WICRawRotationCapabilityGetSupported = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRotationCapabilities::WICRawRotationCapabilityNinetyDegreesSupported"]/*' />
	/// <unmanaged>WICRawRotationCapabilityNinetyDegreesSupported</unmanaged>
	WICRawRotationCapabilityNinetyDegreesSupported = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRotationCapabilities::WICRawRotationCapabilityFullySupported"]/*' />
	/// <unmanaged>WICRawRotationCapabilityFullySupported</unmanaged>
	WICRawRotationCapabilityFullySupported = 3,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICRawParameterSet"]/*' />
/// <unmanaged>WICRawParameterSet</unmanaged>
public enum WICRawParameterSet : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawParameterSet::WICAsShotParameterSet"]/*' />
	/// <unmanaged>WICAsShotParameterSet</unmanaged>
	WICAsShotParameterSet = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawParameterSet::WICUserAdjustedParameterSet"]/*' />
	/// <unmanaged>WICUserAdjustedParameterSet</unmanaged>
	WICUserAdjustedParameterSet = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawParameterSet::WICAutoAdjustedParameterSet"]/*' />
	/// <unmanaged>WICAutoAdjustedParameterSet</unmanaged>
	WICAutoAdjustedParameterSet = 3,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRenderMode"]/*' />
/// <unmanaged>WICRawRenderMode</unmanaged>
public enum WICRawRenderMode : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRenderMode::WICRawRenderModeDraft"]/*' />
	/// <unmanaged>WICRawRenderModeDraft</unmanaged>
	WICRawRenderModeDraft = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRenderMode::WICRawRenderModeNormal"]/*' />
	/// <unmanaged>WICRawRenderModeNormal</unmanaged>
	WICRawRenderModeNormal = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRenderMode::WICRawRenderModeBestQuality"]/*' />
	/// <unmanaged>WICRawRenderModeBestQuality</unmanaged>
	WICRawRenderModeBestQuality = 3,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsDimension"]/*' />
/// <unmanaged>WICDdsDimension</unmanaged>
public enum WICDdsDimension : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsDimension::WICDdsTexture1D"]/*' />
	/// <unmanaged>WICDdsTexture1D</unmanaged>
	WICDdsTexture1D = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsDimension::WICDdsTexture2D"]/*' />
	/// <unmanaged>WICDdsTexture2D</unmanaged>
	WICDdsTexture2D = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsDimension::WICDdsTexture3D"]/*' />
	/// <unmanaged>WICDdsTexture3D</unmanaged>
	WICDdsTexture3D = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsDimension::WICDdsTextureCube"]/*' />
	/// <unmanaged>WICDdsTextureCube</unmanaged>
	WICDdsTextureCube = 3,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsAlphaMode"]/*' />
/// <unmanaged>WICDdsAlphaMode</unmanaged>
public enum WICDdsAlphaMode : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsAlphaMode::WICDdsAlphaModeUnknown"]/*' />
	/// <unmanaged>WICDdsAlphaModeUnknown</unmanaged>
	WICDdsAlphaModeUnknown = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsAlphaMode::WICDdsAlphaModeStraight"]/*' />
	/// <unmanaged>WICDdsAlphaModeStraight</unmanaged>
	WICDdsAlphaModeStraight = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsAlphaMode::WICDdsAlphaModePremultiplied"]/*' />
	/// <unmanaged>WICDdsAlphaModePremultiplied</unmanaged>
	WICDdsAlphaModePremultiplied = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsAlphaMode::WICDdsAlphaModeOpaque"]/*' />
	/// <unmanaged>WICDdsAlphaModeOpaque</unmanaged>
	WICDdsAlphaModeOpaque = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsAlphaMode::WICDdsAlphaModeCustom"]/*' />
	/// <unmanaged>WICDdsAlphaModeCustom</unmanaged>
	WICDdsAlphaModeCustom = 4,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataCreationOptions"]/*' />
/// <unmanaged>WICMetadataCreationOptions</unmanaged>
public enum WICMetadataCreationOptions : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataCreationOptions::WICMetadataCreationDefault"]/*' />
	/// <unmanaged>WICMetadataCreationDefault</unmanaged>
	WICMetadataCreationDefault = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataCreationOptions::WICMetadataCreationAllowUnknown"]/*' />
	/// <unmanaged>WICMetadataCreationAllowUnknown</unmanaged>
	WICMetadataCreationAllowUnknown = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataCreationOptions::WICMetadataCreationFailUnknown"]/*' />
	/// <unmanaged>WICMetadataCreationFailUnknown</unmanaged>
	WICMetadataCreationFailUnknown = 65536,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataCreationOptions::WICMetadataCreationMask"]/*' />
	/// <unmanaged>WICMetadataCreationMask</unmanaged>
	WICMetadataCreationMask = -65536,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPersistOptions"]/*' />
/// <unmanaged>WICPersistOptions</unmanaged>
public enum WICPersistOptions : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPersistOptions::WICPersistOptionDefault"]/*' />
	/// <unmanaged>WICPersistOptionDefault</unmanaged>
	WICPersistOptionDefault = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPersistOptions::WICPersistOptionLittleEndian"]/*' />
	/// <unmanaged>WICPersistOptionLittleEndian</unmanaged>
	WICPersistOptionLittleEndian = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPersistOptions::WICPersistOptionBigEndian"]/*' />
	/// <unmanaged>WICPersistOptionBigEndian</unmanaged>
	WICPersistOptionBigEndian = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPersistOptions::WICPersistOptionStrictFormat"]/*' />
	/// <unmanaged>WICPersistOptionStrictFormat</unmanaged>
	WICPersistOptionStrictFormat = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPersistOptions::WICPersistOptionNoCacheStream"]/*' />
	/// <unmanaged>WICPersistOptionNoCacheStream</unmanaged>
	WICPersistOptionNoCacheStream = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPersistOptions::WICPersistOptionPreferUTF8"]/*' />
	/// <unmanaged>WICPersistOptionPreferUTF8</unmanaged>
	WICPersistOptionPreferUTF8 = 8,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPersistOptions::WICPersistOptionMask"]/*' />
	/// <unmanaged>WICPersistOptionMask</unmanaged>
	WICPersistOptionMask = 65535,
}

#endregion Enums

#region Structs
/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPattern"]/*' />
/// <unmanaged>WICBitmapPattern</unmanaged>
public partial struct WICBitmapPattern
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPattern::Position"]/*' />
	public ULargeInteger Position;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPattern::Length"]/*' />
	public uint Length;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPattern::Pattern"]/*' />
	public unsafe byte* Pattern;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPattern::Mask"]/*' />
	public unsafe byte* Mask;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPattern::EndOfStream"]/*' />
	public Bool32 Endofstream;
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICImageParameters"]/*' />
/// <unmanaged>WICImageParameters</unmanaged>
public partial struct WICImageParameters
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICImageParameters::PixelFormat"]/*' />
	public Graphics.Direct2D.Common.PixelFormat Pixelformat;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICImageParameters::DpiX"]/*' />
	public float Dpix;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICImageParameters::DpiY"]/*' />
	public float Dpiy;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICImageParameters::Top"]/*' />
	public float Top;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICImageParameters::Left"]/*' />
	public float Left;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICImageParameters::PixelWidth"]/*' />
	public uint Pixelwidth;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICImageParameters::PixelHeight"]/*' />
	public uint Pixelheight;
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlaneDescription"]/*' />
/// <unmanaged>WICBitmapPlaneDescription</unmanaged>
public partial struct WICBitmapPlaneDescription
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlaneDescription::Format"]/*' />
	public Guid Format;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlaneDescription::Width"]/*' />
	public uint Width;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlaneDescription::Height"]/*' />
	public uint Height;
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlane"]/*' />
/// <unmanaged>WICBitmapPlane</unmanaged>
public partial struct WICBitmapPlane
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlane::Format"]/*' />
	public Guid Format;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlane::pbBuffer"]/*' />
	public unsafe byte* Pbbuffer;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlane::cbStride"]/*' />
	public uint Cbstride;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlane::cbBufferSize"]/*' />
	public uint Cbbuffersize;
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader"]/*' />
/// <unmanaged>WICJpegFrameHeader</unmanaged>
public partial struct WICJpegFrameHeader
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader::Width"]/*' />
	public uint Width;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader::Height"]/*' />
	public uint Height;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader::TransferMatrix"]/*' />
	public WICJpegTransferMatrix Transfermatrix;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader::ScanType"]/*' />
	public WICJpegScanType Scantype;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader::cComponents"]/*' />
	public uint Ccomponents;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader::ComponentIdentifiers"]/*' />
	public uint Componentidentifiers;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader::SampleFactors"]/*' />
	public uint Samplefactors;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader::QuantizationTableIndices"]/*' />
	public uint Quantizationtableindices;
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader"]/*' />
/// <unmanaged>WICJpegScanHeader</unmanaged>
public partial struct WICJpegScanHeader
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader::cComponents"]/*' />
	public uint Ccomponents;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader::RestartInterval"]/*' />
	public uint Restartinterval;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader::ComponentSelectors"]/*' />
	public uint Componentselectors;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader::HuffmanTableIndices"]/*' />
	public uint Huffmantableindices;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader::StartSpectralSelection"]/*' />
	public byte Startspectralselection;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader::EndSpectralSelection"]/*' />
	public byte Endspectralselection;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader::SuccessiveApproximationHigh"]/*' />
	public byte Successiveapproximationhigh;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader::SuccessiveApproximationLow"]/*' />
	public byte Successiveapproximationlow;
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo"]/*' />
/// <unmanaged>WICRawCapabilitiesInfo</unmanaged>
public partial struct WICRawCapabilitiesInfo
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::cbSize"]/*' />
	public uint Cbsize;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::CodecMajorVersion"]/*' />
	public uint Codecmajorversion;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::CodecMinorVersion"]/*' />
	public uint Codecminorversion;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::ExposureCompensationSupport"]/*' />
	public WICRawCapabilities Exposurecompensationsupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::ContrastSupport"]/*' />
	public WICRawCapabilities Contrastsupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::RGBWhitePointSupport"]/*' />
	public WICRawCapabilities Rgbwhitepointsupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::NamedWhitePointSupport"]/*' />
	public WICRawCapabilities Namedwhitepointsupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::NamedWhitePointSupportMask"]/*' />
	public uint Namedwhitepointsupportmask;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::KelvinWhitePointSupport"]/*' />
	public WICRawCapabilities Kelvinwhitepointsupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::GammaSupport"]/*' />
	public WICRawCapabilities Gammasupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::TintSupport"]/*' />
	public WICRawCapabilities Tintsupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::SaturationSupport"]/*' />
	public WICRawCapabilities Saturationsupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::SharpnessSupport"]/*' />
	public WICRawCapabilities Sharpnesssupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::NoiseReductionSupport"]/*' />
	public WICRawCapabilities Noisereductionsupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::DestinationColorProfileSupport"]/*' />
	public WICRawCapabilities Destinationcolorprofilesupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::ToneCurveSupport"]/*' />
	public WICRawCapabilities Tonecurvesupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::RotationSupport"]/*' />
	public WICRawRotationCapabilities Rotationsupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::RenderModeSupport"]/*' />
	public WICRawCapabilities Rendermodesupport;
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICRawToneCurvePoint"]/*' />
/// <unmanaged>WICRawToneCurvePoint</unmanaged>
public partial struct WICRawToneCurvePoint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawToneCurvePoint::Input"]/*' />
	public double Input;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawToneCurvePoint::Output"]/*' />
	public double Output;
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICRawToneCurve"]/*' />
/// <unmanaged>WICRawToneCurve</unmanaged>
public partial struct WICRawToneCurve
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawToneCurve::cPoints"]/*' />
	public uint Cpoints;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawToneCurve::aPoints"]/*' />
	public Apoints__FixedBuffer Apoints;

	public unsafe struct Apoints__FixedBuffer
	{
		public WICRawToneCurvePoint e0;

		[UnscopedRef]
		public ref WICRawToneCurvePoint this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<WICRawToneCurvePoint> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 1);
		}
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters"]/*' />
/// <unmanaged>WICDdsParameters</unmanaged>
public partial struct WICDdsParameters
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters::Width"]/*' />
	public uint Width;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters::Height"]/*' />
	public uint Height;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters::Depth"]/*' />
	public uint Depth;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters::MipLevels"]/*' />
	public uint Miplevels;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters::ArraySize"]/*' />
	public uint Arraysize;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters::DxgiFormat"]/*' />
	public Graphics.Dxgi.Common.Format Dxgiformat;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters::Dimension"]/*' />
	public WICDdsDimension Dimension;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters::AlphaMode"]/*' />
	public WICDdsAlphaMode Alphamode;
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsFormatInfo"]/*' />
/// <unmanaged>WICDdsFormatInfo</unmanaged>
public partial struct WICDdsFormatInfo
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsFormatInfo::DxgiFormat"]/*' />
	public Graphics.Dxgi.Common.Format Dxgiformat;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsFormatInfo::BytesPerBlock"]/*' />
	public uint Bytesperblock;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsFormatInfo::BlockWidth"]/*' />
	public uint Blockwidth;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsFormatInfo::BlockHeight"]/*' />
	public uint Blockheight;
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataPattern"]/*' />
/// <unmanaged>WICMetadataPattern</unmanaged>
public partial struct WICMetadataPattern
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataPattern::Position"]/*' />
	public ULargeInteger Position;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataPattern::Length"]/*' />
	public uint Length;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataPattern::Pattern"]/*' />
	public unsafe byte* Pattern;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataPattern::Mask"]/*' />
	public unsafe byte* Mask;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataPattern::DataOffset"]/*' />
	public ULargeInteger Dataoffset;
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataHeader"]/*' />
/// <unmanaged>WICMetadataHeader</unmanaged>
public partial struct WICMetadataHeader
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataHeader::Position"]/*' />
	public ULargeInteger Position;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataHeader::Length"]/*' />
	public uint Length;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataHeader::Header"]/*' />
	public unsafe byte* Header;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataHeader::DataOffset"]/*' />
	public ULargeInteger Dataoffset;
}

#endregion Structs

#region COM Types
/// <include file='../Imaging.xml' path='doc/member[@name="IWICPalette"]/*' />
/// <unmanaged>IWICPalette</unmanaged>
[Guid("00000040-a8f2-4877-ba0a-fd2b6645fb94")]
[NativeTypeName("struct IWICPalette : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICPalette
{
	public static ref readonly Guid IID_IWICPalette
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x40, 0x00, 0x00, 0x00,
				0xF2, 0xA8,
				0x77, 0x48,
				0xBA,
				0x0A,
				0xFD,
				0x2B,
				0x66,
				0x45,
				0xFB,
				0x94
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICPalette));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPalette::InitializePredefined"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult InitializePredefined(WICBitmapPaletteType ePaletteType, Bool32 fAddTransparentColor)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPalette*, WICBitmapPaletteType, Bool32, int>)(lpVtbl[3]))((IWICPalette*)Unsafe.AsPointer(ref this), ePaletteType, fAddTransparentColor);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPalette::InitializeCustom"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult InitializeCustom(uint* pColors, uint cCount)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPalette*, uint*, uint, int>)(lpVtbl[4]))((IWICPalette*)Unsafe.AsPointer(ref this), pColors, cCount);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPalette::InitializeFromBitmap"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult InitializeFromBitmap(IWICBitmapSource* pISurface, uint cCount, Bool32 fAddTransparentColor)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPalette*, IWICBitmapSource*, uint, Bool32, int>)(lpVtbl[5]))((IWICPalette*)Unsafe.AsPointer(ref this), pISurface, cCount, fAddTransparentColor);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPalette::InitializeFromPalette"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult InitializeFromPalette(IWICPalette* pIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPalette*, IWICPalette*, int>)(lpVtbl[6]))((IWICPalette*)Unsafe.AsPointer(ref this), pIPalette);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPalette::GetType"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetType(WICBitmapPaletteType* pePaletteType)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPalette*, WICBitmapPaletteType*, int>)(lpVtbl[7]))((IWICPalette*)Unsafe.AsPointer(ref this), pePaletteType);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPalette::GetColorCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetColorCount(uint* pcCount)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPalette*, uint*, int>)(lpVtbl[8]))((IWICPalette*)Unsafe.AsPointer(ref this), pcCount);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPalette::GetColors"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetColors(uint cCount, uint* pColors, uint* pcActualColors)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPalette*, uint, uint*, uint*, int>)(lpVtbl[9]))((IWICPalette*)Unsafe.AsPointer(ref this), cCount, pColors, pcActualColors);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPalette::IsBlackWhite"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult IsBlackWhite(Bool32* pfIsBlackWhite)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPalette*, Bool32*, int>)(lpVtbl[10]))((IWICPalette*)Unsafe.AsPointer(ref this), pfIsBlackWhite);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPalette::IsGrayscale"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult IsGrayscale(Bool32* pfIsGrayscale)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPalette*, Bool32*, int>)(lpVtbl[11]))((IWICPalette*)Unsafe.AsPointer(ref this), pfIsGrayscale);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPalette::HasAlpha"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult HasAlpha(Bool32* pfHasAlpha)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPalette*, Bool32*, int>)(lpVtbl[12]))((IWICPalette*)Unsafe.AsPointer(ref this), pfHasAlpha);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapSource"]/*' />
/// <unmanaged>IWICBitmapSource</unmanaged>
[Guid("00000120-a8f2-4877-ba0a-fd2b6645fb94")]
[NativeTypeName("struct IWICBitmapSource : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICBitmapSource
{
	public static ref readonly Guid IID_IWICBitmapSource
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x20, 0x01, 0x00, 0x00,
				0xF2, 0xA8,
				0x77, 0x48,
				0xBA,
				0x0A,
				0xFD,
				0x2B,
				0x66,
				0x45,
				0xFB,
				0x94
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICBitmapSource));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapSource::GetSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetSize(uint* puiWidth, uint* puiHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapSource*, uint*, uint*, int>)(lpVtbl[3]))((IWICBitmapSource*)Unsafe.AsPointer(ref this), puiWidth, puiHeight);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapSource::GetPixelFormat"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPixelFormat(Guid* pPixelFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapSource*, Guid*, int>)(lpVtbl[4]))((IWICBitmapSource*)Unsafe.AsPointer(ref this), pPixelFormat);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapSource::GetResolution"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetResolution(double* pDpiX, double* pDpiY)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapSource*, double*, double*, int>)(lpVtbl[5]))((IWICBitmapSource*)Unsafe.AsPointer(ref this), pDpiX, pDpiY);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapSource::CopyPalette"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CopyPalette(IWICPalette* pIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapSource*, IWICPalette*, int>)(lpVtbl[6]))((IWICBitmapSource*)Unsafe.AsPointer(ref this), pIPalette);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapSource::CopyPixels"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CopyPixels(System.Drawing.Rectangle* prc, uint cbStride, uint cbBufferSize, byte* pbBuffer)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapSource*, System.Drawing.Rectangle*, uint, uint, byte*, int>)(lpVtbl[7]))((IWICBitmapSource*)Unsafe.AsPointer(ref this), prc, cbStride, cbBufferSize, pbBuffer);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICFormatConverter"]/*' />
/// <unmanaged>IWICFormatConverter</unmanaged>
[Guid("00000301-a8f2-4877-ba0a-fd2b6645fb94")]
[NativeTypeName("struct IWICFormatConverter : IWICBitmapSource")]
[NativeInheritance("IWICBitmapSource")]
public unsafe partial struct IWICFormatConverter
{
	public static ref readonly Guid IID_IWICFormatConverter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x01, 0x03, 0x00, 0x00,
				0xF2, 0xA8,
				0x77, 0x48,
				0xBA,
				0x0A,
				0xFD,
				0x2B,
				0x66,
				0x45,
				0xFB,
				0x94
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICFormatConverter));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICBitmapSource.GetSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetSize(uint* puiWidth, uint* puiHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverter*, uint*, uint*, int>)(lpVtbl[3]))((IWICFormatConverter*)Unsafe.AsPointer(ref this), puiWidth, puiHeight);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetPixelFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPixelFormat(Guid* pPixelFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverter*, Guid*, int>)(lpVtbl[4]))((IWICFormatConverter*)Unsafe.AsPointer(ref this), pPixelFormat);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetResolution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetResolution(double* pDpiX, double* pDpiY)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverter*, double*, double*, int>)(lpVtbl[5]))((IWICFormatConverter*)Unsafe.AsPointer(ref this), pDpiX, pDpiY);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPalette" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CopyPalette(IWICPalette* pIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverter*, IWICPalette*, int>)(lpVtbl[6]))((IWICFormatConverter*)Unsafe.AsPointer(ref this), pIPalette);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPixels" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CopyPixels(System.Drawing.Rectangle* prc, uint cbStride, uint cbBufferSize, byte* pbBuffer)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverter*, System.Drawing.Rectangle*, uint, uint, byte*, int>)(lpVtbl[7]))((IWICFormatConverter*)Unsafe.AsPointer(ref this), prc, cbStride, cbBufferSize, pbBuffer);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICFormatConverter::Initialize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult Initialize(IWICBitmapSource* pISource, Guid* dstFormat, WICBitmapDitherType dither, IWICPalette* pIPalette, double alphaThresholdPercent, WICBitmapPaletteType paletteTranslate)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverter*, IWICBitmapSource*, Guid*, WICBitmapDitherType, IWICPalette*, double, WICBitmapPaletteType, int>)(lpVtbl[8]))((IWICFormatConverter*)Unsafe.AsPointer(ref this), pISource, dstFormat, dither, pIPalette, alphaThresholdPercent, paletteTranslate);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICFormatConverter::CanConvert"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CanConvert(Guid* srcPixelFormat, Guid* dstPixelFormat, Bool32* pfCanConvert)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverter*, Guid*, Guid*, Bool32*, int>)(lpVtbl[9]))((IWICFormatConverter*)Unsafe.AsPointer(ref this), srcPixelFormat, dstPixelFormat, pfCanConvert);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICPlanarFormatConverter"]/*' />
/// <unmanaged>IWICPlanarFormatConverter</unmanaged>
[Guid("bebee9cb-83b0-4dcc-8132-b0aaa55eac96")]
[NativeTypeName("struct IWICPlanarFormatConverter : IWICBitmapSource")]
[NativeInheritance("IWICBitmapSource")]
public unsafe partial struct IWICPlanarFormatConverter
{
	public static ref readonly Guid IID_IWICPlanarFormatConverter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCB, 0xE9, 0xBE, 0xBE,
				0xB0, 0x83,
				0xCC, 0x4D,
				0x81,
				0x32,
				0xB0,
				0xAA,
				0xA5,
				0x5E,
				0xAC,
				0x96
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICPlanarFormatConverter));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICBitmapSource.GetSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetSize(uint* puiWidth, uint* puiHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPlanarFormatConverter*, uint*, uint*, int>)(lpVtbl[3]))((IWICPlanarFormatConverter*)Unsafe.AsPointer(ref this), puiWidth, puiHeight);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetPixelFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPixelFormat(Guid* pPixelFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPlanarFormatConverter*, Guid*, int>)(lpVtbl[4]))((IWICPlanarFormatConverter*)Unsafe.AsPointer(ref this), pPixelFormat);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetResolution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetResolution(double* pDpiX, double* pDpiY)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPlanarFormatConverter*, double*, double*, int>)(lpVtbl[5]))((IWICPlanarFormatConverter*)Unsafe.AsPointer(ref this), pDpiX, pDpiY);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPalette" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CopyPalette(IWICPalette* pIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPlanarFormatConverter*, IWICPalette*, int>)(lpVtbl[6]))((IWICPlanarFormatConverter*)Unsafe.AsPointer(ref this), pIPalette);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPixels" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CopyPixels(System.Drawing.Rectangle* prc, uint cbStride, uint cbBufferSize, byte* pbBuffer)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPlanarFormatConverter*, System.Drawing.Rectangle*, uint, uint, byte*, int>)(lpVtbl[7]))((IWICPlanarFormatConverter*)Unsafe.AsPointer(ref this), prc, cbStride, cbBufferSize, pbBuffer);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPlanarFormatConverter::Initialize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult Initialize(IWICBitmapSource** ppPlanes, uint cPlanes, Guid* dstFormat, WICBitmapDitherType dither, IWICPalette* pIPalette, double alphaThresholdPercent, WICBitmapPaletteType paletteTranslate)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPlanarFormatConverter*, IWICBitmapSource**, uint, Guid*, WICBitmapDitherType, IWICPalette*, double, WICBitmapPaletteType, int>)(lpVtbl[8]))((IWICPlanarFormatConverter*)Unsafe.AsPointer(ref this), ppPlanes, cPlanes, dstFormat, dither, pIPalette, alphaThresholdPercent, paletteTranslate);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPlanarFormatConverter::CanConvert"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CanConvert(Guid* pSrcPixelFormats, uint cSrcPlanes, Guid* dstPixelFormat, Bool32* pfCanConvert)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPlanarFormatConverter*, Guid*, uint, Guid*, Bool32*, int>)(lpVtbl[9]))((IWICPlanarFormatConverter*)Unsafe.AsPointer(ref this), pSrcPixelFormats, cSrcPlanes, dstPixelFormat, pfCanConvert);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapScaler"]/*' />
/// <unmanaged>IWICBitmapScaler</unmanaged>
[Guid("00000302-a8f2-4877-ba0a-fd2b6645fb94")]
[NativeTypeName("struct IWICBitmapScaler : IWICBitmapSource")]
[NativeInheritance("IWICBitmapSource")]
public unsafe partial struct IWICBitmapScaler
{
	public static ref readonly Guid IID_IWICBitmapScaler
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x02, 0x03, 0x00, 0x00,
				0xF2, 0xA8,
				0x77, 0x48,
				0xBA,
				0x0A,
				0xFD,
				0x2B,
				0x66,
				0x45,
				0xFB,
				0x94
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICBitmapScaler));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICBitmapSource.GetSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetSize(uint* puiWidth, uint* puiHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapScaler*, uint*, uint*, int>)(lpVtbl[3]))((IWICBitmapScaler*)Unsafe.AsPointer(ref this), puiWidth, puiHeight);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetPixelFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPixelFormat(Guid* pPixelFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapScaler*, Guid*, int>)(lpVtbl[4]))((IWICBitmapScaler*)Unsafe.AsPointer(ref this), pPixelFormat);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetResolution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetResolution(double* pDpiX, double* pDpiY)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapScaler*, double*, double*, int>)(lpVtbl[5]))((IWICBitmapScaler*)Unsafe.AsPointer(ref this), pDpiX, pDpiY);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPalette" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CopyPalette(IWICPalette* pIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapScaler*, IWICPalette*, int>)(lpVtbl[6]))((IWICBitmapScaler*)Unsafe.AsPointer(ref this), pIPalette);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPixels" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CopyPixels(System.Drawing.Rectangle* prc, uint cbStride, uint cbBufferSize, byte* pbBuffer)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapScaler*, System.Drawing.Rectangle*, uint, uint, byte*, int>)(lpVtbl[7]))((IWICBitmapScaler*)Unsafe.AsPointer(ref this), prc, cbStride, cbBufferSize, pbBuffer);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapScaler::Initialize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult Initialize(IWICBitmapSource* pISource, uint uiWidth, uint uiHeight, WICBitmapInterpolationMode mode)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapScaler*, IWICBitmapSource*, uint, uint, WICBitmapInterpolationMode, int>)(lpVtbl[8]))((IWICBitmapScaler*)Unsafe.AsPointer(ref this), pISource, uiWidth, uiHeight, mode);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapClipper"]/*' />
/// <unmanaged>IWICBitmapClipper</unmanaged>
[Guid("e4fbcf03-223d-4e81-9333-d635556dd1b5")]
[NativeTypeName("struct IWICBitmapClipper : IWICBitmapSource")]
[NativeInheritance("IWICBitmapSource")]
public unsafe partial struct IWICBitmapClipper
{
	public static ref readonly Guid IID_IWICBitmapClipper
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x03, 0xCF, 0xFB, 0xE4,
				0x3D, 0x22,
				0x81, 0x4E,
				0x93,
				0x33,
				0xD6,
				0x35,
				0x55,
				0x6D,
				0xD1,
				0xB5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICBitmapClipper));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICBitmapSource.GetSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetSize(uint* puiWidth, uint* puiHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapClipper*, uint*, uint*, int>)(lpVtbl[3]))((IWICBitmapClipper*)Unsafe.AsPointer(ref this), puiWidth, puiHeight);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetPixelFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPixelFormat(Guid* pPixelFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapClipper*, Guid*, int>)(lpVtbl[4]))((IWICBitmapClipper*)Unsafe.AsPointer(ref this), pPixelFormat);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetResolution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetResolution(double* pDpiX, double* pDpiY)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapClipper*, double*, double*, int>)(lpVtbl[5]))((IWICBitmapClipper*)Unsafe.AsPointer(ref this), pDpiX, pDpiY);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPalette" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CopyPalette(IWICPalette* pIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapClipper*, IWICPalette*, int>)(lpVtbl[6]))((IWICBitmapClipper*)Unsafe.AsPointer(ref this), pIPalette);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPixels" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CopyPixels(System.Drawing.Rectangle* prc, uint cbStride, uint cbBufferSize, byte* pbBuffer)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapClipper*, System.Drawing.Rectangle*, uint, uint, byte*, int>)(lpVtbl[7]))((IWICBitmapClipper*)Unsafe.AsPointer(ref this), prc, cbStride, cbBufferSize, pbBuffer);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapClipper::Initialize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult Initialize(IWICBitmapSource* pISource, System.Drawing.Rectangle* prc)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapClipper*, IWICBitmapSource*, System.Drawing.Rectangle*, int>)(lpVtbl[8]))((IWICBitmapClipper*)Unsafe.AsPointer(ref this), pISource, prc);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFlipRotator"]/*' />
/// <unmanaged>IWICBitmapFlipRotator</unmanaged>
[Guid("5009834f-2d6a-41ce-9e1b-17c5aff7a782")]
[NativeTypeName("struct IWICBitmapFlipRotator : IWICBitmapSource")]
[NativeInheritance("IWICBitmapSource")]
public unsafe partial struct IWICBitmapFlipRotator
{
	public static ref readonly Guid IID_IWICBitmapFlipRotator
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x4F, 0x83, 0x09, 0x50,
				0x6A, 0x2D,
				0xCE, 0x41,
				0x9E,
				0x1B,
				0x17,
				0xC5,
				0xAF,
				0xF7,
				0xA7,
				0x82
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICBitmapFlipRotator));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICBitmapSource.GetSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetSize(uint* puiWidth, uint* puiHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFlipRotator*, uint*, uint*, int>)(lpVtbl[3]))((IWICBitmapFlipRotator*)Unsafe.AsPointer(ref this), puiWidth, puiHeight);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetPixelFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPixelFormat(Guid* pPixelFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFlipRotator*, Guid*, int>)(lpVtbl[4]))((IWICBitmapFlipRotator*)Unsafe.AsPointer(ref this), pPixelFormat);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetResolution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetResolution(double* pDpiX, double* pDpiY)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFlipRotator*, double*, double*, int>)(lpVtbl[5]))((IWICBitmapFlipRotator*)Unsafe.AsPointer(ref this), pDpiX, pDpiY);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPalette" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CopyPalette(IWICPalette* pIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFlipRotator*, IWICPalette*, int>)(lpVtbl[6]))((IWICBitmapFlipRotator*)Unsafe.AsPointer(ref this), pIPalette);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPixels" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CopyPixels(System.Drawing.Rectangle* prc, uint cbStride, uint cbBufferSize, byte* pbBuffer)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFlipRotator*, System.Drawing.Rectangle*, uint, uint, byte*, int>)(lpVtbl[7]))((IWICBitmapFlipRotator*)Unsafe.AsPointer(ref this), prc, cbStride, cbBufferSize, pbBuffer);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFlipRotator::Initialize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult Initialize(IWICBitmapSource* pISource, WICBitmapTransformOptions options)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFlipRotator*, IWICBitmapSource*, WICBitmapTransformOptions, int>)(lpVtbl[8]))((IWICBitmapFlipRotator*)Unsafe.AsPointer(ref this), pISource, options);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapLock"]/*' />
/// <unmanaged>IWICBitmapLock</unmanaged>
[Guid("00000123-a8f2-4877-ba0a-fd2b6645fb94")]
[NativeTypeName("struct IWICBitmapLock : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICBitmapLock
{
	public static ref readonly Guid IID_IWICBitmapLock
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x23, 0x01, 0x00, 0x00,
				0xF2, 0xA8,
				0x77, 0x48,
				0xBA,
				0x0A,
				0xFD,
				0x2B,
				0x66,
				0x45,
				0xFB,
				0x94
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICBitmapLock));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapLock::GetSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetSize(uint* puiWidth, uint* puiHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapLock*, uint*, uint*, int>)(lpVtbl[3]))((IWICBitmapLock*)Unsafe.AsPointer(ref this), puiWidth, puiHeight);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapLock::GetStride"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetStride(uint* pcbStride)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapLock*, uint*, int>)(lpVtbl[4]))((IWICBitmapLock*)Unsafe.AsPointer(ref this), pcbStride);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapLock::GetDataPointer"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetDataPointer(uint* pcbBufferSize, byte** ppbData)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapLock*, uint*, byte**, int>)(lpVtbl[5]))((IWICBitmapLock*)Unsafe.AsPointer(ref this), pcbBufferSize, ppbData);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapLock::GetPixelFormat"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetPixelFormat(Guid* pPixelFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapLock*, Guid*, int>)(lpVtbl[6]))((IWICBitmapLock*)Unsafe.AsPointer(ref this), pPixelFormat);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmap"]/*' />
/// <unmanaged>IWICBitmap</unmanaged>
[Guid("00000121-a8f2-4877-ba0a-fd2b6645fb94")]
[NativeTypeName("struct IWICBitmap : IWICBitmapSource")]
[NativeInheritance("IWICBitmapSource")]
public unsafe partial struct IWICBitmap
{
	public static ref readonly Guid IID_IWICBitmap
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x21, 0x01, 0x00, 0x00,
				0xF2, 0xA8,
				0x77, 0x48,
				0xBA,
				0x0A,
				0xFD,
				0x2B,
				0x66,
				0x45,
				0xFB,
				0x94
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICBitmap));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICBitmapSource.GetSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetSize(uint* puiWidth, uint* puiHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmap*, uint*, uint*, int>)(lpVtbl[3]))((IWICBitmap*)Unsafe.AsPointer(ref this), puiWidth, puiHeight);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetPixelFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPixelFormat(Guid* pPixelFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmap*, Guid*, int>)(lpVtbl[4]))((IWICBitmap*)Unsafe.AsPointer(ref this), pPixelFormat);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetResolution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetResolution(double* pDpiX, double* pDpiY)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmap*, double*, double*, int>)(lpVtbl[5]))((IWICBitmap*)Unsafe.AsPointer(ref this), pDpiX, pDpiY);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPalette" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CopyPalette(IWICPalette* pIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmap*, IWICPalette*, int>)(lpVtbl[6]))((IWICBitmap*)Unsafe.AsPointer(ref this), pIPalette);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPixels" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CopyPixels(System.Drawing.Rectangle* prc, uint cbStride, uint cbBufferSize, byte* pbBuffer)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmap*, System.Drawing.Rectangle*, uint, uint, byte*, int>)(lpVtbl[7]))((IWICBitmap*)Unsafe.AsPointer(ref this), prc, cbStride, cbBufferSize, pbBuffer);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmap::Lock"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult Lock(System.Drawing.Rectangle* prcLock, WICBitmapLockFlags flags, IWICBitmapLock** ppILock)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmap*, System.Drawing.Rectangle*, WICBitmapLockFlags, IWICBitmapLock**, int>)(lpVtbl[8]))((IWICBitmap*)Unsafe.AsPointer(ref this), prcLock, flags, ppILock);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmap::SetPalette"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetPalette(IWICPalette* pIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmap*, IWICPalette*, int>)(lpVtbl[9]))((IWICBitmap*)Unsafe.AsPointer(ref this), pIPalette);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmap::SetResolution"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetResolution(double dpiX, double dpiY)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmap*, double, double, int>)(lpVtbl[10]))((IWICBitmap*)Unsafe.AsPointer(ref this), dpiX, dpiY);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICColorContext"]/*' />
/// <unmanaged>IWICColorContext</unmanaged>
[Guid("3c613a02-34b2-44ea-9a7c-45aea9c6fd6d")]
[NativeTypeName("struct IWICColorContext : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICColorContext
{
	public static ref readonly Guid IID_IWICColorContext
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x02, 0x3A, 0x61, 0x3C,
				0xB2, 0x34,
				0xEA, 0x44,
				0x9A,
				0x7C,
				0x45,
				0xAE,
				0xA9,
				0xC6,
				0xFD,
				0x6D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICColorContext));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICColorContext::InitializeFromFilename"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult InitializeFromFilename(ushort* wzFilename)
	{
		return ((delegate* unmanaged[Stdcall]<IWICColorContext*, ushort*, int>)(lpVtbl[3]))((IWICColorContext*)Unsafe.AsPointer(ref this), wzFilename);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICColorContext::InitializeFromMemory"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult InitializeFromMemory(byte* pbBuffer, uint cbBufferSize)
	{
		return ((delegate* unmanaged[Stdcall]<IWICColorContext*, byte*, uint, int>)(lpVtbl[4]))((IWICColorContext*)Unsafe.AsPointer(ref this), pbBuffer, cbBufferSize);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICColorContext::InitializeFromExifColorSpace"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult InitializeFromExifColorSpace(uint value)
	{
		return ((delegate* unmanaged[Stdcall]<IWICColorContext*, uint, int>)(lpVtbl[5]))((IWICColorContext*)Unsafe.AsPointer(ref this), value);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICColorContext::GetType"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetType(WICColorContextType* pType)
	{
		return ((delegate* unmanaged[Stdcall]<IWICColorContext*, WICColorContextType*, int>)(lpVtbl[6]))((IWICColorContext*)Unsafe.AsPointer(ref this), pType);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICColorContext::GetProfileBytes"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetProfileBytes(uint cbBuffer, byte* pbBuffer, uint* pcbActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICColorContext*, uint, byte*, uint*, int>)(lpVtbl[7]))((IWICColorContext*)Unsafe.AsPointer(ref this), cbBuffer, pbBuffer, pcbActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICColorContext::GetExifColorSpace"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetExifColorSpace(uint* pValue)
	{
		return ((delegate* unmanaged[Stdcall]<IWICColorContext*, uint*, int>)(lpVtbl[8]))((IWICColorContext*)Unsafe.AsPointer(ref this), pValue);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICColorTransform"]/*' />
/// <unmanaged>IWICColorTransform</unmanaged>
[Guid("b66f034f-d0e2-40ab-b436-6de39e321a94")]
[NativeTypeName("struct IWICColorTransform : IWICBitmapSource")]
[NativeInheritance("IWICBitmapSource")]
public unsafe partial struct IWICColorTransform
{
	public static ref readonly Guid IID_IWICColorTransform
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x4F, 0x03, 0x6F, 0xB6,
				0xE2, 0xD0,
				0xAB, 0x40,
				0xB4,
				0x36,
				0x6D,
				0xE3,
				0x9E,
				0x32,
				0x1A,
				0x94
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICColorTransform));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICBitmapSource.GetSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetSize(uint* puiWidth, uint* puiHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IWICColorTransform*, uint*, uint*, int>)(lpVtbl[3]))((IWICColorTransform*)Unsafe.AsPointer(ref this), puiWidth, puiHeight);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetPixelFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPixelFormat(Guid* pPixelFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICColorTransform*, Guid*, int>)(lpVtbl[4]))((IWICColorTransform*)Unsafe.AsPointer(ref this), pPixelFormat);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetResolution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetResolution(double* pDpiX, double* pDpiY)
	{
		return ((delegate* unmanaged[Stdcall]<IWICColorTransform*, double*, double*, int>)(lpVtbl[5]))((IWICColorTransform*)Unsafe.AsPointer(ref this), pDpiX, pDpiY);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPalette" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CopyPalette(IWICPalette* pIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICColorTransform*, IWICPalette*, int>)(lpVtbl[6]))((IWICColorTransform*)Unsafe.AsPointer(ref this), pIPalette);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPixels" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CopyPixels(System.Drawing.Rectangle* prc, uint cbStride, uint cbBufferSize, byte* pbBuffer)
	{
		return ((delegate* unmanaged[Stdcall]<IWICColorTransform*, System.Drawing.Rectangle*, uint, uint, byte*, int>)(lpVtbl[7]))((IWICColorTransform*)Unsafe.AsPointer(ref this), prc, cbStride, cbBufferSize, pbBuffer);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICColorTransform::Initialize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult Initialize(IWICBitmapSource* pIBitmapSource, IWICColorContext* pIContextSource, IWICColorContext* pIContextDest, Guid* pixelFmtDest)
	{
		return ((delegate* unmanaged[Stdcall]<IWICColorTransform*, IWICBitmapSource*, IWICColorContext*, IWICColorContext*, Guid*, int>)(lpVtbl[8]))((IWICColorTransform*)Unsafe.AsPointer(ref this), pIBitmapSource, pIContextSource, pIContextDest, pixelFmtDest);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICFastMetadataEncoder"]/*' />
/// <unmanaged>IWICFastMetadataEncoder</unmanaged>
[Guid("b84e2c09-78c9-4ac4-8bd3-524ae1663a2f")]
[NativeTypeName("struct IWICFastMetadataEncoder : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICFastMetadataEncoder
{
	public static ref readonly Guid IID_IWICFastMetadataEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x09, 0x2C, 0x4E, 0xB8,
				0xC9, 0x78,
				0xC4, 0x4A,
				0x8B,
				0xD3,
				0x52,
				0x4A,
				0xE1,
				0x66,
				0x3A,
				0x2F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICFastMetadataEncoder));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICFastMetadataEncoder::Commit"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult Commit()
	{
		return ((delegate* unmanaged[Stdcall]<IWICFastMetadataEncoder*, int>)(lpVtbl[3]))((IWICFastMetadataEncoder*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICFastMetadataEncoder::GetMetadataQueryWriter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetMetadataQueryWriter(IWICMetadataQueryWriter** ppIMetadataQueryWriter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFastMetadataEncoder*, IWICMetadataQueryWriter**, int>)(lpVtbl[4]))((IWICFastMetadataEncoder*)Unsafe.AsPointer(ref this), ppIMetadataQueryWriter);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICStream"]/*' />
/// <unmanaged>IWICStream</unmanaged>
[Guid("135ff860-22b7-4ddf-b0f6-218f4f299a43")]
[NativeTypeName("struct IWICStream : IStream")]
[NativeInheritance("IStream")]
public unsafe partial struct IWICStream
{
	public static ref readonly Guid IID_IWICStream
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x60, 0xF8, 0x5F, 0x13,
				0xB7, 0x22,
				0xDF, 0x4D,
				0xB0,
				0xF6,
				0x21,
				0x8F,
				0x4F,
				0x29,
				0x9A,
				0x43
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICStream));

	public void** lpVtbl;

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICStream::InitializeFromIStream"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult InitializeFromIStream(Com.IStream* pIStream)
	{
		return ((delegate* unmanaged[Stdcall]<IWICStream*, Com.IStream*, int>)(lpVtbl[0]))((IWICStream*)Unsafe.AsPointer(ref this), pIStream);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICStream::InitializeFromFilename"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	public HResult InitializeFromFilename(ushort* wzFileName, uint dwDesiredAccess)
	{
		return ((delegate* unmanaged[Stdcall]<IWICStream*, ushort*, uint, int>)(lpVtbl[1]))((IWICStream*)Unsafe.AsPointer(ref this), wzFileName, dwDesiredAccess);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICStream::InitializeFromMemory"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	public HResult InitializeFromMemory(byte* pbBuffer, uint cbBufferSize)
	{
		return ((delegate* unmanaged[Stdcall]<IWICStream*, byte*, uint, int>)(lpVtbl[2]))((IWICStream*)Unsafe.AsPointer(ref this), pbBuffer, cbBufferSize);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICStream::InitializeFromIStreamRegion"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult InitializeFromIStreamRegion(Com.IStream* pIStream, ULargeInteger ulOffset, ULargeInteger ulMaxSize)
	{
		return ((delegate* unmanaged[Stdcall]<IWICStream*, Com.IStream*, ULargeInteger, ULargeInteger, int>)(lpVtbl[3]))((IWICStream*)Unsafe.AsPointer(ref this), pIStream, ulOffset, ulMaxSize);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICEnumMetadataItem"]/*' />
/// <unmanaged>IWICEnumMetadataItem</unmanaged>
[Guid("dc2bb46d-3f07-481e-8625-220c4aedbb33")]
[NativeTypeName("struct IWICEnumMetadataItem : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICEnumMetadataItem
{
	public static ref readonly Guid IID_IWICEnumMetadataItem
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x6D, 0xB4, 0x2B, 0xDC,
				0x07, 0x3F,
				0x1E, 0x48,
				0x86,
				0x25,
				0x22,
				0x0C,
				0x4A,
				0xED,
				0xBB,
				0x33
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICEnumMetadataItem));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICEnumMetadataItem::Next"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult Next(uint celt, Com.Variant** rgeltSchema, Com.Variant** rgeltId, Com.Variant** rgeltValue, uint* pceltFetched)
	{
		return ((delegate* unmanaged[Stdcall]<IWICEnumMetadataItem*, uint, Com.Variant**, Com.Variant**, Com.Variant**, uint*, int>)(lpVtbl[3]))((IWICEnumMetadataItem*)Unsafe.AsPointer(ref this), celt, rgeltSchema, rgeltId, rgeltValue, pceltFetched);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICEnumMetadataItem::Skip"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult Skip(uint celt)
	{
		return ((delegate* unmanaged[Stdcall]<IWICEnumMetadataItem*, uint, int>)(lpVtbl[4]))((IWICEnumMetadataItem*)Unsafe.AsPointer(ref this), celt);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICEnumMetadataItem::Reset"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult Reset()
	{
		return ((delegate* unmanaged[Stdcall]<IWICEnumMetadataItem*, int>)(lpVtbl[5]))((IWICEnumMetadataItem*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICEnumMetadataItem::Clone"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult Clone(IWICEnumMetadataItem** ppIEnumMetadataItem)
	{
		return ((delegate* unmanaged[Stdcall]<IWICEnumMetadataItem*, IWICEnumMetadataItem**, int>)(lpVtbl[6]))((IWICEnumMetadataItem*)Unsafe.AsPointer(ref this), ppIEnumMetadataItem);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataQueryReader"]/*' />
/// <unmanaged>IWICMetadataQueryReader</unmanaged>
[Guid("30989668-e1c9-4597-b395-458eedb808df")]
[NativeTypeName("struct IWICMetadataQueryReader : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICMetadataQueryReader
{
	public static ref readonly Guid IID_IWICMetadataQueryReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x68, 0x96, 0x98, 0x30,
				0xC9, 0xE1,
				0x97, 0x45,
				0xB3,
				0x95,
				0x45,
				0x8E,
				0xED,
				0xB8,
				0x08,
				0xDF
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICMetadataQueryReader));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataQueryReader::GetContainerFormat"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetContainerFormat(Guid* pguidContainerFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataQueryReader*, Guid*, int>)(lpVtbl[3]))((IWICMetadataQueryReader*)Unsafe.AsPointer(ref this), pguidContainerFormat);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataQueryReader::GetLocation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetLocation(uint cchMaxLength, ushort* wzNamespace, uint* pcchActualLength)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataQueryReader*, uint, ushort*, uint*, int>)(lpVtbl[4]))((IWICMetadataQueryReader*)Unsafe.AsPointer(ref this), cchMaxLength, wzNamespace, pcchActualLength);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataQueryReader::GetMetadataByName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetMetadataByName(ushort* wzName, Com.Variant** pvarValue)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataQueryReader*, ushort*, Com.Variant**, int>)(lpVtbl[5]))((IWICMetadataQueryReader*)Unsafe.AsPointer(ref this), wzName, pvarValue);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataQueryReader::GetEnumerator"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetEnumerator(Com.IEnumString** ppIEnumString)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataQueryReader*, Com.IEnumString**, int>)(lpVtbl[6]))((IWICMetadataQueryReader*)Unsafe.AsPointer(ref this), ppIEnumString);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataQueryWriter"]/*' />
/// <unmanaged>IWICMetadataQueryWriter</unmanaged>
[Guid("a721791a-0def-4d06-bd91-2118bf1db10b")]
[NativeTypeName("struct IWICMetadataQueryWriter : IWICMetadataQueryReader")]
[NativeInheritance("IWICMetadataQueryReader")]
public unsafe partial struct IWICMetadataQueryWriter
{
	public static ref readonly Guid IID_IWICMetadataQueryWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1A, 0x79, 0x21, 0xA7,
				0xEF, 0x0D,
				0x06, 0x4D,
				0xBD,
				0x91,
				0x21,
				0x18,
				0xBF,
				0x1D,
				0xB1,
				0x0B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICMetadataQueryWriter));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICMetadataQueryReader.GetContainerFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetContainerFormat(Guid* pguidContainerFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataQueryWriter*, Guid*, int>)(lpVtbl[3]))((IWICMetadataQueryWriter*)Unsafe.AsPointer(ref this), pguidContainerFormat);
	}

	/// <inheritdoc cref="IWICMetadataQueryReader.GetLocation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetLocation(uint cchMaxLength, ushort* wzNamespace, uint* pcchActualLength)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataQueryWriter*, uint, ushort*, uint*, int>)(lpVtbl[4]))((IWICMetadataQueryWriter*)Unsafe.AsPointer(ref this), cchMaxLength, wzNamespace, pcchActualLength);
	}

	/// <inheritdoc cref="IWICMetadataQueryReader.GetMetadataByName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetMetadataByName(ushort* wzName, Com.Variant** pvarValue)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataQueryWriter*, ushort*, Com.Variant**, int>)(lpVtbl[5]))((IWICMetadataQueryWriter*)Unsafe.AsPointer(ref this), wzName, pvarValue);
	}

	/// <inheritdoc cref="IWICMetadataQueryReader.GetEnumerator" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetEnumerator(Com.IEnumString** ppIEnumString)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataQueryWriter*, Com.IEnumString**, int>)(lpVtbl[6]))((IWICMetadataQueryWriter*)Unsafe.AsPointer(ref this), ppIEnumString);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataQueryWriter::SetMetadataByName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetMetadataByName(ushort* wzName, Com.Variant* pvarValue)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataQueryWriter*, ushort*, Com.Variant*, int>)(lpVtbl[7]))((IWICMetadataQueryWriter*)Unsafe.AsPointer(ref this), wzName, pvarValue);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataQueryWriter::RemoveMetadataByName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult RemoveMetadataByName(ushort* wzName)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataQueryWriter*, ushort*, int>)(lpVtbl[8]))((IWICMetadataQueryWriter*)Unsafe.AsPointer(ref this), wzName);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapEncoder"]/*' />
/// <unmanaged>IWICBitmapEncoder</unmanaged>
[Guid("00000103-a8f2-4877-ba0a-fd2b6645fb94")]
[NativeTypeName("struct IWICBitmapEncoder : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICBitmapEncoder
{
	public static ref readonly Guid IID_IWICBitmapEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x03, 0x01, 0x00, 0x00,
				0xF2, 0xA8,
				0x77, 0x48,
				0xBA,
				0x0A,
				0xFD,
				0x2B,
				0x66,
				0x45,
				0xFB,
				0x94
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICBitmapEncoder));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapEncoder::Initialize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult Initialize(Com.IStream* pIStream, WICBitmapEncoderCacheOption cacheOption)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoder*, Com.IStream*, WICBitmapEncoderCacheOption, int>)(lpVtbl[3]))((IWICBitmapEncoder*)Unsafe.AsPointer(ref this), pIStream, cacheOption);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapEncoder::GetContainerFormat"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetContainerFormat(Guid* pguidContainerFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoder*, Guid*, int>)(lpVtbl[4]))((IWICBitmapEncoder*)Unsafe.AsPointer(ref this), pguidContainerFormat);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapEncoder::GetEncoderInfo"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetEncoderInfo(IWICBitmapEncoderInfo** ppIEncoderInfo)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoder*, IWICBitmapEncoderInfo**, int>)(lpVtbl[5]))((IWICBitmapEncoder*)Unsafe.AsPointer(ref this), ppIEncoderInfo);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapEncoder::SetColorContexts"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetColorContexts(uint cCount, IWICColorContext** ppIColorContext)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoder*, uint, IWICColorContext**, int>)(lpVtbl[6]))((IWICBitmapEncoder*)Unsafe.AsPointer(ref this), cCount, ppIColorContext);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapEncoder::SetPalette"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetPalette(IWICPalette* pIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoder*, IWICPalette*, int>)(lpVtbl[7]))((IWICBitmapEncoder*)Unsafe.AsPointer(ref this), pIPalette);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapEncoder::SetThumbnail"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetThumbnail(IWICBitmapSource* pIThumbnail)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoder*, IWICBitmapSource*, int>)(lpVtbl[8]))((IWICBitmapEncoder*)Unsafe.AsPointer(ref this), pIThumbnail);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapEncoder::SetPreview"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetPreview(IWICBitmapSource* pIPreview)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoder*, IWICBitmapSource*, int>)(lpVtbl[9]))((IWICBitmapEncoder*)Unsafe.AsPointer(ref this), pIPreview);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapEncoder::CreateNewFrame"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult CreateNewFrame(IWICBitmapFrameEncode** ppIFrameEncode, Com.IPropertyBag2** ppIEncoderOptions)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoder*, IWICBitmapFrameEncode**, Com.IPropertyBag2**, int>)(lpVtbl[10]))((IWICBitmapEncoder*)Unsafe.AsPointer(ref this), ppIFrameEncode, ppIEncoderOptions);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapEncoder::Commit"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult Commit()
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoder*, int>)(lpVtbl[11]))((IWICBitmapEncoder*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapEncoder::GetMetadataQueryWriter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetMetadataQueryWriter(IWICMetadataQueryWriter** ppIMetadataQueryWriter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoder*, IWICMetadataQueryWriter**, int>)(lpVtbl[12]))((IWICBitmapEncoder*)Unsafe.AsPointer(ref this), ppIMetadataQueryWriter);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFrameEncode"]/*' />
/// <unmanaged>IWICBitmapFrameEncode</unmanaged>
[Guid("00000105-a8f2-4877-ba0a-fd2b6645fb94")]
[NativeTypeName("struct IWICBitmapFrameEncode : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICBitmapFrameEncode
{
	public static ref readonly Guid IID_IWICBitmapFrameEncode
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x05, 0x01, 0x00, 0x00,
				0xF2, 0xA8,
				0x77, 0x48,
				0xBA,
				0x0A,
				0xFD,
				0x2B,
				0x66,
				0x45,
				0xFB,
				0x94
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICBitmapFrameEncode));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFrameEncode::Initialize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult Initialize(Com.IPropertyBag2* pIEncoderOptions)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameEncode*, Com.IPropertyBag2*, int>)(lpVtbl[3]))((IWICBitmapFrameEncode*)Unsafe.AsPointer(ref this), pIEncoderOptions);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFrameEncode::SetSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetSize(uint uiWidth, uint uiHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameEncode*, uint, uint, int>)(lpVtbl[4]))((IWICBitmapFrameEncode*)Unsafe.AsPointer(ref this), uiWidth, uiHeight);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFrameEncode::SetResolution"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetResolution(double dpiX, double dpiY)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameEncode*, double, double, int>)(lpVtbl[5]))((IWICBitmapFrameEncode*)Unsafe.AsPointer(ref this), dpiX, dpiY);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFrameEncode::SetPixelFormat"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPixelFormat(Guid* pPixelFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameEncode*, Guid*, int>)(lpVtbl[6]))((IWICBitmapFrameEncode*)Unsafe.AsPointer(ref this), pPixelFormat);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFrameEncode::SetColorContexts"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetColorContexts(uint cCount, IWICColorContext** ppIColorContext)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameEncode*, uint, IWICColorContext**, int>)(lpVtbl[7]))((IWICBitmapFrameEncode*)Unsafe.AsPointer(ref this), cCount, ppIColorContext);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFrameEncode::SetPalette"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetPalette(IWICPalette* pIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameEncode*, IWICPalette*, int>)(lpVtbl[8]))((IWICBitmapFrameEncode*)Unsafe.AsPointer(ref this), pIPalette);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFrameEncode::SetThumbnail"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetThumbnail(IWICBitmapSource* pIThumbnail)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameEncode*, IWICBitmapSource*, int>)(lpVtbl[9]))((IWICBitmapFrameEncode*)Unsafe.AsPointer(ref this), pIThumbnail);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFrameEncode::WritePixels"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult WritePixels(uint lineCount, uint cbStride, uint cbBufferSize, byte* pbPixels)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameEncode*, uint, uint, uint, byte*, int>)(lpVtbl[10]))((IWICBitmapFrameEncode*)Unsafe.AsPointer(ref this), lineCount, cbStride, cbBufferSize, pbPixels);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFrameEncode::WriteSource"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult WriteSource(IWICBitmapSource* pIBitmapSource, System.Drawing.Rectangle* prc)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameEncode*, IWICBitmapSource*, System.Drawing.Rectangle*, int>)(lpVtbl[11]))((IWICBitmapFrameEncode*)Unsafe.AsPointer(ref this), pIBitmapSource, prc);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFrameEncode::Commit"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult Commit()
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameEncode*, int>)(lpVtbl[12]))((IWICBitmapFrameEncode*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFrameEncode::GetMetadataQueryWriter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetMetadataQueryWriter(IWICMetadataQueryWriter** ppIMetadataQueryWriter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameEncode*, IWICMetadataQueryWriter**, int>)(lpVtbl[13]))((IWICBitmapFrameEncode*)Unsafe.AsPointer(ref this), ppIMetadataQueryWriter);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICPlanarBitmapFrameEncode"]/*' />
/// <unmanaged>IWICPlanarBitmapFrameEncode</unmanaged>
[Guid("f928b7b8-2221-40c1-b72e-7e82f1974d1a")]
[NativeTypeName("struct IWICPlanarBitmapFrameEncode : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICPlanarBitmapFrameEncode
{
	public static ref readonly Guid IID_IWICPlanarBitmapFrameEncode
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB8, 0xB7, 0x28, 0xF9,
				0x21, 0x22,
				0xC1, 0x40,
				0xB7,
				0x2E,
				0x7E,
				0x82,
				0xF1,
				0x97,
				0x4D,
				0x1A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICPlanarBitmapFrameEncode));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPlanarBitmapFrameEncode::WritePixels"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult WritePixels(uint lineCount, WICBitmapPlane* pPlanes, uint cPlanes)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPlanarBitmapFrameEncode*, uint, WICBitmapPlane*, uint, int>)(lpVtbl[3]))((IWICPlanarBitmapFrameEncode*)Unsafe.AsPointer(ref this), lineCount, pPlanes, cPlanes);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPlanarBitmapFrameEncode::WriteSource"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult WriteSource(IWICBitmapSource** ppPlanes, uint cPlanes, System.Drawing.Rectangle* prcSource)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPlanarBitmapFrameEncode*, IWICBitmapSource**, uint, System.Drawing.Rectangle*, int>)(lpVtbl[4]))((IWICPlanarBitmapFrameEncode*)Unsafe.AsPointer(ref this), ppPlanes, cPlanes, prcSource);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapDecoder"]/*' />
/// <unmanaged>IWICBitmapDecoder</unmanaged>
[Guid("9edde9e7-8dee-47ea-99df-e6faf2ed44bf")]
[NativeTypeName("struct IWICBitmapDecoder : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICBitmapDecoder
{
	public static ref readonly Guid IID_IWICBitmapDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE7, 0xE9, 0xDD, 0x9E,
				0xEE, 0x8D,
				0xEA, 0x47,
				0x99,
				0xDF,
				0xE6,
				0xFA,
				0xF2,
				0xED,
				0x44,
				0xBF
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICBitmapDecoder));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapDecoder::QueryCapability"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult QueryCapability(Com.IStream* pIStream, uint* pdwCapability)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoder*, Com.IStream*, uint*, int>)(lpVtbl[3]))((IWICBitmapDecoder*)Unsafe.AsPointer(ref this), pIStream, pdwCapability);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapDecoder::Initialize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult Initialize(Com.IStream* pIStream, WICDecodeOptions cacheOptions)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoder*, Com.IStream*, WICDecodeOptions, int>)(lpVtbl[4]))((IWICBitmapDecoder*)Unsafe.AsPointer(ref this), pIStream, cacheOptions);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapDecoder::GetContainerFormat"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetContainerFormat(Guid* pguidContainerFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoder*, Guid*, int>)(lpVtbl[5]))((IWICBitmapDecoder*)Unsafe.AsPointer(ref this), pguidContainerFormat);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapDecoder::GetDecoderInfo"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetDecoderInfo(IWICBitmapDecoderInfo** ppIDecoderInfo)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoder*, IWICBitmapDecoderInfo**, int>)(lpVtbl[6]))((IWICBitmapDecoder*)Unsafe.AsPointer(ref this), ppIDecoderInfo);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapDecoder::CopyPalette"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CopyPalette(IWICPalette* pIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoder*, IWICPalette*, int>)(lpVtbl[7]))((IWICBitmapDecoder*)Unsafe.AsPointer(ref this), pIPalette);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapDecoder::GetMetadataQueryReader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetMetadataQueryReader(IWICMetadataQueryReader** ppIMetadataQueryReader)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoder*, IWICMetadataQueryReader**, int>)(lpVtbl[8]))((IWICBitmapDecoder*)Unsafe.AsPointer(ref this), ppIMetadataQueryReader);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapDecoder::GetPreview"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetPreview(IWICBitmapSource** ppIBitmapSource)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoder*, IWICBitmapSource**, int>)(lpVtbl[9]))((IWICBitmapDecoder*)Unsafe.AsPointer(ref this), ppIBitmapSource);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapDecoder::GetColorContexts"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetColorContexts(uint cCount, IWICColorContext** ppIColorContexts, uint* pcActualCount)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoder*, uint, IWICColorContext**, uint*, int>)(lpVtbl[10]))((IWICBitmapDecoder*)Unsafe.AsPointer(ref this), cCount, ppIColorContexts, pcActualCount);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapDecoder::GetThumbnail"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetThumbnail(IWICBitmapSource** ppIThumbnail)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoder*, IWICBitmapSource**, int>)(lpVtbl[11]))((IWICBitmapDecoder*)Unsafe.AsPointer(ref this), ppIThumbnail);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapDecoder::GetFrameCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetFrameCount(uint* pCount)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoder*, uint*, int>)(lpVtbl[12]))((IWICBitmapDecoder*)Unsafe.AsPointer(ref this), pCount);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapDecoder::GetFrame"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetFrame(uint index, IWICBitmapFrameDecode** ppIBitmapFrame)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoder*, uint, IWICBitmapFrameDecode**, int>)(lpVtbl[13]))((IWICBitmapDecoder*)Unsafe.AsPointer(ref this), index, ppIBitmapFrame);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapSourceTransform"]/*' />
/// <unmanaged>IWICBitmapSourceTransform</unmanaged>
[Guid("3b16811b-6a43-4ec9-b713-3d5a0c13b940")]
[NativeTypeName("struct IWICBitmapSourceTransform : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICBitmapSourceTransform
{
	public static ref readonly Guid IID_IWICBitmapSourceTransform
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1B, 0x81, 0x16, 0x3B,
				0x43, 0x6A,
				0xC9, 0x4E,
				0xB7,
				0x13,
				0x3D,
				0x5A,
				0x0C,
				0x13,
				0xB9,
				0x40
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICBitmapSourceTransform));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapSourceTransform::CopyPixels"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CopyPixels(System.Drawing.Rectangle* prc, uint uiWidth, uint uiHeight, Guid* pguidDstFormat, WICBitmapTransformOptions dstTransform, uint nStride, uint cbBufferSize, byte* pbBuffer)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapSourceTransform*, System.Drawing.Rectangle*, uint, uint, Guid*, WICBitmapTransformOptions, uint, uint, byte*, int>)(lpVtbl[3]))((IWICBitmapSourceTransform*)Unsafe.AsPointer(ref this), prc, uiWidth, uiHeight, pguidDstFormat, dstTransform, nStride, cbBufferSize, pbBuffer);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapSourceTransform::GetClosestSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetClosestSize(uint* puiWidth, uint* puiHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapSourceTransform*, uint*, uint*, int>)(lpVtbl[4]))((IWICBitmapSourceTransform*)Unsafe.AsPointer(ref this), puiWidth, puiHeight);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapSourceTransform::GetClosestPixelFormat"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetClosestPixelFormat(Guid* pguidDstFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapSourceTransform*, Guid*, int>)(lpVtbl[5]))((IWICBitmapSourceTransform*)Unsafe.AsPointer(ref this), pguidDstFormat);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapSourceTransform::DoesSupportTransform"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult DoesSupportTransform(WICBitmapTransformOptions dstTransform, Bool32* pfIsSupported)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapSourceTransform*, WICBitmapTransformOptions, Bool32*, int>)(lpVtbl[6]))((IWICBitmapSourceTransform*)Unsafe.AsPointer(ref this), dstTransform, pfIsSupported);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICPlanarBitmapSourceTransform"]/*' />
/// <unmanaged>IWICPlanarBitmapSourceTransform</unmanaged>
[Guid("3aff9cce-be95-4303-b927-e7d16ff4a613")]
[NativeTypeName("struct IWICPlanarBitmapSourceTransform : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICPlanarBitmapSourceTransform
{
	public static ref readonly Guid IID_IWICPlanarBitmapSourceTransform
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCE, 0x9C, 0xFF, 0x3A,
				0x95, 0xBE,
				0x03, 0x43,
				0xB9,
				0x27,
				0xE7,
				0xD1,
				0x6F,
				0xF4,
				0xA6,
				0x13
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICPlanarBitmapSourceTransform));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPlanarBitmapSourceTransform::DoesSupportTransform"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult DoesSupportTransform(uint* puiWidth, uint* puiHeight, WICBitmapTransformOptions dstTransform, WICPlanarOptions dstPlanarOptions, Guid* pguidDstFormats, WICBitmapPlaneDescription* pPlaneDescriptions, uint cPlanes, Bool32* pfIsSupported)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPlanarBitmapSourceTransform*, uint*, uint*, WICBitmapTransformOptions, WICPlanarOptions, Guid*, WICBitmapPlaneDescription*, uint, Bool32*, int>)(lpVtbl[3]))((IWICPlanarBitmapSourceTransform*)Unsafe.AsPointer(ref this), puiWidth, puiHeight, dstTransform, dstPlanarOptions, pguidDstFormats, pPlaneDescriptions, cPlanes, pfIsSupported);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPlanarBitmapSourceTransform::CopyPixels"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CopyPixels(System.Drawing.Rectangle* prcSource, uint uiWidth, uint uiHeight, WICBitmapTransformOptions dstTransform, WICPlanarOptions dstPlanarOptions, WICBitmapPlane* pDstPlanes, uint cPlanes)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPlanarBitmapSourceTransform*, System.Drawing.Rectangle*, uint, uint, WICBitmapTransformOptions, WICPlanarOptions, WICBitmapPlane*, uint, int>)(lpVtbl[4]))((IWICPlanarBitmapSourceTransform*)Unsafe.AsPointer(ref this), prcSource, uiWidth, uiHeight, dstTransform, dstPlanarOptions, pDstPlanes, cPlanes);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFrameDecode"]/*' />
/// <unmanaged>IWICBitmapFrameDecode</unmanaged>
[Guid("3b16811b-6a43-4ec9-a813-3d930c13b940")]
[NativeTypeName("struct IWICBitmapFrameDecode : IWICBitmapSource")]
[NativeInheritance("IWICBitmapSource")]
public unsafe partial struct IWICBitmapFrameDecode
{
	public static ref readonly Guid IID_IWICBitmapFrameDecode
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1B, 0x81, 0x16, 0x3B,
				0x43, 0x6A,
				0xC9, 0x4E,
				0xA8,
				0x13,
				0x3D,
				0x93,
				0x0C,
				0x13,
				0xB9,
				0x40
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICBitmapFrameDecode));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICBitmapSource.GetSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetSize(uint* puiWidth, uint* puiHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameDecode*, uint*, uint*, int>)(lpVtbl[3]))((IWICBitmapFrameDecode*)Unsafe.AsPointer(ref this), puiWidth, puiHeight);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetPixelFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPixelFormat(Guid* pPixelFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameDecode*, Guid*, int>)(lpVtbl[4]))((IWICBitmapFrameDecode*)Unsafe.AsPointer(ref this), pPixelFormat);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetResolution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetResolution(double* pDpiX, double* pDpiY)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameDecode*, double*, double*, int>)(lpVtbl[5]))((IWICBitmapFrameDecode*)Unsafe.AsPointer(ref this), pDpiX, pDpiY);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPalette" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CopyPalette(IWICPalette* pIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameDecode*, IWICPalette*, int>)(lpVtbl[6]))((IWICBitmapFrameDecode*)Unsafe.AsPointer(ref this), pIPalette);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPixels" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CopyPixels(System.Drawing.Rectangle* prc, uint cbStride, uint cbBufferSize, byte* pbBuffer)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameDecode*, System.Drawing.Rectangle*, uint, uint, byte*, int>)(lpVtbl[7]))((IWICBitmapFrameDecode*)Unsafe.AsPointer(ref this), prc, cbStride, cbBufferSize, pbBuffer);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFrameDecode::GetMetadataQueryReader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetMetadataQueryReader(IWICMetadataQueryReader** ppIMetadataQueryReader)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameDecode*, IWICMetadataQueryReader**, int>)(lpVtbl[8]))((IWICBitmapFrameDecode*)Unsafe.AsPointer(ref this), ppIMetadataQueryReader);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFrameDecode::GetColorContexts"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetColorContexts(uint cCount, IWICColorContext** ppIColorContexts, uint* pcActualCount)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameDecode*, uint, IWICColorContext**, uint*, int>)(lpVtbl[9]))((IWICBitmapFrameDecode*)Unsafe.AsPointer(ref this), cCount, ppIColorContexts, pcActualCount);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapFrameDecode::GetThumbnail"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetThumbnail(IWICBitmapSource** ppIThumbnail)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapFrameDecode*, IWICBitmapSource**, int>)(lpVtbl[10]))((IWICBitmapFrameDecode*)Unsafe.AsPointer(ref this), ppIThumbnail);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICProgressiveLevelControl"]/*' />
/// <unmanaged>IWICProgressiveLevelControl</unmanaged>
[Guid("daac296f-7aa5-4dbf-8d15-225c5976f891")]
[NativeTypeName("struct IWICProgressiveLevelControl : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICProgressiveLevelControl
{
	public static ref readonly Guid IID_IWICProgressiveLevelControl
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x6F, 0x29, 0xAC, 0xDA,
				0xA5, 0x7A,
				0xBF, 0x4D,
				0x8D,
				0x15,
				0x22,
				0x5C,
				0x59,
				0x76,
				0xF8,
				0x91
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICProgressiveLevelControl));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICProgressiveLevelControl::GetLevelCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetLevelCount(uint* pcLevels)
	{
		return ((delegate* unmanaged[Stdcall]<IWICProgressiveLevelControl*, uint*, int>)(lpVtbl[3]))((IWICProgressiveLevelControl*)Unsafe.AsPointer(ref this), pcLevels);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICProgressiveLevelControl::GetCurrentLevel"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetCurrentLevel(uint* pnLevel)
	{
		return ((delegate* unmanaged[Stdcall]<IWICProgressiveLevelControl*, uint*, int>)(lpVtbl[4]))((IWICProgressiveLevelControl*)Unsafe.AsPointer(ref this), pnLevel);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICProgressiveLevelControl::SetCurrentLevel"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetCurrentLevel(uint nLevel)
	{
		return ((delegate* unmanaged[Stdcall]<IWICProgressiveLevelControl*, uint, int>)(lpVtbl[5]))((IWICProgressiveLevelControl*)Unsafe.AsPointer(ref this), nLevel);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICProgressCallback"]/*' />
/// <unmanaged>IWICProgressCallback</unmanaged>
[Guid("4776f9cd-9517-45fa-bf24-e89c5ec5c60c")]
[NativeTypeName("struct IWICProgressCallback : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICProgressCallback
{
	public static ref readonly Guid IID_IWICProgressCallback
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCD, 0xF9, 0x76, 0x47,
				0x17, 0x95,
				0xFA, 0x45,
				0xBF,
				0x24,
				0xE8,
				0x9C,
				0x5E,
				0xC5,
				0xC6,
				0x0C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICProgressCallback));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICProgressCallback::Notify"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult Notify(uint uFrameNum, WICProgressOperation operation, double dblProgress)
	{
		return ((delegate* unmanaged[Stdcall]<IWICProgressCallback*, uint, WICProgressOperation, double, int>)(lpVtbl[3]))((IWICProgressCallback*)Unsafe.AsPointer(ref this), uFrameNum, operation, dblProgress);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapCodecProgressNotification"]/*' />
/// <unmanaged>IWICBitmapCodecProgressNotification</unmanaged>
[Guid("64c1024e-c3cf-4462-8078-88c2b11c46d9")]
[NativeTypeName("struct IWICBitmapCodecProgressNotification : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICBitmapCodecProgressNotification
{
	public static ref readonly Guid IID_IWICBitmapCodecProgressNotification
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x4E, 0x02, 0xC1, 0x64,
				0xCF, 0xC3,
				0x62, 0x44,
				0x80,
				0x78,
				0x88,
				0xC2,
				0xB1,
				0x1C,
				0x46,
				0xD9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICBitmapCodecProgressNotification));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapCodecProgressNotification::RegisterProgressNotification"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult RegisterProgressNotification(delegate* unmanaged[Stdcall]<void*, void> pfnProgressNotification, void* pvData, uint dwProgressFlags)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecProgressNotification*, delegate* unmanaged[Stdcall]<void*, void>, void*, uint, int>)(lpVtbl[3]))((IWICBitmapCodecProgressNotification*)Unsafe.AsPointer(ref this), pfnProgressNotification, pvData, dwProgressFlags);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentInfo"]/*' />
/// <unmanaged>IWICComponentInfo</unmanaged>
[Guid("23bc3f0a-698b-4357-886b-f24d50671334")]
[NativeTypeName("struct IWICComponentInfo : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICComponentInfo
{
	public static ref readonly Guid IID_IWICComponentInfo
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0A, 0x3F, 0xBC, 0x23,
				0x8B, 0x69,
				0x57, 0x43,
				0x88,
				0x6B,
				0xF2,
				0x4D,
				0x50,
				0x67,
				0x13,
				0x34
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICComponentInfo));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentInfo::GetComponentType"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetComponentType(WICComponentType* pType)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentInfo*, WICComponentType*, int>)(lpVtbl[3]))((IWICComponentInfo*)Unsafe.AsPointer(ref this), pType);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentInfo::GetCLSID"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetCLSID(Guid* pclsid)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentInfo*, Guid*, int>)(lpVtbl[4]))((IWICComponentInfo*)Unsafe.AsPointer(ref this), pclsid);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentInfo::GetSigningStatus"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetSigningStatus(uint* pStatus)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentInfo*, uint*, int>)(lpVtbl[5]))((IWICComponentInfo*)Unsafe.AsPointer(ref this), pStatus);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentInfo::GetAuthor"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetAuthor(uint cchAuthor, ushort* wzAuthor, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentInfo*, uint, ushort*, uint*, int>)(lpVtbl[6]))((IWICComponentInfo*)Unsafe.AsPointer(ref this), cchAuthor, wzAuthor, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentInfo::GetVendorGUID"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetVendorGUID(Guid* pguidVendor)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentInfo*, Guid*, int>)(lpVtbl[7]))((IWICComponentInfo*)Unsafe.AsPointer(ref this), pguidVendor);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentInfo::GetVersion"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetVersion(uint cchVersion, ushort* wzVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentInfo*, uint, ushort*, uint*, int>)(lpVtbl[8]))((IWICComponentInfo*)Unsafe.AsPointer(ref this), cchVersion, wzVersion, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentInfo::GetSpecVersion"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetSpecVersion(uint cchSpecVersion, ushort* wzSpecVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentInfo*, uint, ushort*, uint*, int>)(lpVtbl[9]))((IWICComponentInfo*)Unsafe.AsPointer(ref this), cchSpecVersion, wzSpecVersion, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentInfo::GetFriendlyName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetFriendlyName(uint cchFriendlyName, ushort* wzFriendlyName, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentInfo*, uint, ushort*, uint*, int>)(lpVtbl[10]))((IWICComponentInfo*)Unsafe.AsPointer(ref this), cchFriendlyName, wzFriendlyName, pcchActual);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICFormatConverterInfo"]/*' />
/// <unmanaged>IWICFormatConverterInfo</unmanaged>
[Guid("9f34fb65-13f4-4f15-bc57-3726b5e53d9f")]
[NativeTypeName("struct IWICFormatConverterInfo : IWICComponentInfo")]
[NativeInheritance("IWICComponentInfo")]
public unsafe partial struct IWICFormatConverterInfo
{
	public static ref readonly Guid IID_IWICFormatConverterInfo
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x65, 0xFB, 0x34, 0x9F,
				0xF4, 0x13,
				0x15, 0x4F,
				0xBC,
				0x57,
				0x37,
				0x26,
				0xB5,
				0xE5,
				0x3D,
				0x9F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICFormatConverterInfo));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICComponentInfo.GetComponentType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetComponentType(WICComponentType* pType)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverterInfo*, WICComponentType*, int>)(lpVtbl[3]))((IWICFormatConverterInfo*)Unsafe.AsPointer(ref this), pType);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetCLSID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetCLSID(Guid* pclsid)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverterInfo*, Guid*, int>)(lpVtbl[4]))((IWICFormatConverterInfo*)Unsafe.AsPointer(ref this), pclsid);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSigningStatus" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetSigningStatus(uint* pStatus)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverterInfo*, uint*, int>)(lpVtbl[5]))((IWICFormatConverterInfo*)Unsafe.AsPointer(ref this), pStatus);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetAuthor" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetAuthor(uint cchAuthor, ushort* wzAuthor, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverterInfo*, uint, ushort*, uint*, int>)(lpVtbl[6]))((IWICFormatConverterInfo*)Unsafe.AsPointer(ref this), cchAuthor, wzAuthor, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVendorGUID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetVendorGUID(Guid* pguidVendor)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverterInfo*, Guid*, int>)(lpVtbl[7]))((IWICFormatConverterInfo*)Unsafe.AsPointer(ref this), pguidVendor);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetVersion(uint cchVersion, ushort* wzVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverterInfo*, uint, ushort*, uint*, int>)(lpVtbl[8]))((IWICFormatConverterInfo*)Unsafe.AsPointer(ref this), cchVersion, wzVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSpecVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetSpecVersion(uint cchSpecVersion, ushort* wzSpecVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverterInfo*, uint, ushort*, uint*, int>)(lpVtbl[9]))((IWICFormatConverterInfo*)Unsafe.AsPointer(ref this), cchSpecVersion, wzSpecVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetFriendlyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetFriendlyName(uint cchFriendlyName, ushort* wzFriendlyName, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverterInfo*, uint, ushort*, uint*, int>)(lpVtbl[10]))((IWICFormatConverterInfo*)Unsafe.AsPointer(ref this), cchFriendlyName, wzFriendlyName, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICFormatConverterInfo::GetPixelFormats"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetPixelFormats(uint cFormats, Guid* pPixelFormatGUIDs, uint* pcActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverterInfo*, uint, Guid*, uint*, int>)(lpVtbl[11]))((IWICFormatConverterInfo*)Unsafe.AsPointer(ref this), cFormats, pPixelFormatGUIDs, pcActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICFormatConverterInfo::CreateInstance"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CreateInstance(IWICFormatConverter** ppIConverter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICFormatConverterInfo*, IWICFormatConverter**, int>)(lpVtbl[12]))((IWICFormatConverterInfo*)Unsafe.AsPointer(ref this), ppIConverter);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapCodecInfo"]/*' />
/// <unmanaged>IWICBitmapCodecInfo</unmanaged>
[Guid("e87a44c4-b76e-4c47-8b09-298eb12a2714")]
[NativeTypeName("struct IWICBitmapCodecInfo : IWICComponentInfo")]
[NativeInheritance("IWICComponentInfo")]
public unsafe partial struct IWICBitmapCodecInfo
{
	public static ref readonly Guid IID_IWICBitmapCodecInfo
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC4, 0x44, 0x7A, 0xE8,
				0x6E, 0xB7,
				0x47, 0x4C,
				0x8B,
				0x09,
				0x29,
				0x8E,
				0xB1,
				0x2A,
				0x27,
				0x14
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICBitmapCodecInfo));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICComponentInfo.GetComponentType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetComponentType(WICComponentType* pType)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, WICComponentType*, int>)(lpVtbl[3]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), pType);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetCLSID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetCLSID(Guid* pclsid)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, Guid*, int>)(lpVtbl[4]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), pclsid);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSigningStatus" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetSigningStatus(uint* pStatus)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, uint*, int>)(lpVtbl[5]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), pStatus);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetAuthor" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetAuthor(uint cchAuthor, ushort* wzAuthor, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, uint, ushort*, uint*, int>)(lpVtbl[6]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), cchAuthor, wzAuthor, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVendorGUID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetVendorGUID(Guid* pguidVendor)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, Guid*, int>)(lpVtbl[7]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), pguidVendor);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetVersion(uint cchVersion, ushort* wzVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, uint, ushort*, uint*, int>)(lpVtbl[8]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), cchVersion, wzVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSpecVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetSpecVersion(uint cchSpecVersion, ushort* wzSpecVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, uint, ushort*, uint*, int>)(lpVtbl[9]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), cchSpecVersion, wzSpecVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetFriendlyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetFriendlyName(uint cchFriendlyName, ushort* wzFriendlyName, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, uint, ushort*, uint*, int>)(lpVtbl[10]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), cchFriendlyName, wzFriendlyName, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapCodecInfo::GetContainerFormat"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetContainerFormat(Guid* pguidContainerFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, Guid*, int>)(lpVtbl[11]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), pguidContainerFormat);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapCodecInfo::GetPixelFormats"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetPixelFormats(uint cFormats, Guid* pguidPixelFormats, uint* pcActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, uint, Guid*, uint*, int>)(lpVtbl[12]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), cFormats, pguidPixelFormats, pcActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapCodecInfo::GetColorManagementVersion"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetColorManagementVersion(uint cchColorManagementVersion, ushort* wzColorManagementVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, uint, ushort*, uint*, int>)(lpVtbl[13]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), cchColorManagementVersion, wzColorManagementVersion, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapCodecInfo::GetDeviceManufacturer"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult GetDeviceManufacturer(uint cchDeviceManufacturer, ushort* wzDeviceManufacturer, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, uint, ushort*, uint*, int>)(lpVtbl[14]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), cchDeviceManufacturer, wzDeviceManufacturer, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapCodecInfo::GetDeviceModels"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetDeviceModels(uint cchDeviceModels, ushort* wzDeviceModels, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, uint, ushort*, uint*, int>)(lpVtbl[15]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), cchDeviceModels, wzDeviceModels, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapCodecInfo::GetMimeTypes"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult GetMimeTypes(uint cchMimeTypes, ushort* wzMimeTypes, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, uint, ushort*, uint*, int>)(lpVtbl[16]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), cchMimeTypes, wzMimeTypes, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapCodecInfo::GetFileExtensions"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetFileExtensions(uint cchFileExtensions, ushort* wzFileExtensions, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, uint, ushort*, uint*, int>)(lpVtbl[17]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), cchFileExtensions, wzFileExtensions, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapCodecInfo::DoesSupportAnimation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult DoesSupportAnimation(Bool32* pfSupportAnimation)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, Bool32*, int>)(lpVtbl[18]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), pfSupportAnimation);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapCodecInfo::DoesSupportChromakey"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult DoesSupportChromakey(Bool32* pfSupportChromakey)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, Bool32*, int>)(lpVtbl[19]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), pfSupportChromakey);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapCodecInfo::DoesSupportLossless"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult DoesSupportLossless(Bool32* pfSupportLossless)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, Bool32*, int>)(lpVtbl[20]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), pfSupportLossless);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapCodecInfo::DoesSupportMultiframe"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult DoesSupportMultiframe(Bool32* pfSupportMultiframe)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, Bool32*, int>)(lpVtbl[21]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), pfSupportMultiframe);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapCodecInfo::MatchesMimeType"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult MatchesMimeType(ushort* wzMimeType, Bool32* pfMatches)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapCodecInfo*, ushort*, Bool32*, int>)(lpVtbl[22]))((IWICBitmapCodecInfo*)Unsafe.AsPointer(ref this), wzMimeType, pfMatches);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapEncoderInfo"]/*' />
/// <unmanaged>IWICBitmapEncoderInfo</unmanaged>
[Guid("94c9b4ee-a09f-4f92-8a1e-4a9bce7e76fb")]
[NativeTypeName("struct IWICBitmapEncoderInfo : IWICBitmapCodecInfo")]
[NativeInheritance("IWICBitmapCodecInfo")]
public unsafe partial struct IWICBitmapEncoderInfo
{
	public static ref readonly Guid IID_IWICBitmapEncoderInfo
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xEE, 0xB4, 0xC9, 0x94,
				0x9F, 0xA0,
				0x92, 0x4F,
				0x8A,
				0x1E,
				0x4A,
				0x9B,
				0xCE,
				0x7E,
				0x76,
				0xFB
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICBitmapEncoderInfo));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.GetContainerFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetContainerFormat(Guid* pguidContainerFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, Guid*, int>)(lpVtbl[3]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), pguidContainerFormat);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.GetPixelFormats" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPixelFormats(uint cFormats, Guid* pguidPixelFormats, uint* pcActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, uint, Guid*, uint*, int>)(lpVtbl[4]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), cFormats, pguidPixelFormats, pcActual);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.GetColorManagementVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetColorManagementVersion(uint cchColorManagementVersion, ushort* wzColorManagementVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[5]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), cchColorManagementVersion, wzColorManagementVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.GetDeviceManufacturer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetDeviceManufacturer(uint cchDeviceManufacturer, ushort* wzDeviceManufacturer, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[6]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), cchDeviceManufacturer, wzDeviceManufacturer, pcchActual);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.GetDeviceModels" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetDeviceModels(uint cchDeviceModels, ushort* wzDeviceModels, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[7]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), cchDeviceModels, wzDeviceModels, pcchActual);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.GetMimeTypes" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetMimeTypes(uint cchMimeTypes, ushort* wzMimeTypes, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[8]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), cchMimeTypes, wzMimeTypes, pcchActual);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.GetFileExtensions" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetFileExtensions(uint cchFileExtensions, ushort* wzFileExtensions, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[9]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), cchFileExtensions, wzFileExtensions, pcchActual);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.DoesSupportAnimation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult DoesSupportAnimation(Bool32* pfSupportAnimation)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, Bool32*, int>)(lpVtbl[10]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), pfSupportAnimation);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.DoesSupportChromakey" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult DoesSupportChromakey(Bool32* pfSupportChromakey)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, Bool32*, int>)(lpVtbl[11]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), pfSupportChromakey);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.DoesSupportLossless" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult DoesSupportLossless(Bool32* pfSupportLossless)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, Bool32*, int>)(lpVtbl[12]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), pfSupportLossless);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.DoesSupportMultiframe" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult DoesSupportMultiframe(Bool32* pfSupportMultiframe)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, Bool32*, int>)(lpVtbl[13]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), pfSupportMultiframe);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.MatchesMimeType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult MatchesMimeType(ushort* wzMimeType, Bool32* pfMatches)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, ushort*, Bool32*, int>)(lpVtbl[14]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), wzMimeType, pfMatches);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetComponentType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetComponentType(WICComponentType* pType)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, WICComponentType*, int>)(lpVtbl[15]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), pType);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetCLSID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult GetCLSID(Guid* pclsid)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, Guid*, int>)(lpVtbl[16]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), pclsid);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSigningStatus" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetSigningStatus(uint* pStatus)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, uint*, int>)(lpVtbl[17]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), pStatus);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetAuthor" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult GetAuthor(uint cchAuthor, ushort* wzAuthor, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[18]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), cchAuthor, wzAuthor, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVendorGUID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetVendorGUID(Guid* pguidVendor)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, Guid*, int>)(lpVtbl[19]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), pguidVendor);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult GetVersion(uint cchVersion, ushort* wzVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[20]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), cchVersion, wzVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSpecVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetSpecVersion(uint cchSpecVersion, ushort* wzSpecVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[21]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), cchSpecVersion, wzSpecVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetFriendlyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult GetFriendlyName(uint cchFriendlyName, ushort* wzFriendlyName, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[22]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), cchFriendlyName, wzFriendlyName, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapEncoderInfo::CreateInstance"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult CreateInstance(IWICBitmapEncoder** ppIBitmapEncoder)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapEncoderInfo*, IWICBitmapEncoder**, int>)(lpVtbl[23]))((IWICBitmapEncoderInfo*)Unsafe.AsPointer(ref this), ppIBitmapEncoder);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapDecoderInfo"]/*' />
/// <unmanaged>IWICBitmapDecoderInfo</unmanaged>
[Guid("d8cd007f-d08f-4191-9bfc-236ea7f0e4b5")]
[NativeTypeName("struct IWICBitmapDecoderInfo : IWICBitmapCodecInfo")]
[NativeInheritance("IWICBitmapCodecInfo")]
public unsafe partial struct IWICBitmapDecoderInfo
{
	public static ref readonly Guid IID_IWICBitmapDecoderInfo
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7F, 0x00, 0xCD, 0xD8,
				0x8F, 0xD0,
				0x91, 0x41,
				0x9B,
				0xFC,
				0x23,
				0x6E,
				0xA7,
				0xF0,
				0xE4,
				0xB5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICBitmapDecoderInfo));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.GetContainerFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetContainerFormat(Guid* pguidContainerFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, Guid*, int>)(lpVtbl[3]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), pguidContainerFormat);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.GetPixelFormats" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPixelFormats(uint cFormats, Guid* pguidPixelFormats, uint* pcActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, Guid*, uint*, int>)(lpVtbl[4]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), cFormats, pguidPixelFormats, pcActual);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.GetColorManagementVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetColorManagementVersion(uint cchColorManagementVersion, ushort* wzColorManagementVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[5]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), cchColorManagementVersion, wzColorManagementVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.GetDeviceManufacturer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetDeviceManufacturer(uint cchDeviceManufacturer, ushort* wzDeviceManufacturer, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[6]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), cchDeviceManufacturer, wzDeviceManufacturer, pcchActual);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.GetDeviceModels" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetDeviceModels(uint cchDeviceModels, ushort* wzDeviceModels, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[7]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), cchDeviceModels, wzDeviceModels, pcchActual);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.GetMimeTypes" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetMimeTypes(uint cchMimeTypes, ushort* wzMimeTypes, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[8]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), cchMimeTypes, wzMimeTypes, pcchActual);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.GetFileExtensions" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetFileExtensions(uint cchFileExtensions, ushort* wzFileExtensions, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[9]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), cchFileExtensions, wzFileExtensions, pcchActual);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.DoesSupportAnimation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult DoesSupportAnimation(Bool32* pfSupportAnimation)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, Bool32*, int>)(lpVtbl[10]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), pfSupportAnimation);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.DoesSupportChromakey" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult DoesSupportChromakey(Bool32* pfSupportChromakey)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, Bool32*, int>)(lpVtbl[11]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), pfSupportChromakey);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.DoesSupportLossless" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult DoesSupportLossless(Bool32* pfSupportLossless)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, Bool32*, int>)(lpVtbl[12]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), pfSupportLossless);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.DoesSupportMultiframe" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult DoesSupportMultiframe(Bool32* pfSupportMultiframe)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, Bool32*, int>)(lpVtbl[13]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), pfSupportMultiframe);
	}

	/// <inheritdoc cref="IWICBitmapCodecInfo.MatchesMimeType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult MatchesMimeType(ushort* wzMimeType, Bool32* pfMatches)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, ushort*, Bool32*, int>)(lpVtbl[14]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), wzMimeType, pfMatches);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetComponentType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetComponentType(WICComponentType* pType)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, WICComponentType*, int>)(lpVtbl[15]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), pType);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetCLSID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult GetCLSID(Guid* pclsid)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, Guid*, int>)(lpVtbl[16]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), pclsid);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSigningStatus" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetSigningStatus(uint* pStatus)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint*, int>)(lpVtbl[17]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), pStatus);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetAuthor" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult GetAuthor(uint cchAuthor, ushort* wzAuthor, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[18]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), cchAuthor, wzAuthor, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVendorGUID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetVendorGUID(Guid* pguidVendor)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, Guid*, int>)(lpVtbl[19]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), pguidVendor);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult GetVersion(uint cchVersion, ushort* wzVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[20]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), cchVersion, wzVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSpecVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetSpecVersion(uint cchSpecVersion, ushort* wzSpecVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[21]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), cchSpecVersion, wzSpecVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetFriendlyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult GetFriendlyName(uint cchFriendlyName, ushort* wzFriendlyName, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, ushort*, uint*, int>)(lpVtbl[22]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), cchFriendlyName, wzFriendlyName, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapDecoderInfo::GetPatterns"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult GetPatterns(uint cbSizePatterns, WICBitmapPattern* pPatterns, uint* pcPatterns, uint* pcbPatternsActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, WICBitmapPattern*, uint*, uint*, int>)(lpVtbl[23]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), cbSizePatterns, pPatterns, pcPatterns, pcbPatternsActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapDecoderInfo::MatchesPattern"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult MatchesPattern(Com.IStream* pIStream, Bool32* pfMatches)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, Com.IStream*, Bool32*, int>)(lpVtbl[24]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), pIStream, pfMatches);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICBitmapDecoderInfo::CreateInstance"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult CreateInstance(IWICBitmapDecoder** ppIBitmapDecoder)
	{
		return ((delegate* unmanaged[Stdcall]<IWICBitmapDecoderInfo*, IWICBitmapDecoder**, int>)(lpVtbl[25]))((IWICBitmapDecoderInfo*)Unsafe.AsPointer(ref this), ppIBitmapDecoder);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICPixelFormatInfo"]/*' />
/// <unmanaged>IWICPixelFormatInfo</unmanaged>
[Guid("e8eda601-3d48-431a-ab44-69059be88bbe")]
[NativeTypeName("struct IWICPixelFormatInfo : IWICComponentInfo")]
[NativeInheritance("IWICComponentInfo")]
public unsafe partial struct IWICPixelFormatInfo
{
	public static ref readonly Guid IID_IWICPixelFormatInfo
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x01, 0xA6, 0xED, 0xE8,
				0x48, 0x3D,
				0x1A, 0x43,
				0xAB,
				0x44,
				0x69,
				0x05,
				0x9B,
				0xE8,
				0x8B,
				0xBE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICPixelFormatInfo));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICComponentInfo.GetComponentType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetComponentType(WICComponentType* pType)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo*, WICComponentType*, int>)(lpVtbl[3]))((IWICPixelFormatInfo*)Unsafe.AsPointer(ref this), pType);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetCLSID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetCLSID(Guid* pclsid)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo*, Guid*, int>)(lpVtbl[4]))((IWICPixelFormatInfo*)Unsafe.AsPointer(ref this), pclsid);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSigningStatus" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetSigningStatus(uint* pStatus)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo*, uint*, int>)(lpVtbl[5]))((IWICPixelFormatInfo*)Unsafe.AsPointer(ref this), pStatus);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetAuthor" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetAuthor(uint cchAuthor, ushort* wzAuthor, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo*, uint, ushort*, uint*, int>)(lpVtbl[6]))((IWICPixelFormatInfo*)Unsafe.AsPointer(ref this), cchAuthor, wzAuthor, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVendorGUID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetVendorGUID(Guid* pguidVendor)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo*, Guid*, int>)(lpVtbl[7]))((IWICPixelFormatInfo*)Unsafe.AsPointer(ref this), pguidVendor);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetVersion(uint cchVersion, ushort* wzVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo*, uint, ushort*, uint*, int>)(lpVtbl[8]))((IWICPixelFormatInfo*)Unsafe.AsPointer(ref this), cchVersion, wzVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSpecVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetSpecVersion(uint cchSpecVersion, ushort* wzSpecVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo*, uint, ushort*, uint*, int>)(lpVtbl[9]))((IWICPixelFormatInfo*)Unsafe.AsPointer(ref this), cchSpecVersion, wzSpecVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetFriendlyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetFriendlyName(uint cchFriendlyName, ushort* wzFriendlyName, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo*, uint, ushort*, uint*, int>)(lpVtbl[10]))((IWICPixelFormatInfo*)Unsafe.AsPointer(ref this), cchFriendlyName, wzFriendlyName, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPixelFormatInfo::GetFormatGUID"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetFormatGUID(Guid* pFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo*, Guid*, int>)(lpVtbl[11]))((IWICPixelFormatInfo*)Unsafe.AsPointer(ref this), pFormat);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPixelFormatInfo::GetColorContext"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetColorContext(IWICColorContext** ppIColorContext)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo*, IWICColorContext**, int>)(lpVtbl[12]))((IWICPixelFormatInfo*)Unsafe.AsPointer(ref this), ppIColorContext);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPixelFormatInfo::GetBitsPerPixel"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetBitsPerPixel(uint* puiBitsPerPixel)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo*, uint*, int>)(lpVtbl[13]))((IWICPixelFormatInfo*)Unsafe.AsPointer(ref this), puiBitsPerPixel);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPixelFormatInfo::GetChannelCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult GetChannelCount(uint* puiChannelCount)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo*, uint*, int>)(lpVtbl[14]))((IWICPixelFormatInfo*)Unsafe.AsPointer(ref this), puiChannelCount);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPixelFormatInfo::GetChannelMask"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetChannelMask(uint uiChannelIndex, uint cbMaskBuffer, byte* pbMaskBuffer, uint* pcbActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo*, uint, uint, byte*, uint*, int>)(lpVtbl[15]))((IWICPixelFormatInfo*)Unsafe.AsPointer(ref this), uiChannelIndex, cbMaskBuffer, pbMaskBuffer, pcbActual);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICPixelFormatInfo2"]/*' />
/// <unmanaged>IWICPixelFormatInfo2</unmanaged>
[Guid("a9db33a2-af5f-43c7-b679-74f5984b5aa4")]
[NativeTypeName("struct IWICPixelFormatInfo2 : IWICPixelFormatInfo")]
[NativeInheritance("IWICPixelFormatInfo")]
public unsafe partial struct IWICPixelFormatInfo2
{
	public static ref readonly Guid IID_IWICPixelFormatInfo2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA2, 0x33, 0xDB, 0xA9,
				0x5F, 0xAF,
				0xC7, 0x43,
				0xB6,
				0x79,
				0x74,
				0xF5,
				0x98,
				0x4B,
				0x5A,
				0xA4
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICPixelFormatInfo2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICPixelFormatInfo.GetFormatGUID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetFormatGUID(Guid* pFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo2*, Guid*, int>)(lpVtbl[3]))((IWICPixelFormatInfo2*)Unsafe.AsPointer(ref this), pFormat);
	}

	/// <inheritdoc cref="IWICPixelFormatInfo.GetColorContext" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetColorContext(IWICColorContext** ppIColorContext)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo2*, IWICColorContext**, int>)(lpVtbl[4]))((IWICPixelFormatInfo2*)Unsafe.AsPointer(ref this), ppIColorContext);
	}

	/// <inheritdoc cref="IWICPixelFormatInfo.GetBitsPerPixel" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetBitsPerPixel(uint* puiBitsPerPixel)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo2*, uint*, int>)(lpVtbl[5]))((IWICPixelFormatInfo2*)Unsafe.AsPointer(ref this), puiBitsPerPixel);
	}

	/// <inheritdoc cref="IWICPixelFormatInfo.GetChannelCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetChannelCount(uint* puiChannelCount)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo2*, uint*, int>)(lpVtbl[6]))((IWICPixelFormatInfo2*)Unsafe.AsPointer(ref this), puiChannelCount);
	}

	/// <inheritdoc cref="IWICPixelFormatInfo.GetChannelMask" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetChannelMask(uint uiChannelIndex, uint cbMaskBuffer, byte* pbMaskBuffer, uint* pcbActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo2*, uint, uint, byte*, uint*, int>)(lpVtbl[7]))((IWICPixelFormatInfo2*)Unsafe.AsPointer(ref this), uiChannelIndex, cbMaskBuffer, pbMaskBuffer, pcbActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetComponentType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetComponentType(WICComponentType* pType)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo2*, WICComponentType*, int>)(lpVtbl[8]))((IWICPixelFormatInfo2*)Unsafe.AsPointer(ref this), pType);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetCLSID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetCLSID(Guid* pclsid)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo2*, Guid*, int>)(lpVtbl[9]))((IWICPixelFormatInfo2*)Unsafe.AsPointer(ref this), pclsid);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSigningStatus" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetSigningStatus(uint* pStatus)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo2*, uint*, int>)(lpVtbl[10]))((IWICPixelFormatInfo2*)Unsafe.AsPointer(ref this), pStatus);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetAuthor" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetAuthor(uint cchAuthor, ushort* wzAuthor, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo2*, uint, ushort*, uint*, int>)(lpVtbl[11]))((IWICPixelFormatInfo2*)Unsafe.AsPointer(ref this), cchAuthor, wzAuthor, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVendorGUID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetVendorGUID(Guid* pguidVendor)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo2*, Guid*, int>)(lpVtbl[12]))((IWICPixelFormatInfo2*)Unsafe.AsPointer(ref this), pguidVendor);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetVersion(uint cchVersion, ushort* wzVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo2*, uint, ushort*, uint*, int>)(lpVtbl[13]))((IWICPixelFormatInfo2*)Unsafe.AsPointer(ref this), cchVersion, wzVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSpecVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult GetSpecVersion(uint cchSpecVersion, ushort* wzSpecVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo2*, uint, ushort*, uint*, int>)(lpVtbl[14]))((IWICPixelFormatInfo2*)Unsafe.AsPointer(ref this), cchSpecVersion, wzSpecVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetFriendlyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetFriendlyName(uint cchFriendlyName, ushort* wzFriendlyName, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo2*, uint, ushort*, uint*, int>)(lpVtbl[15]))((IWICPixelFormatInfo2*)Unsafe.AsPointer(ref this), cchFriendlyName, wzFriendlyName, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPixelFormatInfo2::SupportsTransparency"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult SupportsTransparency(Bool32* pfSupportsTransparency)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo2*, Bool32*, int>)(lpVtbl[16]))((IWICPixelFormatInfo2*)Unsafe.AsPointer(ref this), pfSupportsTransparency);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPixelFormatInfo2::GetNumericRepresentation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetNumericRepresentation(WICPixelFormatNumericRepresentation* pNumericRepresentation)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPixelFormatInfo2*, WICPixelFormatNumericRepresentation*, int>)(lpVtbl[17]))((IWICPixelFormatInfo2*)Unsafe.AsPointer(ref this), pNumericRepresentation);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory"]/*' />
/// <unmanaged>IWICImagingFactory</unmanaged>
[Guid("ec5ec8a9-c395-4314-9c77-54d7a935ff70")]
[NativeTypeName("struct IWICImagingFactory : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICImagingFactory
{
	public static ref readonly Guid IID_IWICImagingFactory
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA9, 0xC8, 0x5E, 0xEC,
				0x95, 0xC3,
				0x14, 0x43,
				0x9C,
				0x77,
				0x54,
				0xD7,
				0xA9,
				0x35,
				0xFF,
				0x70
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICImagingFactory));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateDecoderFromFilename"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreateDecoderFromFilename(ushort* wzFilename, Guid* pguidVendor, NativeFileAccess dwDesiredAccess, WICDecodeOptions metadataOptions, IWICBitmapDecoder** ppIDecoder)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, ushort*, Guid*, NativeFileAccess, WICDecodeOptions, IWICBitmapDecoder**, int>)(lpVtbl[3]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), wzFilename, pguidVendor, dwDesiredAccess, metadataOptions, ppIDecoder);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateDecoderFromStream"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateDecoderFromStream(Com.IStream* pIStream, Guid* pguidVendor, WICDecodeOptions metadataOptions, IWICBitmapDecoder** ppIDecoder)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, Com.IStream*, Guid*, WICDecodeOptions, IWICBitmapDecoder**, int>)(lpVtbl[4]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), pIStream, pguidVendor, metadataOptions, ppIDecoder);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateDecoderFromFileHandle"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult CreateDecoderFromFileHandle(nuint hFile, Guid* pguidVendor, WICDecodeOptions metadataOptions, IWICBitmapDecoder** ppIDecoder)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, nuint, Guid*, WICDecodeOptions, IWICBitmapDecoder**, int>)(lpVtbl[5]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), hFile, pguidVendor, metadataOptions, ppIDecoder);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateComponentInfo"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CreateComponentInfo(Guid* clsidComponent, IWICComponentInfo** ppIInfo)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, Guid*, IWICComponentInfo**, int>)(lpVtbl[6]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), clsidComponent, ppIInfo);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateDecoder"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CreateDecoder(Guid* guidContainerFormat, Guid* pguidVendor, IWICBitmapDecoder** ppIDecoder)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, Guid*, Guid*, IWICBitmapDecoder**, int>)(lpVtbl[7]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), guidContainerFormat, pguidVendor, ppIDecoder);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateEncoder"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult CreateEncoder(Guid* guidContainerFormat, Guid* pguidVendor, IWICBitmapEncoder** ppIEncoder)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, Guid*, Guid*, IWICBitmapEncoder**, int>)(lpVtbl[8]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), guidContainerFormat, pguidVendor, ppIEncoder);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreatePalette"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CreatePalette(IWICPalette** ppIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, IWICPalette**, int>)(lpVtbl[9]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), ppIPalette);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateFormatConverter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult CreateFormatConverter(IWICFormatConverter** ppIFormatConverter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, IWICFormatConverter**, int>)(lpVtbl[10]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), ppIFormatConverter);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateBitmapScaler"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CreateBitmapScaler(IWICBitmapScaler** ppIBitmapScaler)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, IWICBitmapScaler**, int>)(lpVtbl[11]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), ppIBitmapScaler);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateBitmapClipper"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CreateBitmapClipper(IWICBitmapClipper** ppIBitmapClipper)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, IWICBitmapClipper**, int>)(lpVtbl[12]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), ppIBitmapClipper);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateBitmapFlipRotator"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult CreateBitmapFlipRotator(IWICBitmapFlipRotator** ppIBitmapFlipRotator)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, IWICBitmapFlipRotator**, int>)(lpVtbl[13]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), ppIBitmapFlipRotator);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateStream"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult CreateStream(IWICStream** ppIWICStream)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, IWICStream**, int>)(lpVtbl[14]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), ppIWICStream);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateColorContext"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult CreateColorContext(IWICColorContext** ppIWICColorContext)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, IWICColorContext**, int>)(lpVtbl[15]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), ppIWICColorContext);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateColorTransformer"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult CreateColorTransformer(IWICColorTransform** ppIWICColorTransform)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, IWICColorTransform**, int>)(lpVtbl[16]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), ppIWICColorTransform);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateBitmap"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult CreateBitmap(uint uiWidth, uint uiHeight, Guid* pixelFormat, WICBitmapCreateCacheOption option, IWICBitmap** ppIBitmap)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, uint, uint, Guid*, WICBitmapCreateCacheOption, IWICBitmap**, int>)(lpVtbl[17]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), uiWidth, uiHeight, pixelFormat, option, ppIBitmap);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateBitmapFromSource"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult CreateBitmapFromSource(IWICBitmapSource* pIBitmapSource, WICBitmapCreateCacheOption option, IWICBitmap** ppIBitmap)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, IWICBitmapSource*, WICBitmapCreateCacheOption, IWICBitmap**, int>)(lpVtbl[18]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), pIBitmapSource, option, ppIBitmap);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateBitmapFromSourceRect"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult CreateBitmapFromSourceRect(IWICBitmapSource* pIBitmapSource, uint x, uint y, uint width, uint height, IWICBitmap** ppIBitmap)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, IWICBitmapSource*, uint, uint, uint, uint, IWICBitmap**, int>)(lpVtbl[19]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), pIBitmapSource, x, y, width, height, ppIBitmap);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateBitmapFromMemory"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult CreateBitmapFromMemory(uint uiWidth, uint uiHeight, Guid* pixelFormat, uint cbStride, uint cbBufferSize, byte* pbBuffer, IWICBitmap** ppIBitmap)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, uint, uint, Guid*, uint, uint, byte*, IWICBitmap**, int>)(lpVtbl[20]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), uiWidth, uiHeight, pixelFormat, cbStride, cbBufferSize, pbBuffer, ppIBitmap);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateBitmapFromHBITMAP"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult CreateBitmapFromHBITMAP(IntPtr hBitmap, IntPtr hPalette, WICBitmapAlphaChannelOption options, IWICBitmap** ppIBitmap)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, IntPtr, IntPtr, WICBitmapAlphaChannelOption, IWICBitmap**, int>)(lpVtbl[21]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), hBitmap, hPalette, options, ppIBitmap);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateBitmapFromHICON"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult CreateBitmapFromHICON(IntPtr hIcon, IWICBitmap** ppIBitmap)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, IntPtr, IWICBitmap**, int>)(lpVtbl[22]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), hIcon, ppIBitmap);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateComponentEnumerator"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult CreateComponentEnumerator(uint componentTypes, uint options, Com.IEnumUnknown** ppIEnumUnknown)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, uint, uint, Com.IEnumUnknown**, int>)(lpVtbl[23]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), componentTypes, options, ppIEnumUnknown);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateFastMetadataEncoderFromDecoder"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult CreateFastMetadataEncoderFromDecoder(IWICBitmapDecoder* pIDecoder, IWICFastMetadataEncoder** ppIFastEncoder)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, IWICBitmapDecoder*, IWICFastMetadataEncoder**, int>)(lpVtbl[24]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), pIDecoder, ppIFastEncoder);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateFastMetadataEncoderFromFrameDecode"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult CreateFastMetadataEncoderFromFrameDecode(IWICBitmapFrameDecode* pIFrameDecoder, IWICFastMetadataEncoder** ppIFastEncoder)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, IWICBitmapFrameDecode*, IWICFastMetadataEncoder**, int>)(lpVtbl[25]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), pIFrameDecoder, ppIFastEncoder);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateQueryWriter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult CreateQueryWriter(Guid* guidMetadataFormat, Guid* pguidVendor, IWICMetadataQueryWriter** ppIQueryWriter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, Guid*, Guid*, IWICMetadataQueryWriter**, int>)(lpVtbl[26]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), guidMetadataFormat, pguidVendor, ppIQueryWriter);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICImagingFactory::CreateQueryWriterFromReader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult CreateQueryWriterFromReader(IWICMetadataQueryReader* pIQueryReader, Guid* pguidVendor, IWICMetadataQueryWriter** ppIQueryWriter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICImagingFactory*, IWICMetadataQueryReader*, Guid*, IWICMetadataQueryWriter**, int>)(lpVtbl[27]))((IWICImagingFactory*)Unsafe.AsPointer(ref this), pIQueryReader, pguidVendor, ppIQueryWriter);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRawNotificationCallback"]/*' />
/// <unmanaged>IWICDevelopRawNotificationCallback</unmanaged>
[Guid("95c75a6e-3e8c-4ec2-85a8-aebcc551e59b")]
[NativeTypeName("struct IWICDevelopRawNotificationCallback : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICDevelopRawNotificationCallback
{
	public static ref readonly Guid IID_IWICDevelopRawNotificationCallback
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x6E, 0x5A, 0xC7, 0x95,
				0x8C, 0x3E,
				0xC2, 0x4E,
				0x85,
				0xA8,
				0xAE,
				0xBC,
				0xC5,
				0x51,
				0xE5,
				0x9B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICDevelopRawNotificationCallback));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRawNotificationCallback::Notify"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult Notify(uint NotificationMask)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRawNotificationCallback*, uint, int>)(lpVtbl[3]))((IWICDevelopRawNotificationCallback*)Unsafe.AsPointer(ref this), NotificationMask);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw"]/*' />
/// <unmanaged>IWICDevelopRaw</unmanaged>
[Guid("fbec5e44-f7be-4b65-b7f8-c0c81fef026d")]
[NativeTypeName("struct IWICDevelopRaw : IWICBitmapFrameDecode")]
[NativeInheritance("IWICBitmapFrameDecode")]
public unsafe partial struct IWICDevelopRaw
{
	public static ref readonly Guid IID_IWICDevelopRaw
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x44, 0x5E, 0xEC, 0xFB,
				0xBE, 0xF7,
				0x65, 0x4B,
				0xB7,
				0xF8,
				0xC0,
				0xC8,
				0x1F,
				0xEF,
				0x02,
				0x6D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICDevelopRaw));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICBitmapFrameDecode.GetMetadataQueryReader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetMetadataQueryReader(IWICMetadataQueryReader** ppIMetadataQueryReader)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, IWICMetadataQueryReader**, int>)(lpVtbl[3]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), ppIMetadataQueryReader);
	}

	/// <inheritdoc cref="IWICBitmapFrameDecode.GetColorContexts" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetColorContexts(uint cCount, IWICColorContext** ppIColorContexts, uint* pcActualCount)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, uint, IWICColorContext**, uint*, int>)(lpVtbl[4]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), cCount, ppIColorContexts, pcActualCount);
	}

	/// <inheritdoc cref="IWICBitmapFrameDecode.GetThumbnail" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetThumbnail(IWICBitmapSource** ppIThumbnail)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, IWICBitmapSource**, int>)(lpVtbl[5]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), ppIThumbnail);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetSize(uint* puiWidth, uint* puiHeight)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, uint*, uint*, int>)(lpVtbl[6]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), puiWidth, puiHeight);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetPixelFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetPixelFormat(Guid* pPixelFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, Guid*, int>)(lpVtbl[7]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pPixelFormat);
	}

	/// <inheritdoc cref="IWICBitmapSource.GetResolution" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetResolution(double* pDpiX, double* pDpiY)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double*, double*, int>)(lpVtbl[8]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pDpiX, pDpiY);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPalette" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CopyPalette(IWICPalette* pIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, IWICPalette*, int>)(lpVtbl[9]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pIPalette);
	}

	/// <inheritdoc cref="IWICBitmapSource.CopyPixels" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult CopyPixels(System.Drawing.Rectangle* prc, uint cbStride, uint cbBufferSize, byte* pbBuffer)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, System.Drawing.Rectangle*, uint, uint, byte*, int>)(lpVtbl[10]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), prc, cbStride, cbBufferSize, pbBuffer);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::QueryRawCapabilitiesInfo"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult QueryRawCapabilitiesInfo(WICRawCapabilitiesInfo* pInfo)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, WICRawCapabilitiesInfo*, int>)(lpVtbl[11]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pInfo);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::LoadParameterSet"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult LoadParameterSet(WICRawParameterSet ParameterSet)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, WICRawParameterSet, int>)(lpVtbl[12]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), ParameterSet);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::GetCurrentParameterSet"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetCurrentParameterSet(Com.IPropertyBag2** ppCurrentParameterSet)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, Com.IPropertyBag2**, int>)(lpVtbl[13]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), ppCurrentParameterSet);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::SetExposureCompensation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult SetExposureCompensation(double ev)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double, int>)(lpVtbl[14]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), ev);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::GetExposureCompensation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetExposureCompensation(double* pEV)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double*, int>)(lpVtbl[15]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pEV);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::SetWhitePointRGB"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult SetWhitePointRGB(uint Red, uint Green, uint Blue)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, uint, uint, uint, int>)(lpVtbl[16]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), Red, Green, Blue);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::GetWhitePointRGB"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetWhitePointRGB(uint* pRed, uint* pGreen, uint* pBlue)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, uint*, uint*, uint*, int>)(lpVtbl[17]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pRed, pGreen, pBlue);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::SetNamedWhitePoint"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult SetNamedWhitePoint(WICNamedWhitePoint WhitePoint)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, WICNamedWhitePoint, int>)(lpVtbl[18]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), WhitePoint);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::GetNamedWhitePoint"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetNamedWhitePoint(WICNamedWhitePoint* pWhitePoint)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, WICNamedWhitePoint*, int>)(lpVtbl[19]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pWhitePoint);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::SetWhitePointKelvin"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult SetWhitePointKelvin(uint WhitePointKelvin)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, uint, int>)(lpVtbl[20]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), WhitePointKelvin);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::GetWhitePointKelvin"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetWhitePointKelvin(uint* pWhitePointKelvin)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, uint*, int>)(lpVtbl[21]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pWhitePointKelvin);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::GetKelvinRangeInfo"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult GetKelvinRangeInfo(uint* pMinKelvinTemp, uint* pMaxKelvinTemp, uint* pKelvinTempStepValue)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, uint*, uint*, uint*, int>)(lpVtbl[22]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pMinKelvinTemp, pMaxKelvinTemp, pKelvinTempStepValue);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::SetContrast"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult SetContrast(double Contrast)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double, int>)(lpVtbl[23]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), Contrast);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::GetContrast"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult GetContrast(double* pContrast)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double*, int>)(lpVtbl[24]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pContrast);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::SetGamma"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult SetGamma(double Gamma)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double, int>)(lpVtbl[25]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), Gamma);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::GetGamma"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult GetGamma(double* pGamma)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double*, int>)(lpVtbl[26]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pGamma);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::SetSharpness"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult SetSharpness(double Sharpness)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double, int>)(lpVtbl[27]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), Sharpness);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::GetSharpness"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult GetSharpness(double* pSharpness)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double*, int>)(lpVtbl[28]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pSharpness);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::SetSaturation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult SetSaturation(double Saturation)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double, int>)(lpVtbl[29]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), Saturation);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::GetSaturation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult GetSaturation(double* pSaturation)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double*, int>)(lpVtbl[30]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pSaturation);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::SetTint"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult SetTint(double Tint)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double, int>)(lpVtbl[31]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), Tint);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::GetTint"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult GetTint(double* pTint)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double*, int>)(lpVtbl[32]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pTint);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::SetNoiseReduction"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult SetNoiseReduction(double NoiseReduction)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double, int>)(lpVtbl[33]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), NoiseReduction);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::GetNoiseReduction"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult GetNoiseReduction(double* pNoiseReduction)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double*, int>)(lpVtbl[34]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pNoiseReduction);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::SetDestinationColorContext"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult SetDestinationColorContext(IWICColorContext* pColorContext)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, IWICColorContext*, int>)(lpVtbl[35]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pColorContext);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::SetToneCurve"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult SetToneCurve(uint cbToneCurveSize, WICRawToneCurve* pToneCurve)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, uint, WICRawToneCurve*, int>)(lpVtbl[36]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), cbToneCurveSize, pToneCurve);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::GetToneCurve"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult GetToneCurve(uint cbToneCurveBufferSize, WICRawToneCurve* pToneCurve, uint* pcbActualToneCurveBufferSize)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, uint, WICRawToneCurve*, uint*, int>)(lpVtbl[37]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), cbToneCurveBufferSize, pToneCurve, pcbActualToneCurveBufferSize);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::SetRotation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult SetRotation(double Rotation)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double, int>)(lpVtbl[38]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), Rotation);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::GetRotation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult GetRotation(double* pRotation)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, double*, int>)(lpVtbl[39]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pRotation);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::SetRenderMode"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult SetRenderMode(WICRawRenderMode RenderMode)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, WICRawRenderMode, int>)(lpVtbl[40]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), RenderMode);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::GetRenderMode"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult GetRenderMode(WICRawRenderMode* pRenderMode)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, WICRawRenderMode*, int>)(lpVtbl[41]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pRenderMode);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDevelopRaw::SetNotificationCallback"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public HResult SetNotificationCallback(IWICDevelopRawNotificationCallback* pCallback)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDevelopRaw*, IWICDevelopRawNotificationCallback*, int>)(lpVtbl[42]))((IWICDevelopRaw*)Unsafe.AsPointer(ref this), pCallback);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICDdsDecoder"]/*' />
/// <unmanaged>IWICDdsDecoder</unmanaged>
[Guid("409cd537-8532-40cb-9774-e2feb2df4e9c")]
[NativeTypeName("struct IWICDdsDecoder : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICDdsDecoder
{
	public static ref readonly Guid IID_IWICDdsDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x37, 0xD5, 0x9C, 0x40,
				0x32, 0x85,
				0xCB, 0x40,
				0x97,
				0x74,
				0xE2,
				0xFE,
				0xB2,
				0xDF,
				0x4E,
				0x9C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICDdsDecoder));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDdsDecoder::GetParameters"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetParameters(WICDdsParameters* pParameters)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDdsDecoder*, WICDdsParameters*, int>)(lpVtbl[3]))((IWICDdsDecoder*)Unsafe.AsPointer(ref this), pParameters);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDdsDecoder::GetFrame"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetFrame(uint arrayIndex, uint mipLevel, uint sliceIndex, IWICBitmapFrameDecode** ppIBitmapFrame)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDdsDecoder*, uint, uint, uint, IWICBitmapFrameDecode**, int>)(lpVtbl[4]))((IWICDdsDecoder*)Unsafe.AsPointer(ref this), arrayIndex, mipLevel, sliceIndex, ppIBitmapFrame);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICDdsEncoder"]/*' />
/// <unmanaged>IWICDdsEncoder</unmanaged>
[Guid("5cacdb4c-407e-41b3-b936-d0f010cd6732")]
[NativeTypeName("struct IWICDdsEncoder : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICDdsEncoder
{
	public static ref readonly Guid IID_IWICDdsEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x4C, 0xDB, 0xAC, 0x5C,
				0x7E, 0x40,
				0xB3, 0x41,
				0xB9,
				0x36,
				0xD0,
				0xF0,
				0x10,
				0xCD,
				0x67,
				0x32
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICDdsEncoder));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDdsEncoder::SetParameters"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetParameters(WICDdsParameters* pParameters)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDdsEncoder*, WICDdsParameters*, int>)(lpVtbl[3]))((IWICDdsEncoder*)Unsafe.AsPointer(ref this), pParameters);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDdsEncoder::GetParameters"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetParameters(WICDdsParameters* pParameters)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDdsEncoder*, WICDdsParameters*, int>)(lpVtbl[4]))((IWICDdsEncoder*)Unsafe.AsPointer(ref this), pParameters);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDdsEncoder::CreateNewFrame"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult CreateNewFrame(IWICBitmapFrameEncode** ppIFrameEncode, uint* pArrayIndex, uint* pMipLevel, uint* pSliceIndex)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDdsEncoder*, IWICBitmapFrameEncode**, uint*, uint*, uint*, int>)(lpVtbl[5]))((IWICDdsEncoder*)Unsafe.AsPointer(ref this), ppIFrameEncode, pArrayIndex, pMipLevel, pSliceIndex);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICDdsFrameDecode"]/*' />
/// <unmanaged>IWICDdsFrameDecode</unmanaged>
[Guid("3d4c0c61-18a4-41e4-bd80-481a4fc9f464")]
[NativeTypeName("struct IWICDdsFrameDecode : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICDdsFrameDecode
{
	public static ref readonly Guid IID_IWICDdsFrameDecode
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x61, 0x0C, 0x4C, 0x3D,
				0xA4, 0x18,
				0xE4, 0x41,
				0xBD,
				0x80,
				0x48,
				0x1A,
				0x4F,
				0xC9,
				0xF4,
				0x64
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICDdsFrameDecode));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDdsFrameDecode::GetSizeInBlocks"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetSizeInBlocks(uint* pWidthInBlocks, uint* pHeightInBlocks)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDdsFrameDecode*, uint*, uint*, int>)(lpVtbl[3]))((IWICDdsFrameDecode*)Unsafe.AsPointer(ref this), pWidthInBlocks, pHeightInBlocks);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDdsFrameDecode::GetFormatInfo"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetFormatInfo(WICDdsFormatInfo* pFormatInfo)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDdsFrameDecode*, WICDdsFormatInfo*, int>)(lpVtbl[4]))((IWICDdsFrameDecode*)Unsafe.AsPointer(ref this), pFormatInfo);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICDdsFrameDecode::CopyBlocks"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult CopyBlocks(System.Drawing.Rectangle* prcBoundsInBlocks, uint cbStride, uint cbBufferSize, byte* pbBuffer)
	{
		return ((delegate* unmanaged[Stdcall]<IWICDdsFrameDecode*, System.Drawing.Rectangle*, uint, uint, byte*, int>)(lpVtbl[5]))((IWICDdsFrameDecode*)Unsafe.AsPointer(ref this), prcBoundsInBlocks, cbStride, cbBufferSize, pbBuffer);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICJpegFrameDecode"]/*' />
/// <unmanaged>IWICJpegFrameDecode</unmanaged>
[Guid("8939f66e-c46a-4c21-a9d1-98b327ce1679")]
[NativeTypeName("struct IWICJpegFrameDecode : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICJpegFrameDecode
{
	public static ref readonly Guid IID_IWICJpegFrameDecode
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x6E, 0xF6, 0x39, 0x89,
				0x6A, 0xC4,
				0x21, 0x4C,
				0xA9,
				0xD1,
				0x98,
				0xB3,
				0x27,
				0xCE,
				0x16,
				0x79
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICJpegFrameDecode));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICJpegFrameDecode::DoesSupportIndexing"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult DoesSupportIndexing(Bool32* pfIndexingSupported)
	{
		return ((delegate* unmanaged[Stdcall]<IWICJpegFrameDecode*, Bool32*, int>)(lpVtbl[3]))((IWICJpegFrameDecode*)Unsafe.AsPointer(ref this), pfIndexingSupported);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICJpegFrameDecode::SetIndexing"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetIndexing(WICJpegIndexingOptions options, uint horizontalIntervalSize)
	{
		return ((delegate* unmanaged[Stdcall]<IWICJpegFrameDecode*, WICJpegIndexingOptions, uint, int>)(lpVtbl[4]))((IWICJpegFrameDecode*)Unsafe.AsPointer(ref this), options, horizontalIntervalSize);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICJpegFrameDecode::ClearIndexing"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult ClearIndexing()
	{
		return ((delegate* unmanaged[Stdcall]<IWICJpegFrameDecode*, int>)(lpVtbl[5]))((IWICJpegFrameDecode*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICJpegFrameDecode::GetAcHuffmanTable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetAcHuffmanTable(uint scanIndex, uint tableIndex, Graphics.Dxgi.Common.JpegAcHuffmanTable* pAcHuffmanTable)
	{
		return ((delegate* unmanaged[Stdcall]<IWICJpegFrameDecode*, uint, uint, Graphics.Dxgi.Common.JpegAcHuffmanTable*, int>)(lpVtbl[6]))((IWICJpegFrameDecode*)Unsafe.AsPointer(ref this), scanIndex, tableIndex, pAcHuffmanTable);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICJpegFrameDecode::GetDcHuffmanTable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetDcHuffmanTable(uint scanIndex, uint tableIndex, Graphics.Dxgi.Common.JpegDcHuffmanTable* pDcHuffmanTable)
	{
		return ((delegate* unmanaged[Stdcall]<IWICJpegFrameDecode*, uint, uint, Graphics.Dxgi.Common.JpegDcHuffmanTable*, int>)(lpVtbl[7]))((IWICJpegFrameDecode*)Unsafe.AsPointer(ref this), scanIndex, tableIndex, pDcHuffmanTable);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICJpegFrameDecode::GetQuantizationTable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetQuantizationTable(uint scanIndex, uint tableIndex, Graphics.Dxgi.Common.JpegQuantizationTable* pQuantizationTable)
	{
		return ((delegate* unmanaged[Stdcall]<IWICJpegFrameDecode*, uint, uint, Graphics.Dxgi.Common.JpegQuantizationTable*, int>)(lpVtbl[8]))((IWICJpegFrameDecode*)Unsafe.AsPointer(ref this), scanIndex, tableIndex, pQuantizationTable);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICJpegFrameDecode::GetFrameHeader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetFrameHeader(WICJpegFrameHeader* pFrameHeader)
	{
		return ((delegate* unmanaged[Stdcall]<IWICJpegFrameDecode*, WICJpegFrameHeader*, int>)(lpVtbl[9]))((IWICJpegFrameDecode*)Unsafe.AsPointer(ref this), pFrameHeader);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICJpegFrameDecode::GetScanHeader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetScanHeader(uint scanIndex, WICJpegScanHeader* pScanHeader)
	{
		return ((delegate* unmanaged[Stdcall]<IWICJpegFrameDecode*, uint, WICJpegScanHeader*, int>)(lpVtbl[10]))((IWICJpegFrameDecode*)Unsafe.AsPointer(ref this), scanIndex, pScanHeader);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICJpegFrameDecode::CopyScan"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CopyScan(uint scanIndex, uint scanOffset, uint cbScanData, byte* pbScanData, uint* pcbScanDataActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICJpegFrameDecode*, uint, uint, uint, byte*, uint*, int>)(lpVtbl[11]))((IWICJpegFrameDecode*)Unsafe.AsPointer(ref this), scanIndex, scanOffset, cbScanData, pbScanData, pcbScanDataActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICJpegFrameDecode::CopyMinimalStream"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CopyMinimalStream(uint streamOffset, uint cbStreamData, byte* pbStreamData, uint* pcbStreamDataActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICJpegFrameDecode*, uint, uint, byte*, uint*, int>)(lpVtbl[12]))((IWICJpegFrameDecode*)Unsafe.AsPointer(ref this), streamOffset, cbStreamData, pbStreamData, pcbStreamDataActual);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICJpegFrameEncode"]/*' />
/// <unmanaged>IWICJpegFrameEncode</unmanaged>
[Guid("2f0c601f-d2c6-468c-abfa-49495d983ed1")]
[NativeTypeName("struct IWICJpegFrameEncode : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICJpegFrameEncode
{
	public static ref readonly Guid IID_IWICJpegFrameEncode
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1F, 0x60, 0x0C, 0x2F,
				0xC6, 0xD2,
				0x8C, 0x46,
				0xAB,
				0xFA,
				0x49,
				0x49,
				0x5D,
				0x98,
				0x3E,
				0xD1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICJpegFrameEncode));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICJpegFrameEncode::GetAcHuffmanTable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetAcHuffmanTable(uint scanIndex, uint tableIndex, Graphics.Dxgi.Common.JpegAcHuffmanTable* pAcHuffmanTable)
	{
		return ((delegate* unmanaged[Stdcall]<IWICJpegFrameEncode*, uint, uint, Graphics.Dxgi.Common.JpegAcHuffmanTable*, int>)(lpVtbl[3]))((IWICJpegFrameEncode*)Unsafe.AsPointer(ref this), scanIndex, tableIndex, pAcHuffmanTable);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICJpegFrameEncode::GetDcHuffmanTable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetDcHuffmanTable(uint scanIndex, uint tableIndex, Graphics.Dxgi.Common.JpegDcHuffmanTable* pDcHuffmanTable)
	{
		return ((delegate* unmanaged[Stdcall]<IWICJpegFrameEncode*, uint, uint, Graphics.Dxgi.Common.JpegDcHuffmanTable*, int>)(lpVtbl[4]))((IWICJpegFrameEncode*)Unsafe.AsPointer(ref this), scanIndex, tableIndex, pDcHuffmanTable);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICJpegFrameEncode::GetQuantizationTable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetQuantizationTable(uint scanIndex, uint tableIndex, Graphics.Dxgi.Common.JpegQuantizationTable* pQuantizationTable)
	{
		return ((delegate* unmanaged[Stdcall]<IWICJpegFrameEncode*, uint, uint, Graphics.Dxgi.Common.JpegQuantizationTable*, int>)(lpVtbl[5]))((IWICJpegFrameEncode*)Unsafe.AsPointer(ref this), scanIndex, tableIndex, pQuantizationTable);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICJpegFrameEncode::WriteScan"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult WriteScan(uint cbScanData, byte* pbScanData)
	{
		return ((delegate* unmanaged[Stdcall]<IWICJpegFrameEncode*, uint, byte*, int>)(lpVtbl[6]))((IWICJpegFrameEncode*)Unsafe.AsPointer(ref this), cbScanData, pbScanData);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataBlockReader"]/*' />
/// <unmanaged>IWICMetadataBlockReader</unmanaged>
[Guid("feaa2a8d-b3f3-43e4-b25c-d1de990a1ae1")]
[NativeTypeName("struct IWICMetadataBlockReader : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICMetadataBlockReader
{
	public static ref readonly Guid IID_IWICMetadataBlockReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8D, 0x2A, 0xAA, 0xFE,
				0xF3, 0xB3,
				0xE4, 0x43,
				0xB2,
				0x5C,
				0xD1,
				0xDE,
				0x99,
				0x0A,
				0x1A,
				0xE1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICMetadataBlockReader));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataBlockReader::GetContainerFormat"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetContainerFormat(Guid* pguidContainerFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataBlockReader*, Guid*, int>)(lpVtbl[3]))((IWICMetadataBlockReader*)Unsafe.AsPointer(ref this), pguidContainerFormat);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataBlockReader::GetCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetCount(uint* pcCount)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataBlockReader*, uint*, int>)(lpVtbl[4]))((IWICMetadataBlockReader*)Unsafe.AsPointer(ref this), pcCount);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataBlockReader::GetReaderByIndex"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetReaderByIndex(uint nIndex, IWICMetadataReader** ppIMetadataReader)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataBlockReader*, uint, IWICMetadataReader**, int>)(lpVtbl[5]))((IWICMetadataBlockReader*)Unsafe.AsPointer(ref this), nIndex, ppIMetadataReader);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataBlockReader::GetEnumerator"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetEnumerator(Com.IEnumUnknown** ppIEnumMetadata)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataBlockReader*, Com.IEnumUnknown**, int>)(lpVtbl[6]))((IWICMetadataBlockReader*)Unsafe.AsPointer(ref this), ppIEnumMetadata);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataBlockWriter"]/*' />
/// <unmanaged>IWICMetadataBlockWriter</unmanaged>
[Guid("08fb9676-b444-41e8-8dbe-6a53a542bff1")]
[NativeTypeName("struct IWICMetadataBlockWriter : IWICMetadataBlockReader")]
[NativeInheritance("IWICMetadataBlockReader")]
public unsafe partial struct IWICMetadataBlockWriter
{
	public static ref readonly Guid IID_IWICMetadataBlockWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x76, 0x96, 0xFB, 0x08,
				0x44, 0xB4,
				0xE8, 0x41,
				0x8D,
				0xBE,
				0x6A,
				0x53,
				0xA5,
				0x42,
				0xBF,
				0xF1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICMetadataBlockWriter));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICMetadataBlockReader.GetContainerFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetContainerFormat(Guid* pguidContainerFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataBlockWriter*, Guid*, int>)(lpVtbl[3]))((IWICMetadataBlockWriter*)Unsafe.AsPointer(ref this), pguidContainerFormat);
	}

	/// <inheritdoc cref="IWICMetadataBlockReader.GetCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetCount(uint* pcCount)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataBlockWriter*, uint*, int>)(lpVtbl[4]))((IWICMetadataBlockWriter*)Unsafe.AsPointer(ref this), pcCount);
	}

	/// <inheritdoc cref="IWICMetadataBlockReader.GetReaderByIndex" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetReaderByIndex(uint nIndex, IWICMetadataReader** ppIMetadataReader)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataBlockWriter*, uint, IWICMetadataReader**, int>)(lpVtbl[5]))((IWICMetadataBlockWriter*)Unsafe.AsPointer(ref this), nIndex, ppIMetadataReader);
	}

	/// <inheritdoc cref="IWICMetadataBlockReader.GetEnumerator" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetEnumerator(Com.IEnumUnknown** ppIEnumMetadata)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataBlockWriter*, Com.IEnumUnknown**, int>)(lpVtbl[6]))((IWICMetadataBlockWriter*)Unsafe.AsPointer(ref this), ppIEnumMetadata);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataBlockWriter::InitializeFromBlockReader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult InitializeFromBlockReader(IWICMetadataBlockReader* pIMDBlockReader)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataBlockWriter*, IWICMetadataBlockReader*, int>)(lpVtbl[7]))((IWICMetadataBlockWriter*)Unsafe.AsPointer(ref this), pIMDBlockReader);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataBlockWriter::GetWriterByIndex"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetWriterByIndex(uint nIndex, IWICMetadataWriter** ppIMetadataWriter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataBlockWriter*, uint, IWICMetadataWriter**, int>)(lpVtbl[8]))((IWICMetadataBlockWriter*)Unsafe.AsPointer(ref this), nIndex, ppIMetadataWriter);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataBlockWriter::AddWriter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult AddWriter(IWICMetadataWriter* pIMetadataWriter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataBlockWriter*, IWICMetadataWriter*, int>)(lpVtbl[9]))((IWICMetadataBlockWriter*)Unsafe.AsPointer(ref this), pIMetadataWriter);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataBlockWriter::SetWriterByIndex"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetWriterByIndex(uint nIndex, IWICMetadataWriter* pIMetadataWriter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataBlockWriter*, uint, IWICMetadataWriter*, int>)(lpVtbl[10]))((IWICMetadataBlockWriter*)Unsafe.AsPointer(ref this), nIndex, pIMetadataWriter);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataBlockWriter::RemoveWriterByIndex"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult RemoveWriterByIndex(uint nIndex)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataBlockWriter*, uint, int>)(lpVtbl[11]))((IWICMetadataBlockWriter*)Unsafe.AsPointer(ref this), nIndex);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataReader"]/*' />
/// <unmanaged>IWICMetadataReader</unmanaged>
[Guid("9204fe99-d8fc-4fd5-a001-9536b067a899")]
[NativeTypeName("struct IWICMetadataReader : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICMetadataReader
{
	public static ref readonly Guid IID_IWICMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x99, 0xFE, 0x04, 0x92,
				0xFC, 0xD8,
				0xD5, 0x4F,
				0xA0,
				0x01,
				0x95,
				0x36,
				0xB0,
				0x67,
				0xA8,
				0x99
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICMetadataReader));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataReader::GetMetadataFormat"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetMetadataFormat(Guid* pguidMetadataFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReader*, Guid*, int>)(lpVtbl[3]))((IWICMetadataReader*)Unsafe.AsPointer(ref this), pguidMetadataFormat);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataReader::GetMetadataHandlerInfo"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetMetadataHandlerInfo(IWICMetadataHandlerInfo** ppIHandler)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReader*, IWICMetadataHandlerInfo**, int>)(lpVtbl[4]))((IWICMetadataReader*)Unsafe.AsPointer(ref this), ppIHandler);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataReader::GetCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetCount(uint* pcCount)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReader*, uint*, int>)(lpVtbl[5]))((IWICMetadataReader*)Unsafe.AsPointer(ref this), pcCount);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataReader::GetValueByIndex"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetValueByIndex(uint nIndex, Com.Variant** pvarSchema, Com.Variant** pvarId, Com.Variant** pvarValue)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReader*, uint, Com.Variant**, Com.Variant**, Com.Variant**, int>)(lpVtbl[6]))((IWICMetadataReader*)Unsafe.AsPointer(ref this), nIndex, pvarSchema, pvarId, pvarValue);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataReader::GetValue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetValue(Com.Variant* pvarSchema, Com.Variant* pvarId, Com.Variant** pvarValue)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReader*, Com.Variant*, Com.Variant*, Com.Variant**, int>)(lpVtbl[7]))((IWICMetadataReader*)Unsafe.AsPointer(ref this), pvarSchema, pvarId, pvarValue);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataReader::GetEnumerator"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetEnumerator(IWICEnumMetadataItem** ppIEnumMetadata)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReader*, IWICEnumMetadataItem**, int>)(lpVtbl[8]))((IWICMetadataReader*)Unsafe.AsPointer(ref this), ppIEnumMetadata);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataWriter"]/*' />
/// <unmanaged>IWICMetadataWriter</unmanaged>
[Guid("f7836e16-3be0-470b-86bb-160d0aecd7de")]
[NativeTypeName("struct IWICMetadataWriter : IWICMetadataReader")]
[NativeInheritance("IWICMetadataReader")]
public unsafe partial struct IWICMetadataWriter
{
	public static ref readonly Guid IID_IWICMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x16, 0x6E, 0x83, 0xF7,
				0xE0, 0x3B,
				0x0B, 0x47,
				0x86,
				0xBB,
				0x16,
				0x0D,
				0x0A,
				0xEC,
				0xD7,
				0xDE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICMetadataWriter));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICMetadataReader.GetMetadataFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetMetadataFormat(Guid* pguidMetadataFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriter*, Guid*, int>)(lpVtbl[3]))((IWICMetadataWriter*)Unsafe.AsPointer(ref this), pguidMetadataFormat);
	}

	/// <inheritdoc cref="IWICMetadataReader.GetMetadataHandlerInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetMetadataHandlerInfo(IWICMetadataHandlerInfo** ppIHandler)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriter*, IWICMetadataHandlerInfo**, int>)(lpVtbl[4]))((IWICMetadataWriter*)Unsafe.AsPointer(ref this), ppIHandler);
	}

	/// <inheritdoc cref="IWICMetadataReader.GetCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetCount(uint* pcCount)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriter*, uint*, int>)(lpVtbl[5]))((IWICMetadataWriter*)Unsafe.AsPointer(ref this), pcCount);
	}

	/// <inheritdoc cref="IWICMetadataReader.GetValueByIndex" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetValueByIndex(uint nIndex, Com.Variant** pvarSchema, Com.Variant** pvarId, Com.Variant** pvarValue)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriter*, uint, Com.Variant**, Com.Variant**, Com.Variant**, int>)(lpVtbl[6]))((IWICMetadataWriter*)Unsafe.AsPointer(ref this), nIndex, pvarSchema, pvarId, pvarValue);
	}

	/// <inheritdoc cref="IWICMetadataReader.GetValue" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetValue(Com.Variant* pvarSchema, Com.Variant* pvarId, Com.Variant** pvarValue)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriter*, Com.Variant*, Com.Variant*, Com.Variant**, int>)(lpVtbl[7]))((IWICMetadataWriter*)Unsafe.AsPointer(ref this), pvarSchema, pvarId, pvarValue);
	}

	/// <inheritdoc cref="IWICMetadataReader.GetEnumerator" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetEnumerator(IWICEnumMetadataItem** ppIEnumMetadata)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriter*, IWICEnumMetadataItem**, int>)(lpVtbl[8]))((IWICMetadataWriter*)Unsafe.AsPointer(ref this), ppIEnumMetadata);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataWriter::SetValue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetValue(Com.Variant* pvarSchema, Com.Variant* pvarId, Com.Variant* pvarValue)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriter*, Com.Variant*, Com.Variant*, Com.Variant*, int>)(lpVtbl[9]))((IWICMetadataWriter*)Unsafe.AsPointer(ref this), pvarSchema, pvarId, pvarValue);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataWriter::SetValueByIndex"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetValueByIndex(uint nIndex, Com.Variant* pvarSchema, Com.Variant* pvarId, Com.Variant* pvarValue)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriter*, uint, Com.Variant*, Com.Variant*, Com.Variant*, int>)(lpVtbl[10]))((IWICMetadataWriter*)Unsafe.AsPointer(ref this), nIndex, pvarSchema, pvarId, pvarValue);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataWriter::RemoveValue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult RemoveValue(Com.Variant* pvarSchema, Com.Variant* pvarId)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriter*, Com.Variant*, Com.Variant*, int>)(lpVtbl[11]))((IWICMetadataWriter*)Unsafe.AsPointer(ref this), pvarSchema, pvarId);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataWriter::RemoveValueByIndex"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult RemoveValueByIndex(uint nIndex)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriter*, uint, int>)(lpVtbl[12]))((IWICMetadataWriter*)Unsafe.AsPointer(ref this), nIndex);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICStreamProvider"]/*' />
/// <unmanaged>IWICStreamProvider</unmanaged>
[Guid("449494bc-b468-4927-96d7-ba90d31ab505")]
[NativeTypeName("struct IWICStreamProvider : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct IWICStreamProvider
{
	public static ref readonly Guid IID_IWICStreamProvider
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xBC, 0x94, 0x94, 0x44,
				0x68, 0xB4,
				0x27, 0x49,
				0x96,
				0xD7,
				0xBA,
				0x90,
				0xD3,
				0x1A,
				0xB5,
				0x05
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICStreamProvider));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICStreamProvider::GetStream"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetStream(Com.IStream** ppIStream)
	{
		return ((delegate* unmanaged[Stdcall]<IWICStreamProvider*, Com.IStream**, int>)(lpVtbl[3]))((IWICStreamProvider*)Unsafe.AsPointer(ref this), ppIStream);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICStreamProvider::GetPersistOptions"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPersistOptions(uint* pdwPersistOptions)
	{
		return ((delegate* unmanaged[Stdcall]<IWICStreamProvider*, uint*, int>)(lpVtbl[4]))((IWICStreamProvider*)Unsafe.AsPointer(ref this), pdwPersistOptions);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICStreamProvider::GetPreferredVendorGUID"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetPreferredVendorGUID(Guid* pguidPreferredVendor)
	{
		return ((delegate* unmanaged[Stdcall]<IWICStreamProvider*, Guid*, int>)(lpVtbl[5]))((IWICStreamProvider*)Unsafe.AsPointer(ref this), pguidPreferredVendor);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICStreamProvider::RefreshStream"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult RefreshStream()
	{
		return ((delegate* unmanaged[Stdcall]<IWICStreamProvider*, int>)(lpVtbl[6]))((IWICStreamProvider*)Unsafe.AsPointer(ref this));
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICPersistStream"]/*' />
/// <unmanaged>IWICPersistStream</unmanaged>
[Guid("00675040-6908-45f8-86a3-49c7dfd6d9ad")]
[NativeTypeName("struct IWICPersistStream : IPersistStream")]
[NativeInheritance("IPersistStream")]
public unsafe partial struct IWICPersistStream
{
	public static ref readonly Guid IID_IWICPersistStream
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x40, 0x50, 0x67, 0x00,
				0x08, 0x69,
				0xF8, 0x45,
				0x86,
				0xA3,
				0x49,
				0xC7,
				0xDF,
				0xD6,
				0xD9,
				0xAD
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICPersistStream));

	public void** lpVtbl;

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPersistStream::LoadEx"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult LoadEx(Com.IStream* pIStream, Guid* pguidPreferredVendor, uint dwPersistOptions)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPersistStream*, Com.IStream*, Guid*, uint, int>)(lpVtbl[0]))((IWICPersistStream*)Unsafe.AsPointer(ref this), pIStream, pguidPreferredVendor, dwPersistOptions);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICPersistStream::SaveEx"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	public HResult SaveEx(Com.IStream* pIStream, uint dwPersistOptions, Bool32 fClearDirty)
	{
		return ((delegate* unmanaged[Stdcall]<IWICPersistStream*, Com.IStream*, uint, Bool32, int>)(lpVtbl[1]))((IWICPersistStream*)Unsafe.AsPointer(ref this), pIStream, dwPersistOptions, fClearDirty);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataHandlerInfo"]/*' />
/// <unmanaged>IWICMetadataHandlerInfo</unmanaged>
[Guid("aba958bf-c672-44d1-8d61-ce6df2e682c2")]
[NativeTypeName("struct IWICMetadataHandlerInfo : IWICComponentInfo")]
[NativeInheritance("IWICComponentInfo")]
public unsafe partial struct IWICMetadataHandlerInfo
{
	public static ref readonly Guid IID_IWICMetadataHandlerInfo
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xBF, 0x58, 0xA9, 0xAB,
				0x72, 0xC6,
				0xD1, 0x44,
				0x8D,
				0x61,
				0xCE,
				0x6D,
				0xF2,
				0xE6,
				0x82,
				0xC2
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICMetadataHandlerInfo));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICComponentInfo.GetComponentType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetComponentType(WICComponentType* pType)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataHandlerInfo*, WICComponentType*, int>)(lpVtbl[3]))((IWICMetadataHandlerInfo*)Unsafe.AsPointer(ref this), pType);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetCLSID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetCLSID(Guid* pclsid)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataHandlerInfo*, Guid*, int>)(lpVtbl[4]))((IWICMetadataHandlerInfo*)Unsafe.AsPointer(ref this), pclsid);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSigningStatus" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetSigningStatus(uint* pStatus)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataHandlerInfo*, uint*, int>)(lpVtbl[5]))((IWICMetadataHandlerInfo*)Unsafe.AsPointer(ref this), pStatus);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetAuthor" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetAuthor(uint cchAuthor, ushort* wzAuthor, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataHandlerInfo*, uint, ushort*, uint*, int>)(lpVtbl[6]))((IWICMetadataHandlerInfo*)Unsafe.AsPointer(ref this), cchAuthor, wzAuthor, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVendorGUID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetVendorGUID(Guid* pguidVendor)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataHandlerInfo*, Guid*, int>)(lpVtbl[7]))((IWICMetadataHandlerInfo*)Unsafe.AsPointer(ref this), pguidVendor);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetVersion(uint cchVersion, ushort* wzVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataHandlerInfo*, uint, ushort*, uint*, int>)(lpVtbl[8]))((IWICMetadataHandlerInfo*)Unsafe.AsPointer(ref this), cchVersion, wzVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSpecVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetSpecVersion(uint cchSpecVersion, ushort* wzSpecVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataHandlerInfo*, uint, ushort*, uint*, int>)(lpVtbl[9]))((IWICMetadataHandlerInfo*)Unsafe.AsPointer(ref this), cchSpecVersion, wzSpecVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetFriendlyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetFriendlyName(uint cchFriendlyName, ushort* wzFriendlyName, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataHandlerInfo*, uint, ushort*, uint*, int>)(lpVtbl[10]))((IWICMetadataHandlerInfo*)Unsafe.AsPointer(ref this), cchFriendlyName, wzFriendlyName, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataHandlerInfo::GetMetadataFormat"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetMetadataFormat(Guid* pguidMetadataFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataHandlerInfo*, Guid*, int>)(lpVtbl[11]))((IWICMetadataHandlerInfo*)Unsafe.AsPointer(ref this), pguidMetadataFormat);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataHandlerInfo::GetContainerFormats"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetContainerFormats(uint cContainerFormats, Guid* pguidContainerFormats, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataHandlerInfo*, uint, Guid*, uint*, int>)(lpVtbl[12]))((IWICMetadataHandlerInfo*)Unsafe.AsPointer(ref this), cContainerFormats, pguidContainerFormats, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataHandlerInfo::GetDeviceManufacturer"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetDeviceManufacturer(uint cchDeviceManufacturer, ushort* wzDeviceManufacturer, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataHandlerInfo*, uint, ushort*, uint*, int>)(lpVtbl[13]))((IWICMetadataHandlerInfo*)Unsafe.AsPointer(ref this), cchDeviceManufacturer, wzDeviceManufacturer, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataHandlerInfo::GetDeviceModels"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult GetDeviceModels(uint cchDeviceModels, ushort* wzDeviceModels, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataHandlerInfo*, uint, ushort*, uint*, int>)(lpVtbl[14]))((IWICMetadataHandlerInfo*)Unsafe.AsPointer(ref this), cchDeviceModels, wzDeviceModels, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataHandlerInfo::DoesRequireFullStream"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult DoesRequireFullStream(Bool32* pfRequiresFullStream)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataHandlerInfo*, Bool32*, int>)(lpVtbl[15]))((IWICMetadataHandlerInfo*)Unsafe.AsPointer(ref this), pfRequiresFullStream);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataHandlerInfo::DoesSupportPadding"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult DoesSupportPadding(Bool32* pfSupportsPadding)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataHandlerInfo*, Bool32*, int>)(lpVtbl[16]))((IWICMetadataHandlerInfo*)Unsafe.AsPointer(ref this), pfSupportsPadding);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataHandlerInfo::DoesRequireFixedSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult DoesRequireFixedSize(Bool32* pfFixedSize)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataHandlerInfo*, Bool32*, int>)(lpVtbl[17]))((IWICMetadataHandlerInfo*)Unsafe.AsPointer(ref this), pfFixedSize);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataReaderInfo"]/*' />
/// <unmanaged>IWICMetadataReaderInfo</unmanaged>
[Guid("eebf1f5b-07c1-4447-a3ab-22acaf78a804")]
[NativeTypeName("struct IWICMetadataReaderInfo : IWICMetadataHandlerInfo")]
[NativeInheritance("IWICMetadataHandlerInfo")]
public unsafe partial struct IWICMetadataReaderInfo
{
	public static ref readonly Guid IID_IWICMetadataReaderInfo
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5B, 0x1F, 0xBF, 0xEE,
				0xC1, 0x07,
				0x47, 0x44,
				0xA3,
				0xAB,
				0x22,
				0xAC,
				0xAF,
				0x78,
				0xA8,
				0x04
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICMetadataReaderInfo));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICMetadataHandlerInfo.GetMetadataFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetMetadataFormat(Guid* pguidMetadataFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, Guid*, int>)(lpVtbl[3]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), pguidMetadataFormat);
	}

	/// <inheritdoc cref="IWICMetadataHandlerInfo.GetContainerFormats" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetContainerFormats(uint cContainerFormats, Guid* pguidContainerFormats, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, uint, Guid*, uint*, int>)(lpVtbl[4]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), cContainerFormats, pguidContainerFormats, pcchActual);
	}

	/// <inheritdoc cref="IWICMetadataHandlerInfo.GetDeviceManufacturer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetDeviceManufacturer(uint cchDeviceManufacturer, ushort* wzDeviceManufacturer, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, uint, ushort*, uint*, int>)(lpVtbl[5]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), cchDeviceManufacturer, wzDeviceManufacturer, pcchActual);
	}

	/// <inheritdoc cref="IWICMetadataHandlerInfo.GetDeviceModels" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetDeviceModels(uint cchDeviceModels, ushort* wzDeviceModels, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, uint, ushort*, uint*, int>)(lpVtbl[6]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), cchDeviceModels, wzDeviceModels, pcchActual);
	}

	/// <inheritdoc cref="IWICMetadataHandlerInfo.DoesRequireFullStream" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult DoesRequireFullStream(Bool32* pfRequiresFullStream)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, Bool32*, int>)(lpVtbl[7]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), pfRequiresFullStream);
	}

	/// <inheritdoc cref="IWICMetadataHandlerInfo.DoesSupportPadding" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult DoesSupportPadding(Bool32* pfSupportsPadding)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, Bool32*, int>)(lpVtbl[8]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), pfSupportsPadding);
	}

	/// <inheritdoc cref="IWICMetadataHandlerInfo.DoesRequireFixedSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult DoesRequireFixedSize(Bool32* pfFixedSize)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, Bool32*, int>)(lpVtbl[9]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), pfFixedSize);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetComponentType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetComponentType(WICComponentType* pType)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, WICComponentType*, int>)(lpVtbl[10]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), pType);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetCLSID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetCLSID(Guid* pclsid)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, Guid*, int>)(lpVtbl[11]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), pclsid);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSigningStatus" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetSigningStatus(uint* pStatus)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, uint*, int>)(lpVtbl[12]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), pStatus);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetAuthor" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetAuthor(uint cchAuthor, ushort* wzAuthor, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, uint, ushort*, uint*, int>)(lpVtbl[13]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), cchAuthor, wzAuthor, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVendorGUID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult GetVendorGUID(Guid* pguidVendor)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, Guid*, int>)(lpVtbl[14]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), pguidVendor);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetVersion(uint cchVersion, ushort* wzVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, uint, ushort*, uint*, int>)(lpVtbl[15]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), cchVersion, wzVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSpecVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult GetSpecVersion(uint cchSpecVersion, ushort* wzSpecVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, uint, ushort*, uint*, int>)(lpVtbl[16]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), cchSpecVersion, wzSpecVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetFriendlyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetFriendlyName(uint cchFriendlyName, ushort* wzFriendlyName, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, uint, ushort*, uint*, int>)(lpVtbl[17]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), cchFriendlyName, wzFriendlyName, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataReaderInfo::GetPatterns"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult GetPatterns(Guid* guidContainerFormat, uint cbSize, WICMetadataPattern* pPattern, uint* pcCount, uint* pcbActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, Guid*, uint, WICMetadataPattern*, uint*, uint*, int>)(lpVtbl[18]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), guidContainerFormat, cbSize, pPattern, pcCount, pcbActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataReaderInfo::MatchesPattern"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult MatchesPattern(Guid* guidContainerFormat, Com.IStream* pIStream, Bool32* pfMatches)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, Guid*, Com.IStream*, Bool32*, int>)(lpVtbl[19]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), guidContainerFormat, pIStream, pfMatches);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataReaderInfo::CreateInstance"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult CreateInstance(IWICMetadataReader** ppIReader)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataReaderInfo*, IWICMetadataReader**, int>)(lpVtbl[20]))((IWICMetadataReaderInfo*)Unsafe.AsPointer(ref this), ppIReader);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataWriterInfo"]/*' />
/// <unmanaged>IWICMetadataWriterInfo</unmanaged>
[Guid("b22e3fba-3925-4323-b5c1-9ebfc430f236")]
[NativeTypeName("struct IWICMetadataWriterInfo : IWICMetadataHandlerInfo")]
[NativeInheritance("IWICMetadataHandlerInfo")]
public unsafe partial struct IWICMetadataWriterInfo
{
	public static ref readonly Guid IID_IWICMetadataWriterInfo
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xBA, 0x3F, 0x2E, 0xB2,
				0x25, 0x39,
				0x23, 0x43,
				0xB5,
				0xC1,
				0x9E,
				0xBF,
				0xC4,
				0x30,
				0xF2,
				0x36
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICMetadataWriterInfo));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICMetadataHandlerInfo.GetMetadataFormat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetMetadataFormat(Guid* pguidMetadataFormat)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, Guid*, int>)(lpVtbl[3]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), pguidMetadataFormat);
	}

	/// <inheritdoc cref="IWICMetadataHandlerInfo.GetContainerFormats" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetContainerFormats(uint cContainerFormats, Guid* pguidContainerFormats, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, uint, Guid*, uint*, int>)(lpVtbl[4]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), cContainerFormats, pguidContainerFormats, pcchActual);
	}

	/// <inheritdoc cref="IWICMetadataHandlerInfo.GetDeviceManufacturer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetDeviceManufacturer(uint cchDeviceManufacturer, ushort* wzDeviceManufacturer, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, uint, ushort*, uint*, int>)(lpVtbl[5]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), cchDeviceManufacturer, wzDeviceManufacturer, pcchActual);
	}

	/// <inheritdoc cref="IWICMetadataHandlerInfo.GetDeviceModels" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetDeviceModels(uint cchDeviceModels, ushort* wzDeviceModels, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, uint, ushort*, uint*, int>)(lpVtbl[6]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), cchDeviceModels, wzDeviceModels, pcchActual);
	}

	/// <inheritdoc cref="IWICMetadataHandlerInfo.DoesRequireFullStream" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult DoesRequireFullStream(Bool32* pfRequiresFullStream)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, Bool32*, int>)(lpVtbl[7]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), pfRequiresFullStream);
	}

	/// <inheritdoc cref="IWICMetadataHandlerInfo.DoesSupportPadding" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult DoesSupportPadding(Bool32* pfSupportsPadding)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, Bool32*, int>)(lpVtbl[8]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), pfSupportsPadding);
	}

	/// <inheritdoc cref="IWICMetadataHandlerInfo.DoesRequireFixedSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult DoesRequireFixedSize(Bool32* pfFixedSize)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, Bool32*, int>)(lpVtbl[9]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), pfFixedSize);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetComponentType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetComponentType(WICComponentType* pType)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, WICComponentType*, int>)(lpVtbl[10]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), pType);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetCLSID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetCLSID(Guid* pclsid)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, Guid*, int>)(lpVtbl[11]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), pclsid);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSigningStatus" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetSigningStatus(uint* pStatus)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, uint*, int>)(lpVtbl[12]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), pStatus);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetAuthor" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetAuthor(uint cchAuthor, ushort* wzAuthor, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, uint, ushort*, uint*, int>)(lpVtbl[13]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), cchAuthor, wzAuthor, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVendorGUID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult GetVendorGUID(Guid* pguidVendor)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, Guid*, int>)(lpVtbl[14]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), pguidVendor);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetVersion(uint cchVersion, ushort* wzVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, uint, ushort*, uint*, int>)(lpVtbl[15]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), cchVersion, wzVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetSpecVersion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult GetSpecVersion(uint cchSpecVersion, ushort* wzSpecVersion, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, uint, ushort*, uint*, int>)(lpVtbl[16]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), cchSpecVersion, wzSpecVersion, pcchActual);
	}

	/// <inheritdoc cref="IWICComponentInfo.GetFriendlyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetFriendlyName(uint cchFriendlyName, ushort* wzFriendlyName, uint* pcchActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, uint, ushort*, uint*, int>)(lpVtbl[17]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), cchFriendlyName, wzFriendlyName, pcchActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataWriterInfo::GetHeader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult GetHeader(Guid* guidContainerFormat, uint cbSize, WICMetadataHeader* pHeader, uint* pcbActual)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, Guid*, uint, WICMetadataHeader*, uint*, int>)(lpVtbl[18]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), guidContainerFormat, cbSize, pHeader, pcbActual);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICMetadataWriterInfo::CreateInstance"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult CreateInstance(IWICMetadataWriter** ppIWriter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICMetadataWriterInfo*, IWICMetadataWriter**, int>)(lpVtbl[19]))((IWICMetadataWriterInfo*)Unsafe.AsPointer(ref this), ppIWriter);
	}
}

/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentFactory"]/*' />
/// <unmanaged>IWICComponentFactory</unmanaged>
[Guid("412d0c3a-9650-44fa-af5b-dd2a06c8e8fb")]
[NativeTypeName("struct IWICComponentFactory : IWICImagingFactory")]
[NativeInheritance("IWICImagingFactory")]
public unsafe partial struct IWICComponentFactory
{
	public static ref readonly Guid IID_IWICComponentFactory
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3A, 0x0C, 0x2D, 0x41,
				0x50, 0x96,
				0xFA, 0x44,
				0xAF,
				0x5B,
				0xDD,
				0x2A,
				0x06,
				0xC8,
				0xE8,
				0xFB
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IWICComponentFactory));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateDecoderFromFilename" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreateDecoderFromFilename(ushort* wzFilename, Guid* pguidVendor, uint dwDesiredAccess, WICDecodeOptions metadataOptions, IWICBitmapDecoder** ppIDecoder)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, ushort*, Guid*, uint, WICDecodeOptions, IWICBitmapDecoder**, int>)(lpVtbl[3]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), wzFilename, pguidVendor, dwDesiredAccess, metadataOptions, ppIDecoder);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateDecoderFromStream" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateDecoderFromStream(Com.IStream* pIStream, Guid* pguidVendor, WICDecodeOptions metadataOptions, IWICBitmapDecoder** ppIDecoder)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, Com.IStream*, Guid*, WICDecodeOptions, IWICBitmapDecoder**, int>)(lpVtbl[4]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), pIStream, pguidVendor, metadataOptions, ppIDecoder);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateDecoderFromFileHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult CreateDecoderFromFileHandle(nuint hFile, Guid* pguidVendor, WICDecodeOptions metadataOptions, IWICBitmapDecoder** ppIDecoder)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, nuint, Guid*, WICDecodeOptions, IWICBitmapDecoder**, int>)(lpVtbl[5]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), hFile, pguidVendor, metadataOptions, ppIDecoder);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateComponentInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CreateComponentInfo(Guid* clsidComponent, IWICComponentInfo** ppIInfo)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, Guid*, IWICComponentInfo**, int>)(lpVtbl[6]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), clsidComponent, ppIInfo);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateDecoder" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CreateDecoder(Guid* guidContainerFormat, Guid* pguidVendor, IWICBitmapDecoder** ppIDecoder)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, Guid*, Guid*, IWICBitmapDecoder**, int>)(lpVtbl[7]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), guidContainerFormat, pguidVendor, ppIDecoder);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateEncoder" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult CreateEncoder(Guid* guidContainerFormat, Guid* pguidVendor, IWICBitmapEncoder** ppIEncoder)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, Guid*, Guid*, IWICBitmapEncoder**, int>)(lpVtbl[8]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), guidContainerFormat, pguidVendor, ppIEncoder);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreatePalette" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CreatePalette(IWICPalette** ppIPalette)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IWICPalette**, int>)(lpVtbl[9]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), ppIPalette);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateFormatConverter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult CreateFormatConverter(IWICFormatConverter** ppIFormatConverter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IWICFormatConverter**, int>)(lpVtbl[10]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), ppIFormatConverter);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateBitmapScaler" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CreateBitmapScaler(IWICBitmapScaler** ppIBitmapScaler)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IWICBitmapScaler**, int>)(lpVtbl[11]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), ppIBitmapScaler);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateBitmapClipper" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CreateBitmapClipper(IWICBitmapClipper** ppIBitmapClipper)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IWICBitmapClipper**, int>)(lpVtbl[12]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), ppIBitmapClipper);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateBitmapFlipRotator" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult CreateBitmapFlipRotator(IWICBitmapFlipRotator** ppIBitmapFlipRotator)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IWICBitmapFlipRotator**, int>)(lpVtbl[13]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), ppIBitmapFlipRotator);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateStream" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult CreateStream(IWICStream** ppIWICStream)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IWICStream**, int>)(lpVtbl[14]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), ppIWICStream);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateColorContext" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult CreateColorContext(IWICColorContext** ppIWICColorContext)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IWICColorContext**, int>)(lpVtbl[15]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), ppIWICColorContext);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateColorTransformer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult CreateColorTransformer(IWICColorTransform** ppIWICColorTransform)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IWICColorTransform**, int>)(lpVtbl[16]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), ppIWICColorTransform);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateBitmap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult CreateBitmap(uint uiWidth, uint uiHeight, Guid* pixelFormat, WICBitmapCreateCacheOption option, IWICBitmap** ppIBitmap)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, uint, uint, Guid*, WICBitmapCreateCacheOption, IWICBitmap**, int>)(lpVtbl[17]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), uiWidth, uiHeight, pixelFormat, option, ppIBitmap);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateBitmapFromSource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult CreateBitmapFromSource(IWICBitmapSource* pIBitmapSource, WICBitmapCreateCacheOption option, IWICBitmap** ppIBitmap)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IWICBitmapSource*, WICBitmapCreateCacheOption, IWICBitmap**, int>)(lpVtbl[18]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), pIBitmapSource, option, ppIBitmap);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateBitmapFromSourceRect" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult CreateBitmapFromSourceRect(IWICBitmapSource* pIBitmapSource, uint x, uint y, uint width, uint height, IWICBitmap** ppIBitmap)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IWICBitmapSource*, uint, uint, uint, uint, IWICBitmap**, int>)(lpVtbl[19]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), pIBitmapSource, x, y, width, height, ppIBitmap);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateBitmapFromMemory" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult CreateBitmapFromMemory(uint uiWidth, uint uiHeight, Guid* pixelFormat, uint cbStride, uint cbBufferSize, byte* pbBuffer, IWICBitmap** ppIBitmap)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, uint, uint, Guid*, uint, uint, byte*, IWICBitmap**, int>)(lpVtbl[20]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), uiWidth, uiHeight, pixelFormat, cbStride, cbBufferSize, pbBuffer, ppIBitmap);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateBitmapFromHBITMAP" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult CreateBitmapFromHBITMAP(IntPtr hBitmap, IntPtr hPalette, WICBitmapAlphaChannelOption options, IWICBitmap** ppIBitmap)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IntPtr, IntPtr, WICBitmapAlphaChannelOption, IWICBitmap**, int>)(lpVtbl[21]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), hBitmap, hPalette, options, ppIBitmap);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateBitmapFromHICON" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult CreateBitmapFromHICON(IntPtr hIcon, IWICBitmap** ppIBitmap)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IntPtr, IWICBitmap**, int>)(lpVtbl[22]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), hIcon, ppIBitmap);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateComponentEnumerator" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult CreateComponentEnumerator(uint componentTypes, uint options, Com.IEnumUnknown** ppIEnumUnknown)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, uint, uint, Com.IEnumUnknown**, int>)(lpVtbl[23]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), componentTypes, options, ppIEnumUnknown);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateFastMetadataEncoderFromDecoder" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult CreateFastMetadataEncoderFromDecoder(IWICBitmapDecoder* pIDecoder, IWICFastMetadataEncoder** ppIFastEncoder)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IWICBitmapDecoder*, IWICFastMetadataEncoder**, int>)(lpVtbl[24]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), pIDecoder, ppIFastEncoder);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateFastMetadataEncoderFromFrameDecode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult CreateFastMetadataEncoderFromFrameDecode(IWICBitmapFrameDecode* pIFrameDecoder, IWICFastMetadataEncoder** ppIFastEncoder)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IWICBitmapFrameDecode*, IWICFastMetadataEncoder**, int>)(lpVtbl[25]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), pIFrameDecoder, ppIFastEncoder);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateQueryWriter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult CreateQueryWriter(Guid* guidMetadataFormat, Guid* pguidVendor, IWICMetadataQueryWriter** ppIQueryWriter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, Guid*, Guid*, IWICMetadataQueryWriter**, int>)(lpVtbl[26]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), guidMetadataFormat, pguidVendor, ppIQueryWriter);
	}

	/// <inheritdoc cref="IWICImagingFactory.CreateQueryWriterFromReader" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult CreateQueryWriterFromReader(IWICMetadataQueryReader* pIQueryReader, Guid* pguidVendor, IWICMetadataQueryWriter** ppIQueryWriter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IWICMetadataQueryReader*, Guid*, IWICMetadataQueryWriter**, int>)(lpVtbl[27]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), pIQueryReader, pguidVendor, ppIQueryWriter);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentFactory::CreateMetadataReader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult CreateMetadataReader(Guid* guidMetadataFormat, Guid* pguidVendor, uint dwOptions, Com.IStream* pIStream, IWICMetadataReader** ppIReader)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, Guid*, Guid*, uint, Com.IStream*, IWICMetadataReader**, int>)(lpVtbl[28]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), guidMetadataFormat, pguidVendor, dwOptions, pIStream, ppIReader);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentFactory::CreateMetadataReaderFromContainer"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult CreateMetadataReaderFromContainer(Guid* guidContainerFormat, Guid* pguidVendor, uint dwOptions, Com.IStream* pIStream, IWICMetadataReader** ppIReader)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, Guid*, Guid*, uint, Com.IStream*, IWICMetadataReader**, int>)(lpVtbl[29]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), guidContainerFormat, pguidVendor, dwOptions, pIStream, ppIReader);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentFactory::CreateMetadataWriter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult CreateMetadataWriter(Guid* guidMetadataFormat, Guid* pguidVendor, uint dwMetadataOptions, IWICMetadataWriter** ppIWriter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, Guid*, Guid*, uint, IWICMetadataWriter**, int>)(lpVtbl[30]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), guidMetadataFormat, pguidVendor, dwMetadataOptions, ppIWriter);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentFactory::CreateMetadataWriterFromReader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult CreateMetadataWriterFromReader(IWICMetadataReader* pIReader, Guid* pguidVendor, IWICMetadataWriter** ppIWriter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IWICMetadataReader*, Guid*, IWICMetadataWriter**, int>)(lpVtbl[31]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), pIReader, pguidVendor, ppIWriter);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentFactory::CreateQueryReaderFromBlockReader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult CreateQueryReaderFromBlockReader(IWICMetadataBlockReader* pIBlockReader, IWICMetadataQueryReader** ppIQueryReader)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IWICMetadataBlockReader*, IWICMetadataQueryReader**, int>)(lpVtbl[32]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), pIBlockReader, ppIQueryReader);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentFactory::CreateQueryWriterFromBlockWriter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult CreateQueryWriterFromBlockWriter(IWICMetadataBlockWriter* pIBlockWriter, IWICMetadataQueryWriter** ppIQueryWriter)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, IWICMetadataBlockWriter*, IWICMetadataQueryWriter**, int>)(lpVtbl[33]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), pIBlockWriter, ppIQueryWriter);
	}

	/// <include file='../Imaging.xml' path='doc/member[@name="IWICComponentFactory::CreateEncoderPropertyBag"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult CreateEncoderPropertyBag(Com.PropertyBagMetadata** ppropOptions, uint cCount, Com.IPropertyBag2** ppIPropertyBag)
	{
		return ((delegate* unmanaged[Stdcall]<IWICComponentFactory*, Com.PropertyBagMetadata**, uint, Com.IPropertyBag2**, int>)(lpVtbl[34]))((IWICComponentFactory*)Unsafe.AsPointer(ref this), ppropOptions, cCount, ppIPropertyBag);
	}
}

#endregion Com Types

#region Functions
public static unsafe partial class Apis
{
	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICConvertBitmapSource(Guid* dstFormat, IWICBitmapSource* pISrc, IWICBitmapSource* ppIDst);

	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICCreateBitmapFromSection(uint width, uint height, Guid* pixelFormat, IntPtr hSection, uint stride, uint offset, IWICBitmap* ppIBitmap);

	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICCreateBitmapFromSectionEx(uint width, uint height, Guid* pixelFormat, IntPtr hSection, uint stride, uint offset, WICSectionAccessLevel desiredAccessLevel, IWICBitmap* ppIBitmap);

	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICMapGuidToShortName(Guid* guid, uint cchName, ushort* wzName, uint* pcchActual);

	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICMapShortNameToGuid(ushort* wzName, Guid* pguid);

	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICMapSchemaToName(Guid* guidMetadataFormat, ushort* pwzSchema, uint cchName, ushort* wzName, uint* pcchActual);

	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICMatchMetadataContent(Guid* guidContainerFormat, Guid* pguidVendor, Com.IStream* pIStream, Guid* pguidMetadataFormat);

	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICSerializeMetadataContent(Guid* guidContainerFormat, IWICMetadataWriter* pIWriter, uint dwPersistOptions, Com.IStream* pIStream);

	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICGetMetadataContentSize(Guid* guidContainerFormat, IWICMetadataWriter* pIWriter, ULargeInteger* pcbSize);

}
#endregion Functions
