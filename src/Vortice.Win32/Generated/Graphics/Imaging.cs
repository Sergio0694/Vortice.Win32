// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Win32.Graphics.Imaging;

public static partial class Apis
{
	public const uint WINCODEC_SDK_VERSION1 = 566;
	public const uint WINCODEC_SDK_VERSION2 = 567;
	public static ref readonly Guid CLSID_WICImagingFactory
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x62, 0xF2, 0xCA, 0xCA,
				0x70, 0x93,
				0x15, 0x46,
				0xA1,
				0x3B,
				0x9F,
				0x55,
				0x39,
				0xDA,
				0x4C,
				0x0A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICImagingFactory1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x62, 0xF2, 0xCA, 0xCA,
				0x70, 0x93,
				0x15, 0x46,
				0xA1,
				0x3B,
				0x9F,
				0x55,
				0x39,
				0xDA,
				0x4C,
				0x0A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICImagingFactory2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE8, 0x06, 0x7D, 0x31,
				0x24, 0x5F,
				0x3D, 0x43,
				0xBD,
				0xF7,
				0x79,
				0xCE,
				0x68,
				0xD8,
				0xAB,
				0xC2
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public const uint WINCODEC_SDK_VERSION = 567;
	public static ref readonly Guid GUID_VendorMicrosoft
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCA, 0x49, 0xE7, 0xF0,
				0xEF, 0xED,
				0x89, 0x45,
				0xA7,
				0x3A,
				0xEE,
				0x0E,
				0x62,
				0x6A,
				0x2A,
				0x2B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_VendorMicrosoftBuiltIn
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFD, 0x30, 0x7A, 0x25,
				0xB6, 0x06,
				0x2B, 0x46,
				0xAE,
				0xA4,
				0x63,
				0xF7,
				0x0B,
				0x86,
				0xE5,
				0x33
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7B, 0xA1, 0x9E, 0x38,
				0x78, 0x50,
				0xDE, 0x4C,
				0xB6,
				0xEF,
				0x25,
				0xC1,
				0x51,
				0x75,
				0xC7,
				0x51
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngDecoder1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7B, 0xA1, 0x9E, 0x38,
				0x78, 0x50,
				0xDE, 0x4C,
				0xB6,
				0xEF,
				0x25,
				0xC1,
				0x51,
				0x75,
				0xC7,
				0x51
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngDecoder2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5B, 0x94, 0x18, 0xE0,
				0x86, 0xAA,
				0x08, 0x40,
				0x9B,
				0xD4,
				0x67,
				0x77,
				0xA1,
				0xE4,
				0x0C,
				0x11
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICBmpDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x62, 0x20, 0x46, 0x6B,
				0xBF, 0x7C,
				0x0D, 0x40,
				0x9F,
				0xDB,
				0x81,
				0x3D,
				0xD1,
				0x0F,
				0x27,
				0x78
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIcoDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDF, 0xFC, 0x1B, 0xC6,
				0x0F, 0x2E,
				0xAD, 0x4A,
				0xA8,
				0xD7,
				0xE0,
				0x6B,
				0xAF,
				0xEB,
				0xCD,
				0xFE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x80, 0xA4, 0x56, 0x94,
				0x8B, 0xE8,
				0xEA, 0x43,
				0x9E,
				0x73,
				0x0B,
				0x2D,
				0x9B,
				0x71,
				0xB1,
				0xCA
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICGifDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3C, 0xDA, 0x1D, 0x38,
				0xE9, 0x9C,
				0x34, 0x48,
				0xA2,
				0x3E,
				0x1F,
				0x98,
				0xF8,
				0xFC,
				0x52,
				0xBE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICTiffDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xD9, 0x85, 0x4E, 0xB5,
				0x23, 0xFE,
				0x9F, 0x49,
				0x8B,
				0x88,
				0x6A,
				0xCE,
				0xA7,
				0x13,
				0x75,
				0x2B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICWmpDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x36, 0xEC, 0x6C, 0xA2,
				0x4C, 0x23,
				0x50, 0x49,
				0xAE,
				0x16,
				0xE3,
				0x4A,
				0xAC,
				0xE7,
				0x1D,
				0x0D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICDdsDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x9F, 0x69, 0x53, 0x90,
				0x41, 0xA3,
				0x9D, 0x42,
				0x9E,
				0x90,
				0xEE,
				0x43,
				0x7C,
				0xF8,
				0x0C,
				0x73
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICBmpEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB4, 0x8B, 0xBE, 0x69,
				0x6D, 0xD6,
				0xC8, 0x47,
				0x86,
				0x5A,
				0xED,
				0x15,
				0x89,
				0x43,
				0x37,
				0x82
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x69, 0x99, 0x94, 0x27,
				0x6A, 0x87,
				0xD7, 0x41,
				0x94,
				0x47,
				0x56,
				0x8F,
				0x6A,
				0x35,
				0xA4,
				0xDC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC1, 0xF5, 0x34, 0x1A,
				0x5A, 0x4A,
				0xDC, 0x46,
				0xB6,
				0x44,
				0x1F,
				0x45,
				0x67,
				0xE7,
				0xA6,
				0x76
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICGifEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x98, 0x55, 0x4F, 0x11,
				0x22, 0x0B,
				0xA0, 0x40,
				0x86,
				0xA1,
				0xC8,
				0x3E,
				0xA4,
				0x95,
				0xAD,
				0xBD
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICTiffEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x10, 0xBE, 0x31, 0x01,
				0x01, 0x20,
				0x5F, 0x4C,
				0xA9,
				0xB0,
				0xCC,
				0x88,
				0xFA,
				0xB6,
				0x4C,
				0xE8
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICWmpEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCB, 0xE3, 0x4C, 0xAC,
				0xC1, 0xE1,
				0xCD, 0x44,
				0x82,
				0x15,
				0x5A,
				0x16,
				0x65,
				0x50,
				0x9E,
				0xC2
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICDdsEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x94, 0xDE, 0x1D, 0xA6,
				0xCE, 0x66,
				0xC1, 0x4A,
				0x88,
				0x1B,
				0x71,
				0x68,
				0x05,
				0x88,
				0x89,
				0x5E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICAdngDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x11, 0x94, 0x1D, 0x98,
				0x9E, 0x90,
				0xA7, 0x42,
				0x8F,
				0x5D,
				0xA7,
				0x47,
				0xFF,
				0x05,
				0x2E,
				0xDB
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegQualcommPhoneEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x62, 0x5C, 0xED, 0x68,
				0x34, 0xF5,
				0x79, 0x49,
				0xB2,
				0xB3,
				0x68,
				0x6A,
				0x12,
				0xB2,
				0xB3,
				0x4C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICHeifDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0A, 0xA8, 0xA4, 0xE9,
				0xFE, 0x44,
				0xE4, 0x4D,
				0x89,
				0x71,
				0x71,
				0x50,
				0xB1,
				0x0A,
				0x51,
				0x99
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICHeifEncoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC1, 0xCE, 0xBE, 0x0D,
				0xB3, 0x9E,
				0x60, 0x48,
				0x9C,
				0x6F,
				0xDD,
				0xBE,
				0x86,
				0x63,
				0x45,
				0x75
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICWebpDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x86, 0xE8, 0x93, 0x76,
				0xC9, 0x51,
				0x70, 0x40,
				0x84,
				0x19,
				0x9F,
				0x70,
				0x73,
				0x8E,
				0xC8,
				0xFA
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICRAWDecoder
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x02, 0x57, 0x94, 0x41,
				0x02, 0x83,
				0xA6, 0x44,
				0x94,
				0x45,
				0xAC,
				0x98,
				0xE8,
				0xAF,
				0xA0,
				0x86
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatBmp
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7E, 0xD8, 0xF1, 0x0A,
				0xFE, 0xFC,
				0x88, 0x41,
				0xBD,
				0xEB,
				0xA7,
				0x90,
				0x64,
				0x71,
				0xCB,
				0xE3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatPng
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF4, 0xFA, 0x7C, 0x1B,
				0x3F, 0x71,
				0x3C, 0x47,
				0xBB,
				0xCD,
				0x61,
				0x37,
				0x42,
				0x5F,
				0xAE,
				0xAF
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatIco
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC4, 0x60, 0xA8, 0xA3,
				0x8F, 0x33,
				0x17, 0x4C,
				0x91,
				0x9A,
				0xFB,
				0xA4,
				0xB5,
				0x62,
				0x8F,
				0x21
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatJpeg
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xAA, 0xA5, 0xE4, 0x19,
				0x62, 0x56,
				0xC5, 0x4F,
				0xA0,
				0xC0,
				0x17,
				0x58,
				0x02,
				0x8E,
				0x10,
				0x57
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatTiff
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x30, 0xCC, 0x3B, 0x16,
				0xE9, 0xE2,
				0x0B, 0x4F,
				0x96,
				0x1D,
				0xA3,
				0xE9,
				0xFD,
				0xB7,
				0x88,
				0xA3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatGif
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x01, 0x56, 0x8A, 0x1F,
				0x4D, 0x7D,
				0xBD, 0x4C,
				0x9C,
				0x82,
				0x1B,
				0xC8,
				0xD4,
				0xEE,
				0xB9,
				0xA5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatWmp
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xAA, 0x7C, 0xA3, 0x57,
				0x7A, 0x36,
				0x40, 0x45,
				0x91,
				0x6B,
				0xF1,
				0x83,
				0xC5,
				0x09,
				0x3A,
				0x4B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatDds
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x95, 0xCB, 0x67, 0x99,
				0x85, 0x2E,
				0xC8, 0x4A,
				0x8C,
				0xA2,
				0x83,
				0xD7,
				0xCC,
				0xD4,
				0x25,
				0xC9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatAdng
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0D, 0x6D, 0xFF, 0xF3,
				0xC0, 0x38,
				0xC4, 0x41,
				0xB1,
				0xFE,
				0x1F,
				0x38,
				0x24,
				0xF1,
				0x7B,
				0x84
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatHeif
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x21, 0x25, 0xE6, 0xE1,
				0x87, 0x67,
				0x5B, 0x40,
				0xA3,
				0x39,
				0x50,
				0x07,
				0x15,
				0xB5,
				0x76,
				0x3F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatWebp
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE2, 0xB0, 0x94, 0xE0,
				0xF2, 0x67,
				0xB3, 0x45,
				0xB0,
				0xEA,
				0x11,
				0x53,
				0x37,
				0xCA,
				0x7C,
				0xF3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_ContainerFormatRaw
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x60, 0xCE, 0x99, 0xFE,
				0x9C, 0xF1,
				0x3C, 0x43,
				0xA3,
				0xAE,
				0x00,
				0xAC,
				0xEF,
				0xA9,
				0xCA,
				0x21
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICImagingCategories
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x80, 0xD3, 0xE3, 0xFA,
				0xA4, 0xFE,
				0x23, 0x46,
				0x8C,
				0x75,
				0xC6,
				0xB6,
				0x11,
				0x10,
				0xB6,
				0x81
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CATID_WICBitmapDecoders
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x37, 0x68, 0xD9, 0x7E,
				0xF0, 0x96,
				0x12, 0x48,
				0xB2,
				0x11,
				0xF1,
				0x3C,
				0x24,
				0x11,
				0x7E,
				0xD3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CATID_WICBitmapEncoders
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x96, 0x72, 0x75, 0xAC,
				0x22, 0x35,
				0x11, 0x4E,
				0x98,
				0x62,
				0xC1,
				0x7B,
				0xE5,
				0xA1,
				0x76,
				0x7E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CATID_WICPixelFormats
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0F, 0xE7, 0x46, 0x2B,
				0xA7, 0xCD,
				0x3E, 0x47,
				0x89,
				0xF6,
				0xDC,
				0x96,
				0x30,
				0xA2,
				0x39,
				0x0B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CATID_WICFormatConverters
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE8, 0xEA, 0x35, 0x78,
				0x14, 0xBF,
				0xD1, 0x49,
				0x93,
				0xCE,
				0x53,
				0x3A,
				0x40,
				0x7B,
				0x22,
				0x48
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CATID_WICMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xD8, 0x94, 0xAF, 0x05,
				0x74, 0x71,
				0xD2, 0x4C,
				0xBE,
				0x4A,
				0x41,
				0x24,
				0xB8,
				0x0E,
				0xE4,
				0xB8
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CATID_WICMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA4, 0xB9, 0xE3, 0xAB,
				0x7D, 0x25,
				0x97, 0x4B,
				0xBD,
				0x1A,
				0x29,
				0x4A,
				0xF4,
				0x96,
				0x22,
				0x2E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICDefaultFormatConverter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDC, 0x11, 0x3F, 0x1A,
				0x14, 0xB5,
				0x17, 0x4B,
				0x8C,
				0x5F,
				0x21,
				0x54,
				0x51,
				0x38,
				0x52,
				0xF1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICFormatConverterHighColor
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x54, 0xD4, 0x75, 0xAC,
				0x37, 0x9F,
				0xF8, 0x48,
				0xB9,
				0x72,
				0x4E,
				0x19,
				0xBC,
				0x85,
				0x60,
				0x11
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICFormatConverterNChannel
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB2, 0xAB, 0x7C, 0xC1,
				0xA3, 0xD4,
				0xD7, 0x47,
				0xA5,
				0x57,
				0x33,
				0x9B,
				0x2E,
				0xFB,
				0xD4,
				0xF1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICFormatConverterWMPhoto
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x2B, 0x17, 0xB5, 0x9C,
				0x00, 0xD6,
				0xBA, 0x46,
				0xAB,
				0x77,
				0x77,
				0xBB,
				0x7E,
				0x3A,
				0x00,
				0xD9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPlanarFormatConverter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB8, 0x32, 0x41, 0x18,
				0xF8, 0x32,
				0x84, 0x47,
				0x91,
				0x31,
				0xDD,
				0x72,
				0x24,
				0xB2,
				0x34,
				0x38
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public const uint WIC_JPEG_MAX_COMPONENT_COUNT = 4;
	public const uint WIC_JPEG_MAX_TABLE_INDEX = 3;
	public const uint WIC_JPEG_SAMPLE_FACTORS_ONE = 17;
	public const uint WIC_JPEG_SAMPLE_FACTORS_THREE_420 = 1118498;
	public const uint WIC_JPEG_SAMPLE_FACTORS_THREE_422 = 1118497;
	public const uint WIC_JPEG_SAMPLE_FACTORS_THREE_440 = 1118482;
	public const uint WIC_JPEG_SAMPLE_FACTORS_THREE_444 = 1118481;
	public const uint WIC_JPEG_QUANTIZATION_BASELINE_ONE = 0;
	public const uint WIC_JPEG_QUANTIZATION_BASELINE_THREE = 65792;
	public const uint WIC_JPEG_HUFFMAN_BASELINE_ONE = 0;
	public const uint WIC_JPEG_HUFFMAN_BASELINE_THREE = 1118464;
	public static ref readonly Guid GUID_WICPixelFormatDontCare
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x00
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat1bppIndexed
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x01
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat2bppIndexed
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x02
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat4bppIndexed
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x03
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat8bppIndexed
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x04
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormatBlackWhite
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x05
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat2bppGray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x06
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat4bppGray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x07
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat8bppGray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x08
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat8bppAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x16, 0x01, 0xCD, 0xE6,
				0xBA, 0xEE,
				0x61, 0x41,
				0xAA,
				0x85,
				0x27,
				0xDD,
				0x9F,
				0xB3,
				0xA8,
				0x95
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppBGR555
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x09
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppBGR565
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x0A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppBGRA5551
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x2B, 0x7C, 0xEC, 0x05,
				0xE6, 0xF1,
				0x61, 0x49,
				0xAD,
				0x46,
				0xE1,
				0xCC,
				0x81,
				0x0A,
				0x87,
				0xD2
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppGray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x0B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat24bppBGR
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x0C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat24bppRGB
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x0D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppBGR
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x0E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppBGRA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x0F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppPBGRA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x10
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppGrayFloat
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x11
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppRGB
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x95, 0x6B, 0x8C, 0xD9,
				0xFE, 0x3E,
				0xD6, 0x47,
				0xBB,
				0x25,
				0xEB,
				0x17,
				0x48,
				0xAB,
				0x0C,
				0xF1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppRGBA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x2D, 0xAD, 0xC7, 0xF5,
				0x8D, 0x6A,
				0xDD, 0x43,
				0xA7,
				0xA8,
				0xA2,
				0x99,
				0x35,
				0x26,
				0x1A,
				0xE9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppPRGBA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x50, 0xA6, 0xC4, 0x3C,
				0x27, 0xA5,
				0x37, 0x4D,
				0xA9,
				0x16,
				0x31,
				0x42,
				0xC7,
				0xEB,
				0xED,
				0xBA
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat48bppRGB
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x15
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat48bppBGR
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x84, 0xA3, 0x05, 0xE6,
				0x68, 0xB4,
				0xCE, 0x46,
				0xBB,
				0x2E,
				0x36,
				0xF1,
				0x80,
				0xE6,
				0x43,
				0x13
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppRGB
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x11, 0x21, 0x18, 0xA1,
				0x6D, 0x18,
				0x42, 0x4D,
				0xBC,
				0x6A,
				0x9C,
				0x83,
				0x03,
				0xA8,
				0xDF,
				0xF9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppRGBA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x16
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppBGRA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7C, 0xFF, 0x62, 0x15,
				0x52, 0xD3,
				0xF9, 0x46,
				0x97,
				0x9E,
				0x42,
				0x97,
				0x6B,
				0x79,
				0x22,
				0x46
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppPRGBA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x17
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppPBGRA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8E, 0x8E, 0x51, 0x8C,
				0xEC, 0xA4,
				0x8B, 0x46,
				0xAE,
				0x70,
				0xC9,
				0xA3,
				0x5A,
				0x9C,
				0x55,
				0x30
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppGrayFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x13
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppBGR101010
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x14
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat48bppRGBFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x12
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat48bppBGRFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0E, 0x14, 0xCA, 0x49,
				0xB6, 0xCA,
				0x3B, 0x49,
				0x9D,
				0xDF,
				0x60,
				0x18,
				0x7C,
				0x37,
				0x53,
				0x2A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat96bppRGBFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x18
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat96bppRGBFloat
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8F, 0xD7, 0xFE, 0xE3,
				0xDB, 0xE8,
				0xCF, 0x4A,
				0x84,
				0xC1,
				0xE9,
				0x7F,
				0x61,
				0x36,
				0xB3,
				0x27
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat128bppRGBAFloat
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x19
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat128bppPRGBAFloat
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x1A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat128bppRGBFloat
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x1B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppCMYK
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x1C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppRGBAFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x1D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppBGRAFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3C, 0xE3, 0x6D, 0x35,
				0xD2, 0x54,
				0x23, 0x4A,
				0xBB,
				0x04,
				0x9B,
				0x7B,
				0xF9,
				0xB1,
				0xD4,
				0x2D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppRGBFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x40
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat128bppRGBAFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x1E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat128bppRGBFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x41
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppRGBAHalf
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x3A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppPRGBAHalf
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC2, 0x26, 0xAD, 0x58,
				0x23, 0xC6,
				0x9D, 0x4D,
				0xB3,
				0x20,
				0x38,
				0x7E,
				0x49,
				0xF8,
				0xC4,
				0x42
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppRGBHalf
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x42
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat48bppRGBHalf
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x3B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppRGBE
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x3D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppGrayHalf
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x3E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppGrayFixedPoint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x3F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppRGBA1010102
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x72, 0x8D, 0x23, 0x25,
				0xF9, 0xFC,
				0x22, 0x45,
				0xB5,
				0x14,
				0x55,
				0x78,
				0xE5,
				0xAD,
				0x55,
				0xE0
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppRGBA1010102XR
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x9A, 0x6B, 0xDE, 0x00,
				0x01, 0xC1,
				0x4B, 0x43,
				0xB5,
				0x02,
				0xD0,
				0x16,
				0x5E,
				0xE1,
				0x12,
				0x2C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppR10G10B10A2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB5, 0x1B, 0x4E, 0x60,
				0x3C, 0x8A,
				0x65, 0x4B,
				0xB1,
				0x1C,
				0xBC,
				0x0B,
				0x8D,
				0xD7,
				0x5B,
				0x7F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bppR10G10B10A2HDR10
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5D, 0x5C, 0x21, 0x9C,
				0xCC, 0x1A,
				0x0E, 0x4F,
				0xA4,
				0xBC,
				0x70,
				0xFB,
				0x3A,
				0xE8,
				0xFD,
				0x28
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bppCMYK
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x1F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat24bpp3Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x20
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bpp4Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x21
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat40bpp5Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x22
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat48bpp6Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x23
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat56bpp7Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x24
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bpp8Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x25
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat48bpp3Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x26
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bpp4Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x27
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat80bpp5Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x28
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat96bpp6Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x29
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat112bpp7Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x2A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat128bpp8Channels
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x2B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat40bppCMYKAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x2C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat80bppCMYKAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x2D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat32bpp3ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x2E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat40bpp4ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x2F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat48bpp5ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x30
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat56bpp6ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x31
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bpp7ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x32
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat72bpp8ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x33
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat64bpp3ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x34
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat80bpp4ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x35
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat96bpp5ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x36
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat112bpp6ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x37
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat128bpp7ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x38
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat144bpp8ChannelsAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xC3, 0xDD, 0x6F,
				0x03, 0x4E,
				0xFE, 0x4B,
				0xB1,
				0x85,
				0x3D,
				0x77,
				0x76,
				0x8D,
				0xC9,
				0x39
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat8bppY
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x54, 0xDB, 0xB4, 0x91,
				0xF9, 0x2D,
				0xF0, 0x42,
				0xB4,
				0x49,
				0x29,
				0x09,
				0xBB,
				0x3D,
				0xF8,
				0x8E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat8bppCb
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x24, 0xF2, 0x39, 0x13,
				0xFE, 0x6B,
				0x3E, 0x4C,
				0x93,
				0x02,
				0xE4,
				0xF3,
				0xA6,
				0xD0,
				0xCA,
				0x2A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat8bppCr
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x53, 0x50, 0x14, 0xB8,
				0x16, 0x21,
				0xF0, 0x49,
				0x88,
				0x35,
				0xED,
				0x84,
				0x4B,
				0x20,
				0x5C,
				0x51
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppCbCr
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x6E, 0xBA, 0x95, 0xFF,
				0xE0, 0x11,
				0x63, 0x42,
				0xBB,
				0x45,
				0x01,
				0x72,
				0x1F,
				0x34,
				0x60,
				0xA4
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppYQuantizedDctCoefficients
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x33, 0xF4, 0x55, 0xA3,
				0xE8, 0x48,
				0x42, 0x4A,
				0x84,
				0xD8,
				0xE2,
				0xAA,
				0x26,
				0xCA,
				0x80,
				0xA4
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppCbQuantizedDctCoefficients
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x61, 0xFF, 0xC4, 0xD2,
				0xA5, 0x56,
				0xC2, 0x49,
				0x8B,
				0x5C,
				0x4C,
				0x19,
				0x25,
				0x96,
				0x48,
				0x37
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_WICPixelFormat16bppCrQuantizedDctCoefficients
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF0, 0x54, 0xE3, 0x2F,
				0x80, 0x16,
				0xD8, 0x42,
				0x92,
				0x31,
				0xE7,
				0x3C,
				0x05,
				0x65,
				0xBF,
				0xC1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public const uint FACILITY_WINCODEC_ERR = 2200;
	public const uint WINCODEC_ERR_BASE = 8192;
	public const int WINCODEC_ERR_GENERIC_ERROR = -2147467259;
	public const int WINCODEC_ERR_INVALIDPARAMETER = -2147024809;
	public const int WINCODEC_ERR_OUTOFMEMORY = -2147024882;
	public const int WINCODEC_ERR_NOTIMPLEMENTED = -2147467263;
	public const int WINCODEC_ERR_ABORTED = -2147467260;
	public const int WINCODEC_ERR_ACCESSDENIED = -2147024891;
	public const uint WICRawChangeNotification_ExposureCompensation = 1;
	public const uint WICRawChangeNotification_NamedWhitePoint = 2;
	public const uint WICRawChangeNotification_KelvinWhitePoint = 4;
	public const uint WICRawChangeNotification_RGBWhitePoint = 8;
	public const uint WICRawChangeNotification_Contrast = 16;
	public const uint WICRawChangeNotification_Gamma = 32;
	public const uint WICRawChangeNotification_Sharpness = 64;
	public const uint WICRawChangeNotification_Saturation = 128;
	public const uint WICRawChangeNotification_Tint = 256;
	public const uint WICRawChangeNotification_NoiseReduction = 512;
	public const uint WICRawChangeNotification_DestinationColorContext = 1024;
	public const uint WICRawChangeNotification_ToneCurve = 2048;
	public const uint WICRawChangeNotification_Rotation = 4096;
	public const uint WICRawChangeNotification_RenderMode = 8192;
	public static ref readonly Guid GUID_MetadataFormatUnknown
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x2F, 0x59, 0x5E, 0xA4,
				0x78, 0x90,
				0x7C, 0x4A,
				0xAD,
				0xB5,
				0x4E,
				0xDC,
				0x4F,
				0xD6,
				0x1B,
				0x1F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatIfd
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC6, 0x96, 0x73, 0x53,
				0x8A, 0x2D,
				0xB6, 0x4B,
				0x9B,
				0xF8,
				0x2F,
				0x0A,
				0x8E,
				0x2A,
				0x3A,
				0xDF
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatSubIfd
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x28, 0xE1, 0xA2, 0x58,
				0xB9, 0x2D,
				0x57, 0x4E,
				0xBB,
				0x14,
				0x51,
				0x77,
				0x89,
				0x1E,
				0xD3,
				0x31
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatExif
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x9D, 0x4F, 0x3C, 0x1C,
				0x4A, 0xB8,
				0x7D, 0x46,
				0x94,
				0x93,
				0x36,
				0xCF,
				0xBD,
				0x59,
				0xEA,
				0x57
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatGps
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8A, 0xAB, 0x34, 0x71,
				0x51, 0x93,
				0xAD, 0x44,
				0xAF,
				0x62,
				0x44,
				0x8D,
				0xB6,
				0xB5,
				0x02,
				0xEC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatInterop
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8E, 0x6F, 0x68, 0xED,
				0x1F, 0x68,
				0x8B, 0x4C,
				0xBD,
				0x41,
				0xA8,
				0xAD,
				0xDB,
				0xF6,
				0xB3,
				0xFC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatApp0
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x28, 0x70, 0x00, 0x79,
				0x8D, 0x26,
				0xD6, 0x45,
				0xA3,
				0xC2,
				0x35,
				0x4E,
				0x6A,
				0x50,
				0x4B,
				0xC9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatApp1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC3, 0xDF, 0xD3, 0x8F,
				0x51, 0xF9,
				0x2B, 0x49,
				0x81,
				0x7F,
				0x69,
				0xC2,
				0xE6,
				0xD9,
				0xA5,
				0xB0
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatApp13
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA2, 0x56, 0x65, 0x32,
				0x02, 0xF5,
				0x54, 0x43,
				0x9C,
				0xC0,
				0x8E,
				0x3F,
				0x48,
				0xEA,
				0xF6,
				0xB5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatIPTC
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x14, 0x09, 0xAB, 0x4F,
				0x29, 0xE1,
				0x87, 0x40,
				0xA1,
				0xD1,
				0xBC,
				0x81,
				0x2D,
				0x45,
				0xA7,
				0xB5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatIRB
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x66, 0x0D, 0x10, 0x16,
				0x70, 0x85,
				0xB9, 0x4B,
				0xB9,
				0x2D,
				0xFD,
				0xA4,
				0xB2,
				0x3E,
				0xCE,
				0x67
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormat8BIMIPTC
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8C, 0x56, 0x10, 0x00,
				0x52, 0x08,
				0x6A, 0x4E,
				0xB1,
				0x91,
				0x5C,
				0x33,
				0xAC,
				0x5B,
				0x04,
				0x30
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormat8BIMResolutionInfo
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5D, 0x30, 0x9F, 0x73,
				0xDB, 0x81,
				0xCB, 0x43,
				0xAC,
				0x5E,
				0x55,
				0x01,
				0x3E,
				0xF9,
				0xF0,
				0x03
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormat8BIMIPTCDigest
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x85, 0x22, 0xA3, 0x1C,
				0xCD, 0x9C,
				0x86, 0x47,
				0x8B,
				0xD8,
				0x79,
				0x53,
				0x9D,
				0xB6,
				0xA0,
				0x06
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatXMP
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x38, 0xCC, 0x5A, 0xBB,
				0x16, 0xF2,
				0xEC, 0x4C,
				0xA6,
				0xC5,
				0x5F,
				0x6E,
				0x73,
				0x97,
				0x63,
				0xA9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatThumbnail
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE9, 0xCE, 0x3D, 0x24,
				0x03, 0x87,
				0xEE, 0x40,
				0x8E,
				0xF0,
				0x22,
				0xA6,
				0x00,
				0xB8,
				0x05,
				0x8C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunktEXt
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x36, 0x89, 0x8D, 0x56,
				0xA9, 0xC0,
				0x23, 0x49,
				0x90,
				0x5D,
				0xDF,
				0x2B,
				0x38,
				0x23,
				0x8F,
				0xBC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatXMPStruct
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF1, 0x3C, 0x38, 0x22,
				0x17, 0xED,
				0x2E, 0x4E,
				0xAF,
				0x17,
				0xD8,
				0x5B,
				0x8F,
				0x6B,
				0x30,
				0xD0
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatXMPBag
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5F, 0xCA, 0x3C, 0x83,
				0xB7, 0xDC,
				0x16, 0x45,
				0x80,
				0x6F,
				0x65,
				0x96,
				0xAB,
				0x26,
				0xDC,
				0xE4
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatXMPSeq
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x02, 0xDF, 0xE8, 0x63,
				0x6C, 0xEB,
				0x6C, 0x45,
				0xA2,
				0x24,
				0xB2,
				0x5E,
				0x79,
				0x4F,
				0xD6,
				0x48
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatXMPAlt
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x75, 0xA6, 0x08, 0x7B,
				0xAA, 0x91,
				0x1B, 0x48,
				0xA7,
				0x98,
				0x4D,
				0xA9,
				0x49,
				0x08,
				0x61,
				0x3B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatLSD
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1E, 0x03, 0x56, 0xE2,
				0x99, 0x62,
				0x29, 0x49,
				0xB9,
				0x8D,
				0x5A,
				0xC8,
				0x84,
				0xAF,
				0xBA,
				0x92
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatIMD
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x86, 0xB0, 0x2B, 0xBD,
				0x52, 0x4D,
				0xDD, 0x48,
				0x96,
				0x77,
				0xDB,
				0x48,
				0x3E,
				0x85,
				0xAE,
				0x8F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatGCE
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xD8, 0xCA, 0x25, 0x2A,
				0xEB, 0xDE,
				0x69, 0x4C,
				0xA7,
				0x88,
				0x0E,
				0xC2,
				0x26,
				0x6D,
				0xCA,
				0xFD
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatAPE
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC2, 0x3D, 0x04, 0x2E,
				0x67, 0xC9,
				0x05, 0x4E,
				0x87,
				0x5E,
				0x61,
				0x8B,
				0xF6,
				0x7E,
				0x85,
				0xC3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatJpegChrominance
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCF, 0x0D, 0x3D, 0xF7,
				0xC6, 0xCE,
				0x85, 0x4F,
				0x9B,
				0x0E,
				0x1C,
				0x39,
				0x56,
				0xB1,
				0xBE,
				0xF7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatJpegLuminance
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x07, 0x80, 0x90, 0x86,
				0xFC, 0xED,
				0x60, 0x48,
				0x8D,
				0x4B,
				0x4E,
				0xE6,
				0xE8,
				0x3E,
				0x60,
				0x58
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatJpegComment
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x33, 0x5F, 0x0E, 0x22,
				0xD3, 0xAF,
				0x4E, 0x47,
				0x9D,
				0x31,
				0x7D,
				0x4F,
				0xE7,
				0x30,
				0xF5,
				0x57
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatGifComment
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE0, 0xE0, 0xB6, 0xC4,
				0xB4, 0xCF,
				0xD3, 0x4A,
				0xAB,
				0x33,
				0x9A,
				0xAD,
				0x23,
				0x55,
				0xA3,
				0x4A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunkgAMA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA5, 0x35, 0x09, 0xF0,
				0x5D, 0x1D,
				0xD1, 0x4C,
				0x81,
				0xB2,
				0x93,
				0x24,
				0xD7,
				0xEC,
				0xA7,
				0x81
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunkbKGD
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x71, 0x35, 0x4D, 0xE1,
				0x47, 0x6B,
				0xEA, 0x4D,
				0xB6,
				0x0A,
				0x87,
				0xCE,
				0x0A,
				0x78,
				0xDF,
				0xB7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunkiTXt
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x29, 0xC7, 0xBE, 0xC2,
				0x68, 0x0B,
				0x77, 0x4B,
				0xAA,
				0x0E,
				0x62,
				0x95,
				0xA6,
				0xAC,
				0x18,
				0x14
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunkcHRM
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5B, 0x65, 0xB3, 0x9D,
				0x42, 0x28,
				0xB3, 0x44,
				0x80,
				0x67,
				0x12,
				0xE9,
				0xB3,
				0x75,
				0x55,
				0x6A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunkhIST
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDA, 0x82, 0x9A, 0xC5,
				0x74, 0xDB,
				0xA4, 0x48,
				0xBD,
				0x6A,
				0xB6,
				0x9C,
				0x49,
				0x31,
				0xEF,
				0x95
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunkiCCP
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xAB, 0x49, 0x43, 0xEB,
				0x85, 0xB6,
				0x0F, 0x45,
				0x91,
				0xB5,
				0xE8,
				0x02,
				0xE8,
				0x92,
				0x53,
				0x6C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunksRGB
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x36, 0xFD, 0x15, 0xC1,
				0x6F, 0xCC,
				0x3F, 0x4E,
				0x83,
				0x63,
				0x52,
				0x4B,
				0x87,
				0xC6,
				0xB0,
				0xD9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatChunktIME
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x2D, 0xAE, 0x00, 0x6B,
				0x4B, 0xE2,
				0x0A, 0x46,
				0x98,
				0xB6,
				0x87,
				0x8B,
				0xD0,
				0x30,
				0x72,
				0xFD
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatDds
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x03, 0x46, 0x06, 0x4A,
				0x33, 0x8C,
				0x60, 0x4E,
				0x9C,
				0x29,
				0x13,
				0x62,
				0x31,
				0x70,
				0x2D,
				0x08
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatHeif
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE1, 0xF3, 0x7E, 0x81,
				0x88, 0x12,
				0xF4, 0x45,
				0xA8,
				0x52,
				0x26,
				0x0D,
				0x9E,
				0x7C,
				0xCE,
				0x83
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatHeifHDR
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8A, 0x8D, 0x8B, 0x56,
				0x65, 0x1E,
				0x8C, 0x43,
				0x89,
				0x68,
				0xD6,
				0x0E,
				0x10,
				0x12,
				0xBE,
				0xB9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatWebpANIM
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA6, 0xFD, 0xC4, 0x6D,
				0xE6, 0x78,
				0x02, 0x41,
				0xAE,
				0x35,
				0xBC,
				0xFA,
				0x1E,
				0xDC,
				0xC7,
				0x8B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid GUID_MetadataFormatWebpANMF
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xEE, 0x05, 0xC1, 0x43,
				0x3B, 0xB9,
				0xBB, 0x4A,
				0xB0,
				0x03,
				0xA0,
				0x8C,
				0x0D,
				0x87,
				0x04,
				0x71
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICUnknownMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC2, 0x45, 0x97, 0x69,
				0x66, 0x50,
				0x82, 0x4B,
				0xA8,
				0xE3,
				0xD4,
				0x04,
				0x78,
				0xDB,
				0xEC,
				0x8C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICUnknownMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x86, 0xCA, 0x9C, 0xA0,
				0xBA, 0x27,
				0x39, 0x4F,
				0x90,
				0x53,
				0x12,
				0x1F,
				0xA4,
				0xDC,
				0x08,
				0xFC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICApp0MetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA2, 0x33, 0xC6, 0xF3,
				0xC8, 0x46,
				0x8E, 0x49,
				0x8F,
				0xBB,
				0xCC,
				0x6F,
				0x72,
				0x1B,
				0xBC,
				0xDE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICApp0MetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x33, 0x4B, 0x32, 0x43,
				0x8F, 0xA7,
				0x0F, 0x48,
				0x91,
				0x11,
				0x96,
				0x38,
				0xAA,
				0xCC,
				0xC8,
				0x32
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICApp1MetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x69, 0x60, 0x36, 0xEE,
				0x32, 0x18,
				0x0F, 0x42,
				0xB3,
				0x81,
				0x04,
				0x79,
				0xAD,
				0x06,
				0x6F,
				0x19
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICApp1MetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x13, 0x35, 0xE3, 0xDD,
				0x4E, 0x77,
				0xCD, 0x4B,
				0xAE,
				0x79,
				0x02,
				0xF4,
				0xAD,
				0xFE,
				0x62,
				0xFC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICApp13MetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x19, 0xA9, 0x19, 0x7B,
				0xD6, 0xA9,
				0xE5, 0x49,
				0xBD,
				0x45,
				0x02,
				0xC3,
				0x4E,
				0x4E,
				0x4C,
				0xD5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICApp13MetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x50, 0x3C, 0x7E, 0xAA,
				0x4C, 0x86,
				0x04, 0x46,
				0xBC,
				0x04,
				0x8B,
				0x0B,
				0x76,
				0xE6,
				0x37,
				0xF6
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIfdMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x56, 0x46, 0x91, 0x8F,
				0x0A, 0x9D,
				0xB2, 0x4E,
				0x90,
				0x19,
				0x0B,
				0xF9,
				0x6D,
				0x8A,
				0x9E,
				0xE6
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIfdMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x28, 0xFC, 0xEB, 0xB1,
				0xBD, 0xC9,
				0xA2, 0x47,
				0x8D,
				0x33,
				0xB9,
				0x48,
				0x76,
				0x97,
				0x77,
				0xA7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICSubIfdMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x09, 0x2F, 0xD4, 0x50,
				0xD1, 0xEC,
				0x41, 0x4B,
				0xB6,
				0x5D,
				0xDA,
				0x1F,
				0xDA,
				0xA7,
				0x56,
				0x63
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICSubIfdMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x86, 0x53, 0xDE, 0x8A,
				0x9B, 0x8E,
				0x4C, 0x4F,
				0xAC,
				0xF2,
				0xF0,
				0x00,
				0x87,
				0x06,
				0xB2,
				0x38
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICExifMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x60, 0x38, 0x40, 0xD9,
				0x7F, 0x29,
				0x49, 0x4A,
				0xBF,
				0x9B,
				0x77,
				0x89,
				0x81,
				0x50,
				0xA4,
				0x42
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICExifMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDA, 0x4C, 0xA1, 0xC9,
				0x39, 0xC3,
				0x0B, 0x46,
				0x90,
				0x78,
				0xD4,
				0xDE,
				0xBC,
				0xFA,
				0xBE,
				0x91
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICGpsMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0B, 0x79, 0x97, 0x36,
				0x3B, 0x22,
				0x4E, 0x48,
				0x99,
				0x25,
				0xC4,
				0x86,
				0x92,
				0x18,
				0xF1,
				0x7A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICGpsMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE4, 0x13, 0x8C, 0xCB,
				0xB5, 0x62,
				0x96, 0x4C,
				0xA4,
				0x8B,
				0x6B,
				0xA6,
				0xAC,
				0xE3,
				0x9C,
				0x76
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICInteropMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x98, 0xB8, 0xC8, 0xB5,
				0x74, 0x00,
				0x9F, 0x45,
				0xB7,
				0x00,
				0x86,
				0x0D,
				0x46,
				0x51,
				0xEA,
				0x14
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICInteropMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x45, 0xC6, 0x2E, 0x12,
				0x7E, 0xCD,
				0xD8, 0x44,
				0xB1,
				0x86,
				0x2C,
				0x8C,
				0x20,
				0xC3,
				0xB5,
				0x0F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICThumbnailMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x59, 0x29, 0x01, 0xFB,
				0xF6, 0xF4,
				0xD7, 0x44,
				0x9D,
				0x09,
				0xDA,
				0xA0,
				0x87,
				0xA9,
				0xDB,
				0x57
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICThumbnailMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0C, 0xB2, 0x49, 0xD0,
				0xD0, 0x5D,
				0xFE, 0x44,
				0xB0,
				0xB3,
				0x8F,
				0x92,
				0xC8,
				0xE6,
				0xD0,
				0x80
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIPTCMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x59, 0x29, 0x01, 0x03,
				0xF6, 0xF4,
				0xD7, 0x44,
				0x9D,
				0x09,
				0xDA,
				0xA0,
				0x87,
				0xA9,
				0xDB,
				0x57
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIPTCMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0C, 0xB2, 0x49, 0x12,
				0xD0, 0x5D,
				0xFE, 0x44,
				0xB0,
				0xB3,
				0x8F,
				0x92,
				0xC8,
				0xE6,
				0xD0,
				0x80
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIRBMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xD7, 0xD3, 0xDC, 0xD4,
				0xC2, 0xB4,
				0xD9, 0x47,
				0xA6,
				0xBF,
				0xB8,
				0x9B,
				0xA3,
				0x96,
				0xA4,
				0xA3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIRBMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x35, 0x19, 0x5C, 0x5C,
				0x35, 0x02,
				0x34, 0x44,
				0x80,
				0xBC,
				0x25,
				0x1B,
				0xC1,
				0xEC,
				0x39,
				0xC6
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WIC8BIMIPTCMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8C, 0x66, 0x10, 0x00,
				0x01, 0x08,
				0xA6, 0x4D,
				0xA4,
				0xA4,
				0x82,
				0x65,
				0x22,
				0xB6,
				0xD2,
				0x8F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WIC8BIMIPTCMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x26, 0x82, 0x10, 0x00,
				0x41, 0xEE,
				0xA2, 0x44,
				0x9E,
				0x9C,
				0x4B,
				0xE4,
				0xD5,
				0xB1,
				0xD2,
				0xCD
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WIC8BIMResolutionInfoMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7A, 0x13, 0x05, 0x58,
				0x48, 0xE3,
				0x7C, 0x4F,
				0xB3,
				0xCC,
				0x6D,
				0xB9,
				0x96,
				0x5A,
				0x05,
				0x99
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WIC8BIMResolutionInfoMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0E, 0xFE, 0xF2, 0x4F,
				0x4A, 0xE7,
				0x71, 0x4B,
				0x98,
				0xC4,
				0xAB,
				0x7D,
				0xC1,
				0x67,
				0x07,
				0xBA
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WIC8BIMIPTCDigestMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1E, 0x5F, 0x80, 0x02,
				0xAA, 0xD5,
				0x5B, 0x41,
				0x82,
				0xC5,
				0x61,
				0xC0,
				0x33,
				0xA9,
				0x88,
				0xA6
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WIC8BIMIPTCDigestMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x2B, 0xE6, 0xB5, 0x2D,
				0x67, 0x0D,
				0x5F, 0x49,
				0x8F,
				0x9D,
				0xC2,
				0xF0,
				0x18,
				0x86,
				0x47,
				0xAC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngTextMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCC, 0xAF, 0x59, 0x4B,
				0xC3, 0xB8,
				0x8A, 0x40,
				0xB6,
				0x70,
				0x89,
				0xE5,
				0xFA,
				0xB6,
				0xFD,
				0xA7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngTextMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB9, 0xAF, 0xEB, 0xB5,
				0x3E, 0x25,
				0x72, 0x4A,
				0xA7,
				0x44,
				0x07,
				0x62,
				0xD2,
				0x68,
				0x56,
				0x83
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDF, 0x24, 0xB6, 0x72,
				0x11, 0xAE,
				0x48, 0x49,
				0xA6,
				0x5C,
				0x35,
				0x1E,
				0xB0,
				0x82,
				0x94,
				0x19
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x4E, 0xE1, 0x65, 0x17,
				0xD4, 0x1B,
				0x2E, 0x46,
				0xB6,
				0xB1,
				0x59,
				0x0B,
				0xF1,
				0x26,
				0x2A,
				0xC6
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPStructMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x9A, 0x0D, 0xB9, 0x01,
				0x09, 0x82,
				0xF7, 0x47,
				0x9C,
				0x52,
				0xE1,
				0x24,
				0x4B,
				0xF5,
				0x0C,
				0xED
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPStructMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x93, 0x1F, 0xC2, 0x22,
				0xDB, 0x7D,
				0x1C, 0x41,
				0x9B,
				0x17,
				0xC5,
				0xB7,
				0xBD,
				0x06,
				0x4A,
				0xBC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPBagMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x30, 0x9A, 0xE7, 0xE7,
				0x2C, 0x4F,
				0xAB, 0x4F,
				0x8D,
				0x00,
				0x39,
				0x4F,
				0x2D,
				0x6B,
				0xBE,
				0xBE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPBagMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8C, 0x2C, 0x82, 0xED,
				0xBE, 0xD6,
				0x01, 0x43,
				0xA6,
				0x31,
				0x0E,
				0x14,
				0x16,
				0xBA,
				0xD2,
				0x8F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPSeqMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x53, 0xE7, 0x12, 0x7F,
				0x71, 0xFC,
				0xD7, 0x43,
				0xA5,
				0x1D,
				0x92,
				0xF3,
				0x59,
				0x77,
				0xAB,
				0xB5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPSeqMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDE, 0xD1, 0x68, 0x6D,
				0x32, 0xD4,
				0x0F, 0x4B,
				0x92,
				0x3A,
				0x09,
				0x11,
				0x83,
				0xA9,
				0xBD,
				0xA7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPAltMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC2, 0xDC, 0x94, 0xAA,
				0xB0, 0xB8,
				0x98, 0x48,
				0xB8,
				0x35,
				0x00,
				0x0A,
				0xAB,
				0xD7,
				0x43,
				0x93
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICXMPAltMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x6C, 0x2A, 0x6C, 0x07,
				0x8F, 0xF7,
				0x46, 0x4C,
				0xA7,
				0x23,
				0x35,
				0x83,
				0xE7,
				0x08,
				0x76,
				0xEA
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICLSDMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x93, 0x07, 0x07, 0x41,
				0xE4, 0x59,
				0x9A, 0x47,
				0xA1,
				0xF7,
				0x95,
				0x4A,
				0xDC,
				0x2E,
				0xF5,
				0xFC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICLSDMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE7, 0x37, 0xC0, 0x73,
				0xD9, 0xE5,
				0x54, 0x49,
				0x87,
				0x6A,
				0x6D,
				0xA8,
				0x1D,
				0x6E,
				0x57,
				0x68
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICGCEMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5D, 0x34, 0x2E, 0xB9,
				0x2D, 0xF5,
				0xF3, 0x41,
				0xB5,
				0x62,
				0x08,
				0x1B,
				0xC7,
				0x72,
				0xE3,
				0xB9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICGCEMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x76, 0xDC, 0x95, 0xAF,
				0xB2, 0x16,
				0xF4, 0x47,
				0xB3,
				0xEA,
				0x3C,
				0x31,
				0x79,
				0x66,
				0x93,
				0xE7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIMDMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x67, 0xA2, 0x47, 0x74,
				0x15, 0x00,
				0xC8, 0x42,
				0xA8,
				0xF1,
				0xFB,
				0x3B,
				0x94,
				0xC6,
				0x83,
				0x61
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICIMDMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1F, 0x07, 0x89, 0x8C,
				0x2E, 0x45,
				0x95, 0x4E,
				0x96,
				0x82,
				0x9D,
				0x10,
				0x24,
				0x62,
				0x71,
				0x72
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICAPEMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3A, 0xB9, 0x67, 0x17,
				0x21, 0xB0,
				0xEA, 0x44,
				0x92,
				0x0F,
				0x86,
				0x3C,
				0x11,
				0xF4,
				0xF7,
				0x68
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICAPEMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCA, 0xDF, 0x6E, 0xBD,
				0x90, 0x28,
				0x2F, 0x48,
				0xB2,
				0x33,
				0x8D,
				0x73,
				0x39,
				0xA1,
				0xCF,
				0x8D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegChrominanceMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x4B, 0x90, 0xB1, 0x50,
				0x8F, 0xF2,
				0x74, 0x45,
				0x93,
				0xF4,
				0x0B,
				0xAD,
				0xE8,
				0x2C,
				0x69,
				0xE9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegChrominanceMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF0, 0x66, 0xF5, 0x3F,
				0x6B, 0x6E,
				0xD4, 0x49,
				0x96,
				0xE6,
				0xB7,
				0x88,
				0x86,
				0x69,
				0x2C,
				0x62
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegLuminanceMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x88, 0x2F, 0x6F, 0x35,
				0xA6, 0x05,
				0x28, 0x47,
				0xB9,
				0xA4,
				0x1B,
				0xFB,
				0xCE,
				0x04,
				0xD8,
				0x38
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegLuminanceMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xBC, 0x3A, 0x58, 0x1D,
				0x0E, 0x8A,
				0x57, 0x46,
				0x99,
				0x82,
				0xA3,
				0x80,
				0xCA,
				0x58,
				0xFB,
				0x4B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegCommentMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7C, 0x34, 0x66, 0x9F,
				0xC4, 0x60,
				0x4D, 0x4C,
				0xAB,
				0x58,
				0xD2,
				0x35,
				0x86,
				0x85,
				0xF6,
				0x07
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICJpegCommentMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x6F, 0x23, 0x73, 0xE5,
				0xB1, 0x55,
				0xDA, 0x4E,
				0x81,
				0xEA,
				0x9F,
				0x65,
				0xDB,
				0x02,
				0x90,
				0xD3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICGifCommentMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3B, 0x7D, 0x55, 0x32,
				0xDC, 0x69,
				0x95, 0x4F,
				0x83,
				0x6E,
				0xF5,
				0x97,
				0x2B,
				0x2F,
				0x61,
				0x59
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICGifCommentMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFC, 0x97, 0x27, 0xA0,
				0xAE, 0xC4,
				0x8C, 0x41,
				0xAF,
				0x95,
				0xE6,
				0x37,
				0xC7,
				0xEA,
				0xD2,
				0xA1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngGamaMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x39, 0xCA, 0x92, 0x36,
				0x82, 0xE0,
				0x50, 0x43,
				0x9E,
				0x1F,
				0x37,
				0x04,
				0xCB,
				0x08,
				0x3C,
				0xD5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngGamaMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x13, 0x6D, 0x03, 0xFF,
				0x4B, 0x5D,
				0xDD, 0x46,
				0xB1,
				0x0F,
				0x10,
				0x66,
				0x93,
				0xD9,
				0xFE,
				0x4F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngBkgdMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA6, 0xA4, 0xE7, 0x0C,
				0xE8, 0x03,
				0x60, 0x4A,
				0x9D,
				0x15,
				0x28,
				0x2E,
				0xF3,
				0x2E,
				0xE7,
				0xDA
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngBkgdMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFD, 0xF2, 0xE3, 0x68,
				0xAE, 0x31,
				0x41, 0x44,
				0xBB,
				0x6A,
				0xFD,
				0x70,
				0x47,
				0x52,
				0x5F,
				0x90
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngItxtMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFA, 0xB2, 0xBF, 0xAA,
				0x1E, 0x3E,
				0x8F, 0x4A,
				0x89,
				0x77,
				0x55,
				0x56,
				0xFB,
				0x94,
				0xEA,
				0x23
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngItxtMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x19, 0x97, 0x87, 0x31,
				0x51, 0xE7,
				0xF8, 0x4D,
				0x98,
				0x1D,
				0x68,
				0xDF,
				0xF6,
				0x77,
				0x04,
				0xED
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngChrmMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x36, 0x5F, 0x0B, 0xF9,
				0x7B, 0x36,
				0x2A, 0x40,
				0x9D,
				0xD1,
				0xBC,
				0x0F,
				0xD5,
				0x9D,
				0x8F,
				0x62
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngChrmMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xEB, 0xE3, 0x3C, 0xE2,
				0x08, 0x56,
				0x83, 0x4E,
				0xBC,
				0xEF,
				0x27,
				0xB1,
				0x98,
				0x7E,
				0x51,
				0xD7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngHistMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB7, 0x0B, 0x7A, 0x87,
				0x13, 0xA3,
				0x91, 0x44,
				0x87,
				0xB5,
				0x2E,
				0x6D,
				0x05,
				0x94,
				0xF5,
				0x20
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngHistMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x49, 0xE7, 0x03, 0x8A,
				0x2E, 0x67,
				0x6E, 0x44,
				0xBF,
				0x1F,
				0x2C,
				0x11,
				0xD2,
				0x33,
				0xB6,
				0xFF
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngIccpMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3B, 0xE6, 0xD3, 0xF5,
				0x0F, 0xCB,
				0x28, 0x46,
				0xA4,
				0x78,
				0x6D,
				0x82,
				0x44,
				0xBE,
				0x36,
				0xB1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngIccpMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5F, 0x1E, 0x67, 0x16,
				0xE6, 0x0C,
				0xC4, 0x4C,
				0x97,
				0x68,
				0xE8,
				0x9F,
				0xE5,
				0x01,
				0x8A,
				0xDE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngSrgbMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0C, 0x36, 0x40, 0xFB,
				0x7E, 0x54,
				0x56, 0x49,
				0xA3,
				0xB9,
				0xD4,
				0x41,
				0x88,
				0x59,
				0xBA,
				0x66
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngSrgbMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC6, 0x35, 0xEE, 0xA6,
				0xEC, 0x87,
				0xDF, 0x47,
				0x9F,
				0x22,
				0x1D,
				0x5A,
				0xAD,
				0x84,
				0x0C,
				0x82
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngTimeMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x02, 0xDF, 0x4E, 0xD9,
				0xE5, 0xEF,
				0x0D, 0x4F,
				0x85,
				0xC8,
				0xF5,
				0xA6,
				0x8B,
				0x30,
				0x00,
				0xB1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICPngTimeMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x00, 0x84, 0xB7, 0x1A,
				0xA3, 0xB5,
				0x91, 0x4D,
				0x8A,
				0xCE,
				0x33,
				0xFC,
				0xD1,
				0x49,
				0x9B,
				0xE6
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICDdsMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCA, 0x88, 0x6C, 0x27,
				0x33, 0x75,
				0x86, 0x4A,
				0xB6,
				0x76,
				0x66,
				0xB3,
				0x60,
				0x80,
				0xD4,
				0x84
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICDdsMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xBD, 0x8B, 0x68, 0xFD,
				0xED, 0x31,
				0xB7, 0x4D,
				0xA7,
				0x23,
				0x93,
				0x49,
				0x27,
				0xD3,
				0x83,
				0x67
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICHeifMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3F, 0xFC, 0xDD, 0xAC,
				0xEC, 0x85,
				0xBC, 0x41,
				0xBD,
				0xEF,
				0x1B,
				0xC2,
				0x62,
				0xE4,
				0xDB,
				0x05
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICHeifMetadataWriter
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x79, 0x5E, 0xE4, 0x3A,
				0xBC, 0x40,
				0x01, 0x44,
				0xAC,
				0xE5,
				0xDD,
				0x3C,
				0xB1,
				0x6E,
				0x6A,
				0xFE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICHeifHDRMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3D, 0xDE, 0x38, 0x24,
				0xD9, 0x94,
				0xE8, 0x4B,
				0x84,
				0xA8,
				0x4D,
				0xE9,
				0x5A,
				0x57,
				0x5E,
				0x75
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICWebpAnimMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x11, 0x99, 0x6F, 0x07,
				0x48, 0xA3,
				0x5C, 0x46,
				0xA8,
				0x07,
				0xA2,
				0x52,
				0xF3,
				0xF2,
				0xD3,
				0xDE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_WICWebpAnmfMetadataReader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x03, 0x0B, 0xA1, 0x85,
				0xF6, 0xC9,
				0x9F, 0x43,
				0xBE,
				0x5E,
				0xC0,
				0xFB,
				0xEF,
				0x67,
				0x80,
				0x7C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

}

#region Enums
/// <include file='../Imaging.xml' path='doc/member[@name="WICColorContextType"]/*' />
/// <unmanaged>WICColorContextType</unmanaged>
public enum WICColorContextType : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICColorContextType::WICColorContextUninitialized"]/*' />
	/// <unmanaged>WICColorContextUninitialized</unmanaged>
	Uninitialized = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICColorContextType::WICColorContextProfile"]/*' />
	/// <unmanaged>WICColorContextProfile</unmanaged>
	Profile = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICColorContextType::WICColorContextExifColorSpace"]/*' />
	/// <unmanaged>WICColorContextExifColorSpace</unmanaged>
	ExifColorSpace = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapCreateCacheOption"]/*' />
/// <unmanaged>WICBitmapCreateCacheOption</unmanaged>
public enum WICBitmapCreateCacheOption : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapCreateCacheOption::WICBitmapNoCache"]/*' />
	/// <unmanaged>WICBitmapNoCache</unmanaged>
	NoCache = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapCreateCacheOption::WICBitmapCacheOnDemand"]/*' />
	/// <unmanaged>WICBitmapCacheOnDemand</unmanaged>
	CacheOnDemand = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapCreateCacheOption::WICBitmapCacheOnLoad"]/*' />
	/// <unmanaged>WICBitmapCacheOnLoad</unmanaged>
	CacheOnLoad = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICDecodeOptions"]/*' />
/// <unmanaged>WICDecodeOptions</unmanaged>
public enum WICDecodeOptions : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDecodeOptions::WICDecodeMetadataCacheOnDemand"]/*' />
	/// <unmanaged>WICDecodeMetadataCacheOnDemand</unmanaged>
	CacheOnDemand = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDecodeOptions::WICDecodeMetadataCacheOnLoad"]/*' />
	/// <unmanaged>WICDecodeMetadataCacheOnLoad</unmanaged>
	CacheOnLoad = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapEncoderCacheOption"]/*' />
/// <unmanaged>WICBitmapEncoderCacheOption</unmanaged>
public enum WICBitmapEncoderCacheOption : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapEncoderCacheOption::WICBitmapEncoderCacheInMemory"]/*' />
	/// <unmanaged>WICBitmapEncoderCacheInMemory</unmanaged>
	CacheInMemory = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapEncoderCacheOption::WICBitmapEncoderCacheTempFile"]/*' />
	/// <unmanaged>WICBitmapEncoderCacheTempFile</unmanaged>
	CacheTempFile = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapEncoderCacheOption::WICBitmapEncoderNoCache"]/*' />
	/// <unmanaged>WICBitmapEncoderNoCache</unmanaged>
	NoCache = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentType"]/*' />
/// <unmanaged>WICComponentType</unmanaged>
public enum WICComponentType : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentType::WICDecoder"]/*' />
	/// <unmanaged>WICDecoder</unmanaged>
	Decoder = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentType::WICEncoder"]/*' />
	/// <unmanaged>WICEncoder</unmanaged>
	Encoder = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentType::WICPixelFormatConverter"]/*' />
	/// <unmanaged>WICPixelFormatConverter</unmanaged>
	PixelFormatConverter = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentType::WICMetadataReader"]/*' />
	/// <unmanaged>WICMetadataReader</unmanaged>
	MetadataReader = 8,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentType::WICMetadataWriter"]/*' />
	/// <unmanaged>WICMetadataWriter</unmanaged>
	MetadataWriter = 16,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentType::WICPixelFormat"]/*' />
	/// <unmanaged>WICPixelFormat</unmanaged>
	PixelFormat = 32,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentType::WICAllComponents"]/*' />
	/// <unmanaged>WICAllComponents</unmanaged>
	AllComponents = 63,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentEnumerateOptions"]/*' />
/// <unmanaged>WICComponentEnumerateOptions</unmanaged>
public enum WICComponentEnumerateOptions : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentEnumerateOptions::WICComponentEnumerateDefault"]/*' />
	/// <unmanaged>WICComponentEnumerateDefault</unmanaged>
	Default = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentEnumerateOptions::WICComponentEnumerateRefresh"]/*' />
	/// <unmanaged>WICComponentEnumerateRefresh</unmanaged>
	Refresh = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentEnumerateOptions::WICComponentEnumerateDisabled"]/*' />
	/// <unmanaged>WICComponentEnumerateDisabled</unmanaged>
	Disabled = -2147483648,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentEnumerateOptions::WICComponentEnumerateUnsigned"]/*' />
	/// <unmanaged>WICComponentEnumerateUnsigned</unmanaged>
	Unsigned = 1073741824,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentEnumerateOptions::WICComponentEnumerateBuiltInOnly"]/*' />
	/// <unmanaged>WICComponentEnumerateBuiltInOnly</unmanaged>
	BuiltInOnly = 536870912,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapInterpolationMode"]/*' />
/// <unmanaged>WICBitmapInterpolationMode</unmanaged>
public enum WICBitmapInterpolationMode : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapInterpolationMode::WICBitmapInterpolationModeNearestNeighbor"]/*' />
	/// <unmanaged>WICBitmapInterpolationModeNearestNeighbor</unmanaged>
	ModeNearestNeighbor = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapInterpolationMode::WICBitmapInterpolationModeLinear"]/*' />
	/// <unmanaged>WICBitmapInterpolationModeLinear</unmanaged>
	ModeLinear = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapInterpolationMode::WICBitmapInterpolationModeCubic"]/*' />
	/// <unmanaged>WICBitmapInterpolationModeCubic</unmanaged>
	ModeCubic = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapInterpolationMode::WICBitmapInterpolationModeFant"]/*' />
	/// <unmanaged>WICBitmapInterpolationModeFant</unmanaged>
	ModeFant = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapInterpolationMode::WICBitmapInterpolationModeHighQualityCubic"]/*' />
	/// <unmanaged>WICBitmapInterpolationModeHighQualityCubic</unmanaged>
	ModeHighQualityCubic = 4,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType"]/*' />
/// <unmanaged>WICBitmapPaletteType</unmanaged>
public enum WICBitmapPaletteType : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeCustom"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeCustom</unmanaged>
	Custom = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeMedianCut"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeMedianCut</unmanaged>
	MedianCut = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedBW"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedBW</unmanaged>
	FixedBW = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedHalftone8"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedHalftone8</unmanaged>
	FixedHalftone8 = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedHalftone27"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedHalftone27</unmanaged>
	FixedHalftone27 = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedHalftone64"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedHalftone64</unmanaged>
	FixedHalftone64 = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedHalftone125"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedHalftone125</unmanaged>
	FixedHalftone125 = 6,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedHalftone216"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedHalftone216</unmanaged>
	FixedHalftone216 = 7,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedWebPalette"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedWebPalette</unmanaged>
	FixedWebPalette = 7,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedHalftone252"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedHalftone252</unmanaged>
	FixedHalftone252 = 8,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedHalftone256"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedHalftone256</unmanaged>
	FixedHalftone256 = 9,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedGray4"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedGray4</unmanaged>
	FixedGray4 = 10,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedGray16"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedGray16</unmanaged>
	FixedGray16 = 11,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPaletteType::WICBitmapPaletteTypeFixedGray256"]/*' />
	/// <unmanaged>WICBitmapPaletteTypeFixedGray256</unmanaged>
	FixedGray256 = 12,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType"]/*' />
/// <unmanaged>WICBitmapDitherType</unmanaged>
public enum WICBitmapDitherType : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeNone"]/*' />
	/// <unmanaged>WICBitmapDitherTypeNone</unmanaged>
	None = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeSolid"]/*' />
	/// <unmanaged>WICBitmapDitherTypeSolid</unmanaged>
	Solid = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeOrdered4x4"]/*' />
	/// <unmanaged>WICBitmapDitherTypeOrdered4x4</unmanaged>
	Ordered4x4 = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeOrdered8x8"]/*' />
	/// <unmanaged>WICBitmapDitherTypeOrdered8x8</unmanaged>
	Ordered8x8 = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeOrdered16x16"]/*' />
	/// <unmanaged>WICBitmapDitherTypeOrdered16x16</unmanaged>
	Ordered16x16 = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeSpiral4x4"]/*' />
	/// <unmanaged>WICBitmapDitherTypeSpiral4x4</unmanaged>
	Spiral4x4 = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeSpiral8x8"]/*' />
	/// <unmanaged>WICBitmapDitherTypeSpiral8x8</unmanaged>
	Spiral8x8 = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeDualSpiral4x4"]/*' />
	/// <unmanaged>WICBitmapDitherTypeDualSpiral4x4</unmanaged>
	DualSpiral4x4 = 6,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeDualSpiral8x8"]/*' />
	/// <unmanaged>WICBitmapDitherTypeDualSpiral8x8</unmanaged>
	DualSpiral8x8 = 7,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDitherType::WICBitmapDitherTypeErrorDiffusion"]/*' />
	/// <unmanaged>WICBitmapDitherTypeErrorDiffusion</unmanaged>
	ErrorDiffusion = 8,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapAlphaChannelOption"]/*' />
/// <unmanaged>WICBitmapAlphaChannelOption</unmanaged>
public enum WICBitmapAlphaChannelOption : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapAlphaChannelOption::WICBitmapUseAlpha"]/*' />
	/// <unmanaged>WICBitmapUseAlpha</unmanaged>
	UseAlpha = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapAlphaChannelOption::WICBitmapUsePremultipliedAlpha"]/*' />
	/// <unmanaged>WICBitmapUsePremultipliedAlpha</unmanaged>
	UsePremultipliedAlpha = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapAlphaChannelOption::WICBitmapIgnoreAlpha"]/*' />
	/// <unmanaged>WICBitmapIgnoreAlpha</unmanaged>
	IgnoreAlpha = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapTransformOptions"]/*' />
/// <unmanaged>WICBitmapTransformOptions</unmanaged>
public enum WICBitmapTransformOptions : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapTransformOptions::WICBitmapTransformRotate0"]/*' />
	/// <unmanaged>WICBitmapTransformRotate0</unmanaged>
	Rotate0 = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapTransformOptions::WICBitmapTransformRotate90"]/*' />
	/// <unmanaged>WICBitmapTransformRotate90</unmanaged>
	Rotate90 = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapTransformOptions::WICBitmapTransformRotate180"]/*' />
	/// <unmanaged>WICBitmapTransformRotate180</unmanaged>
	Rotate180 = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapTransformOptions::WICBitmapTransformRotate270"]/*' />
	/// <unmanaged>WICBitmapTransformRotate270</unmanaged>
	Rotate270 = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapTransformOptions::WICBitmapTransformFlipHorizontal"]/*' />
	/// <unmanaged>WICBitmapTransformFlipHorizontal</unmanaged>
	FlipHorizontal = 8,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapTransformOptions::WICBitmapTransformFlipVertical"]/*' />
	/// <unmanaged>WICBitmapTransformFlipVertical</unmanaged>
	FlipVertical = 16,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapLockFlags"]/*' />
/// <unmanaged>WICBitmapLockFlags</unmanaged>
[Flags]
public enum WICBitmapLockFlags : int
{
	None = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapLockFlags::WICBitmapLockRead"]/*' />
	/// <unmanaged>WICBitmapLockRead</unmanaged>
	Read = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapLockFlags::WICBitmapLockWrite"]/*' />
	/// <unmanaged>WICBitmapLockWrite</unmanaged>
	Write = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDecoderCapabilities"]/*' />
/// <unmanaged>WICBitmapDecoderCapabilities</unmanaged>
public enum WICBitmapDecoderCapabilities : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDecoderCapabilities::WICBitmapDecoderCapabilitySameEncoder"]/*' />
	/// <unmanaged>WICBitmapDecoderCapabilitySameEncoder</unmanaged>
	SameEncoder = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDecoderCapabilities::WICBitmapDecoderCapabilityCanDecodeAllImages"]/*' />
	/// <unmanaged>WICBitmapDecoderCapabilityCanDecodeAllImages</unmanaged>
	CanDecodeAllImages = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDecoderCapabilities::WICBitmapDecoderCapabilityCanDecodeSomeImages"]/*' />
	/// <unmanaged>WICBitmapDecoderCapabilityCanDecodeSomeImages</unmanaged>
	CanDecodeSomeImages = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDecoderCapabilities::WICBitmapDecoderCapabilityCanEnumerateMetadata"]/*' />
	/// <unmanaged>WICBitmapDecoderCapabilityCanEnumerateMetadata</unmanaged>
	CanEnumerateMetadata = 8,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapDecoderCapabilities::WICBitmapDecoderCapabilityCanDecodeThumbnail"]/*' />
	/// <unmanaged>WICBitmapDecoderCapabilityCanDecodeThumbnail</unmanaged>
	CanDecodeThumbnail = 16,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressOperation"]/*' />
/// <unmanaged>WICProgressOperation</unmanaged>
public enum WICProgressOperation : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressOperation::WICProgressOperationCopyPixels"]/*' />
	/// <unmanaged>WICProgressOperationCopyPixels</unmanaged>
	CopyPixels = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressOperation::WICProgressOperationWritePixels"]/*' />
	/// <unmanaged>WICProgressOperationWritePixels</unmanaged>
	WritePixels = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressOperation::WICProgressOperationAll"]/*' />
	/// <unmanaged>WICProgressOperationAll</unmanaged>
	All = 65535,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressNotification"]/*' />
/// <unmanaged>WICProgressNotification</unmanaged>
public enum WICProgressNotification : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressNotification::WICProgressNotificationBegin"]/*' />
	/// <unmanaged>WICProgressNotificationBegin</unmanaged>
	Begin = 65536,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressNotification::WICProgressNotificationEnd"]/*' />
	/// <unmanaged>WICProgressNotificationEnd</unmanaged>
	End = 131072,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressNotification::WICProgressNotificationFrequent"]/*' />
	/// <unmanaged>WICProgressNotificationFrequent</unmanaged>
	Frequent = 262144,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICProgressNotification::WICProgressNotificationAll"]/*' />
	/// <unmanaged>WICProgressNotificationAll</unmanaged>
	All = -65536,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentSigning"]/*' />
/// <unmanaged>WICComponentSigning</unmanaged>
public enum WICComponentSigning : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentSigning::WICComponentSigned"]/*' />
	/// <unmanaged>WICComponentSigned</unmanaged>
	Signed = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentSigning::WICComponentUnsigned"]/*' />
	/// <unmanaged>WICComponentUnsigned</unmanaged>
	Unsigned = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentSigning::WICComponentSafe"]/*' />
	/// <unmanaged>WICComponentSafe</unmanaged>
	Safe = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICComponentSigning::WICComponentDisabled"]/*' />
	/// <unmanaged>WICComponentDisabled</unmanaged>
	Disabled = -2147483648,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties"]/*' />
/// <unmanaged>WICGifLogicalScreenDescriptorProperties</unmanaged>
public enum WICGifLogicalScreenDescriptorProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenSignature"]/*' />
	/// <unmanaged>WICGifLogicalScreenSignature</unmanaged>
	WICGifLogicalScreenSignature = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenDescriptorWidth"]/*' />
	/// <unmanaged>WICGifLogicalScreenDescriptorWidth</unmanaged>
	WICGifLogicalScreenDescriptorWidth = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenDescriptorHeight"]/*' />
	/// <unmanaged>WICGifLogicalScreenDescriptorHeight</unmanaged>
	WICGifLogicalScreenDescriptorHeight = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenDescriptorGlobalColorTableFlag"]/*' />
	/// <unmanaged>WICGifLogicalScreenDescriptorGlobalColorTableFlag</unmanaged>
	WICGifLogicalScreenDescriptorGlobalColorTableFlag = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenDescriptorColorResolution"]/*' />
	/// <unmanaged>WICGifLogicalScreenDescriptorColorResolution</unmanaged>
	WICGifLogicalScreenDescriptorColorResolution = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenDescriptorSortFlag"]/*' />
	/// <unmanaged>WICGifLogicalScreenDescriptorSortFlag</unmanaged>
	WICGifLogicalScreenDescriptorSortFlag = 6,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenDescriptorGlobalColorTableSize"]/*' />
	/// <unmanaged>WICGifLogicalScreenDescriptorGlobalColorTableSize</unmanaged>
	WICGifLogicalScreenDescriptorGlobalColorTableSize = 7,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenDescriptorBackgroundColorIndex"]/*' />
	/// <unmanaged>WICGifLogicalScreenDescriptorBackgroundColorIndex</unmanaged>
	WICGifLogicalScreenDescriptorBackgroundColorIndex = 8,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifLogicalScreenDescriptorProperties::WICGifLogicalScreenDescriptorPixelAspectRatio"]/*' />
	/// <unmanaged>WICGifLogicalScreenDescriptorPixelAspectRatio</unmanaged>
	WICGifLogicalScreenDescriptorPixelAspectRatio = 9,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties"]/*' />
/// <unmanaged>WICGifImageDescriptorProperties</unmanaged>
public enum WICGifImageDescriptorProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties::WICGifImageDescriptorLeft"]/*' />
	/// <unmanaged>WICGifImageDescriptorLeft</unmanaged>
	WICGifImageDescriptorLeft = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties::WICGifImageDescriptorTop"]/*' />
	/// <unmanaged>WICGifImageDescriptorTop</unmanaged>
	WICGifImageDescriptorTop = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties::WICGifImageDescriptorWidth"]/*' />
	/// <unmanaged>WICGifImageDescriptorWidth</unmanaged>
	WICGifImageDescriptorWidth = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties::WICGifImageDescriptorHeight"]/*' />
	/// <unmanaged>WICGifImageDescriptorHeight</unmanaged>
	WICGifImageDescriptorHeight = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties::WICGifImageDescriptorLocalColorTableFlag"]/*' />
	/// <unmanaged>WICGifImageDescriptorLocalColorTableFlag</unmanaged>
	WICGifImageDescriptorLocalColorTableFlag = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties::WICGifImageDescriptorInterlaceFlag"]/*' />
	/// <unmanaged>WICGifImageDescriptorInterlaceFlag</unmanaged>
	WICGifImageDescriptorInterlaceFlag = 6,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties::WICGifImageDescriptorSortFlag"]/*' />
	/// <unmanaged>WICGifImageDescriptorSortFlag</unmanaged>
	WICGifImageDescriptorSortFlag = 7,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifImageDescriptorProperties::WICGifImageDescriptorLocalColorTableSize"]/*' />
	/// <unmanaged>WICGifImageDescriptorLocalColorTableSize</unmanaged>
	WICGifImageDescriptorLocalColorTableSize = 8,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICGifGraphicControlExtensionProperties"]/*' />
/// <unmanaged>WICGifGraphicControlExtensionProperties</unmanaged>
public enum WICGifGraphicControlExtensionProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifGraphicControlExtensionProperties::WICGifGraphicControlExtensionDisposal"]/*' />
	/// <unmanaged>WICGifGraphicControlExtensionDisposal</unmanaged>
	WICGifGraphicControlExtensionDisposal = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifGraphicControlExtensionProperties::WICGifGraphicControlExtensionUserInputFlag"]/*' />
	/// <unmanaged>WICGifGraphicControlExtensionUserInputFlag</unmanaged>
	WICGifGraphicControlExtensionUserInputFlag = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifGraphicControlExtensionProperties::WICGifGraphicControlExtensionTransparencyFlag"]/*' />
	/// <unmanaged>WICGifGraphicControlExtensionTransparencyFlag</unmanaged>
	WICGifGraphicControlExtensionTransparencyFlag = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifGraphicControlExtensionProperties::WICGifGraphicControlExtensionDelay"]/*' />
	/// <unmanaged>WICGifGraphicControlExtensionDelay</unmanaged>
	WICGifGraphicControlExtensionDelay = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifGraphicControlExtensionProperties::WICGifGraphicControlExtensionTransparentColorIndex"]/*' />
	/// <unmanaged>WICGifGraphicControlExtensionTransparentColorIndex</unmanaged>
	WICGifGraphicControlExtensionTransparentColorIndex = 5,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICGifApplicationExtensionProperties"]/*' />
/// <unmanaged>WICGifApplicationExtensionProperties</unmanaged>
public enum WICGifApplicationExtensionProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifApplicationExtensionProperties::WICGifApplicationExtensionApplication"]/*' />
	/// <unmanaged>WICGifApplicationExtensionApplication</unmanaged>
	WICGifApplicationExtensionApplication = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifApplicationExtensionProperties::WICGifApplicationExtensionData"]/*' />
	/// <unmanaged>WICGifApplicationExtensionData</unmanaged>
	WICGifApplicationExtensionData = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICGifCommentExtensionProperties"]/*' />
/// <unmanaged>WICGifCommentExtensionProperties</unmanaged>
public enum WICGifCommentExtensionProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICGifCommentExtensionProperties::WICGifCommentExtensionText"]/*' />
	/// <unmanaged>WICGifCommentExtensionText</unmanaged>
	WICGifCommentExtensionText = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegCommentProperties"]/*' />
/// <unmanaged>WICJpegCommentProperties</unmanaged>
public enum WICJpegCommentProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegCommentProperties::WICJpegCommentText"]/*' />
	/// <unmanaged>WICJpegCommentText</unmanaged>
	WICJpegCommentText = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegLuminanceProperties"]/*' />
/// <unmanaged>WICJpegLuminanceProperties</unmanaged>
public enum WICJpegLuminanceProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegLuminanceProperties::WICJpegLuminanceTable"]/*' />
	/// <unmanaged>WICJpegLuminanceTable</unmanaged>
	WICJpegLuminanceTable = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegChrominanceProperties"]/*' />
/// <unmanaged>WICJpegChrominanceProperties</unmanaged>
public enum WICJpegChrominanceProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegChrominanceProperties::WICJpegChrominanceTable"]/*' />
	/// <unmanaged>WICJpegChrominanceTable</unmanaged>
	WICJpegChrominanceTable = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMIptcProperties"]/*' />
/// <unmanaged>WIC8BIMIptcProperties</unmanaged>
public enum WIC8BIMIptcProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMIptcProperties::WIC8BIMIptcPString"]/*' />
	/// <unmanaged>WIC8BIMIptcPString</unmanaged>
	WIC8BIMIptcPString = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMIptcProperties::WIC8BIMIptcEmbeddedIPTC"]/*' />
	/// <unmanaged>WIC8BIMIptcEmbeddedIPTC</unmanaged>
	WIC8BIMIptcEmbeddedIPTC = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMResolutionInfoProperties"]/*' />
/// <unmanaged>WIC8BIMResolutionInfoProperties</unmanaged>
public enum WIC8BIMResolutionInfoProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMResolutionInfoProperties::WIC8BIMResolutionInfoPString"]/*' />
	/// <unmanaged>WIC8BIMResolutionInfoPString</unmanaged>
	WIC8BIMResolutionInfoPString = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMResolutionInfoProperties::WIC8BIMResolutionInfoHResolution"]/*' />
	/// <unmanaged>WIC8BIMResolutionInfoHResolution</unmanaged>
	WIC8BIMResolutionInfoHResolution = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMResolutionInfoProperties::WIC8BIMResolutionInfoHResolutionUnit"]/*' />
	/// <unmanaged>WIC8BIMResolutionInfoHResolutionUnit</unmanaged>
	WIC8BIMResolutionInfoHResolutionUnit = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMResolutionInfoProperties::WIC8BIMResolutionInfoWidthUnit"]/*' />
	/// <unmanaged>WIC8BIMResolutionInfoWidthUnit</unmanaged>
	WIC8BIMResolutionInfoWidthUnit = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMResolutionInfoProperties::WIC8BIMResolutionInfoVResolution"]/*' />
	/// <unmanaged>WIC8BIMResolutionInfoVResolution</unmanaged>
	WIC8BIMResolutionInfoVResolution = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMResolutionInfoProperties::WIC8BIMResolutionInfoVResolutionUnit"]/*' />
	/// <unmanaged>WIC8BIMResolutionInfoVResolutionUnit</unmanaged>
	WIC8BIMResolutionInfoVResolutionUnit = 6,
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMResolutionInfoProperties::WIC8BIMResolutionInfoHeightUnit"]/*' />
	/// <unmanaged>WIC8BIMResolutionInfoHeightUnit</unmanaged>
	WIC8BIMResolutionInfoHeightUnit = 7,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMIptcDigestProperties"]/*' />
/// <unmanaged>WIC8BIMIptcDigestProperties</unmanaged>
public enum WIC8BIMIptcDigestProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMIptcDigestProperties::WIC8BIMIptcDigestPString"]/*' />
	/// <unmanaged>WIC8BIMIptcDigestPString</unmanaged>
	WIC8BIMIptcDigestPString = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WIC8BIMIptcDigestProperties::WIC8BIMIptcDigestIptcDigest"]/*' />
	/// <unmanaged>WIC8BIMIptcDigestIptcDigest</unmanaged>
	WIC8BIMIptcDigestIptcDigest = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngGamaProperties"]/*' />
/// <unmanaged>WICPngGamaProperties</unmanaged>
public enum WICPngGamaProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngGamaProperties::WICPngGamaGamma"]/*' />
	/// <unmanaged>WICPngGamaGamma</unmanaged>
	WICPngGamaGamma = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngBkgdProperties"]/*' />
/// <unmanaged>WICPngBkgdProperties</unmanaged>
public enum WICPngBkgdProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngBkgdProperties::WICPngBkgdBackgroundColor"]/*' />
	/// <unmanaged>WICPngBkgdBackgroundColor</unmanaged>
	WICPngBkgdBackgroundColor = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngItxtProperties"]/*' />
/// <unmanaged>WICPngItxtProperties</unmanaged>
public enum WICPngItxtProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngItxtProperties::WICPngItxtKeyword"]/*' />
	/// <unmanaged>WICPngItxtKeyword</unmanaged>
	WICPngItxtKeyword = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngItxtProperties::WICPngItxtCompressionFlag"]/*' />
	/// <unmanaged>WICPngItxtCompressionFlag</unmanaged>
	WICPngItxtCompressionFlag = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngItxtProperties::WICPngItxtLanguageTag"]/*' />
	/// <unmanaged>WICPngItxtLanguageTag</unmanaged>
	WICPngItxtLanguageTag = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngItxtProperties::WICPngItxtTranslatedKeyword"]/*' />
	/// <unmanaged>WICPngItxtTranslatedKeyword</unmanaged>
	WICPngItxtTranslatedKeyword = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngItxtProperties::WICPngItxtText"]/*' />
	/// <unmanaged>WICPngItxtText</unmanaged>
	WICPngItxtText = 5,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties"]/*' />
/// <unmanaged>WICPngChrmProperties</unmanaged>
public enum WICPngChrmProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties::WICPngChrmWhitePointX"]/*' />
	/// <unmanaged>WICPngChrmWhitePointX</unmanaged>
	WICPngChrmWhitePointX = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties::WICPngChrmWhitePointY"]/*' />
	/// <unmanaged>WICPngChrmWhitePointY</unmanaged>
	WICPngChrmWhitePointY = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties::WICPngChrmRedX"]/*' />
	/// <unmanaged>WICPngChrmRedX</unmanaged>
	WICPngChrmRedX = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties::WICPngChrmRedY"]/*' />
	/// <unmanaged>WICPngChrmRedY</unmanaged>
	WICPngChrmRedY = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties::WICPngChrmGreenX"]/*' />
	/// <unmanaged>WICPngChrmGreenX</unmanaged>
	WICPngChrmGreenX = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties::WICPngChrmGreenY"]/*' />
	/// <unmanaged>WICPngChrmGreenY</unmanaged>
	WICPngChrmGreenY = 6,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties::WICPngChrmBlueX"]/*' />
	/// <unmanaged>WICPngChrmBlueX</unmanaged>
	WICPngChrmBlueX = 7,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngChrmProperties::WICPngChrmBlueY"]/*' />
	/// <unmanaged>WICPngChrmBlueY</unmanaged>
	WICPngChrmBlueY = 8,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngHistProperties"]/*' />
/// <unmanaged>WICPngHistProperties</unmanaged>
public enum WICPngHistProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngHistProperties::WICPngHistFrequencies"]/*' />
	/// <unmanaged>WICPngHistFrequencies</unmanaged>
	WICPngHistFrequencies = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngIccpProperties"]/*' />
/// <unmanaged>WICPngIccpProperties</unmanaged>
public enum WICPngIccpProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngIccpProperties::WICPngIccpProfileName"]/*' />
	/// <unmanaged>WICPngIccpProfileName</unmanaged>
	WICPngIccpProfileName = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngIccpProperties::WICPngIccpProfileData"]/*' />
	/// <unmanaged>WICPngIccpProfileData</unmanaged>
	WICPngIccpProfileData = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngSrgbProperties"]/*' />
/// <unmanaged>WICPngSrgbProperties</unmanaged>
public enum WICPngSrgbProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngSrgbProperties::WICPngSrgbRenderingIntent"]/*' />
	/// <unmanaged>WICPngSrgbRenderingIntent</unmanaged>
	WICPngSrgbRenderingIntent = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngTimeProperties"]/*' />
/// <unmanaged>WICPngTimeProperties</unmanaged>
public enum WICPngTimeProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngTimeProperties::WICPngTimeYear"]/*' />
	/// <unmanaged>WICPngTimeYear</unmanaged>
	WICPngTimeYear = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngTimeProperties::WICPngTimeMonth"]/*' />
	/// <unmanaged>WICPngTimeMonth</unmanaged>
	WICPngTimeMonth = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngTimeProperties::WICPngTimeDay"]/*' />
	/// <unmanaged>WICPngTimeDay</unmanaged>
	WICPngTimeDay = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngTimeProperties::WICPngTimeHour"]/*' />
	/// <unmanaged>WICPngTimeHour</unmanaged>
	WICPngTimeHour = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngTimeProperties::WICPngTimeMinute"]/*' />
	/// <unmanaged>WICPngTimeMinute</unmanaged>
	WICPngTimeMinute = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngTimeProperties::WICPngTimeSecond"]/*' />
	/// <unmanaged>WICPngTimeSecond</unmanaged>
	WICPngTimeSecond = 6,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICHeifProperties"]/*' />
/// <unmanaged>WICHeifProperties</unmanaged>
public enum WICHeifProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICHeifProperties::WICHeifOrientation"]/*' />
	/// <unmanaged>WICHeifOrientation</unmanaged>
	WICHeifOrientation = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICHeifHdrProperties"]/*' />
/// <unmanaged>WICHeifHdrProperties</unmanaged>
public enum WICHeifHdrProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICHeifHdrProperties::WICHeifHdrMaximumLuminanceLevel"]/*' />
	/// <unmanaged>WICHeifHdrMaximumLuminanceLevel</unmanaged>
	WICHeifHdrMaximumLuminanceLevel = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICHeifHdrProperties::WICHeifHdrMaximumFrameAverageLuminanceLevel"]/*' />
	/// <unmanaged>WICHeifHdrMaximumFrameAverageLuminanceLevel</unmanaged>
	WICHeifHdrMaximumFrameAverageLuminanceLevel = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICHeifHdrProperties::WICHeifHdrMinimumMasteringDisplayLuminanceLevel"]/*' />
	/// <unmanaged>WICHeifHdrMinimumMasteringDisplayLuminanceLevel</unmanaged>
	WICHeifHdrMinimumMasteringDisplayLuminanceLevel = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICHeifHdrProperties::WICHeifHdrMaximumMasteringDisplayLuminanceLevel"]/*' />
	/// <unmanaged>WICHeifHdrMaximumMasteringDisplayLuminanceLevel</unmanaged>
	WICHeifHdrMaximumMasteringDisplayLuminanceLevel = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICHeifHdrProperties::WICHeifHdrCustomVideoPrimaries"]/*' />
	/// <unmanaged>WICHeifHdrCustomVideoPrimaries</unmanaged>
	WICHeifHdrCustomVideoPrimaries = 5,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICWebpAnimProperties"]/*' />
/// <unmanaged>WICWebpAnimProperties</unmanaged>
public enum WICWebpAnimProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICWebpAnimProperties::WICWebpAnimLoopCount"]/*' />
	/// <unmanaged>WICWebpAnimLoopCount</unmanaged>
	WICWebpAnimLoopCount = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICWebpAnmfProperties"]/*' />
/// <unmanaged>WICWebpAnmfProperties</unmanaged>
public enum WICWebpAnmfProperties : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICWebpAnmfProperties::WICWebpAnmfFrameDuration"]/*' />
	/// <unmanaged>WICWebpAnmfFrameDuration</unmanaged>
	WICWebpAnmfFrameDuration = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICSectionAccessLevel"]/*' />
/// <unmanaged>WICSectionAccessLevel</unmanaged>
public enum WICSectionAccessLevel : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICSectionAccessLevel::WICSectionAccessLevelRead"]/*' />
	/// <unmanaged>WICSectionAccessLevelRead</unmanaged>
	WICSectionAccessLevelRead = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICSectionAccessLevel::WICSectionAccessLevelReadWrite"]/*' />
	/// <unmanaged>WICSectionAccessLevelReadWrite</unmanaged>
	WICSectionAccessLevelReadWrite = 3,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPixelFormatNumericRepresentation"]/*' />
/// <unmanaged>WICPixelFormatNumericRepresentation</unmanaged>
public enum WICPixelFormatNumericRepresentation : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPixelFormatNumericRepresentation::WICPixelFormatNumericRepresentationUnspecified"]/*' />
	/// <unmanaged>WICPixelFormatNumericRepresentationUnspecified</unmanaged>
	Unspecified = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPixelFormatNumericRepresentation::WICPixelFormatNumericRepresentationIndexed"]/*' />
	/// <unmanaged>WICPixelFormatNumericRepresentationIndexed</unmanaged>
	Indexed = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPixelFormatNumericRepresentation::WICPixelFormatNumericRepresentationUnsignedInteger"]/*' />
	/// <unmanaged>WICPixelFormatNumericRepresentationUnsignedInteger</unmanaged>
	UnsignedInteger = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPixelFormatNumericRepresentation::WICPixelFormatNumericRepresentationSignedInteger"]/*' />
	/// <unmanaged>WICPixelFormatNumericRepresentationSignedInteger</unmanaged>
	SignedInteger = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPixelFormatNumericRepresentation::WICPixelFormatNumericRepresentationFixed"]/*' />
	/// <unmanaged>WICPixelFormatNumericRepresentationFixed</unmanaged>
	Fixed = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPixelFormatNumericRepresentation::WICPixelFormatNumericRepresentationFloat"]/*' />
	/// <unmanaged>WICPixelFormatNumericRepresentationFloat</unmanaged>
	Float = 5,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPlanarOptions"]/*' />
/// <unmanaged>WICPlanarOptions</unmanaged>
public enum WICPlanarOptions : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPlanarOptions::WICPlanarOptionsDefault"]/*' />
	/// <unmanaged>WICPlanarOptionsDefault</unmanaged>
	Default = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPlanarOptions::WICPlanarOptionsPreserveSubsampling"]/*' />
	/// <unmanaged>WICPlanarOptionsPreserveSubsampling</unmanaged>
	PreserveSubsampling = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegIndexingOptions"]/*' />
/// <unmanaged>WICJpegIndexingOptions</unmanaged>
public enum WICJpegIndexingOptions : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegIndexingOptions::WICJpegIndexingOptionsGenerateOnDemand"]/*' />
	/// <unmanaged>WICJpegIndexingOptionsGenerateOnDemand</unmanaged>
	WICJpegIndexingOptionsGenerateOnDemand = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegIndexingOptions::WICJpegIndexingOptionsGenerateOnLoad"]/*' />
	/// <unmanaged>WICJpegIndexingOptionsGenerateOnLoad</unmanaged>
	WICJpegIndexingOptionsGenerateOnLoad = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegTransferMatrix"]/*' />
/// <unmanaged>WICJpegTransferMatrix</unmanaged>
public enum WICJpegTransferMatrix : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegTransferMatrix::WICJpegTransferMatrixIdentity"]/*' />
	/// <unmanaged>WICJpegTransferMatrixIdentity</unmanaged>
	WICJpegTransferMatrixIdentity = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegTransferMatrix::WICJpegTransferMatrixBT601"]/*' />
	/// <unmanaged>WICJpegTransferMatrixBT601</unmanaged>
	WICJpegTransferMatrixBT601 = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanType"]/*' />
/// <unmanaged>WICJpegScanType</unmanaged>
public enum WICJpegScanType : uint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanType::WICJpegScanTypeInterleaved"]/*' />
	/// <unmanaged>WICJpegScanTypeInterleaved</unmanaged>
	WICJpegScanTypeInterleaved = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanType::WICJpegScanTypePlanarComponents"]/*' />
	/// <unmanaged>WICJpegScanTypePlanarComponents</unmanaged>
	WICJpegScanTypePlanarComponents = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanType::WICJpegScanTypeProgressive"]/*' />
	/// <unmanaged>WICJpegScanTypeProgressive</unmanaged>
	WICJpegScanTypeProgressive = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption"]/*' />
/// <unmanaged>WICTiffCompressionOption</unmanaged>
public enum WICTiffCompressionOption : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption::WICTiffCompressionDontCare"]/*' />
	/// <unmanaged>WICTiffCompressionDontCare</unmanaged>
	WICTiffCompressionDontCare = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption::WICTiffCompressionNone"]/*' />
	/// <unmanaged>WICTiffCompressionNone</unmanaged>
	WICTiffCompressionNone = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption::WICTiffCompressionCCITT3"]/*' />
	/// <unmanaged>WICTiffCompressionCCITT3</unmanaged>
	WICTiffCompressionCCITT3 = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption::WICTiffCompressionCCITT4"]/*' />
	/// <unmanaged>WICTiffCompressionCCITT4</unmanaged>
	WICTiffCompressionCCITT4 = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption::WICTiffCompressionLZW"]/*' />
	/// <unmanaged>WICTiffCompressionLZW</unmanaged>
	WICTiffCompressionLZW = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption::WICTiffCompressionRLE"]/*' />
	/// <unmanaged>WICTiffCompressionRLE</unmanaged>
	WICTiffCompressionRLE = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption::WICTiffCompressionZIP"]/*' />
	/// <unmanaged>WICTiffCompressionZIP</unmanaged>
	WICTiffCompressionZIP = 6,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICTiffCompressionOption::WICTiffCompressionLZWHDifferencing"]/*' />
	/// <unmanaged>WICTiffCompressionLZWHDifferencing</unmanaged>
	WICTiffCompressionLZWHDifferencing = 7,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegYCrCbSubsamplingOption"]/*' />
/// <unmanaged>WICJpegYCrCbSubsamplingOption</unmanaged>
public enum WICJpegYCrCbSubsamplingOption : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegYCrCbSubsamplingOption::WICJpegYCrCbSubsamplingDefault"]/*' />
	/// <unmanaged>WICJpegYCrCbSubsamplingDefault</unmanaged>
	WICJpegYCrCbSubsamplingDefault = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegYCrCbSubsamplingOption::WICJpegYCrCbSubsampling420"]/*' />
	/// <unmanaged>WICJpegYCrCbSubsampling420</unmanaged>
	WICJpegYCrCbSubsampling420 = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegYCrCbSubsamplingOption::WICJpegYCrCbSubsampling422"]/*' />
	/// <unmanaged>WICJpegYCrCbSubsampling422</unmanaged>
	WICJpegYCrCbSubsampling422 = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegYCrCbSubsamplingOption::WICJpegYCrCbSubsampling444"]/*' />
	/// <unmanaged>WICJpegYCrCbSubsampling444</unmanaged>
	WICJpegYCrCbSubsampling444 = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegYCrCbSubsamplingOption::WICJpegYCrCbSubsampling440"]/*' />
	/// <unmanaged>WICJpegYCrCbSubsampling440</unmanaged>
	WICJpegYCrCbSubsampling440 = 4,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPngFilterOption"]/*' />
/// <unmanaged>WICPngFilterOption</unmanaged>
public enum WICPngFilterOption : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngFilterOption::WICPngFilterUnspecified"]/*' />
	/// <unmanaged>WICPngFilterUnspecified</unmanaged>
	WICPngFilterUnspecified = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngFilterOption::WICPngFilterNone"]/*' />
	/// <unmanaged>WICPngFilterNone</unmanaged>
	WICPngFilterNone = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngFilterOption::WICPngFilterSub"]/*' />
	/// <unmanaged>WICPngFilterSub</unmanaged>
	WICPngFilterSub = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngFilterOption::WICPngFilterUp"]/*' />
	/// <unmanaged>WICPngFilterUp</unmanaged>
	WICPngFilterUp = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngFilterOption::WICPngFilterAverage"]/*' />
	/// <unmanaged>WICPngFilterAverage</unmanaged>
	WICPngFilterAverage = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngFilterOption::WICPngFilterPaeth"]/*' />
	/// <unmanaged>WICPngFilterPaeth</unmanaged>
	WICPngFilterPaeth = 5,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPngFilterOption::WICPngFilterAdaptive"]/*' />
	/// <unmanaged>WICPngFilterAdaptive</unmanaged>
	WICPngFilterAdaptive = 6,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint"]/*' />
/// <unmanaged>WICNamedWhitePoint</unmanaged>
public enum WICNamedWhitePoint : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointDefault"]/*' />
	/// <unmanaged>WICWhitePointDefault</unmanaged>
	WICWhitePointDefault = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointDaylight"]/*' />
	/// <unmanaged>WICWhitePointDaylight</unmanaged>
	WICWhitePointDaylight = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointCloudy"]/*' />
	/// <unmanaged>WICWhitePointCloudy</unmanaged>
	WICWhitePointCloudy = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointShade"]/*' />
	/// <unmanaged>WICWhitePointShade</unmanaged>
	WICWhitePointShade = 8,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointTungsten"]/*' />
	/// <unmanaged>WICWhitePointTungsten</unmanaged>
	WICWhitePointTungsten = 16,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointFluorescent"]/*' />
	/// <unmanaged>WICWhitePointFluorescent</unmanaged>
	WICWhitePointFluorescent = 32,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointFlash"]/*' />
	/// <unmanaged>WICWhitePointFlash</unmanaged>
	WICWhitePointFlash = 64,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointUnderwater"]/*' />
	/// <unmanaged>WICWhitePointUnderwater</unmanaged>
	WICWhitePointUnderwater = 128,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointCustom"]/*' />
	/// <unmanaged>WICWhitePointCustom</unmanaged>
	WICWhitePointCustom = 256,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointAutoWhiteBalance"]/*' />
	/// <unmanaged>WICWhitePointAutoWhiteBalance</unmanaged>
	WICWhitePointAutoWhiteBalance = 512,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICNamedWhitePoint::WICWhitePointAsShot"]/*' />
	/// <unmanaged>WICWhitePointAsShot</unmanaged>
	WICWhitePointAsShot = 1,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilities"]/*' />
/// <unmanaged>WICRawCapabilities</unmanaged>
public enum WICRawCapabilities : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilities::WICRawCapabilityNotSupported"]/*' />
	/// <unmanaged>WICRawCapabilityNotSupported</unmanaged>
	WICRawCapabilityNotSupported = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilities::WICRawCapabilityGetSupported"]/*' />
	/// <unmanaged>WICRawCapabilityGetSupported</unmanaged>
	WICRawCapabilityGetSupported = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilities::WICRawCapabilityFullySupported"]/*' />
	/// <unmanaged>WICRawCapabilityFullySupported</unmanaged>
	WICRawCapabilityFullySupported = 2,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRotationCapabilities"]/*' />
/// <unmanaged>WICRawRotationCapabilities</unmanaged>
public enum WICRawRotationCapabilities : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRotationCapabilities::WICRawRotationCapabilityNotSupported"]/*' />
	/// <unmanaged>WICRawRotationCapabilityNotSupported</unmanaged>
	WICRawRotationCapabilityNotSupported = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRotationCapabilities::WICRawRotationCapabilityGetSupported"]/*' />
	/// <unmanaged>WICRawRotationCapabilityGetSupported</unmanaged>
	WICRawRotationCapabilityGetSupported = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRotationCapabilities::WICRawRotationCapabilityNinetyDegreesSupported"]/*' />
	/// <unmanaged>WICRawRotationCapabilityNinetyDegreesSupported</unmanaged>
	WICRawRotationCapabilityNinetyDegreesSupported = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRotationCapabilities::WICRawRotationCapabilityFullySupported"]/*' />
	/// <unmanaged>WICRawRotationCapabilityFullySupported</unmanaged>
	WICRawRotationCapabilityFullySupported = 3,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICRawParameterSet"]/*' />
/// <unmanaged>WICRawParameterSet</unmanaged>
public enum WICRawParameterSet : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawParameterSet::WICAsShotParameterSet"]/*' />
	/// <unmanaged>WICAsShotParameterSet</unmanaged>
	WICAsShotParameterSet = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawParameterSet::WICUserAdjustedParameterSet"]/*' />
	/// <unmanaged>WICUserAdjustedParameterSet</unmanaged>
	WICUserAdjustedParameterSet = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawParameterSet::WICAutoAdjustedParameterSet"]/*' />
	/// <unmanaged>WICAutoAdjustedParameterSet</unmanaged>
	WICAutoAdjustedParameterSet = 3,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRenderMode"]/*' />
/// <unmanaged>WICRawRenderMode</unmanaged>
public enum WICRawRenderMode : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRenderMode::WICRawRenderModeDraft"]/*' />
	/// <unmanaged>WICRawRenderModeDraft</unmanaged>
	WICRawRenderModeDraft = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRenderMode::WICRawRenderModeNormal"]/*' />
	/// <unmanaged>WICRawRenderModeNormal</unmanaged>
	WICRawRenderModeNormal = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawRenderMode::WICRawRenderModeBestQuality"]/*' />
	/// <unmanaged>WICRawRenderModeBestQuality</unmanaged>
	WICRawRenderModeBestQuality = 3,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsDimension"]/*' />
/// <unmanaged>WICDdsDimension</unmanaged>
public enum WICDdsDimension : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsDimension::WICDdsTexture1D"]/*' />
	/// <unmanaged>WICDdsTexture1D</unmanaged>
	WICDdsTexture1D = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsDimension::WICDdsTexture2D"]/*' />
	/// <unmanaged>WICDdsTexture2D</unmanaged>
	WICDdsTexture2D = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsDimension::WICDdsTexture3D"]/*' />
	/// <unmanaged>WICDdsTexture3D</unmanaged>
	WICDdsTexture3D = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsDimension::WICDdsTextureCube"]/*' />
	/// <unmanaged>WICDdsTextureCube</unmanaged>
	WICDdsTextureCube = 3,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsAlphaMode"]/*' />
/// <unmanaged>WICDdsAlphaMode</unmanaged>
public enum WICDdsAlphaMode : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsAlphaMode::WICDdsAlphaModeUnknown"]/*' />
	/// <unmanaged>WICDdsAlphaModeUnknown</unmanaged>
	WICDdsAlphaModeUnknown = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsAlphaMode::WICDdsAlphaModeStraight"]/*' />
	/// <unmanaged>WICDdsAlphaModeStraight</unmanaged>
	WICDdsAlphaModeStraight = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsAlphaMode::WICDdsAlphaModePremultiplied"]/*' />
	/// <unmanaged>WICDdsAlphaModePremultiplied</unmanaged>
	WICDdsAlphaModePremultiplied = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsAlphaMode::WICDdsAlphaModeOpaque"]/*' />
	/// <unmanaged>WICDdsAlphaModeOpaque</unmanaged>
	WICDdsAlphaModeOpaque = 3,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsAlphaMode::WICDdsAlphaModeCustom"]/*' />
	/// <unmanaged>WICDdsAlphaModeCustom</unmanaged>
	WICDdsAlphaModeCustom = 4,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataCreationOptions"]/*' />
/// <unmanaged>WICMetadataCreationOptions</unmanaged>
public enum WICMetadataCreationOptions : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataCreationOptions::WICMetadataCreationDefault"]/*' />
	/// <unmanaged>WICMetadataCreationDefault</unmanaged>
	WICMetadataCreationDefault = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataCreationOptions::WICMetadataCreationAllowUnknown"]/*' />
	/// <unmanaged>WICMetadataCreationAllowUnknown</unmanaged>
	WICMetadataCreationAllowUnknown = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataCreationOptions::WICMetadataCreationFailUnknown"]/*' />
	/// <unmanaged>WICMetadataCreationFailUnknown</unmanaged>
	WICMetadataCreationFailUnknown = 65536,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataCreationOptions::WICMetadataCreationMask"]/*' />
	/// <unmanaged>WICMetadataCreationMask</unmanaged>
	WICMetadataCreationMask = -65536,
}

/// <include file='../Imaging.xml' path='doc/member[@name="WICPersistOptions"]/*' />
/// <unmanaged>WICPersistOptions</unmanaged>
public enum WICPersistOptions : int
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPersistOptions::WICPersistOptionDefault"]/*' />
	/// <unmanaged>WICPersistOptionDefault</unmanaged>
	WICPersistOptionDefault = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPersistOptions::WICPersistOptionLittleEndian"]/*' />
	/// <unmanaged>WICPersistOptionLittleEndian</unmanaged>
	WICPersistOptionLittleEndian = 0,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPersistOptions::WICPersistOptionBigEndian"]/*' />
	/// <unmanaged>WICPersistOptionBigEndian</unmanaged>
	WICPersistOptionBigEndian = 1,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPersistOptions::WICPersistOptionStrictFormat"]/*' />
	/// <unmanaged>WICPersistOptionStrictFormat</unmanaged>
	WICPersistOptionStrictFormat = 2,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPersistOptions::WICPersistOptionNoCacheStream"]/*' />
	/// <unmanaged>WICPersistOptionNoCacheStream</unmanaged>
	WICPersistOptionNoCacheStream = 4,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPersistOptions::WICPersistOptionPreferUTF8"]/*' />
	/// <unmanaged>WICPersistOptionPreferUTF8</unmanaged>
	WICPersistOptionPreferUTF8 = 8,
	/// <include file='../Imaging.xml' path='doc/member[@name="WICPersistOptions::WICPersistOptionMask"]/*' />
	/// <unmanaged>WICPersistOptionMask</unmanaged>
	WICPersistOptionMask = 65535,
}
#endregion Enums

#region Structs
/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPattern"]/*' />
/// <unmanaged>WICBitmapPattern</unmanaged>
public partial struct WICBitmapPattern
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPattern::Position"]/*' />
	public ULargeInteger Position;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPattern::Length"]/*' />
	public uint Length;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPattern::Pattern"]/*' />
	public unsafe byte* Pattern;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPattern::Mask"]/*' />
	public unsafe byte* Mask;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPattern::EndOfStream"]/*' />
	public Bool32 EndOfStream;
}
/// <include file='../Imaging.xml' path='doc/member[@name="WICImageParameters"]/*' />
/// <unmanaged>WICImageParameters</unmanaged>
public partial struct WICImageParameters
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICImageParameters::PixelFormat"]/*' />
	public Graphics.Direct2D.Common.PixelFormat PixelFormat;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICImageParameters::DpiX"]/*' />
	public float DpiX;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICImageParameters::DpiY"]/*' />
	public float DpiY;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICImageParameters::Top"]/*' />
	public float Top;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICImageParameters::Left"]/*' />
	public float Left;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICImageParameters::PixelWidth"]/*' />
	public uint PixelWidth;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICImageParameters::PixelHeight"]/*' />
	public uint PixelHeight;
}
/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlaneDescription"]/*' />
/// <unmanaged>WICBitmapPlaneDescription</unmanaged>
public partial struct WICBitmapPlaneDescription
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlaneDescription::Format"]/*' />
	public Guid Format;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlaneDescription::Width"]/*' />
	public uint Width;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlaneDescription::Height"]/*' />
	public uint Height;
}
/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlane"]/*' />
/// <unmanaged>WICBitmapPlane</unmanaged>
public partial struct WICBitmapPlane
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlane::Format"]/*' />
	public Guid Format;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlane::pbBuffer"]/*' />
	public unsafe byte* pbBuffer;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlane::cbStride"]/*' />
	public uint cbStride;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICBitmapPlane::cbBufferSize"]/*' />
	public uint cbBufferSize;
}
/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader"]/*' />
/// <unmanaged>WICJpegFrameHeader</unmanaged>
public partial struct WICJpegFrameHeader
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader::Width"]/*' />
	public uint Width;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader::Height"]/*' />
	public uint Height;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader::TransferMatrix"]/*' />
	public WICJpegTransferMatrix TransferMatrix;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader::ScanType"]/*' />
	public WICJpegScanType ScanType;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader::cComponents"]/*' />
	public uint cComponents;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader::ComponentIdentifiers"]/*' />
	public uint ComponentIdentifiers;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader::SampleFactors"]/*' />
	public uint SampleFactors;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegFrameHeader::QuantizationTableIndices"]/*' />
	public uint QuantizationTableIndices;
}
/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader"]/*' />
/// <unmanaged>WICJpegScanHeader</unmanaged>
public partial struct WICJpegScanHeader
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader::cComponents"]/*' />
	public uint cComponents;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader::RestartInterval"]/*' />
	public uint RestartInterval;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader::ComponentSelectors"]/*' />
	public uint ComponentSelectors;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader::HuffmanTableIndices"]/*' />
	public uint HuffmanTableIndices;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader::StartSpectralSelection"]/*' />
	public byte StartSpectralSelection;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader::EndSpectralSelection"]/*' />
	public byte EndSpectralSelection;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader::SuccessiveApproximationHigh"]/*' />
	public byte SuccessiveApproximationHigh;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICJpegScanHeader::SuccessiveApproximationLow"]/*' />
	public byte SuccessiveApproximationLow;
}
/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo"]/*' />
/// <unmanaged>WICRawCapabilitiesInfo</unmanaged>
public partial struct WICRawCapabilitiesInfo
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::cbSize"]/*' />
	public uint cbSize;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::CodecMajorVersion"]/*' />
	public uint CodecMajorVersion;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::CodecMinorVersion"]/*' />
	public uint CodecMinorVersion;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::ExposureCompensationSupport"]/*' />
	public WICRawCapabilities ExposureCompensationSupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::ContrastSupport"]/*' />
	public WICRawCapabilities ContrastSupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::RGBWhitePointSupport"]/*' />
	public WICRawCapabilities RGBWhitePointSupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::NamedWhitePointSupport"]/*' />
	public WICRawCapabilities NamedWhitePointSupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::NamedWhitePointSupportMask"]/*' />
	public uint NamedWhitePointSupportMask;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::KelvinWhitePointSupport"]/*' />
	public WICRawCapabilities KelvinWhitePointSupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::GammaSupport"]/*' />
	public WICRawCapabilities GammaSupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::TintSupport"]/*' />
	public WICRawCapabilities TintSupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::SaturationSupport"]/*' />
	public WICRawCapabilities SaturationSupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::SharpnessSupport"]/*' />
	public WICRawCapabilities SharpnessSupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::NoiseReductionSupport"]/*' />
	public WICRawCapabilities NoiseReductionSupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::DestinationColorProfileSupport"]/*' />
	public WICRawCapabilities DestinationColorProfileSupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::ToneCurveSupport"]/*' />
	public WICRawCapabilities ToneCurveSupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::RotationSupport"]/*' />
	public WICRawRotationCapabilities RotationSupport;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawCapabilitiesInfo::RenderModeSupport"]/*' />
	public WICRawCapabilities RenderModeSupport;
}
/// <include file='../Imaging.xml' path='doc/member[@name="WICRawToneCurvePoint"]/*' />
/// <unmanaged>WICRawToneCurvePoint</unmanaged>
public partial struct WICRawToneCurvePoint
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawToneCurvePoint::Input"]/*' />
	public double Input;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawToneCurvePoint::Output"]/*' />
	public double Output;
}
/// <include file='../Imaging.xml' path='doc/member[@name="WICRawToneCurve"]/*' />
/// <unmanaged>WICRawToneCurve</unmanaged>
public partial struct WICRawToneCurve
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawToneCurve::cPoints"]/*' />
	public uint cPoints;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICRawToneCurve::aPoints"]/*' />
	public aPoints__FixedBuffer aPoints;

	public unsafe struct aPoints__FixedBuffer
	{
		public WICRawToneCurvePoint e0;

		[UnscopedRef]
		public ref WICRawToneCurvePoint this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<WICRawToneCurvePoint> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 1);
		}
	}
}
/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters"]/*' />
/// <unmanaged>WICDdsParameters</unmanaged>
public partial struct WICDdsParameters
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters::Width"]/*' />
	public uint Width;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters::Height"]/*' />
	public uint Height;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters::Depth"]/*' />
	public uint Depth;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters::MipLevels"]/*' />
	public uint MipLevels;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters::ArraySize"]/*' />
	public uint ArraySize;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters::DxgiFormat"]/*' />
	public Graphics.Dxgi.Common.Format DxgiFormat;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters::Dimension"]/*' />
	public WICDdsDimension Dimension;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsParameters::AlphaMode"]/*' />
	public WICDdsAlphaMode AlphaMode;
}
/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsFormatInfo"]/*' />
/// <unmanaged>WICDdsFormatInfo</unmanaged>
public partial struct WICDdsFormatInfo
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsFormatInfo::DxgiFormat"]/*' />
	public Graphics.Dxgi.Common.Format DxgiFormat;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsFormatInfo::BytesPerBlock"]/*' />
	public uint BytesPerBlock;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsFormatInfo::BlockWidth"]/*' />
	public uint BlockWidth;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICDdsFormatInfo::BlockHeight"]/*' />
	public uint BlockHeight;
}
/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataPattern"]/*' />
/// <unmanaged>WICMetadataPattern</unmanaged>
public partial struct WICMetadataPattern
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataPattern::Position"]/*' />
	public ULargeInteger Position;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataPattern::Length"]/*' />
	public uint Length;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataPattern::Pattern"]/*' />
	public unsafe byte* Pattern;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataPattern::Mask"]/*' />
	public unsafe byte* Mask;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataPattern::DataOffset"]/*' />
	public ULargeInteger DataOffset;
}
/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataHeader"]/*' />
/// <unmanaged>WICMetadataHeader</unmanaged>
public partial struct WICMetadataHeader
{
	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataHeader::Position"]/*' />
	public ULargeInteger Position;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataHeader::Length"]/*' />
	public uint Length;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataHeader::Header"]/*' />
	public unsafe byte* Header;

	/// <include file='../Imaging.xml' path='doc/member[@name="WICMetadataHeader::DataOffset"]/*' />
	public ULargeInteger DataOffset;
}
#endregion Structs

#region COM Types
#endregion Com Types

#region Functions
public static unsafe partial class Apis
{
	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICConvertBitmapSource(Guid* dstFormat, IWICBitmapSource* pISrc, IWICBitmapSource** ppIDst);

	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICCreateBitmapFromSection(uint width, uint height, Guid* pixelFormat, Handle hSection, uint stride, uint offset, IWICBitmap** ppIBitmap);

	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICCreateBitmapFromSectionEx(uint width, uint height, Guid* pixelFormat, Handle hSection, uint stride, uint offset, WICSectionAccessLevel desiredAccessLevel, IWICBitmap** ppIBitmap);

	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICMapGuidToShortName(Guid* guid, uint cchName, ushort* wzName, uint* pcchActual);

	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICMapShortNameToGuid(ushort* wzName, Guid* pguid);

	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICMapSchemaToName(Guid* guidMetadataFormat, ushort* pwzSchema, uint cchName, ushort* wzName, uint* pcchActual);

	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICMatchMetadataContent(Guid* guidContainerFormat, Guid* pguidVendor, Com.IStream* pIStream, Guid* pguidMetadataFormat);

	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICSerializeMetadataContent(Guid* guidContainerFormat, IWICMetadataWriter* pIWriter, uint dwPersistOptions, Com.IStream* pIStream);

	[DllImport("WindowsCodecs", ExactSpelling = true)]
	public static extern HResult WICGetMetadataContentSize(Guid* guidContainerFormat, IWICMetadataWriter* pIWriter, ULargeInteger* pcbSize);
}
#endregion Functions
