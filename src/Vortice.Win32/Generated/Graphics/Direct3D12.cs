// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Diagnostics.CodeAnalysis;

#if !NET6_0_OR_GREATER
using MemoryMarshal = Win32.MemoryMarshal;
#endif

namespace Win32.Graphics.Direct3D12;

public static partial class Apis
{
	public const uint D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES = 4096;
	public const uint D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING = 5768;
	public const uint D3D12_16BIT_INDEX_STRIP_CUT_VALUE = 65535;
	public const uint D3D12_32BIT_INDEX_STRIP_CUT_VALUE = 4294967295;
	public const uint D3D12_8BIT_INDEX_STRIP_CUT_VALUE = 255;
	public const uint D3D12_APPEND_ALIGNED_ELEMENT = 4294967295;
	public const uint D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
	public const uint D3D12_CLIP_OR_CULL_DISTANCE_COUNT = 8;
	public const uint D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
	public const uint D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
	public const uint D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
	public const uint D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
	public const uint D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16;
	public const uint D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
	public const uint D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
	public const uint D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
	public const uint D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
	public const uint D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
	public const uint D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
	public const uint D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
	public const uint D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
	public const uint D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
	public const uint D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
	public const uint D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
	public const uint D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
	public const uint D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
	public const uint D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
	public const uint D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
	public const uint D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
	public const uint D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
	public const uint D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
	public const uint D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
	public const uint D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
	public const uint D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
	public const uint D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
	public const uint D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
	public const uint D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
	public const uint D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
	public const int D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10;
	public const int D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8;
	public const uint D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
	public const uint D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT = 256;
	public const uint D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256;
	public const uint D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64;
	public const uint D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240;
	public const uint D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68;
	public const uint D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224;
	public const uint D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72;
	public const uint D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208;
	public const uint D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76;
	public const uint D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192;
	public const uint D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84;
	public const uint D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176;
	public const uint D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92;
	public const uint D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160;
	public const uint D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100;
	public const uint D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144;
	public const uint D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112;
	public const uint D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128;
	public const uint D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128;
	public const uint D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112;
	public const uint D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144;
	public const uint D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96;
	public const uint D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168;
	public const uint D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80;
	public const uint D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204;
	public const uint D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64;
	public const uint D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256;
	public const uint D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48;
	public const uint D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340;
	public const uint D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32;
	public const uint D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512;
	public const uint D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16;
	public const uint D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768;
	public const uint D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1;
	public const uint D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256;
	public const uint D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768;
	public const uint D3D12_CS_4_X_THREAD_GROUP_MAX_X = 768;
	public const uint D3D12_CS_4_X_THREAD_GROUP_MAX_Y = 768;
	public const uint D3D12_CS_4_X_UAV_REGISTER_COUNT = 1;
	public const uint D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535;
	public const uint D3D12_CS_TGSM_REGISTER_COUNT = 8192;
	public const uint D3D12_CS_TGSM_REGISTER_READS_PER_INST = 1;
	public const uint D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1;
	public const uint D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1;
	public const uint D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS = 3;
	public const uint D3D12_CS_THREADGROUPID_REGISTER_COUNT = 1;
	public const uint D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1;
	public const uint D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1;
	public const uint D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3;
	public const uint D3D12_CS_THREADIDINGROUP_REGISTER_COUNT = 1;
	public const uint D3D12_CS_THREADID_REGISTER_COMPONENTS = 3;
	public const uint D3D12_CS_THREADID_REGISTER_COUNT = 1;
	public const uint D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024;
	public const uint D3D12_CS_THREAD_GROUP_MAX_X = 1024;
	public const uint D3D12_CS_THREAD_GROUP_MAX_Y = 1024;
	public const uint D3D12_CS_THREAD_GROUP_MAX_Z = 64;
	public const uint D3D12_CS_THREAD_GROUP_MIN_X = 1;
	public const uint D3D12_CS_THREAD_GROUP_MIN_Y = 1;
	public const uint D3D12_CS_THREAD_GROUP_MIN_Z = 1;
	public const uint D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384;
	public const float D3D12_DEFAULT_BLEND_FACTOR_ALPHA = 1f;
	public const float D3D12_DEFAULT_BLEND_FACTOR_BLUE = 1f;
	public const float D3D12_DEFAULT_BLEND_FACTOR_GREEN = 1f;
	public const float D3D12_DEFAULT_BLEND_FACTOR_RED = 1f;
	public const float D3D12_DEFAULT_BORDER_COLOR_COMPONENT = 0f;
	public const int D3D12_DEFAULT_DEPTH_BIAS = 0;
	public const float D3D12_DEFAULT_DEPTH_BIAS_CLAMP = 0f;
	public const uint D3D12_DEFAULT_MAX_ANISOTROPY = 16;
	public const float D3D12_DEFAULT_MIP_LOD_BIAS = 0f;
	public const uint D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 4194304;
	public const uint D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
	public const uint D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT = 65536;
	public const uint D3D12_DEFAULT_SAMPLE_MASK = 4294967295;
	public const uint D3D12_DEFAULT_SCISSOR_ENDX = 0;
	public const uint D3D12_DEFAULT_SCISSOR_ENDY = 0;
	public const uint D3D12_DEFAULT_SCISSOR_STARTX = 0;
	public const uint D3D12_DEFAULT_SCISSOR_STARTY = 0;
	public const float D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0f;
	public const uint D3D12_DEFAULT_STENCIL_READ_MASK = 255;
	public const uint D3D12_DEFAULT_STENCIL_REFERENCE = 0;
	public const uint D3D12_DEFAULT_STENCIL_WRITE_MASK = 255;
	public const uint D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
	public const uint D3D12_DEFAULT_VIEWPORT_HEIGHT = 0;
	public const float D3D12_DEFAULT_VIEWPORT_MAX_DEPTH = 0f;
	public const float D3D12_DEFAULT_VIEWPORT_MIN_DEPTH = 0f;
	public const uint D3D12_DEFAULT_VIEWPORT_TOPLEFTX = 0;
	public const uint D3D12_DEFAULT_VIEWPORT_TOPLEFTY = 0;
	public const uint D3D12_DEFAULT_VIEWPORT_WIDTH = 0;
	public const uint D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND = 4294967295;
	public const uint D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END = 4294967287;
	public const uint D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START = 4294967280;
	public const uint D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
	public const uint D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4;
	public const uint D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32;
	public const uint D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
	public const uint D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1;
	public const uint D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3;
	public const uint D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1;
	public const uint D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2;
	public const uint D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1;
	public const uint D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
	public const uint D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
	public const uint D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
	public const uint D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
	public const uint D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
	public const uint D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
	public const uint D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
	public const uint D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
	public const uint D3D12_DS_OUTPUT_REGISTER_COMPONENTS = 4;
	public const uint D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_DS_OUTPUT_REGISTER_COUNT = 32;
	public const double D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP = 0.6;
	public const float D3D12_FLOAT32_MAX = 3.4028235E+38f;
	public const float D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = 0.6f;
	public const float D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = 2.4f;
	public const float D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1f;
	public const float D3D12_FLOAT_TO_SRGB_OFFSET = 0.055f;
	public const float D3D12_FLOAT_TO_SRGB_SCALE_1 = 12.92f;
	public const float D3D12_FLOAT_TO_SRGB_SCALE_2 = 1.055f;
	public const float D3D12_FLOAT_TO_SRGB_THRESHOLD = 0.0031308f;
	public const float D3D12_FTOI_INSTRUCTION_MAX_INPUT = 2.1474836E+09f;
	public const float D3D12_FTOI_INSTRUCTION_MIN_INPUT = -2.1474836E+09f;
	public const float D3D12_FTOU_INSTRUCTION_MAX_INPUT = 4.2949673E+09f;
	public const float D3D12_FTOU_INSTRUCTION_MIN_INPUT = 0f;
	public const uint D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2;
	public const uint D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS = 1;
	public const uint D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1;
	public const uint D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1;
	public const uint D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
	public const uint D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
	public const uint D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
	public const uint D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
	public const uint D3D12_GS_INPUT_REGISTER_COMPONENTS = 4;
	public const uint D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_GS_INPUT_REGISTER_COUNT = 32;
	public const uint D3D12_GS_INPUT_REGISTER_READS_PER_INST = 2;
	public const uint D3D12_GS_INPUT_REGISTER_READ_PORTS = 1;
	public const uint D3D12_GS_INPUT_REGISTER_VERTICES = 32;
	public const uint D3D12_GS_MAX_INSTANCE_COUNT = 32;
	public const uint D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024;
	public const uint D3D12_GS_OUTPUT_ELEMENTS = 32;
	public const uint D3D12_GS_OUTPUT_REGISTER_COMPONENTS = 4;
	public const uint D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_GS_OUTPUT_REGISTER_COUNT = 32;
	public const uint D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32;
	public const uint D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32;
	public const uint D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4;
	public const uint D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
	public const uint D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1;
	public const uint D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295;
	public const uint D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1;
	public const uint D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1;
	public const uint D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
	public const uint D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1;
	public const uint D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1;
	public const uint D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1;
	public const uint D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
	public const uint D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1;
	public const uint D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
	public const uint D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
	public const uint D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
	public const uint D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
	public const uint D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295;
	public const float D3D12_HS_MAXTESSFACTOR_LOWER_BOUND = 1f;
	public const float D3D12_HS_MAXTESSFACTOR_UPPER_BOUND = 64f;
	public const uint D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
	public const uint D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1;
	public const uint D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1;
	public const uint D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2;
	public const uint D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1;
	public const uint D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
	public const uint D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
	public const uint D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
	public const uint D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
	public const uint D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = 128;
	public const uint D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
	public const uint D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
	public const uint D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
	public const uint D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
	public const uint D3D12_IA_INSTANCE_ID_BIT_COUNT = 32;
	public const uint D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
	public const uint D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32;
	public const uint D3D12_IA_PRIMITIVE_ID_BIT_COUNT = 32;
	public const uint D3D12_IA_VERTEX_ID_BIT_COUNT = 32;
	public const uint D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32;
	public const uint D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128;
	public const uint D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32;
	public const uint D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 4294967295;
	public const uint D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 4294967295;
	public const uint D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 4294967295;
	public const uint D3D12_KEEP_UNORDERED_ACCESS_VIEWS = 4294967295;
	public const float D3D12_LINEAR_GAMMA = 1f;
	public const uint D3D12_MAJOR_VERSION = 12;
	public const float D3D12_MAX_BORDER_COLOR_COMPONENT = 1f;
	public const float D3D12_MAX_DEPTH = 1f;
	public const uint D3D12_MAX_LIVE_STATIC_SAMPLERS = 2032;
	public const uint D3D12_MAX_MAXANISOTROPY = 16;
	public const uint D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
	public const float D3D12_MAX_POSITION_VALUE = 3.4028236E+34f;
	public const uint D3D12_MAX_ROOT_COST = 64;
	public const uint D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1 = 1000000;
	public const uint D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2 = 1000000;
	public const uint D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE = 2048;
	public const uint D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;
	public const uint D3D12_MAX_VIEW_INSTANCE_COUNT = 4;
	public const uint D3D12_MINOR_VERSION = 0;
	public const float D3D12_MIN_BORDER_COLOR_COMPONENT = 0f;
	public const float D3D12_MIN_DEPTH = 0f;
	public const uint D3D12_MIN_MAXANISOTROPY = 0;
	public const float D3D12_MIP_LOD_BIAS_MAX = 15.99f;
	public const float D3D12_MIP_LOD_BIAS_MIN = -16f;
	public const uint D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT = 8;
	public const uint D3D12_MIP_LOD_RANGE_BIT_COUNT = 8;
	public const float D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = 1.4f;
	public const uint D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
	public const uint D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END = 4294967295;
	public const uint D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START = 4294967288;
	public const uint D3D12_PACKED_TILE = 4294967295;
	public const uint D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
	public const uint D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16;
	public const uint D3D12_PS_CS_UAV_REGISTER_COMPONENTS = 1;
	public const uint D3D12_PS_CS_UAV_REGISTER_COUNT = 8;
	public const uint D3D12_PS_CS_UAV_REGISTER_READS_PER_INST = 1;
	public const uint D3D12_PS_CS_UAV_REGISTER_READ_PORTS = 1;
	public const uint D3D12_PS_FRONTFACING_DEFAULT_VALUE = 4294967295;
	public const uint D3D12_PS_FRONTFACING_FALSE_VALUE = 0;
	public const uint D3D12_PS_FRONTFACING_TRUE_VALUE = 4294967295;
	public const uint D3D12_PS_INPUT_REGISTER_COMPONENTS = 4;
	public const uint D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_PS_INPUT_REGISTER_COUNT = 32;
	public const uint D3D12_PS_INPUT_REGISTER_READS_PER_INST = 2;
	public const uint D3D12_PS_INPUT_REGISTER_READ_PORTS = 1;
	public const float D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0f;
	public const uint D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
	public const uint D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
	public const uint D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
	public const uint D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
	public const uint D3D12_PS_OUTPUT_REGISTER_COMPONENTS = 4;
	public const uint D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_PS_OUTPUT_REGISTER_COUNT = 8;
	public const float D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.5f;
	public const uint D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT = 16;
	public const uint D3D12_RAYTRACING_AABB_BYTE_ALIGNMENT = 8;
	public const uint D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT = 256;
	public const uint D3D12_RAYTRACING_INSTANCE_DESCS_BYTE_ALIGNMENT = 16;
	public const uint D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES = 32;
	public const uint D3D12_RAYTRACING_MAX_DECLARABLE_TRACE_RECURSION_DEPTH = 31;
	public const uint D3D12_RAYTRACING_MAX_GEOMETRIES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE = 16777216;
	public const uint D3D12_RAYTRACING_MAX_INSTANCES_PER_TOP_LEVEL_ACCELERATION_STRUCTURE = 16777216;
	public const uint D3D12_RAYTRACING_MAX_PRIMITIVES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE = 536870912;
	public const uint D3D12_RAYTRACING_MAX_RAY_GENERATION_SHADER_THREADS = 1073741824;
	public const uint D3D12_RAYTRACING_MAX_SHADER_RECORD_STRIDE = 4096;
	public const uint D3D12_RAYTRACING_SHADER_RECORD_BYTE_ALIGNMENT = 32;
	public const uint D3D12_RAYTRACING_SHADER_TABLE_BYTE_ALIGNMENT = 64;
	public const uint D3D12_RAYTRACING_TRANSFORM3X4_BYTE_ALIGNMENT = 16;
	public const uint D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096;
	public const uint D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
	public const uint D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
	public const uint D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096;
	public const uint D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
	public const uint D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
	public const uint D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384;
	public const uint D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
	public const uint D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
	public const uint D3D12_REQ_MAXANISOTROPY = 16;
	public const uint D3D12_REQ_MIP_LEVELS = 15;
	public const uint D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
	public const uint D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096;
	public const uint D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384;
	public const uint D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128;
	public const float D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = 0.25f;
	public const uint D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048;
	public const uint D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20;
	public const uint D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096;
	public const uint D3D12_REQ_SUBRESOURCES = 30720;
	public const uint D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048;
	public const uint D3D12_REQ_TEXTURE1D_U_DIMENSION = 16384;
	public const uint D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048;
	public const uint D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384;
	public const uint D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
	public const uint D3D12_REQ_TEXTURECUBE_DIMENSION = 16384;
	public const uint D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
	public const uint D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES = 4294967295;
	public const uint D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT = 2;
	public const uint D3D12_SDK_VERSION = 5;
	public const uint D3D12_SHADER_IDENTIFIER_SIZE_IN_BYTES = 32;
	public const uint D3D12_SHADER_MAJOR_VERSION = 5;
	public const uint D3D12_SHADER_MAX_INSTANCES = 65535;
	public const uint D3D12_SHADER_MAX_INTERFACES = 253;
	public const uint D3D12_SHADER_MAX_INTERFACE_CALL_SITES = 4096;
	public const uint D3D12_SHADER_MAX_TYPES = 65535;
	public const uint D3D12_SHADER_MINOR_VERSION = 1;
	public const uint D3D12_SHIFT_INSTRUCTION_PAD_VALUE = 0;
	public const uint D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
	public const uint D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
	public const uint D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 65536;
	public const uint D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT = 4096;
	public const uint D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
	public const uint D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512;
	public const uint D3D12_SO_BUFFER_SLOT_COUNT = 4;
	public const uint D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 4294967295;
	public const uint D3D12_SO_NO_RASTERIZED_STREAM = 4294967295;
	public const uint D3D12_SO_OUTPUT_COMPONENT_COUNT = 128;
	public const uint D3D12_SO_STREAM_COUNT = 4;
	public const uint D3D12_SPEC_DATE_DAY = 14;
	public const uint D3D12_SPEC_DATE_MONTH = 11;
	public const uint D3D12_SPEC_DATE_YEAR = 2014;
	public const double D3D12_SPEC_VERSION = 1.16;
	public const float D3D12_SRGB_GAMMA = 2.2f;
	public const float D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 = 12.92f;
	public const float D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 = 1.055f;
	public const float D3D12_SRGB_TO_FLOAT_EXPONENT = 2.4f;
	public const float D3D12_SRGB_TO_FLOAT_OFFSET = 0.055f;
	public const float D3D12_SRGB_TO_FLOAT_THRESHOLD = 0.04045f;
	public const float D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = 0.5f;
	public const uint D3D12_STANDARD_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
	public const uint D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
	public const uint D3D12_STANDARD_PIXEL_COMPONENT_COUNT = 128;
	public const uint D3D12_STANDARD_PIXEL_ELEMENT_COUNT = 32;
	public const uint D3D12_STANDARD_VECTOR_SIZE = 4;
	public const uint D3D12_STANDARD_VERTEX_ELEMENT_COUNT = 32;
	public const uint D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
	public const uint D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
	public const uint D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8;
	public const uint D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END = 4294967295;
	public const uint D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START = 4294967280;
	public const uint D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64;
	public const uint D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64;
	public const uint D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63;
	public const uint D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64;
	public const uint D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2;
	public const uint D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1;
	public const uint D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1;
	public const uint D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16;
	public const uint D3D12_TEXTURE_DATA_PITCH_ALIGNMENT = 256;
	public const uint D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT = 512;
	public const uint D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 65536;
	public const uint D3D12_TRACKED_WORKLOAD_MAX_INSTANCES = 32;
	public const uint D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT = 4096;
	public const uint D3D12_UAV_SLOT_COUNT = 64;
	public const uint D3D12_UNBOUND_MEMORY_ACCESS_RESULT = 0;
	public const uint D3D12_VIDEO_DECODE_MAX_ARGUMENTS = 10;
	public const uint D3D12_VIDEO_DECODE_MAX_HISTOGRAM_COMPONENTS = 4;
	public const uint D3D12_VIDEO_DECODE_MIN_BITSTREAM_OFFSET_ALIGNMENT = 256;
	public const uint D3D12_VIDEO_DECODE_MIN_HISTOGRAM_OFFSET_ALIGNMENT = 256;
	public const uint D3D12_VIDEO_DECODE_STATUS_MACROBLOCKS_AFFECTED_UNKNOWN = 4294967295;
	public const uint D3D12_VIDEO_PROCESS_MAX_FILTERS = 32;
	public const uint D3D12_VIDEO_PROCESS_STEREO_VIEWS = 2;
	public const uint D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
	public const uint D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
	public const uint D3D12_VIEWPORT_BOUNDS_MAX = 32767;
	public const int D3D12_VIEWPORT_BOUNDS_MIN = -32768;
	public const uint D3D12_VS_INPUT_REGISTER_COMPONENTS = 4;
	public const uint D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_VS_INPUT_REGISTER_COUNT = 32;
	public const uint D3D12_VS_INPUT_REGISTER_READS_PER_INST = 2;
	public const uint D3D12_VS_INPUT_REGISTER_READ_PORTS = 1;
	public const uint D3D12_VS_OUTPUT_REGISTER_COMPONENTS = 4;
	public const uint D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
	public const uint D3D12_VS_OUTPUT_REGISTER_COUNT = 32;
	public const uint D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
	public const uint D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
	public const uint D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;
	public const uint D3D12_SHADER_COMPONENT_MAPPING_MASK = 7;
	public const uint D3D12_SHADER_COMPONENT_MAPPING_SHIFT = 3;
	public const uint D3D12_FILTER_REDUCTION_TYPE_MASK = 3;
	public const uint D3D12_FILTER_REDUCTION_TYPE_SHIFT = 7;
	public const uint D3D12_FILTER_TYPE_MASK = 3;
	public const uint D3D12_MIN_FILTER_SHIFT = 4;
	public const uint D3D12_MAG_FILTER_SHIFT = 2;
	public const uint D3D12_MIP_FILTER_SHIFT = 0;
	public const uint D3D12_ANISOTROPIC_FILTERING_BIT = 64;
	public const uint LUID_DEFINED = 1;
	public static readonly Guid D3D12_PROTECTED_RESOURCES_SESSION_HARDWARE_PROTECTED = new Guid(0x62b0084e, 0xc70e, 0x4daa, 0xa1, 0x09, 0x30, 0xff, 0x8d, 0x5a, 0x04, 0x82);
	public static readonly Guid CLSID_D3D12Debug = new Guid(0xf2352aeb, 0xdd84, 0x49fe, 0xb9, 0x7b, 0xa9, 0xdc, 0xfd, 0xcc, 0x1b, 0x4f);
	public static readonly Guid CLSID_D3D12Tools = new Guid(0xe38216b1, 0x3c8c, 0x4833, 0xaa, 0x09, 0x0a, 0x06, 0xb6, 0x5d, 0x96, 0xc8);
	public static readonly Guid CLSID_D3D12DeviceRemovedExtendedData = new Guid(0x4a75bbc4, 0x9ff4, 0x4ad8, 0x9f, 0x18, 0xab, 0xae, 0x84, 0xdc, 0x5f, 0xf2);
	public static readonly Guid CLSID_D3D12SDKConfiguration = new Guid(0x7cda6aca, 0xa03e, 0x49c8, 0x94, 0x58, 0x03, 0x34, 0xd2, 0x0e, 0x07, 0xce);
	public const uint D3D12_SHADING_RATE_X_AXIS_SHIFT = 2;
	public const uint D3D12_SHADING_RATE_VALID_MASK = 3;
	public static readonly Guid WKPDID_D3DAutoDebugObjectNameW = new Guid(0xd4902e36, 0x757a, 0x4942, 0x95, 0x94, 0xb6, 0x76, 0x9a, 0xfa, 0x43, 0xcd);
	public static readonly Guid DXGI_DEBUG_D3D12 = new Guid(0xcf59a98c, 0xa950, 0x4326, 0x91, 0xef, 0x9b, 0xba, 0xa1, 0x7b, 0xfd, 0x95);
	public const uint D3D12_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024;
	public const uint D3D_SHADER_REQUIRES_STENCIL_REF = 512;
	public const uint D3D_SHADER_REQUIRES_INNER_COVERAGE = 1024;
	public const uint D3D_SHADER_REQUIRES_TYPED_UAV_LOAD_ADDITIONAL_FORMATS = 2048;
	public const uint D3D_SHADER_REQUIRES_ROVS = 4096;
	public const uint D3D_SHADER_REQUIRES_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER = 8192;
	public const uint D3D_SHADER_REQUIRES_WAVE_OPS = 16384;
	public const uint D3D_SHADER_REQUIRES_INT64_OPS = 32768;
	public const uint D3D_SHADER_REQUIRES_VIEW_ID = 65536;
	public const uint D3D_SHADER_REQUIRES_BARYCENTRICS = 131072;
	public const uint D3D_SHADER_REQUIRES_NATIVE_16BIT_OPS = 262144;
	public const uint D3D_SHADER_REQUIRES_SHADING_RATE = 524288;
	public const uint D3D_SHADER_REQUIRES_RAYTRACING_TIER_1_1 = 1048576;
	public const uint D3D_SHADER_REQUIRES_SAMPLER_FEEDBACK = 2097152;
	public const uint D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_TYPED_RESOURCE = 4194304;
	public const uint D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_GROUP_SHARED = 8388608;
	public const uint D3D_SHADER_REQUIRES_DERIVATIVES_IN_MESH_AND_AMPLIFICATION_SHADERS = 16777216;
	public const uint D3D_SHADER_REQUIRES_RESOURCE_DESCRIPTOR_HEAP_INDEXING = 33554432;
	public const uint D3D_SHADER_REQUIRES_SAMPLER_DESCRIPTOR_HEAP_INDEXING = 67108864;
	public const uint D3D_SHADER_REQUIRES_WAVE_MMA = 134217728;
	public const uint D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_DESCRIPTOR_HEAP_RESOURCE = 268435456;
	public static readonly Guid D3D12ExperimentalShaderModels = new Guid(0x76f5573e, 0xf13a, 0x40f5, 0xb2, 0x97, 0x81, 0xce, 0x9e, 0x18, 0x93, 0x3f);
	public static readonly Guid D3D12TiledResourceTier4 = new Guid(0xc9c4725f, 0xa81a, 0x4f56, 0x8c, 0x5b, 0xc5, 0x10, 0x39, 0xd6, 0x94, 0xfb);
	public static readonly Guid D3D12MetaCommand = new Guid(0xc734c97e, 0x8077, 0x48c8, 0x9f, 0xdc, 0xd9, 0xd1, 0xdd, 0x31, 0xdd, 0x77);
}

#region Enums
/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_TYPE"]/*' />
/// <unmanaged>D3D12_COMMAND_LIST_TYPE</unmanaged>
public enum CommandListType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_DIRECT"]/*' />
	/// <unmanaged>D3D12_COMMAND_LIST_TYPE_DIRECT</unmanaged>
	Direct = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_BUNDLE"]/*' />
	/// <unmanaged>D3D12_COMMAND_LIST_TYPE_BUNDLE</unmanaged>
	Bundle = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_COMPUTE"]/*' />
	/// <unmanaged>D3D12_COMMAND_LIST_TYPE_COMPUTE</unmanaged>
	Compute = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_COPY"]/*' />
	/// <unmanaged>D3D12_COMMAND_LIST_TYPE_COPY</unmanaged>
	Copy = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE"]/*' />
	/// <unmanaged>D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE</unmanaged>
	VideoDecode = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS"]/*' />
	/// <unmanaged>D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS</unmanaged>
	VideoProcess = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE"]/*' />
	/// <unmanaged>D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE</unmanaged>
	VideoEncode = 6,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_QUEUE_FLAGS"]/*' />
/// <unmanaged>D3D12_COMMAND_QUEUE_FLAGS</unmanaged>
[Flags]
public enum CommandQueueFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_QUEUE_FLAGS::D3D12_COMMAND_QUEUE_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_COMMAND_QUEUE_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_QUEUE_FLAGS::D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT"]/*' />
	/// <unmanaged>D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT</unmanaged>
	DisableGpuTimeout = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_QUEUE_PRIORITY"]/*' />
/// <unmanaged>D3D12_COMMAND_QUEUE_PRIORITY</unmanaged>
public enum CommandQueuePriority : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_QUEUE_PRIORITY::D3D12_COMMAND_QUEUE_PRIORITY_NORMAL"]/*' />
	/// <unmanaged>D3D12_COMMAND_QUEUE_PRIORITY_NORMAL</unmanaged>
	Normal = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_QUEUE_PRIORITY::D3D12_COMMAND_QUEUE_PRIORITY_HIGH"]/*' />
	/// <unmanaged>D3D12_COMMAND_QUEUE_PRIORITY_HIGH</unmanaged>
	High = 100,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_QUEUE_PRIORITY::D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME"]/*' />
	/// <unmanaged>D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME</unmanaged>
	GlobalRealtime = 10000,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PRIMITIVE_TOPOLOGY_TYPE"]/*' />
/// <unmanaged>D3D12_PRIMITIVE_TOPOLOGY_TYPE</unmanaged>
public enum PrimitiveTopologyType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PRIMITIVE_TOPOLOGY_TYPE::D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED"]/*' />
	/// <unmanaged>D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED</unmanaged>
	Undefined = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PRIMITIVE_TOPOLOGY_TYPE::D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT"]/*' />
	/// <unmanaged>D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT</unmanaged>
	Point = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PRIMITIVE_TOPOLOGY_TYPE::D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE"]/*' />
	/// <unmanaged>D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE</unmanaged>
	Line = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PRIMITIVE_TOPOLOGY_TYPE::D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE"]/*' />
	/// <unmanaged>D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE</unmanaged>
	Triangle = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PRIMITIVE_TOPOLOGY_TYPE::D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH"]/*' />
	/// <unmanaged>D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH</unmanaged>
	Patch = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INPUT_CLASSIFICATION"]/*' />
/// <unmanaged>D3D12_INPUT_CLASSIFICATION</unmanaged>
public enum InputClassification : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INPUT_CLASSIFICATION::D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA"]/*' />
	/// <unmanaged>D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA</unmanaged>
	PerVertexData = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INPUT_CLASSIFICATION::D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA"]/*' />
	/// <unmanaged>D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA</unmanaged>
	PerInstanceData = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILL_MODE"]/*' />
/// <unmanaged>D3D12_FILL_MODE</unmanaged>
public enum FillMode : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILL_MODE::D3D12_FILL_MODE_WIREFRAME"]/*' />
	/// <unmanaged>D3D12_FILL_MODE_WIREFRAME</unmanaged>
	Wireframe = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILL_MODE::D3D12_FILL_MODE_SOLID"]/*' />
	/// <unmanaged>D3D12_FILL_MODE_SOLID</unmanaged>
	Solid = 3,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CULL_MODE"]/*' />
/// <unmanaged>D3D12_CULL_MODE</unmanaged>
public enum CullMode : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CULL_MODE::D3D12_CULL_MODE_NONE"]/*' />
	/// <unmanaged>D3D12_CULL_MODE_NONE</unmanaged>
	None = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CULL_MODE::D3D12_CULL_MODE_FRONT"]/*' />
	/// <unmanaged>D3D12_CULL_MODE_FRONT</unmanaged>
	Front = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CULL_MODE::D3D12_CULL_MODE_BACK"]/*' />
	/// <unmanaged>D3D12_CULL_MODE_BACK</unmanaged>
	Back = 3,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMPARISON_FUNC"]/*' />
/// <unmanaged>D3D12_COMPARISON_FUNC</unmanaged>
public enum ComparisonFunc : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMPARISON_FUNC::D3D12_COMPARISON_FUNC_NEVER"]/*' />
	/// <unmanaged>D3D12_COMPARISON_FUNC_NEVER</unmanaged>
	Never = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMPARISON_FUNC::D3D12_COMPARISON_FUNC_LESS"]/*' />
	/// <unmanaged>D3D12_COMPARISON_FUNC_LESS</unmanaged>
	Less = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMPARISON_FUNC::D3D12_COMPARISON_FUNC_EQUAL"]/*' />
	/// <unmanaged>D3D12_COMPARISON_FUNC_EQUAL</unmanaged>
	Equal = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMPARISON_FUNC::D3D12_COMPARISON_FUNC_LESS_EQUAL"]/*' />
	/// <unmanaged>D3D12_COMPARISON_FUNC_LESS_EQUAL</unmanaged>
	LessEqual = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMPARISON_FUNC::D3D12_COMPARISON_FUNC_GREATER"]/*' />
	/// <unmanaged>D3D12_COMPARISON_FUNC_GREATER</unmanaged>
	Greater = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMPARISON_FUNC::D3D12_COMPARISON_FUNC_NOT_EQUAL"]/*' />
	/// <unmanaged>D3D12_COMPARISON_FUNC_NOT_EQUAL</unmanaged>
	NotEqual = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMPARISON_FUNC::D3D12_COMPARISON_FUNC_GREATER_EQUAL"]/*' />
	/// <unmanaged>D3D12_COMPARISON_FUNC_GREATER_EQUAL</unmanaged>
	GreaterEqual = 7,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMPARISON_FUNC::D3D12_COMPARISON_FUNC_ALWAYS"]/*' />
	/// <unmanaged>D3D12_COMPARISON_FUNC_ALWAYS</unmanaged>
	Always = 8,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_WRITE_MASK"]/*' />
/// <unmanaged>D3D12_DEPTH_WRITE_MASK</unmanaged>
public enum DepthWriteMask : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_WRITE_MASK::D3D12_DEPTH_WRITE_MASK_ZERO"]/*' />
	/// <unmanaged>D3D12_DEPTH_WRITE_MASK_ZERO</unmanaged>
	Zero = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_WRITE_MASK::D3D12_DEPTH_WRITE_MASK_ALL"]/*' />
	/// <unmanaged>D3D12_DEPTH_WRITE_MASK_ALL</unmanaged>
	All = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STENCIL_OP"]/*' />
/// <unmanaged>D3D12_STENCIL_OP</unmanaged>
public enum StencilOp : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STENCIL_OP::D3D12_STENCIL_OP_KEEP"]/*' />
	/// <unmanaged>D3D12_STENCIL_OP_KEEP</unmanaged>
	Keep = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STENCIL_OP::D3D12_STENCIL_OP_ZERO"]/*' />
	/// <unmanaged>D3D12_STENCIL_OP_ZERO</unmanaged>
	Zero = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STENCIL_OP::D3D12_STENCIL_OP_REPLACE"]/*' />
	/// <unmanaged>D3D12_STENCIL_OP_REPLACE</unmanaged>
	Replace = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STENCIL_OP::D3D12_STENCIL_OP_INCR_SAT"]/*' />
	/// <unmanaged>D3D12_STENCIL_OP_INCR_SAT</unmanaged>
	IncrSat = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STENCIL_OP::D3D12_STENCIL_OP_DECR_SAT"]/*' />
	/// <unmanaged>D3D12_STENCIL_OP_DECR_SAT</unmanaged>
	DecrSat = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STENCIL_OP::D3D12_STENCIL_OP_INVERT"]/*' />
	/// <unmanaged>D3D12_STENCIL_OP_INVERT</unmanaged>
	Invert = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STENCIL_OP::D3D12_STENCIL_OP_INCR"]/*' />
	/// <unmanaged>D3D12_STENCIL_OP_INCR</unmanaged>
	Incr = 7,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STENCIL_OP::D3D12_STENCIL_OP_DECR"]/*' />
	/// <unmanaged>D3D12_STENCIL_OP_DECR</unmanaged>
	Decr = 8,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND"]/*' />
/// <unmanaged>D3D12_BLEND</unmanaged>
public enum Blend : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_ZERO"]/*' />
	/// <unmanaged>D3D12_BLEND_ZERO</unmanaged>
	Zero = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_ONE"]/*' />
	/// <unmanaged>D3D12_BLEND_ONE</unmanaged>
	One = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_SRC_COLOR"]/*' />
	/// <unmanaged>D3D12_BLEND_SRC_COLOR</unmanaged>
	SrcColor = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_INV_SRC_COLOR"]/*' />
	/// <unmanaged>D3D12_BLEND_INV_SRC_COLOR</unmanaged>
	InvSrcColor = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_SRC_ALPHA"]/*' />
	/// <unmanaged>D3D12_BLEND_SRC_ALPHA</unmanaged>
	SrcAlpha = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_INV_SRC_ALPHA"]/*' />
	/// <unmanaged>D3D12_BLEND_INV_SRC_ALPHA</unmanaged>
	InvSrcAlpha = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_DEST_ALPHA"]/*' />
	/// <unmanaged>D3D12_BLEND_DEST_ALPHA</unmanaged>
	DestAlpha = 7,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_INV_DEST_ALPHA"]/*' />
	/// <unmanaged>D3D12_BLEND_INV_DEST_ALPHA</unmanaged>
	InvDestAlpha = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_DEST_COLOR"]/*' />
	/// <unmanaged>D3D12_BLEND_DEST_COLOR</unmanaged>
	DestColor = 9,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_INV_DEST_COLOR"]/*' />
	/// <unmanaged>D3D12_BLEND_INV_DEST_COLOR</unmanaged>
	InvDestColor = 10,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_SRC_ALPHA_SAT"]/*' />
	/// <unmanaged>D3D12_BLEND_SRC_ALPHA_SAT</unmanaged>
	SrcAlphaSat = 11,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_BLEND_FACTOR"]/*' />
	/// <unmanaged>D3D12_BLEND_BLEND_FACTOR</unmanaged>
	BlendFactor = 14,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_INV_BLEND_FACTOR"]/*' />
	/// <unmanaged>D3D12_BLEND_INV_BLEND_FACTOR</unmanaged>
	InvBlendFactor = 15,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_SRC1_COLOR"]/*' />
	/// <unmanaged>D3D12_BLEND_SRC1_COLOR</unmanaged>
	Src1Color = 16,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_INV_SRC1_COLOR"]/*' />
	/// <unmanaged>D3D12_BLEND_INV_SRC1_COLOR</unmanaged>
	InvSrc1Color = 17,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_SRC1_ALPHA"]/*' />
	/// <unmanaged>D3D12_BLEND_SRC1_ALPHA</unmanaged>
	Src1Alpha = 18,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND::D3D12_BLEND_INV_SRC1_ALPHA"]/*' />
	/// <unmanaged>D3D12_BLEND_INV_SRC1_ALPHA</unmanaged>
	InvSrc1Alpha = 19,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND_OP"]/*' />
/// <unmanaged>D3D12_BLEND_OP</unmanaged>
public enum BlendOp : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND_OP::D3D12_BLEND_OP_ADD"]/*' />
	/// <unmanaged>D3D12_BLEND_OP_ADD</unmanaged>
	Add = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND_OP::D3D12_BLEND_OP_SUBTRACT"]/*' />
	/// <unmanaged>D3D12_BLEND_OP_SUBTRACT</unmanaged>
	Subtract = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND_OP::D3D12_BLEND_OP_REV_SUBTRACT"]/*' />
	/// <unmanaged>D3D12_BLEND_OP_REV_SUBTRACT</unmanaged>
	RevSubtract = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND_OP::D3D12_BLEND_OP_MIN"]/*' />
	/// <unmanaged>D3D12_BLEND_OP_MIN</unmanaged>
	Min = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND_OP::D3D12_BLEND_OP_MAX"]/*' />
	/// <unmanaged>D3D12_BLEND_OP_MAX</unmanaged>
	Max = 5,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COLOR_WRITE_ENABLE"]/*' />
/// <unmanaged>D3D12_COLOR_WRITE_ENABLE</unmanaged>
[Flags]
public enum ColorWriteEnable : byte
{
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COLOR_WRITE_ENABLE::D3D12_COLOR_WRITE_ENABLE_RED"]/*' />
	/// <unmanaged>D3D12_COLOR_WRITE_ENABLE_RED</unmanaged>
	Red = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COLOR_WRITE_ENABLE::D3D12_COLOR_WRITE_ENABLE_GREEN"]/*' />
	/// <unmanaged>D3D12_COLOR_WRITE_ENABLE_GREEN</unmanaged>
	Green = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COLOR_WRITE_ENABLE::D3D12_COLOR_WRITE_ENABLE_BLUE"]/*' />
	/// <unmanaged>D3D12_COLOR_WRITE_ENABLE_BLUE</unmanaged>
	Blue = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COLOR_WRITE_ENABLE::D3D12_COLOR_WRITE_ENABLE_ALPHA"]/*' />
	/// <unmanaged>D3D12_COLOR_WRITE_ENABLE_ALPHA</unmanaged>
	Alpha = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COLOR_WRITE_ENABLE::D3D12_COLOR_WRITE_ENABLE_ALL"]/*' />
	/// <unmanaged>D3D12_COLOR_WRITE_ENABLE_ALL</unmanaged>
	All = 15,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP"]/*' />
/// <unmanaged>D3D12_LOGIC_OP</unmanaged>
public enum LogicOp : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP::D3D12_LOGIC_OP_CLEAR"]/*' />
	/// <unmanaged>D3D12_LOGIC_OP_CLEAR</unmanaged>
	Clear = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP::D3D12_LOGIC_OP_SET"]/*' />
	/// <unmanaged>D3D12_LOGIC_OP_SET</unmanaged>
	Set = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP::D3D12_LOGIC_OP_COPY"]/*' />
	/// <unmanaged>D3D12_LOGIC_OP_COPY</unmanaged>
	Copy = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP::D3D12_LOGIC_OP_COPY_INVERTED"]/*' />
	/// <unmanaged>D3D12_LOGIC_OP_COPY_INVERTED</unmanaged>
	CopyInverted = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP::D3D12_LOGIC_OP_NOOP"]/*' />
	/// <unmanaged>D3D12_LOGIC_OP_NOOP</unmanaged>
	Noop = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP::D3D12_LOGIC_OP_INVERT"]/*' />
	/// <unmanaged>D3D12_LOGIC_OP_INVERT</unmanaged>
	Invert = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP::D3D12_LOGIC_OP_AND"]/*' />
	/// <unmanaged>D3D12_LOGIC_OP_AND</unmanaged>
	And = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP::D3D12_LOGIC_OP_NAND"]/*' />
	/// <unmanaged>D3D12_LOGIC_OP_NAND</unmanaged>
	Nand = 7,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP::D3D12_LOGIC_OP_OR"]/*' />
	/// <unmanaged>D3D12_LOGIC_OP_OR</unmanaged>
	Or = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP::D3D12_LOGIC_OP_NOR"]/*' />
	/// <unmanaged>D3D12_LOGIC_OP_NOR</unmanaged>
	Nor = 9,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP::D3D12_LOGIC_OP_XOR"]/*' />
	/// <unmanaged>D3D12_LOGIC_OP_XOR</unmanaged>
	Xor = 10,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP::D3D12_LOGIC_OP_EQUIV"]/*' />
	/// <unmanaged>D3D12_LOGIC_OP_EQUIV</unmanaged>
	Equiv = 11,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP::D3D12_LOGIC_OP_AND_REVERSE"]/*' />
	/// <unmanaged>D3D12_LOGIC_OP_AND_REVERSE</unmanaged>
	AndReverse = 12,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP::D3D12_LOGIC_OP_AND_INVERTED"]/*' />
	/// <unmanaged>D3D12_LOGIC_OP_AND_INVERTED</unmanaged>
	AndInverted = 13,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP::D3D12_LOGIC_OP_OR_REVERSE"]/*' />
	/// <unmanaged>D3D12_LOGIC_OP_OR_REVERSE</unmanaged>
	OrReverse = 14,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOGIC_OP::D3D12_LOGIC_OP_OR_INVERTED"]/*' />
	/// <unmanaged>D3D12_LOGIC_OP_OR_INVERTED</unmanaged>
	OrInverted = 15,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CONSERVATIVE_RASTERIZATION_MODE"]/*' />
/// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_MODE</unmanaged>
public enum ConservativeRasterizationMode : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CONSERVATIVE_RASTERIZATION_MODE::D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF"]/*' />
	/// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF</unmanaged>
	Off = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CONSERVATIVE_RASTERIZATION_MODE::D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON"]/*' />
	/// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON</unmanaged>
	On = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDEX_BUFFER_STRIP_CUT_VALUE"]/*' />
/// <unmanaged>D3D12_INDEX_BUFFER_STRIP_CUT_VALUE</unmanaged>
public enum IndexBufferStripCutValue : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDEX_BUFFER_STRIP_CUT_VALUE::D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED"]/*' />
	/// <unmanaged>D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED</unmanaged>
	Disabled = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDEX_BUFFER_STRIP_CUT_VALUE::D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF"]/*' />
	/// <unmanaged>D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF</unmanaged>
	_0xffff = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDEX_BUFFER_STRIP_CUT_VALUE::D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF"]/*' />
	/// <unmanaged>D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF</unmanaged>
	_0xffffffff = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_FLAGS"]/*' />
/// <unmanaged>D3D12_PIPELINE_STATE_FLAGS</unmanaged>
[Flags]
public enum PipelineStateFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_FLAGS::D3D12_PIPELINE_STATE_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_FLAGS::D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG</unmanaged>
	ToolDebug = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE"]/*' />
/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE</unmanaged>
public enum PipelineStateSubobjectType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE</unmanaged>
	RootSignature = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS</unmanaged>
	Vs = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS</unmanaged>
	Ps = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS</unmanaged>
	Ds = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS</unmanaged>
	Hs = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS</unmanaged>
	Gs = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS</unmanaged>
	Cs = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT</unmanaged>
	StreamOutput = 7,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND</unmanaged>
	Blend = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK</unmanaged>
	SampleMask = 9,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER</unmanaged>
	Rasterizer = 10,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL</unmanaged>
	DepthStencil = 11,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT</unmanaged>
	InputLayout = 12,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE</unmanaged>
	IbStripCutValue = 13,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY</unmanaged>
	PrimitiveTopology = 14,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS</unmanaged>
	RenderTargetFormats = 15,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT</unmanaged>
	DepthStencilFormat = 16,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC</unmanaged>
	SampleDesc = 17,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK</unmanaged>
	NodeMask = 18,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO</unmanaged>
	CachedPso = 19,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS</unmanaged>
	Flags = 20,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1</unmanaged>
	DepthStencil1 = 21,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING</unmanaged>
	ViewInstancing = 22,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS</unmanaged>
	As = 24,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS</unmanaged>
	Ms = 25,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID"]/*' />
	/// <unmanaged>D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID</unmanaged>
	MaxValid = 26,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE"]/*' />
/// <unmanaged>D3D12_FEATURE</unmanaged>
public enum Feature : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS"]/*' />
	/// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS</unmanaged>
	Options = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_ARCHITECTURE"]/*' />
	/// <unmanaged>D3D12_FEATURE_ARCHITECTURE</unmanaged>
	Architecture = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_FEATURE_LEVELS"]/*' />
	/// <unmanaged>D3D12_FEATURE_FEATURE_LEVELS</unmanaged>
	FeatureLevels = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_FORMAT_SUPPORT"]/*' />
	/// <unmanaged>D3D12_FEATURE_FORMAT_SUPPORT</unmanaged>
	FormatSupport = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS"]/*' />
	/// <unmanaged>D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS</unmanaged>
	MultisampleQualityLevels = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_FORMAT_INFO"]/*' />
	/// <unmanaged>D3D12_FEATURE_FORMAT_INFO</unmanaged>
	FormatInfo = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT"]/*' />
	/// <unmanaged>D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT</unmanaged>
	GpuVirtualAddressSupport = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_SHADER_MODEL"]/*' />
	/// <unmanaged>D3D12_FEATURE_SHADER_MODEL</unmanaged>
	ShaderModel = 7,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS1"]/*' />
	/// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS1</unmanaged>
	Options1 = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT"]/*' />
	/// <unmanaged>D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT</unmanaged>
	ProtectedResourceSessionSupport = 10,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_ROOT_SIGNATURE"]/*' />
	/// <unmanaged>D3D12_FEATURE_ROOT_SIGNATURE</unmanaged>
	RootSignature = 12,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_ARCHITECTURE1"]/*' />
	/// <unmanaged>D3D12_FEATURE_ARCHITECTURE1</unmanaged>
	Architecture1 = 16,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS2"]/*' />
	/// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS2</unmanaged>
	Options2 = 18,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_SHADER_CACHE"]/*' />
	/// <unmanaged>D3D12_FEATURE_SHADER_CACHE</unmanaged>
	ShaderCache = 19,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_COMMAND_QUEUE_PRIORITY"]/*' />
	/// <unmanaged>D3D12_FEATURE_COMMAND_QUEUE_PRIORITY</unmanaged>
	CommandQueuePriority = 20,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS3"]/*' />
	/// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS3</unmanaged>
	Options3 = 21,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_EXISTING_HEAPS"]/*' />
	/// <unmanaged>D3D12_FEATURE_EXISTING_HEAPS</unmanaged>
	ExistingHeaps = 22,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS4"]/*' />
	/// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS4</unmanaged>
	Options4 = 23,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_SERIALIZATION"]/*' />
	/// <unmanaged>D3D12_FEATURE_SERIALIZATION</unmanaged>
	Serialization = 24,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_CROSS_NODE"]/*' />
	/// <unmanaged>D3D12_FEATURE_CROSS_NODE</unmanaged>
	CrossNode = 25,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS5"]/*' />
	/// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS5</unmanaged>
	Options5 = 27,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_DISPLAYABLE"]/*' />
	/// <unmanaged>D3D12_FEATURE_DISPLAYABLE</unmanaged>
	Displayable = 28,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS6"]/*' />
	/// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS6</unmanaged>
	Options6 = 30,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_QUERY_META_COMMAND"]/*' />
	/// <unmanaged>D3D12_FEATURE_QUERY_META_COMMAND</unmanaged>
	QueryMetaCommand = 31,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS7"]/*' />
	/// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS7</unmanaged>
	Options7 = 32,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPE_COUNT"]/*' />
	/// <unmanaged>D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPE_COUNT</unmanaged>
	ProtectedResourceSessionTypeCount = 33,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPES"]/*' />
	/// <unmanaged>D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPES</unmanaged>
	ProtectedResourceSessionTypes = 34,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS8"]/*' />
	/// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS8</unmanaged>
	Options8 = 36,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS9"]/*' />
	/// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS9</unmanaged>
	Options9 = 37,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS10"]/*' />
	/// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS10</unmanaged>
	Options10 = 39,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS11"]/*' />
	/// <unmanaged>D3D12_FEATURE_D3D12_OPTIONS11</unmanaged>
	Options11 = 40,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_MIN_PRECISION_SUPPORT"]/*' />
/// <unmanaged>D3D12_SHADER_MIN_PRECISION_SUPPORT</unmanaged>
[Flags]
public enum ShaderMinPrecisionSupport : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_MIN_PRECISION_SUPPORT::D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE"]/*' />
	/// <unmanaged>D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_MIN_PRECISION_SUPPORT::D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT"]/*' />
	/// <unmanaged>D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT</unmanaged>
	_10Bit = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_MIN_PRECISION_SUPPORT::D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT"]/*' />
	/// <unmanaged>D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT</unmanaged>
	_16Bit = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILED_RESOURCES_TIER"]/*' />
/// <unmanaged>D3D12_TILED_RESOURCES_TIER</unmanaged>
public enum TiledResourcesTier : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILED_RESOURCES_TIER::D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED</unmanaged>
	NotSupported = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILED_RESOURCES_TIER::D3D12_TILED_RESOURCES_TIER_1"]/*' />
	/// <unmanaged>D3D12_TILED_RESOURCES_TIER_1</unmanaged>
	_1 = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILED_RESOURCES_TIER::D3D12_TILED_RESOURCES_TIER_2"]/*' />
	/// <unmanaged>D3D12_TILED_RESOURCES_TIER_2</unmanaged>
	_2 = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILED_RESOURCES_TIER::D3D12_TILED_RESOURCES_TIER_3"]/*' />
	/// <unmanaged>D3D12_TILED_RESOURCES_TIER_3</unmanaged>
	_3 = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILED_RESOURCES_TIER::D3D12_TILED_RESOURCES_TIER_4"]/*' />
	/// <unmanaged>D3D12_TILED_RESOURCES_TIER_4</unmanaged>
	_4 = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_BINDING_TIER"]/*' />
/// <unmanaged>D3D12_RESOURCE_BINDING_TIER</unmanaged>
public enum ResourceBindingTier : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_BINDING_TIER::D3D12_RESOURCE_BINDING_TIER_1"]/*' />
	/// <unmanaged>D3D12_RESOURCE_BINDING_TIER_1</unmanaged>
	_1 = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_BINDING_TIER::D3D12_RESOURCE_BINDING_TIER_2"]/*' />
	/// <unmanaged>D3D12_RESOURCE_BINDING_TIER_2</unmanaged>
	_2 = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_BINDING_TIER::D3D12_RESOURCE_BINDING_TIER_3"]/*' />
	/// <unmanaged>D3D12_RESOURCE_BINDING_TIER_3</unmanaged>
	_3 = 3,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CONSERVATIVE_RASTERIZATION_TIER"]/*' />
/// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_TIER</unmanaged>
public enum ConservativeRasterizationTier : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CONSERVATIVE_RASTERIZATION_TIER::D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED</unmanaged>
	NotSupported = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CONSERVATIVE_RASTERIZATION_TIER::D3D12_CONSERVATIVE_RASTERIZATION_TIER_1"]/*' />
	/// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_TIER_1</unmanaged>
	_1 = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CONSERVATIVE_RASTERIZATION_TIER::D3D12_CONSERVATIVE_RASTERIZATION_TIER_2"]/*' />
	/// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_TIER_2</unmanaged>
	_2 = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CONSERVATIVE_RASTERIZATION_TIER::D3D12_CONSERVATIVE_RASTERIZATION_TIER_3"]/*' />
	/// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_TIER_3</unmanaged>
	_3 = 3,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1"]/*' />
/// <unmanaged>D3D12_FORMAT_SUPPORT1</unmanaged>
[Flags]
public enum FormatSupport1 : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_NONE"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_BUFFER"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_BUFFER</unmanaged>
	Buffer = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER</unmanaged>
	IAVertexBuffer = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER</unmanaged>
	IAIndexBuffer = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_SO_BUFFER"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_SO_BUFFER</unmanaged>
	SOBuffer = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_TEXTURE1D"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_TEXTURE1D</unmanaged>
	Texture1D = 16,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_TEXTURE2D"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_TEXTURE2D</unmanaged>
	Texture2D = 32,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_TEXTURE3D"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_TEXTURE3D</unmanaged>
	Texture3D = 64,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_TEXTURECUBE"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_TEXTURECUBE</unmanaged>
	TextureCube = 128,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_SHADER_LOAD"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_SHADER_LOAD</unmanaged>
	ShaderLoad = 256,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE</unmanaged>
	ShaderSample = 512,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON</unmanaged>
	ShaderSampleComparison = 1024,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT</unmanaged>
	ShaderSampleMonoText = 2048,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_MIP"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_MIP</unmanaged>
	Mip = 4096,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_RENDER_TARGET"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_RENDER_TARGET</unmanaged>
	RenderTarget = 16384,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_BLENDABLE"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_BLENDABLE</unmanaged>
	Blendable = 32768,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL</unmanaged>
	DepthStencil = 65536,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE</unmanaged>
	MultisampleResolve = 262144,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_DISPLAY"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_DISPLAY</unmanaged>
	Display = 524288,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT</unmanaged>
	CastWithinBitLayout = 1048576,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET</unmanaged>
	MultisampleRendertarget = 2097152,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD</unmanaged>
	MultisampleLoad = 4194304,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_SHADER_GATHER"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_SHADER_GATHER</unmanaged>
	ShaderGather = 8388608,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST</unmanaged>
	BackBufferCast = 16777216,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW</unmanaged>
	TypedUnorderedAccessView = 33554432,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON</unmanaged>
	ShaderGatherComparison = 67108864,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT</unmanaged>
	DecoderOutput = 134217728,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT</unmanaged>
	VideoProcessorOutput = 268435456,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT</unmanaged>
	VideoProcessorInput = 536870912,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER</unmanaged>
	VideoEncoder = 1073741824,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT2"]/*' />
/// <unmanaged>D3D12_FORMAT_SUPPORT2</unmanaged>
[Flags]
public enum FormatSupport2 : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_NONE"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT2_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD</unmanaged>
	UavAtomicAdd = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS</unmanaged>
	UavAtomicBitwiseOps = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE</unmanaged>
	UavAtomicCompareStoreOrCompareExchange = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE</unmanaged>
	UavAtomicExchange = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX</unmanaged>
	UavAtomicSignedMinOrMax = 16,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX</unmanaged>
	UavAtomicUnsignedMinOrMax = 32,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD</unmanaged>
	UavTypedLoad = 64,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE</unmanaged>
	UavTypedStore = 128,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP</unmanaged>
	OutputMergerLogicOp = 256,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_TILED"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT2_TILED</unmanaged>
	Tiled = 512,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY</unmanaged>
	MultiplaneOverlay = 16384,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_SAMPLER_FEEDBACK"]/*' />
	/// <unmanaged>D3D12_FORMAT_SUPPORT2_SAMPLER_FEEDBACK</unmanaged>
	SamplerFeedback = 32768,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS"]/*' />
/// <unmanaged>D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS</unmanaged>
[Flags]
public enum MultisampleQualityLevelFlags : uint
{
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS::D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE</unmanaged>
	D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS::D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE</unmanaged>
	D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CROSS_NODE_SHARING_TIER"]/*' />
/// <unmanaged>D3D12_CROSS_NODE_SHARING_TIER</unmanaged>
public enum CrossNodeSharingTier : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CROSS_NODE_SHARING_TIER::D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED</unmanaged>
	NotSupported = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CROSS_NODE_SHARING_TIER::D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED"]/*' />
	/// <unmanaged>D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED</unmanaged>
	_1Emulated = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CROSS_NODE_SHARING_TIER::D3D12_CROSS_NODE_SHARING_TIER_1"]/*' />
	/// <unmanaged>D3D12_CROSS_NODE_SHARING_TIER_1</unmanaged>
	_1 = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CROSS_NODE_SHARING_TIER::D3D12_CROSS_NODE_SHARING_TIER_2"]/*' />
	/// <unmanaged>D3D12_CROSS_NODE_SHARING_TIER_2</unmanaged>
	_2 = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CROSS_NODE_SHARING_TIER::D3D12_CROSS_NODE_SHARING_TIER_3"]/*' />
	/// <unmanaged>D3D12_CROSS_NODE_SHARING_TIER_3</unmanaged>
	_3 = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_HEAP_TIER"]/*' />
/// <unmanaged>D3D12_RESOURCE_HEAP_TIER</unmanaged>
public enum ResourceHeapTier : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_HEAP_TIER::D3D12_RESOURCE_HEAP_TIER_1"]/*' />
	/// <unmanaged>D3D12_RESOURCE_HEAP_TIER_1</unmanaged>
	_1 = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_HEAP_TIER::D3D12_RESOURCE_HEAP_TIER_2"]/*' />
	/// <unmanaged>D3D12_RESOURCE_HEAP_TIER_2</unmanaged>
	_2 = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER"]/*' />
/// <unmanaged>D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER</unmanaged>
public enum ProgrammableSamplePositionsTier : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER::D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED</unmanaged>
	NotSupported = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER::D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1"]/*' />
	/// <unmanaged>D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1</unmanaged>
	_1 = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER::D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2"]/*' />
	/// <unmanaged>D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2</unmanaged>
	_2 = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEW_INSTANCING_TIER"]/*' />
/// <unmanaged>D3D12_VIEW_INSTANCING_TIER</unmanaged>
public enum ViewInstancingTier : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEW_INSTANCING_TIER::D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED</unmanaged>
	NotSupported = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEW_INSTANCING_TIER::D3D12_VIEW_INSTANCING_TIER_1"]/*' />
	/// <unmanaged>D3D12_VIEW_INSTANCING_TIER_1</unmanaged>
	_1 = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEW_INSTANCING_TIER::D3D12_VIEW_INSTANCING_TIER_2"]/*' />
	/// <unmanaged>D3D12_VIEW_INSTANCING_TIER_2</unmanaged>
	_2 = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEW_INSTANCING_TIER::D3D12_VIEW_INSTANCING_TIER_3"]/*' />
	/// <unmanaged>D3D12_VIEW_INSTANCING_TIER_3</unmanaged>
	_3 = 3,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D_ROOT_SIGNATURE_VERSION"]/*' />
/// <unmanaged>D3D_ROOT_SIGNATURE_VERSION</unmanaged>
public enum RootSignatureVersion : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D_ROOT_SIGNATURE_VERSION::D3D_ROOT_SIGNATURE_VERSION_1"]/*' />
	/// <unmanaged>D3D_ROOT_SIGNATURE_VERSION_1</unmanaged>
	_1 = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D_ROOT_SIGNATURE_VERSION::D3D_ROOT_SIGNATURE_VERSION_1_0"]/*' />
	/// <unmanaged>D3D_ROOT_SIGNATURE_VERSION_1_0</unmanaged>
	_10 = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D_ROOT_SIGNATURE_VERSION::D3D_ROOT_SIGNATURE_VERSION_1_1"]/*' />
	/// <unmanaged>D3D_ROOT_SIGNATURE_VERSION_1_1</unmanaged>
	_11 = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D_SHADER_MODEL"]/*' />
/// <unmanaged>D3D_SHADER_MODEL</unmanaged>
public enum ShaderModel : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D_SHADER_MODEL::D3D_SHADER_MODEL_5_1"]/*' />
	/// <unmanaged>D3D_SHADER_MODEL_5_1</unmanaged>
	_51 = 81,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D_SHADER_MODEL::D3D_SHADER_MODEL_6_0"]/*' />
	/// <unmanaged>D3D_SHADER_MODEL_6_0</unmanaged>
	_60 = 96,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D_SHADER_MODEL::D3D_SHADER_MODEL_6_1"]/*' />
	/// <unmanaged>D3D_SHADER_MODEL_6_1</unmanaged>
	_61 = 97,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D_SHADER_MODEL::D3D_SHADER_MODEL_6_2"]/*' />
	/// <unmanaged>D3D_SHADER_MODEL_6_2</unmanaged>
	_62 = 98,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D_SHADER_MODEL::D3D_SHADER_MODEL_6_3"]/*' />
	/// <unmanaged>D3D_SHADER_MODEL_6_3</unmanaged>
	_63 = 99,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D_SHADER_MODEL::D3D_SHADER_MODEL_6_4"]/*' />
	/// <unmanaged>D3D_SHADER_MODEL_6_4</unmanaged>
	_64 = 100,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D_SHADER_MODEL::D3D_SHADER_MODEL_6_5"]/*' />
	/// <unmanaged>D3D_SHADER_MODEL_6_5</unmanaged>
	_65 = 101,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D_SHADER_MODEL::D3D_SHADER_MODEL_6_6"]/*' />
	/// <unmanaged>D3D_SHADER_MODEL_6_6</unmanaged>
	_66 = 102,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D_SHADER_MODEL::D3D_SHADER_MODEL_6_7"]/*' />
	/// <unmanaged>D3D_SHADER_MODEL_6_7</unmanaged>
	_67 = 103,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SUPPORT_FLAGS"]/*' />
/// <unmanaged>D3D12_SHADER_CACHE_SUPPORT_FLAGS</unmanaged>
[Flags]
public enum ShaderCacheSupportFlags : uint
{
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SUPPORT_FLAGS::D3D12_SHADER_CACHE_SUPPORT_NONE"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_SUPPORT_NONE</unmanaged>
	D3D12_SHADER_CACHE_SUPPORT_NONE = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SUPPORT_FLAGS::D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO</unmanaged>
	D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SUPPORT_FLAGS::D3D12_SHADER_CACHE_SUPPORT_LIBRARY"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_SUPPORT_LIBRARY</unmanaged>
	D3D12_SHADER_CACHE_SUPPORT_LIBRARY = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SUPPORT_FLAGS::D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE</unmanaged>
	D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SUPPORT_FLAGS::D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE</unmanaged>
	D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SUPPORT_FLAGS::D3D12_SHADER_CACHE_SUPPORT_DRIVER_MANAGED_CACHE"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_SUPPORT_DRIVER_MANAGED_CACHE</unmanaged>
	D3D12_SHADER_CACHE_SUPPORT_DRIVER_MANAGED_CACHE = 16,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SUPPORT_FLAGS::D3D12_SHADER_CACHE_SUPPORT_SHADER_CONTROL_CLEAR"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_SUPPORT_SHADER_CONTROL_CLEAR</unmanaged>
	D3D12_SHADER_CACHE_SUPPORT_SHADER_CONTROL_CLEAR = 32,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SUPPORT_FLAGS::D3D12_SHADER_CACHE_SUPPORT_SHADER_SESSION_DELETE"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_SUPPORT_SHADER_SESSION_DELETE</unmanaged>
	D3D12_SHADER_CACHE_SUPPORT_SHADER_SESSION_DELETE = 64,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_SUPPORT_FLAGS"]/*' />
/// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAGS</unmanaged>
[Flags]
public enum CommandListSupportFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_SUPPORT_FLAGS::D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_SUPPORT_FLAGS::D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT"]/*' />
	/// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT</unmanaged>
	Direct = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_SUPPORT_FLAGS::D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE"]/*' />
	/// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE</unmanaged>
	Bundle = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_SUPPORT_FLAGS::D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE"]/*' />
	/// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE</unmanaged>
	Compute = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_SUPPORT_FLAGS::D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY"]/*' />
	/// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY</unmanaged>
	Copy = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_SUPPORT_FLAGS::D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE"]/*' />
	/// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE</unmanaged>
	VideoDecode = 16,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_SUPPORT_FLAGS::D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS"]/*' />
	/// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS</unmanaged>
	VideoProcess = 32,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_SUPPORT_FLAGS::D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_ENCODE"]/*' />
	/// <unmanaged>D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_ENCODE</unmanaged>
	VideoEncode = 64,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER"]/*' />
/// <unmanaged>D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER</unmanaged>
public enum SharedResourceCompatibilityTier : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER::D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0"]/*' />
	/// <unmanaged>D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0</unmanaged>
	_0 = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER::D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1"]/*' />
	/// <unmanaged>D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1</unmanaged>
	_1 = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER::D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_2"]/*' />
	/// <unmanaged>D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_2</unmanaged>
	_2 = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_SERIALIZATION_TIER"]/*' />
/// <unmanaged>D3D12_HEAP_SERIALIZATION_TIER</unmanaged>
public enum HeapSerializationTier : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_SERIALIZATION_TIER::D3D12_HEAP_SERIALIZATION_TIER_0"]/*' />
	/// <unmanaged>D3D12_HEAP_SERIALIZATION_TIER_0</unmanaged>
	_0 = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_SERIALIZATION_TIER::D3D12_HEAP_SERIALIZATION_TIER_10"]/*' />
	/// <unmanaged>D3D12_HEAP_SERIALIZATION_TIER_10</unmanaged>
	_10 = 10,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_TIER"]/*' />
/// <unmanaged>D3D12_RENDER_PASS_TIER</unmanaged>
public enum RenderPassTier : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_TIER::D3D12_RENDER_PASS_TIER_0"]/*' />
	/// <unmanaged>D3D12_RENDER_PASS_TIER_0</unmanaged>
	_0 = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_TIER::D3D12_RENDER_PASS_TIER_1"]/*' />
	/// <unmanaged>D3D12_RENDER_PASS_TIER_1</unmanaged>
	_1 = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_TIER::D3D12_RENDER_PASS_TIER_2"]/*' />
	/// <unmanaged>D3D12_RENDER_PASS_TIER_2</unmanaged>
	_2 = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_TIER"]/*' />
/// <unmanaged>D3D12_RAYTRACING_TIER</unmanaged>
public enum RaytracingTier : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_TIER::D3D12_RAYTRACING_TIER_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_TIER_NOT_SUPPORTED</unmanaged>
	NotSupported = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_TIER::D3D12_RAYTRACING_TIER_1_0"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_TIER_1_0</unmanaged>
	_10 = 10,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_TIER::D3D12_RAYTRACING_TIER_1_1"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_TIER_1_1</unmanaged>
	_11 = 11,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VARIABLE_SHADING_RATE_TIER"]/*' />
/// <unmanaged>D3D12_VARIABLE_SHADING_RATE_TIER</unmanaged>
public enum VariableShadingRateTier : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VARIABLE_SHADING_RATE_TIER::D3D12_VARIABLE_SHADING_RATE_TIER_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_VARIABLE_SHADING_RATE_TIER_NOT_SUPPORTED</unmanaged>
	NotSupported = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VARIABLE_SHADING_RATE_TIER::D3D12_VARIABLE_SHADING_RATE_TIER_1"]/*' />
	/// <unmanaged>D3D12_VARIABLE_SHADING_RATE_TIER_1</unmanaged>
	_1 = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VARIABLE_SHADING_RATE_TIER::D3D12_VARIABLE_SHADING_RATE_TIER_2"]/*' />
	/// <unmanaged>D3D12_VARIABLE_SHADING_RATE_TIER_2</unmanaged>
	_2 = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESH_SHADER_TIER"]/*' />
/// <unmanaged>D3D12_MESH_SHADER_TIER</unmanaged>
public enum MeshShaderTier : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESH_SHADER_TIER::D3D12_MESH_SHADER_TIER_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESH_SHADER_TIER_NOT_SUPPORTED</unmanaged>
	NotSupported = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESH_SHADER_TIER::D3D12_MESH_SHADER_TIER_1"]/*' />
	/// <unmanaged>D3D12_MESH_SHADER_TIER_1</unmanaged>
	_1 = 10,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLER_FEEDBACK_TIER"]/*' />
/// <unmanaged>D3D12_SAMPLER_FEEDBACK_TIER</unmanaged>
public enum SamplerFeedbackTier : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLER_FEEDBACK_TIER::D3D12_SAMPLER_FEEDBACK_TIER_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_SAMPLER_FEEDBACK_TIER_NOT_SUPPORTED</unmanaged>
	NotSupported = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLER_FEEDBACK_TIER::D3D12_SAMPLER_FEEDBACK_TIER_0_9"]/*' />
	/// <unmanaged>D3D12_SAMPLER_FEEDBACK_TIER_0_9</unmanaged>
	_09 = 90,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLER_FEEDBACK_TIER::D3D12_SAMPLER_FEEDBACK_TIER_1_0"]/*' />
	/// <unmanaged>D3D12_SAMPLER_FEEDBACK_TIER_1_0</unmanaged>
	_10 = 100,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_WAVE_MMA_TIER"]/*' />
/// <unmanaged>D3D12_WAVE_MMA_TIER</unmanaged>
public enum WaveMmaTier : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_WAVE_MMA_TIER::D3D12_WAVE_MMA_TIER_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_WAVE_MMA_TIER_NOT_SUPPORTED</unmanaged>
	NotSupported = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_WAVE_MMA_TIER::D3D12_WAVE_MMA_TIER_1_0"]/*' />
	/// <unmanaged>D3D12_WAVE_MMA_TIER_1_0</unmanaged>
	_10 = 10,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_TYPE"]/*' />
/// <unmanaged>D3D12_HEAP_TYPE</unmanaged>
public enum HeapType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_TYPE::D3D12_HEAP_TYPE_DEFAULT"]/*' />
	/// <unmanaged>D3D12_HEAP_TYPE_DEFAULT</unmanaged>
	Default = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_TYPE::D3D12_HEAP_TYPE_UPLOAD"]/*' />
	/// <unmanaged>D3D12_HEAP_TYPE_UPLOAD</unmanaged>
	Upload = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_TYPE::D3D12_HEAP_TYPE_READBACK"]/*' />
	/// <unmanaged>D3D12_HEAP_TYPE_READBACK</unmanaged>
	Readback = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_TYPE::D3D12_HEAP_TYPE_CUSTOM"]/*' />
	/// <unmanaged>D3D12_HEAP_TYPE_CUSTOM</unmanaged>
	Custom = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CPU_PAGE_PROPERTY"]/*' />
/// <unmanaged>D3D12_CPU_PAGE_PROPERTY</unmanaged>
public enum CpuPageProperty : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CPU_PAGE_PROPERTY::D3D12_CPU_PAGE_PROPERTY_UNKNOWN"]/*' />
	/// <unmanaged>D3D12_CPU_PAGE_PROPERTY_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CPU_PAGE_PROPERTY::D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE"]/*' />
	/// <unmanaged>D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE</unmanaged>
	NotAvailable = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CPU_PAGE_PROPERTY::D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE"]/*' />
	/// <unmanaged>D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE</unmanaged>
	WriteCombine = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CPU_PAGE_PROPERTY::D3D12_CPU_PAGE_PROPERTY_WRITE_BACK"]/*' />
	/// <unmanaged>D3D12_CPU_PAGE_PROPERTY_WRITE_BACK</unmanaged>
	WriteBack = 3,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MEMORY_POOL"]/*' />
/// <unmanaged>D3D12_MEMORY_POOL</unmanaged>
public enum MemoryPool : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MEMORY_POOL::D3D12_MEMORY_POOL_UNKNOWN"]/*' />
	/// <unmanaged>D3D12_MEMORY_POOL_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MEMORY_POOL::D3D12_MEMORY_POOL_L0"]/*' />
	/// <unmanaged>D3D12_MEMORY_POOL_L0</unmanaged>
	L0 = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MEMORY_POOL::D3D12_MEMORY_POOL_L1"]/*' />
	/// <unmanaged>D3D12_MEMORY_POOL_L1</unmanaged>
	L1 = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS"]/*' />
/// <unmanaged>D3D12_HEAP_FLAGS</unmanaged>
[Flags]
public enum HeapFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_HEAP_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_SHARED"]/*' />
	/// <unmanaged>D3D12_HEAP_FLAG_SHARED</unmanaged>
	Shared = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_DENY_BUFFERS"]/*' />
	/// <unmanaged>D3D12_HEAP_FLAG_DENY_BUFFERS</unmanaged>
	DenyBuffers = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_ALLOW_DISPLAY"]/*' />
	/// <unmanaged>D3D12_HEAP_FLAG_ALLOW_DISPLAY</unmanaged>
	AllowDisplay = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER"]/*' />
	/// <unmanaged>D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER</unmanaged>
	SharedCrossAdapter = 32,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES"]/*' />
	/// <unmanaged>D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES</unmanaged>
	DenyRtDsTextures = 64,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES"]/*' />
	/// <unmanaged>D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES</unmanaged>
	DenyNonRtDsTextures = 128,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_HARDWARE_PROTECTED"]/*' />
	/// <unmanaged>D3D12_HEAP_FLAG_HARDWARE_PROTECTED</unmanaged>
	HardwareProtected = 256,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH"]/*' />
	/// <unmanaged>D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH</unmanaged>
	AllowWriteWatch = 512,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS"]/*' />
	/// <unmanaged>D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS</unmanaged>
	AllowShaderAtomics = 1024,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT"]/*' />
	/// <unmanaged>D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT</unmanaged>
	CreateNotResident = 2048,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_CREATE_NOT_ZEROED"]/*' />
	/// <unmanaged>D3D12_HEAP_FLAG_CREATE_NOT_ZEROED</unmanaged>
	CreateNotZeroed = 4096,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES"]/*' />
	/// <unmanaged>D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES</unmanaged>
	AllowAllBuffersAndTextures = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS"]/*' />
	/// <unmanaged>D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS</unmanaged>
	AllowOnlyBuffers = 192,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES"]/*' />
	/// <unmanaged>D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES</unmanaged>
	AllowOnlyNonRtDsTextures = 68,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES"]/*' />
	/// <unmanaged>D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES</unmanaged>
	AllowOnlyRtDsTextures = 132,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DIMENSION"]/*' />
/// <unmanaged>D3D12_RESOURCE_DIMENSION</unmanaged>
public enum ResourceDimension : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DIMENSION::D3D12_RESOURCE_DIMENSION_UNKNOWN"]/*' />
	/// <unmanaged>D3D12_RESOURCE_DIMENSION_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DIMENSION::D3D12_RESOURCE_DIMENSION_BUFFER"]/*' />
	/// <unmanaged>D3D12_RESOURCE_DIMENSION_BUFFER</unmanaged>
	Buffer = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DIMENSION::D3D12_RESOURCE_DIMENSION_TEXTURE1D"]/*' />
	/// <unmanaged>D3D12_RESOURCE_DIMENSION_TEXTURE1D</unmanaged>
	Texture1D = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DIMENSION::D3D12_RESOURCE_DIMENSION_TEXTURE2D"]/*' />
	/// <unmanaged>D3D12_RESOURCE_DIMENSION_TEXTURE2D</unmanaged>
	Texture2D = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DIMENSION::D3D12_RESOURCE_DIMENSION_TEXTURE3D"]/*' />
	/// <unmanaged>D3D12_RESOURCE_DIMENSION_TEXTURE3D</unmanaged>
	Texture3D = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_LAYOUT"]/*' />
/// <unmanaged>D3D12_TEXTURE_LAYOUT</unmanaged>
public enum TextureLayout : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_LAYOUT::D3D12_TEXTURE_LAYOUT_UNKNOWN"]/*' />
	/// <unmanaged>D3D12_TEXTURE_LAYOUT_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_LAYOUT::D3D12_TEXTURE_LAYOUT_ROW_MAJOR"]/*' />
	/// <unmanaged>D3D12_TEXTURE_LAYOUT_ROW_MAJOR</unmanaged>
	RowMajor = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_LAYOUT::D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE"]/*' />
	/// <unmanaged>D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE</unmanaged>
	_64kbUndefinedSwizzle = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_LAYOUT::D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE"]/*' />
	/// <unmanaged>D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE</unmanaged>
	_64kbStandardSwizzle = 3,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_FLAGS"]/*' />
/// <unmanaged>D3D12_RESOURCE_FLAGS</unmanaged>
[Flags]
public enum ResourceFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_RESOURCE_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET"]/*' />
	/// <unmanaged>D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET</unmanaged>
	AllowRenderTarget = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL"]/*' />
	/// <unmanaged>D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL</unmanaged>
	AllowDepthStencil = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS"]/*' />
	/// <unmanaged>D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS</unmanaged>
	AllowUnorderedAccess = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE"]/*' />
	/// <unmanaged>D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE</unmanaged>
	DenyShaderResource = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER"]/*' />
	/// <unmanaged>D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER</unmanaged>
	AllowCrossAdapter = 16,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS"]/*' />
	/// <unmanaged>D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS</unmanaged>
	AllowSimultaneousAccess = 32,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY"]/*' />
	/// <unmanaged>D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY</unmanaged>
	VideoDecodeReferenceOnly = 64,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_VIDEO_ENCODE_REFERENCE_ONLY"]/*' />
	/// <unmanaged>D3D12_RESOURCE_FLAG_VIDEO_ENCODE_REFERENCE_ONLY</unmanaged>
	VideoEncodeReferenceOnly = 128,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_RANGE_FLAGS"]/*' />
/// <unmanaged>D3D12_TILE_RANGE_FLAGS</unmanaged>
[Flags]
public enum TileRangeFlags : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_RANGE_FLAGS::D3D12_TILE_RANGE_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_TILE_RANGE_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_RANGE_FLAGS::D3D12_TILE_RANGE_FLAG_NULL"]/*' />
	/// <unmanaged>D3D12_TILE_RANGE_FLAG_NULL</unmanaged>
	Null = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_RANGE_FLAGS::D3D12_TILE_RANGE_FLAG_SKIP"]/*' />
	/// <unmanaged>D3D12_TILE_RANGE_FLAG_SKIP</unmanaged>
	Skip = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_RANGE_FLAGS::D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE"]/*' />
	/// <unmanaged>D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE</unmanaged>
	ReuseSingleTile = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_MAPPING_FLAGS"]/*' />
/// <unmanaged>D3D12_TILE_MAPPING_FLAGS</unmanaged>
[Flags]
public enum TileMappingFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_MAPPING_FLAGS::D3D12_TILE_MAPPING_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_TILE_MAPPING_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_MAPPING_FLAGS::D3D12_TILE_MAPPING_FLAG_NO_HAZARD"]/*' />
	/// <unmanaged>D3D12_TILE_MAPPING_FLAG_NO_HAZARD</unmanaged>
	NoHazard = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_COPY_FLAGS"]/*' />
/// <unmanaged>D3D12_TILE_COPY_FLAGS</unmanaged>
[Flags]
public enum TileCopyFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_COPY_FLAGS::D3D12_TILE_COPY_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_TILE_COPY_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_COPY_FLAGS::D3D12_TILE_COPY_FLAG_NO_HAZARD"]/*' />
	/// <unmanaged>D3D12_TILE_COPY_FLAG_NO_HAZARD</unmanaged>
	NoHazard = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_COPY_FLAGS::D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE"]/*' />
	/// <unmanaged>D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE</unmanaged>
	LinearBufferToSwizzledTiledResource = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_COPY_FLAGS::D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER"]/*' />
	/// <unmanaged>D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER</unmanaged>
	SwizzledTiledResourceToLinearBuffer = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES"]/*' />
/// <unmanaged>D3D12_RESOURCE_STATES</unmanaged>
[Flags]
public enum ResourceStates : uint
{
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_COMMON"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_COMMON</unmanaged>
	D3D12_RESOURCE_STATE_COMMON = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER</unmanaged>
	D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_INDEX_BUFFER"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_INDEX_BUFFER</unmanaged>
	D3D12_RESOURCE_STATE_INDEX_BUFFER = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_RENDER_TARGET"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_RENDER_TARGET</unmanaged>
	D3D12_RESOURCE_STATE_RENDER_TARGET = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_UNORDERED_ACCESS"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_UNORDERED_ACCESS</unmanaged>
	D3D12_RESOURCE_STATE_UNORDERED_ACCESS = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_DEPTH_WRITE"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_DEPTH_WRITE</unmanaged>
	D3D12_RESOURCE_STATE_DEPTH_WRITE = 16,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_DEPTH_READ"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_DEPTH_READ</unmanaged>
	D3D12_RESOURCE_STATE_DEPTH_READ = 32,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE</unmanaged>
	D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE = 64,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE</unmanaged>
	D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE = 128,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_STREAM_OUT"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_STREAM_OUT</unmanaged>
	D3D12_RESOURCE_STATE_STREAM_OUT = 256,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT</unmanaged>
	D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT = 512,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_COPY_DEST"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_COPY_DEST</unmanaged>
	D3D12_RESOURCE_STATE_COPY_DEST = 1024,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_COPY_SOURCE"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_COPY_SOURCE</unmanaged>
	D3D12_RESOURCE_STATE_COPY_SOURCE = 2048,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_RESOLVE_DEST"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_RESOLVE_DEST</unmanaged>
	D3D12_RESOURCE_STATE_RESOLVE_DEST = 4096,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_RESOLVE_SOURCE"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_RESOLVE_SOURCE</unmanaged>
	D3D12_RESOURCE_STATE_RESOLVE_SOURCE = 8192,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE</unmanaged>
	D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE = 4194304,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE</unmanaged>
	D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE = 16777216,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_GENERIC_READ"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_GENERIC_READ</unmanaged>
	D3D12_RESOURCE_STATE_GENERIC_READ = 2755,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_ALL_SHADER_RESOURCE"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_ALL_SHADER_RESOURCE</unmanaged>
	D3D12_RESOURCE_STATE_ALL_SHADER_RESOURCE = 192,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_PRESENT"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_PRESENT</unmanaged>
	D3D12_RESOURCE_STATE_PRESENT = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_PREDICATION"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_PREDICATION</unmanaged>
	D3D12_RESOURCE_STATE_PREDICATION = 512,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_VIDEO_DECODE_READ"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_VIDEO_DECODE_READ</unmanaged>
	D3D12_RESOURCE_STATE_VIDEO_DECODE_READ = 65536,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE</unmanaged>
	D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE = 131072,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ</unmanaged>
	D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ = 262144,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE</unmanaged>
	D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE = 524288,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ</unmanaged>
	D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ = 2097152,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE"]/*' />
	/// <unmanaged>D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE</unmanaged>
	D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE = 8388608,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_BARRIER_TYPE"]/*' />
/// <unmanaged>D3D12_RESOURCE_BARRIER_TYPE</unmanaged>
public enum ResourceBarrierType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_BARRIER_TYPE::D3D12_RESOURCE_BARRIER_TYPE_TRANSITION"]/*' />
	/// <unmanaged>D3D12_RESOURCE_BARRIER_TYPE_TRANSITION</unmanaged>
	Transition = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_BARRIER_TYPE::D3D12_RESOURCE_BARRIER_TYPE_ALIASING"]/*' />
	/// <unmanaged>D3D12_RESOURCE_BARRIER_TYPE_ALIASING</unmanaged>
	Aliasing = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_BARRIER_TYPE::D3D12_RESOURCE_BARRIER_TYPE_UAV"]/*' />
	/// <unmanaged>D3D12_RESOURCE_BARRIER_TYPE_UAV</unmanaged>
	Uav = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_BARRIER_FLAGS"]/*' />
/// <unmanaged>D3D12_RESOURCE_BARRIER_FLAGS</unmanaged>
[Flags]
public enum ResourceBarrierFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_BARRIER_FLAGS::D3D12_RESOURCE_BARRIER_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_RESOURCE_BARRIER_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_BARRIER_FLAGS::D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY"]/*' />
	/// <unmanaged>D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY</unmanaged>
	BeginOnly = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_BARRIER_FLAGS::D3D12_RESOURCE_BARRIER_FLAG_END_ONLY"]/*' />
	/// <unmanaged>D3D12_RESOURCE_BARRIER_FLAG_END_ONLY</unmanaged>
	EndOnly = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_COPY_TYPE"]/*' />
/// <unmanaged>D3D12_TEXTURE_COPY_TYPE</unmanaged>
public enum TextureCopyType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_COPY_TYPE::D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX"]/*' />
	/// <unmanaged>D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX</unmanaged>
	SubresourceIndex = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_COPY_TYPE::D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT"]/*' />
	/// <unmanaged>D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT</unmanaged>
	PlacedFootprint = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOLVE_MODE"]/*' />
/// <unmanaged>D3D12_RESOLVE_MODE</unmanaged>
public enum ResolveMode : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOLVE_MODE::D3D12_RESOLVE_MODE_DECOMPRESS"]/*' />
	/// <unmanaged>D3D12_RESOLVE_MODE_DECOMPRESS</unmanaged>
	Decompress = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOLVE_MODE::D3D12_RESOLVE_MODE_MIN"]/*' />
	/// <unmanaged>D3D12_RESOLVE_MODE_MIN</unmanaged>
	Min = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOLVE_MODE::D3D12_RESOLVE_MODE_MAX"]/*' />
	/// <unmanaged>D3D12_RESOLVE_MODE_MAX</unmanaged>
	Max = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOLVE_MODE::D3D12_RESOLVE_MODE_AVERAGE"]/*' />
	/// <unmanaged>D3D12_RESOLVE_MODE_AVERAGE</unmanaged>
	Average = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOLVE_MODE::D3D12_RESOLVE_MODE_ENCODE_SAMPLER_FEEDBACK"]/*' />
	/// <unmanaged>D3D12_RESOLVE_MODE_ENCODE_SAMPLER_FEEDBACK</unmanaged>
	EncodeSamplerFeedback = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOLVE_MODE::D3D12_RESOLVE_MODE_DECODE_SAMPLER_FEEDBACK"]/*' />
	/// <unmanaged>D3D12_RESOLVE_MODE_DECODE_SAMPLER_FEEDBACK</unmanaged>
	DecodeSamplerFeedback = 5,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEW_INSTANCING_FLAGS"]/*' />
/// <unmanaged>D3D12_VIEW_INSTANCING_FLAGS</unmanaged>
[Flags]
public enum ViewInstancingFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEW_INSTANCING_FLAGS::D3D12_VIEW_INSTANCING_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_VIEW_INSTANCING_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEW_INSTANCING_FLAGS::D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING"]/*' />
	/// <unmanaged>D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING</unmanaged>
	EnableViewInstanceMasking = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_COMPONENT_MAPPING"]/*' />
/// <unmanaged>D3D12_SHADER_COMPONENT_MAPPING</unmanaged>
public enum ShaderComponentMapping : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_COMPONENT_MAPPING::D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0"]/*' />
	/// <unmanaged>D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0</unmanaged>
	FromMemoryComponent0 = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_COMPONENT_MAPPING::D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1"]/*' />
	/// <unmanaged>D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1</unmanaged>
	FromMemoryComponent1 = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_COMPONENT_MAPPING::D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2"]/*' />
	/// <unmanaged>D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2</unmanaged>
	FromMemoryComponent2 = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_COMPONENT_MAPPING::D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3"]/*' />
	/// <unmanaged>D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3</unmanaged>
	FromMemoryComponent3 = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_COMPONENT_MAPPING::D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0"]/*' />
	/// <unmanaged>D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0</unmanaged>
	ForceValue0 = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_COMPONENT_MAPPING::D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1"]/*' />
	/// <unmanaged>D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1</unmanaged>
	ForceValue1 = 5,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_SRV_FLAGS"]/*' />
/// <unmanaged>D3D12_BUFFER_SRV_FLAGS</unmanaged>
[Flags]
public enum BufferSrvFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_SRV_FLAGS::D3D12_BUFFER_SRV_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_BUFFER_SRV_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_SRV_FLAGS::D3D12_BUFFER_SRV_FLAG_RAW"]/*' />
	/// <unmanaged>D3D12_BUFFER_SRV_FLAG_RAW</unmanaged>
	Raw = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SRV_DIMENSION"]/*' />
/// <unmanaged>D3D12_SRV_DIMENSION</unmanaged>
public enum SrvDimension : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_UNKNOWN"]/*' />
	/// <unmanaged>D3D12_SRV_DIMENSION_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_BUFFER"]/*' />
	/// <unmanaged>D3D12_SRV_DIMENSION_BUFFER</unmanaged>
	Buffer = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURE1D"]/*' />
	/// <unmanaged>D3D12_SRV_DIMENSION_TEXTURE1D</unmanaged>
	Texture1D = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURE1DARRAY"]/*' />
	/// <unmanaged>D3D12_SRV_DIMENSION_TEXTURE1DARRAY</unmanaged>
	Texture1DArray = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURE2D"]/*' />
	/// <unmanaged>D3D12_SRV_DIMENSION_TEXTURE2D</unmanaged>
	Texture2D = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURE2DARRAY"]/*' />
	/// <unmanaged>D3D12_SRV_DIMENSION_TEXTURE2DARRAY</unmanaged>
	Texture2DArray = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURE2DMS"]/*' />
	/// <unmanaged>D3D12_SRV_DIMENSION_TEXTURE2DMS</unmanaged>
	Texture2DMs = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY"]/*' />
	/// <unmanaged>D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY</unmanaged>
	Texture2DMsArray = 7,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURE3D"]/*' />
	/// <unmanaged>D3D12_SRV_DIMENSION_TEXTURE3D</unmanaged>
	Texture3D = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURECUBE"]/*' />
	/// <unmanaged>D3D12_SRV_DIMENSION_TEXTURECUBE</unmanaged>
	TextureCube = 9,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURECUBEARRAY"]/*' />
	/// <unmanaged>D3D12_SRV_DIMENSION_TEXTURECUBEARRAY</unmanaged>
	TextureCubeArray = 10,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE"]/*' />
	/// <unmanaged>D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE</unmanaged>
	RaytracingAccelerationStructure = 11,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER"]/*' />
/// <unmanaged>D3D12_FILTER</unmanaged>
public enum Filter : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MIN_MAG_MIP_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_MIN_MAG_MIP_POINT</unmanaged>
	MinMagMipPoint = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
	MinMagPointMipLinear = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
	MinPointMagLinearMipPoint = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
	MinPointMagMipLinear = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
	MinLinearMagMipPoint = 16,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
	MinLinearMagPointMipLinear = 17,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
	MinMagLinearMipPoint = 20,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MIN_MAG_MIP_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_MIN_MAG_MIP_LINEAR</unmanaged>
	MinMagMipLinear = 21,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_ANISOTROPIC"]/*' />
	/// <unmanaged>D3D12_FILTER_ANISOTROPIC</unmanaged>
	Anisotropic = 85,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT</unmanaged>
	ComparisonMinMagMipPoint = 128,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
	ComparisonMinMagPointMipLinear = 129,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
	ComparisonMinPointMagLinearMipPoint = 132,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
	ComparisonMinPointMagMipLinear = 133,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
	ComparisonMinLinearMagMipPoint = 144,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
	ComparisonMinLinearMagPointMipLinear = 145,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
	ComparisonMinMagLinearMipPoint = 148,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR</unmanaged>
	ComparisonMinMagMipLinear = 149,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_COMPARISON_ANISOTROPIC"]/*' />
	/// <unmanaged>D3D12_FILTER_COMPARISON_ANISOTROPIC</unmanaged>
	ComparisonAnisotropic = 213,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT</unmanaged>
	MinimumMinMagMipPoint = 256,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
	MinimumMinMagPointMipLinear = 257,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
	MinimumMinPointMagLinearMipPoint = 260,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
	MinimumMinPointMagMipLinear = 261,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
	MinimumMinLinearMagMipPoint = 272,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
	MinimumMinLinearMagPointMipLinear = 273,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
	MinimumMinMagLinearMipPoint = 276,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR</unmanaged>
	MinimumMinMagMipLinear = 277,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MINIMUM_ANISOTROPIC"]/*' />
	/// <unmanaged>D3D12_FILTER_MINIMUM_ANISOTROPIC</unmanaged>
	MinimumAnisotropic = 341,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT</unmanaged>
	MaximumMinMagMipPoint = 384,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
	MaximumMinMagPointMipLinear = 385,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
	MaximumMinPointMagLinearMipPoint = 388,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
	MaximumMinPointMagMipLinear = 389,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
	MaximumMinLinearMagMipPoint = 400,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
	MaximumMinLinearMagPointMipLinear = 401,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
	MaximumMinMagLinearMipPoint = 404,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR</unmanaged>
	MaximumMinMagMipLinear = 405,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER::D3D12_FILTER_MAXIMUM_ANISOTROPIC"]/*' />
	/// <unmanaged>D3D12_FILTER_MAXIMUM_ANISOTROPIC</unmanaged>
	MaximumAnisotropic = 469,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER_TYPE"]/*' />
/// <unmanaged>D3D12_FILTER_TYPE</unmanaged>
public enum FilterType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER_TYPE::D3D12_FILTER_TYPE_POINT"]/*' />
	/// <unmanaged>D3D12_FILTER_TYPE_POINT</unmanaged>
	Point = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER_TYPE::D3D12_FILTER_TYPE_LINEAR"]/*' />
	/// <unmanaged>D3D12_FILTER_TYPE_LINEAR</unmanaged>
	Linear = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER_REDUCTION_TYPE"]/*' />
/// <unmanaged>D3D12_FILTER_REDUCTION_TYPE</unmanaged>
public enum FilterReductionType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER_REDUCTION_TYPE::D3D12_FILTER_REDUCTION_TYPE_STANDARD"]/*' />
	/// <unmanaged>D3D12_FILTER_REDUCTION_TYPE_STANDARD</unmanaged>
	Standard = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER_REDUCTION_TYPE::D3D12_FILTER_REDUCTION_TYPE_COMPARISON"]/*' />
	/// <unmanaged>D3D12_FILTER_REDUCTION_TYPE_COMPARISON</unmanaged>
	Comparison = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER_REDUCTION_TYPE::D3D12_FILTER_REDUCTION_TYPE_MINIMUM"]/*' />
	/// <unmanaged>D3D12_FILTER_REDUCTION_TYPE_MINIMUM</unmanaged>
	Minimum = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FILTER_REDUCTION_TYPE::D3D12_FILTER_REDUCTION_TYPE_MAXIMUM"]/*' />
	/// <unmanaged>D3D12_FILTER_REDUCTION_TYPE_MAXIMUM</unmanaged>
	Maximum = 3,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_ADDRESS_MODE"]/*' />
/// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE</unmanaged>
public enum TextureAddressMode : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_ADDRESS_MODE::D3D12_TEXTURE_ADDRESS_MODE_WRAP"]/*' />
	/// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE_WRAP</unmanaged>
	Wrap = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_ADDRESS_MODE::D3D12_TEXTURE_ADDRESS_MODE_MIRROR"]/*' />
	/// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE_MIRROR</unmanaged>
	Mirror = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_ADDRESS_MODE::D3D12_TEXTURE_ADDRESS_MODE_CLAMP"]/*' />
	/// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE_CLAMP</unmanaged>
	Clamp = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_ADDRESS_MODE::D3D12_TEXTURE_ADDRESS_MODE_BORDER"]/*' />
	/// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE_BORDER</unmanaged>
	Border = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_ADDRESS_MODE::D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE"]/*' />
	/// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE</unmanaged>
	MirrorOnce = 5,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_UAV_FLAGS"]/*' />
/// <unmanaged>D3D12_BUFFER_UAV_FLAGS</unmanaged>
[Flags]
public enum BufferUavFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_UAV_FLAGS::D3D12_BUFFER_UAV_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_BUFFER_UAV_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_UAV_FLAGS::D3D12_BUFFER_UAV_FLAG_RAW"]/*' />
	/// <unmanaged>D3D12_BUFFER_UAV_FLAG_RAW</unmanaged>
	Raw = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_UAV_DIMENSION"]/*' />
/// <unmanaged>D3D12_UAV_DIMENSION</unmanaged>
public enum UavDimension : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_UAV_DIMENSION::D3D12_UAV_DIMENSION_UNKNOWN"]/*' />
	/// <unmanaged>D3D12_UAV_DIMENSION_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_UAV_DIMENSION::D3D12_UAV_DIMENSION_BUFFER"]/*' />
	/// <unmanaged>D3D12_UAV_DIMENSION_BUFFER</unmanaged>
	Buffer = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_UAV_DIMENSION::D3D12_UAV_DIMENSION_TEXTURE1D"]/*' />
	/// <unmanaged>D3D12_UAV_DIMENSION_TEXTURE1D</unmanaged>
	Texture1D = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_UAV_DIMENSION::D3D12_UAV_DIMENSION_TEXTURE1DARRAY"]/*' />
	/// <unmanaged>D3D12_UAV_DIMENSION_TEXTURE1DARRAY</unmanaged>
	Texture1DArray = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_UAV_DIMENSION::D3D12_UAV_DIMENSION_TEXTURE2D"]/*' />
	/// <unmanaged>D3D12_UAV_DIMENSION_TEXTURE2D</unmanaged>
	Texture2D = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_UAV_DIMENSION::D3D12_UAV_DIMENSION_TEXTURE2DARRAY"]/*' />
	/// <unmanaged>D3D12_UAV_DIMENSION_TEXTURE2DARRAY</unmanaged>
	Texture2DArray = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_UAV_DIMENSION::D3D12_UAV_DIMENSION_TEXTURE3D"]/*' />
	/// <unmanaged>D3D12_UAV_DIMENSION_TEXTURE3D</unmanaged>
	Texture3D = 8,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RTV_DIMENSION"]/*' />
/// <unmanaged>D3D12_RTV_DIMENSION</unmanaged>
public enum RtvDimension : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_UNKNOWN"]/*' />
	/// <unmanaged>D3D12_RTV_DIMENSION_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_BUFFER"]/*' />
	/// <unmanaged>D3D12_RTV_DIMENSION_BUFFER</unmanaged>
	Buffer = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_TEXTURE1D"]/*' />
	/// <unmanaged>D3D12_RTV_DIMENSION_TEXTURE1D</unmanaged>
	Texture1D = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_TEXTURE1DARRAY"]/*' />
	/// <unmanaged>D3D12_RTV_DIMENSION_TEXTURE1DARRAY</unmanaged>
	Texture1DArray = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_TEXTURE2D"]/*' />
	/// <unmanaged>D3D12_RTV_DIMENSION_TEXTURE2D</unmanaged>
	Texture2D = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_TEXTURE2DARRAY"]/*' />
	/// <unmanaged>D3D12_RTV_DIMENSION_TEXTURE2DARRAY</unmanaged>
	Texture2DArray = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_TEXTURE2DMS"]/*' />
	/// <unmanaged>D3D12_RTV_DIMENSION_TEXTURE2DMS</unmanaged>
	Texture2DMs = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY"]/*' />
	/// <unmanaged>D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY</unmanaged>
	Texture2DMsArray = 7,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_TEXTURE3D"]/*' />
	/// <unmanaged>D3D12_RTV_DIMENSION_TEXTURE3D</unmanaged>
	Texture3D = 8,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DSV_FLAGS"]/*' />
/// <unmanaged>D3D12_DSV_FLAGS</unmanaged>
[Flags]
public enum DsvFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DSV_FLAGS::D3D12_DSV_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_DSV_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DSV_FLAGS::D3D12_DSV_FLAG_READ_ONLY_DEPTH"]/*' />
	/// <unmanaged>D3D12_DSV_FLAG_READ_ONLY_DEPTH</unmanaged>
	ReadOnlyDepth = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DSV_FLAGS::D3D12_DSV_FLAG_READ_ONLY_STENCIL"]/*' />
	/// <unmanaged>D3D12_DSV_FLAG_READ_ONLY_STENCIL</unmanaged>
	ReadOnlyStencil = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DSV_DIMENSION"]/*' />
/// <unmanaged>D3D12_DSV_DIMENSION</unmanaged>
public enum DsvDimension : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DSV_DIMENSION::D3D12_DSV_DIMENSION_UNKNOWN"]/*' />
	/// <unmanaged>D3D12_DSV_DIMENSION_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DSV_DIMENSION::D3D12_DSV_DIMENSION_TEXTURE1D"]/*' />
	/// <unmanaged>D3D12_DSV_DIMENSION_TEXTURE1D</unmanaged>
	Texture1D = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DSV_DIMENSION::D3D12_DSV_DIMENSION_TEXTURE1DARRAY"]/*' />
	/// <unmanaged>D3D12_DSV_DIMENSION_TEXTURE1DARRAY</unmanaged>
	Texture1DArray = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DSV_DIMENSION::D3D12_DSV_DIMENSION_TEXTURE2D"]/*' />
	/// <unmanaged>D3D12_DSV_DIMENSION_TEXTURE2D</unmanaged>
	Texture2D = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DSV_DIMENSION::D3D12_DSV_DIMENSION_TEXTURE2DARRAY"]/*' />
	/// <unmanaged>D3D12_DSV_DIMENSION_TEXTURE2DARRAY</unmanaged>
	Texture2DArray = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DSV_DIMENSION::D3D12_DSV_DIMENSION_TEXTURE2DMS"]/*' />
	/// <unmanaged>D3D12_DSV_DIMENSION_TEXTURE2DMS</unmanaged>
	Texture2DMs = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DSV_DIMENSION::D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY"]/*' />
	/// <unmanaged>D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY</unmanaged>
	Texture2DMsArray = 6,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CLEAR_FLAGS"]/*' />
/// <unmanaged>D3D12_CLEAR_FLAGS</unmanaged>
[Flags]
public enum ClearFlags : uint
{
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CLEAR_FLAGS::D3D12_CLEAR_FLAG_DEPTH"]/*' />
	/// <unmanaged>D3D12_CLEAR_FLAG_DEPTH</unmanaged>
	Depth = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CLEAR_FLAGS::D3D12_CLEAR_FLAG_STENCIL"]/*' />
	/// <unmanaged>D3D12_CLEAR_FLAG_STENCIL</unmanaged>
	Stencil = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FENCE_FLAGS"]/*' />
/// <unmanaged>D3D12_FENCE_FLAGS</unmanaged>
[Flags]
public enum FenceFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FENCE_FLAGS::D3D12_FENCE_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_FENCE_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FENCE_FLAGS::D3D12_FENCE_FLAG_SHARED"]/*' />
	/// <unmanaged>D3D12_FENCE_FLAG_SHARED</unmanaged>
	Shared = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FENCE_FLAGS::D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER"]/*' />
	/// <unmanaged>D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER</unmanaged>
	SharedCrossAdapter = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FENCE_FLAGS::D3D12_FENCE_FLAG_NON_MONITORED"]/*' />
	/// <unmanaged>D3D12_FENCE_FLAG_NON_MONITORED</unmanaged>
	NonMonitored = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_HEAP_TYPE"]/*' />
/// <unmanaged>D3D12_DESCRIPTOR_HEAP_TYPE</unmanaged>
public enum DescriptorHeapType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_HEAP_TYPE::D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV</unmanaged>
	CbvSrvUav = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_HEAP_TYPE::D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER</unmanaged>
	Sampler = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_HEAP_TYPE::D3D12_DESCRIPTOR_HEAP_TYPE_RTV"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_HEAP_TYPE_RTV</unmanaged>
	Rtv = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_HEAP_TYPE::D3D12_DESCRIPTOR_HEAP_TYPE_DSV"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_HEAP_TYPE_DSV</unmanaged>
	Dsv = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_HEAP_TYPE::D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES</unmanaged>
	NumTypes = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_HEAP_FLAGS"]/*' />
/// <unmanaged>D3D12_DESCRIPTOR_HEAP_FLAGS</unmanaged>
[Flags]
public enum DescriptorHeapFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_HEAP_FLAGS::D3D12_DESCRIPTOR_HEAP_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_HEAP_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_HEAP_FLAGS::D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE</unmanaged>
	ShaderVisible = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE_TYPE"]/*' />
/// <unmanaged>D3D12_DESCRIPTOR_RANGE_TYPE</unmanaged>
public enum DescriptorRangeType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE_TYPE::D3D12_DESCRIPTOR_RANGE_TYPE_SRV"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_RANGE_TYPE_SRV</unmanaged>
	Srv = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE_TYPE::D3D12_DESCRIPTOR_RANGE_TYPE_UAV"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_RANGE_TYPE_UAV</unmanaged>
	Uav = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE_TYPE::D3D12_DESCRIPTOR_RANGE_TYPE_CBV"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_RANGE_TYPE_CBV</unmanaged>
	Cbv = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE_TYPE::D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER</unmanaged>
	Sampler = 3,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VISIBILITY"]/*' />
/// <unmanaged>D3D12_SHADER_VISIBILITY</unmanaged>
public enum ShaderVisibility : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VISIBILITY::D3D12_SHADER_VISIBILITY_ALL"]/*' />
	/// <unmanaged>D3D12_SHADER_VISIBILITY_ALL</unmanaged>
	All = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VISIBILITY::D3D12_SHADER_VISIBILITY_VERTEX"]/*' />
	/// <unmanaged>D3D12_SHADER_VISIBILITY_VERTEX</unmanaged>
	Vertex = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VISIBILITY::D3D12_SHADER_VISIBILITY_HULL"]/*' />
	/// <unmanaged>D3D12_SHADER_VISIBILITY_HULL</unmanaged>
	Hull = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VISIBILITY::D3D12_SHADER_VISIBILITY_DOMAIN"]/*' />
	/// <unmanaged>D3D12_SHADER_VISIBILITY_DOMAIN</unmanaged>
	Domain = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VISIBILITY::D3D12_SHADER_VISIBILITY_GEOMETRY"]/*' />
	/// <unmanaged>D3D12_SHADER_VISIBILITY_GEOMETRY</unmanaged>
	Geometry = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VISIBILITY::D3D12_SHADER_VISIBILITY_PIXEL"]/*' />
	/// <unmanaged>D3D12_SHADER_VISIBILITY_PIXEL</unmanaged>
	Pixel = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VISIBILITY::D3D12_SHADER_VISIBILITY_AMPLIFICATION"]/*' />
	/// <unmanaged>D3D12_SHADER_VISIBILITY_AMPLIFICATION</unmanaged>
	Amplification = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VISIBILITY::D3D12_SHADER_VISIBILITY_MESH"]/*' />
	/// <unmanaged>D3D12_SHADER_VISIBILITY_MESH</unmanaged>
	Mesh = 7,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_PARAMETER_TYPE"]/*' />
/// <unmanaged>D3D12_ROOT_PARAMETER_TYPE</unmanaged>
public enum RootParameterType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_PARAMETER_TYPE::D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE"]/*' />
	/// <unmanaged>D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE</unmanaged>
	DescriptorTable = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_PARAMETER_TYPE::D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS"]/*' />
	/// <unmanaged>D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS</unmanaged>
	_32bitConstants = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_PARAMETER_TYPE::D3D12_ROOT_PARAMETER_TYPE_CBV"]/*' />
	/// <unmanaged>D3D12_ROOT_PARAMETER_TYPE_CBV</unmanaged>
	Cbv = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_PARAMETER_TYPE::D3D12_ROOT_PARAMETER_TYPE_SRV"]/*' />
	/// <unmanaged>D3D12_ROOT_PARAMETER_TYPE_SRV</unmanaged>
	Srv = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_PARAMETER_TYPE::D3D12_ROOT_PARAMETER_TYPE_UAV"]/*' />
	/// <unmanaged>D3D12_ROOT_PARAMETER_TYPE_UAV</unmanaged>
	Uav = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_FLAGS"]/*' />
/// <unmanaged>D3D12_ROOT_SIGNATURE_FLAGS</unmanaged>
[Flags]
public enum RootSignatureFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT"]/*' />
	/// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT</unmanaged>
	AllowInputAssemblerInputLayout = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS"]/*' />
	/// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS</unmanaged>
	DenyVertexShaderRootAccess = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS"]/*' />
	/// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS</unmanaged>
	DenyHullShaderRootAccess = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS"]/*' />
	/// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS</unmanaged>
	DenyDomainShaderRootAccess = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS"]/*' />
	/// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS</unmanaged>
	DenyGeometryShaderRootAccess = 16,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS"]/*' />
	/// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS</unmanaged>
	DenyPixelShaderRootAccess = 32,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT"]/*' />
	/// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT</unmanaged>
	AllowStreamOutput = 64,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE"]/*' />
	/// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE</unmanaged>
	LocalRootSignature = 128,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS"]/*' />
	/// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS</unmanaged>
	DenyAmplificationShaderRootAccess = 256,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS"]/*' />
	/// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS</unmanaged>
	DenyMeshShaderRootAccess = 512,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED"]/*' />
	/// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED</unmanaged>
	CbvSrvUavHeapDirectlyIndexed = 1024,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_SAMPLER_HEAP_DIRECTLY_INDEXED"]/*' />
	/// <unmanaged>D3D12_ROOT_SIGNATURE_FLAG_SAMPLER_HEAP_DIRECTLY_INDEXED</unmanaged>
	SamplerHeapDirectlyIndexed = 2048,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_BORDER_COLOR"]/*' />
/// <unmanaged>D3D12_STATIC_BORDER_COLOR</unmanaged>
public enum StaticBorderColor : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_BORDER_COLOR::D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK"]/*' />
	/// <unmanaged>D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK</unmanaged>
	TransparentBlack = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_BORDER_COLOR::D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK"]/*' />
	/// <unmanaged>D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK</unmanaged>
	OpaqueBlack = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_BORDER_COLOR::D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE"]/*' />
	/// <unmanaged>D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE</unmanaged>
	OpaqueWhite = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE_FLAGS"]/*' />
/// <unmanaged>D3D12_DESCRIPTOR_RANGE_FLAGS</unmanaged>
[Flags]
public enum DescriptorRangeFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE_FLAGS::D3D12_DESCRIPTOR_RANGE_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_RANGE_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE_FLAGS::D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE</unmanaged>
	DescriptorsVolatile = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE_FLAGS::D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE</unmanaged>
	DataVolatile = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE_FLAGS::D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE</unmanaged>
	DataStaticWhileSetAtExecute = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE_FLAGS::D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC</unmanaged>
	DataStatic = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE_FLAGS::D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS"]/*' />
	/// <unmanaged>D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS</unmanaged>
	DescriptorsStaticKeepingBufferBoundsChecks = 65536,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR_FLAGS"]/*' />
/// <unmanaged>D3D12_ROOT_DESCRIPTOR_FLAGS</unmanaged>
[Flags]
public enum RootDescriptorFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR_FLAGS::D3D12_ROOT_DESCRIPTOR_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_ROOT_DESCRIPTOR_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR_FLAGS::D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE"]/*' />
	/// <unmanaged>D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE</unmanaged>
	DataVolatile = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR_FLAGS::D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE"]/*' />
	/// <unmanaged>D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE</unmanaged>
	DataStaticWhileSetAtExecute = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR_FLAGS::D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC"]/*' />
	/// <unmanaged>D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC</unmanaged>
	DataStatic = 8,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_HEAP_TYPE"]/*' />
/// <unmanaged>D3D12_QUERY_HEAP_TYPE</unmanaged>
public enum QueryHeapType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_HEAP_TYPE::D3D12_QUERY_HEAP_TYPE_OCCLUSION"]/*' />
	/// <unmanaged>D3D12_QUERY_HEAP_TYPE_OCCLUSION</unmanaged>
	Occlusion = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_HEAP_TYPE::D3D12_QUERY_HEAP_TYPE_TIMESTAMP"]/*' />
	/// <unmanaged>D3D12_QUERY_HEAP_TYPE_TIMESTAMP</unmanaged>
	Timestamp = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_HEAP_TYPE::D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS"]/*' />
	/// <unmanaged>D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS</unmanaged>
	PipelineStatistics = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_HEAP_TYPE::D3D12_QUERY_HEAP_TYPE_SO_STATISTICS"]/*' />
	/// <unmanaged>D3D12_QUERY_HEAP_TYPE_SO_STATISTICS</unmanaged>
	SOStatistics = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_HEAP_TYPE::D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS"]/*' />
	/// <unmanaged>D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS</unmanaged>
	VideoDecodeStatistics = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_HEAP_TYPE::D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP"]/*' />
	/// <unmanaged>D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP</unmanaged>
	CopyQueueTimestamp = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_HEAP_TYPE::D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS1"]/*' />
	/// <unmanaged>D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS1</unmanaged>
	PipelineStatistics1 = 7,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_TYPE"]/*' />
/// <unmanaged>D3D12_QUERY_TYPE</unmanaged>
public enum QueryType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_OCCLUSION"]/*' />
	/// <unmanaged>D3D12_QUERY_TYPE_OCCLUSION</unmanaged>
	Occlusion = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_BINARY_OCCLUSION"]/*' />
	/// <unmanaged>D3D12_QUERY_TYPE_BINARY_OCCLUSION</unmanaged>
	BinaryOcclusion = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_TIMESTAMP"]/*' />
	/// <unmanaged>D3D12_QUERY_TYPE_TIMESTAMP</unmanaged>
	Timestamp = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_PIPELINE_STATISTICS"]/*' />
	/// <unmanaged>D3D12_QUERY_TYPE_PIPELINE_STATISTICS</unmanaged>
	PipelineStatistics = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0"]/*' />
	/// <unmanaged>D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0</unmanaged>
	SOStatisticsStream0 = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1"]/*' />
	/// <unmanaged>D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1</unmanaged>
	SOStatisticsStream1 = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2"]/*' />
	/// <unmanaged>D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2</unmanaged>
	SOStatisticsStream2 = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3"]/*' />
	/// <unmanaged>D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3</unmanaged>
	SOStatisticsStream3 = 7,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS"]/*' />
	/// <unmanaged>D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS</unmanaged>
	VideoDecodeStatistics = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_PIPELINE_STATISTICS1"]/*' />
	/// <unmanaged>D3D12_QUERY_TYPE_PIPELINE_STATISTICS1</unmanaged>
	PipelineStatistics1 = 10,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PREDICATION_OP"]/*' />
/// <unmanaged>D3D12_PREDICATION_OP</unmanaged>
public enum PredicationOp : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PREDICATION_OP::D3D12_PREDICATION_OP_EQUAL_ZERO"]/*' />
	/// <unmanaged>D3D12_PREDICATION_OP_EQUAL_ZERO</unmanaged>
	EqualZero = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PREDICATION_OP::D3D12_PREDICATION_OP_NOT_EQUAL_ZERO"]/*' />
	/// <unmanaged>D3D12_PREDICATION_OP_NOT_EQUAL_ZERO</unmanaged>
	NotEqualZero = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDIRECT_ARGUMENT_TYPE"]/*' />
/// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE</unmanaged>
public enum IndirectArgumentType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_DRAW"]/*' />
	/// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_DRAW</unmanaged>
	Draw = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED"]/*' />
	/// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED</unmanaged>
	DrawIndexed = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH"]/*' />
	/// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH</unmanaged>
	Dispatch = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW"]/*' />
	/// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW</unmanaged>
	VertexBufferView = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW"]/*' />
	/// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW</unmanaged>
	IndexBufferView = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT"]/*' />
	/// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT</unmanaged>
	Constant = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW"]/*' />
	/// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW</unmanaged>
	ConstantBufferView = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW"]/*' />
	/// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW</unmanaged>
	ShaderResourceView = 7,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW"]/*' />
	/// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW</unmanaged>
	UnorderedAccessView = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_RAYS"]/*' />
	/// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_RAYS</unmanaged>
	DispatchRays = 9,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_MESH"]/*' />
	/// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_MESH</unmanaged>
	DispatchMesh = 10,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_WRITEBUFFERIMMEDIATE_MODE"]/*' />
/// <unmanaged>D3D12_WRITEBUFFERIMMEDIATE_MODE</unmanaged>
public enum WritebufferimmediateMode : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_WRITEBUFFERIMMEDIATE_MODE::D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT"]/*' />
	/// <unmanaged>D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT</unmanaged>
	Default = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_WRITEBUFFERIMMEDIATE_MODE::D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN"]/*' />
	/// <unmanaged>D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN</unmanaged>
	MarkerIn = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_WRITEBUFFERIMMEDIATE_MODE::D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT"]/*' />
	/// <unmanaged>D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT</unmanaged>
	MarkerOut = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MULTIPLE_FENCE_WAIT_FLAGS"]/*' />
/// <unmanaged>D3D12_MULTIPLE_FENCE_WAIT_FLAGS</unmanaged>
[Flags]
public enum MultipleFenceWaitFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MULTIPLE_FENCE_WAIT_FLAGS::D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MULTIPLE_FENCE_WAIT_FLAGS::D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY"]/*' />
	/// <unmanaged>D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY</unmanaged>
	Any = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MULTIPLE_FENCE_WAIT_FLAGS::D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL"]/*' />
	/// <unmanaged>D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL</unmanaged>
	All = 0,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESIDENCY_PRIORITY"]/*' />
/// <unmanaged>D3D12_RESIDENCY_PRIORITY</unmanaged>
public enum ResidencyPriority : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESIDENCY_PRIORITY::D3D12_RESIDENCY_PRIORITY_MINIMUM"]/*' />
	/// <unmanaged>D3D12_RESIDENCY_PRIORITY_MINIMUM</unmanaged>
	Minimum = 671088640,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESIDENCY_PRIORITY::D3D12_RESIDENCY_PRIORITY_LOW"]/*' />
	/// <unmanaged>D3D12_RESIDENCY_PRIORITY_LOW</unmanaged>
	Low = 1342177280,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESIDENCY_PRIORITY::D3D12_RESIDENCY_PRIORITY_NORMAL"]/*' />
	/// <unmanaged>D3D12_RESIDENCY_PRIORITY_NORMAL</unmanaged>
	Normal = 2013265920,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESIDENCY_PRIORITY::D3D12_RESIDENCY_PRIORITY_HIGH"]/*' />
	/// <unmanaged>D3D12_RESIDENCY_PRIORITY_HIGH</unmanaged>
	High = -1610547200,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESIDENCY_PRIORITY::D3D12_RESIDENCY_PRIORITY_MAXIMUM"]/*' />
	/// <unmanaged>D3D12_RESIDENCY_PRIORITY_MAXIMUM</unmanaged>
	Maximum = -939524096,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESIDENCY_FLAGS"]/*' />
/// <unmanaged>D3D12_RESIDENCY_FLAGS</unmanaged>
[Flags]
public enum ResidencyFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESIDENCY_FLAGS::D3D12_RESIDENCY_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_RESIDENCY_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESIDENCY_FLAGS::D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET"]/*' />
	/// <unmanaged>D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET</unmanaged>
	DenyOverbudget = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_FLAGS"]/*' />
/// <unmanaged>D3D12_COMMAND_LIST_FLAGS</unmanaged>
[Flags]
public enum CommandListFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_LIST_FLAGS::D3D12_COMMAND_LIST_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_COMMAND_LIST_FLAG_NONE</unmanaged>
	None = 0,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_POOL_FLAGS"]/*' />
/// <unmanaged>D3D12_COMMAND_POOL_FLAGS</unmanaged>
[Flags]
public enum CommandPoolFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_POOL_FLAGS::D3D12_COMMAND_POOL_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_COMMAND_POOL_FLAG_NONE</unmanaged>
	None = 0,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_RECORDER_FLAGS"]/*' />
/// <unmanaged>D3D12_COMMAND_RECORDER_FLAGS</unmanaged>
[Flags]
public enum CommandRecorderFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_RECORDER_FLAGS::D3D12_COMMAND_RECORDER_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_COMMAND_RECORDER_FLAG_NONE</unmanaged>
	None = 0,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROTECTED_SESSION_STATUS"]/*' />
/// <unmanaged>D3D12_PROTECTED_SESSION_STATUS</unmanaged>
public enum ProtectedSessionStatus : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROTECTED_SESSION_STATUS::D3D12_PROTECTED_SESSION_STATUS_OK"]/*' />
	/// <unmanaged>D3D12_PROTECTED_SESSION_STATUS_OK</unmanaged>
	Ok = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROTECTED_SESSION_STATUS::D3D12_PROTECTED_SESSION_STATUS_INVALID"]/*' />
	/// <unmanaged>D3D12_PROTECTED_SESSION_STATUS_INVALID</unmanaged>
	Invalid = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS"]/*' />
/// <unmanaged>D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS</unmanaged>
[Flags]
public enum ProtectedResourceSessionSupportFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS::D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS::D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED</unmanaged>
	Supported = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROTECTED_RESOURCE_SESSION_FLAGS"]/*' />
/// <unmanaged>D3D12_PROTECTED_RESOURCE_SESSION_FLAGS</unmanaged>
[Flags]
public enum ProtectedResourceSessionFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROTECTED_RESOURCE_SESSION_FLAGS::D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE</unmanaged>
	None = 0,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LIFETIME_STATE"]/*' />
/// <unmanaged>D3D12_LIFETIME_STATE</unmanaged>
public enum LifetimeState : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LIFETIME_STATE::D3D12_LIFETIME_STATE_IN_USE"]/*' />
	/// <unmanaged>D3D12_LIFETIME_STATE_IN_USE</unmanaged>
	InUse = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LIFETIME_STATE::D3D12_LIFETIME_STATE_NOT_IN_USE"]/*' />
	/// <unmanaged>D3D12_LIFETIME_STATE_NOT_IN_USE</unmanaged>
	NotInUse = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_TYPE"]/*' />
/// <unmanaged>D3D12_META_COMMAND_PARAMETER_TYPE</unmanaged>
public enum MetaCommandParameterType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_TYPE::D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT"]/*' />
	/// <unmanaged>D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT</unmanaged>
	Float = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_TYPE::D3D12_META_COMMAND_PARAMETER_TYPE_UINT64"]/*' />
	/// <unmanaged>D3D12_META_COMMAND_PARAMETER_TYPE_UINT64</unmanaged>
	Uint64 = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_TYPE::D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS"]/*' />
	/// <unmanaged>D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS</unmanaged>
	GpuVirtualAddress = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_TYPE::D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV"]/*' />
	/// <unmanaged>D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV</unmanaged>
	CpuDescriptorHandleHeapTypeCbvSrvUav = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_TYPE::D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV"]/*' />
	/// <unmanaged>D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV</unmanaged>
	GpuDescriptorHandleHeapTypeCbvSrvUav = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_FLAGS"]/*' />
/// <unmanaged>D3D12_META_COMMAND_PARAMETER_FLAGS</unmanaged>
[Flags]
public enum MetaCommandParameterFlags : uint
{
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_FLAGS::D3D12_META_COMMAND_PARAMETER_FLAG_INPUT"]/*' />
	/// <unmanaged>D3D12_META_COMMAND_PARAMETER_FLAG_INPUT</unmanaged>
	Input = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_FLAGS::D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT"]/*' />
	/// <unmanaged>D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT</unmanaged>
	Output = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_STAGE"]/*' />
/// <unmanaged>D3D12_META_COMMAND_PARAMETER_STAGE</unmanaged>
public enum MetaCommandParameterStage : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_STAGE::D3D12_META_COMMAND_PARAMETER_STAGE_CREATION"]/*' />
	/// <unmanaged>D3D12_META_COMMAND_PARAMETER_STAGE_CREATION</unmanaged>
	Creation = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_STAGE::D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION"]/*' />
	/// <unmanaged>D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION</unmanaged>
	Initialization = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_STAGE::D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION"]/*' />
	/// <unmanaged>D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION</unmanaged>
	Execution = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES"]/*' />
/// <unmanaged>D3D12_GRAPHICS_STATES</unmanaged>
[Flags]
public enum GraphicsStates : uint
{
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_NONE"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_NONE</unmanaged>
	D3D12_GRAPHICS_STATE_NONE = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS</unmanaged>
	D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER</unmanaged>
	D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY</unmanaged>
	D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP</unmanaged>
	D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE</unmanaged>
	D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE = 16,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE</unmanaged>
	D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE = 32,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_RS_VIEWPORTS"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_RS_VIEWPORTS</unmanaged>
	D3D12_GRAPHICS_STATE_RS_VIEWPORTS = 64,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS</unmanaged>
	D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS = 128,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_PREDICATION"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_PREDICATION</unmanaged>
	D3D12_GRAPHICS_STATE_PREDICATION = 256,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS</unmanaged>
	D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS = 512,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_OM_STENCIL_REF"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_OM_STENCIL_REF</unmanaged>
	D3D12_GRAPHICS_STATE_OM_STENCIL_REF = 1024,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR</unmanaged>
	D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR = 2048,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_PIPELINE_STATE"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_PIPELINE_STATE</unmanaged>
	D3D12_GRAPHICS_STATE_PIPELINE_STATE = 4096,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_SO_TARGETS"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_SO_TARGETS</unmanaged>
	D3D12_GRAPHICS_STATE_SO_TARGETS = 8192,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS</unmanaged>
	D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS = 16384,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS</unmanaged>
	D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS = 32768,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK"]/*' />
	/// <unmanaged>D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK</unmanaged>
	D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK = 65536,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT_TYPE"]/*' />
/// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE</unmanaged>
public enum StateSubobjectType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG"]/*' />
	/// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG</unmanaged>
	StateObjectConfig = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE"]/*' />
	/// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE</unmanaged>
	GlobalRootSignature = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE"]/*' />
	/// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE</unmanaged>
	LocalRootSignature = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK"]/*' />
	/// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK</unmanaged>
	NodeMask = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY"]/*' />
	/// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY</unmanaged>
	DxilLibrary = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION"]/*' />
	/// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION</unmanaged>
	ExistingCollection = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION"]/*' />
	/// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION</unmanaged>
	SubobjectToExportsAssociation = 7,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION"]/*' />
	/// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION</unmanaged>
	DxilSubobjectToExportsAssociation = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG"]/*' />
	/// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG</unmanaged>
	RaytracingShaderConfig = 9,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG"]/*' />
	/// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG</unmanaged>
	RaytracingPipelineConfig = 10,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP"]/*' />
	/// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP</unmanaged>
	HitGroup = 11,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG1"]/*' />
	/// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG1</unmanaged>
	RaytracingPipelineConfig1 = 12,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID"]/*' />
	/// <unmanaged>D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID</unmanaged>
	MaxValid = 13,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_OBJECT_FLAGS"]/*' />
/// <unmanaged>D3D12_STATE_OBJECT_FLAGS</unmanaged>
[Flags]
public enum StateObjectFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_OBJECT_FLAGS::D3D12_STATE_OBJECT_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_STATE_OBJECT_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_OBJECT_FLAGS::D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS"]/*' />
	/// <unmanaged>D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS</unmanaged>
	AllowLocalDependenciesOnExternalDefinitions = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_OBJECT_FLAGS::D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS"]/*' />
	/// <unmanaged>D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS</unmanaged>
	AllowExternalDependenciesOnLocalDefinitions = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_OBJECT_FLAGS::D3D12_STATE_OBJECT_FLAG_ALLOW_STATE_OBJECT_ADDITIONS"]/*' />
	/// <unmanaged>D3D12_STATE_OBJECT_FLAG_ALLOW_STATE_OBJECT_ADDITIONS</unmanaged>
	AllowStateObjectAdditions = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_EXPORT_FLAGS"]/*' />
/// <unmanaged>D3D12_EXPORT_FLAGS</unmanaged>
[Flags]
public enum ExportFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_EXPORT_FLAGS::D3D12_EXPORT_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_EXPORT_FLAG_NONE</unmanaged>
	None = 0,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HIT_GROUP_TYPE"]/*' />
/// <unmanaged>D3D12_HIT_GROUP_TYPE</unmanaged>
public enum HitGroupType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HIT_GROUP_TYPE::D3D12_HIT_GROUP_TYPE_TRIANGLES"]/*' />
	/// <unmanaged>D3D12_HIT_GROUP_TYPE_TRIANGLES</unmanaged>
	Triangles = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HIT_GROUP_TYPE::D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE"]/*' />
	/// <unmanaged>D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE</unmanaged>
	ProceduralPrimitive = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_PIPELINE_FLAGS"]/*' />
/// <unmanaged>D3D12_RAYTRACING_PIPELINE_FLAGS</unmanaged>
[Flags]
public enum RaytracingPipelineFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_PIPELINE_FLAGS::D3D12_RAYTRACING_PIPELINE_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_PIPELINE_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_PIPELINE_FLAGS::D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_TRIANGLES"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_TRIANGLES</unmanaged>
	SkipTriangles = 256,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_PIPELINE_FLAGS::D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_PROCEDURAL_PRIMITIVES"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_PROCEDURAL_PRIMITIVES</unmanaged>
	SkipProceduralPrimitives = 512,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_OBJECT_TYPE"]/*' />
/// <unmanaged>D3D12_STATE_OBJECT_TYPE</unmanaged>
public enum StateObjectType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_OBJECT_TYPE::D3D12_STATE_OBJECT_TYPE_COLLECTION"]/*' />
	/// <unmanaged>D3D12_STATE_OBJECT_TYPE_COLLECTION</unmanaged>
	Collection = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_OBJECT_TYPE::D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE"]/*' />
	/// <unmanaged>D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE</unmanaged>
	RaytracingPipeline = 3,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_FLAGS"]/*' />
/// <unmanaged>D3D12_RAYTRACING_GEOMETRY_FLAGS</unmanaged>
[Flags]
public enum RaytracingGeometryFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_FLAGS::D3D12_RAYTRACING_GEOMETRY_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_GEOMETRY_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_FLAGS::D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE</unmanaged>
	Opaque = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_FLAGS::D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION</unmanaged>
	NoDuplicateAnyhitInvocation = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_TYPE"]/*' />
/// <unmanaged>D3D12_RAYTRACING_GEOMETRY_TYPE</unmanaged>
public enum RaytracingGeometryType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_TYPE::D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES</unmanaged>
	Triangles = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_TYPE::D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS</unmanaged>
	ProceduralPrimitiveAabbs = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_INSTANCE_FLAGS"]/*' />
/// <unmanaged>D3D12_RAYTRACING_INSTANCE_FLAGS</unmanaged>
[Flags]
public enum RaytracingInstanceFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_INSTANCE_FLAGS::D3D12_RAYTRACING_INSTANCE_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_INSTANCE_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_INSTANCE_FLAGS::D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE</unmanaged>
	TriangleCullDisable = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_INSTANCE_FLAGS::D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE</unmanaged>
	TriangleFrontCounterclockwise = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_INSTANCE_FLAGS::D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE</unmanaged>
	ForceOpaque = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_INSTANCE_FLAGS::D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE</unmanaged>
	ForceNonOpaque = 8,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS"]/*' />
/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS</unmanaged>
[Flags]
public enum RaytracingAccelerationStructureBuildFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE</unmanaged>
	AllowUpdate = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION</unmanaged>
	AllowCompaction = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE</unmanaged>
	PreferFastTrace = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD</unmanaged>
	PreferFastBuild = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY</unmanaged>
	MinimizeMemory = 16,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE</unmanaged>
	PerformUpdate = 32,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE"]/*' />
/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE</unmanaged>
public enum RaytracingAccelerationStructureCopyMode : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE</unmanaged>
	Clone = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT</unmanaged>
	Compact = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS</unmanaged>
	VisualizationDecodeForTools = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE</unmanaged>
	Serialize = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE</unmanaged>
	Deserialize = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE"]/*' />
/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE</unmanaged>
public enum RaytracingAccelerationStructureType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL</unmanaged>
	TopLevel = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL</unmanaged>
	BottomLevel = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ELEMENTS_LAYOUT"]/*' />
/// <unmanaged>D3D12_ELEMENTS_LAYOUT</unmanaged>
public enum ElementsLayout : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ELEMENTS_LAYOUT::D3D12_ELEMENTS_LAYOUT_ARRAY"]/*' />
	/// <unmanaged>D3D12_ELEMENTS_LAYOUT_ARRAY</unmanaged>
	Array = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ELEMENTS_LAYOUT::D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS"]/*' />
	/// <unmanaged>D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS</unmanaged>
	ArrayOfPointers = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE"]/*' />
/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE</unmanaged>
public enum RaytracingAccelerationStructurePostbuildInfoType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE</unmanaged>
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION</unmanaged>
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION</unmanaged>
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE"]/*' />
	/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE</unmanaged>
	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE = 3,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SERIALIZED_DATA_TYPE"]/*' />
/// <unmanaged>D3D12_SERIALIZED_DATA_TYPE</unmanaged>
public enum SerializedDataType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SERIALIZED_DATA_TYPE::D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE"]/*' />
	/// <unmanaged>D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE</unmanaged>
	D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE = 0,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS"]/*' />
/// <unmanaged>D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS</unmanaged>
public enum DriverMatchingIdentifierStatus : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS::D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE"]/*' />
	/// <unmanaged>D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE</unmanaged>
	D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS::D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE"]/*' />
	/// <unmanaged>D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE</unmanaged>
	D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS::D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED"]/*' />
	/// <unmanaged>D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED</unmanaged>
	D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS::D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION"]/*' />
	/// <unmanaged>D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION</unmanaged>
	D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS::D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE"]/*' />
	/// <unmanaged>D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE</unmanaged>
	D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAY_FLAGS"]/*' />
/// <unmanaged>D3D12_RAY_FLAGS</unmanaged>
[Flags]
public enum RayFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_RAY_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_FORCE_OPAQUE"]/*' />
	/// <unmanaged>D3D12_RAY_FLAG_FORCE_OPAQUE</unmanaged>
	ForceOpaque = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_FORCE_NON_OPAQUE"]/*' />
	/// <unmanaged>D3D12_RAY_FLAG_FORCE_NON_OPAQUE</unmanaged>
	ForceNonOpaque = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH"]/*' />
	/// <unmanaged>D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH</unmanaged>
	AcceptFirstHitAndEndSearch = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER"]/*' />
	/// <unmanaged>D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER</unmanaged>
	SkipClosestHitShader = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES"]/*' />
	/// <unmanaged>D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES</unmanaged>
	CullBackFacingTriangles = 16,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES"]/*' />
	/// <unmanaged>D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES</unmanaged>
	CullFrontFacingTriangles = 32,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_CULL_OPAQUE"]/*' />
	/// <unmanaged>D3D12_RAY_FLAG_CULL_OPAQUE</unmanaged>
	CullOpaque = 64,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_CULL_NON_OPAQUE"]/*' />
	/// <unmanaged>D3D12_RAY_FLAG_CULL_NON_OPAQUE</unmanaged>
	CullNonOpaque = 128,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_SKIP_TRIANGLES"]/*' />
	/// <unmanaged>D3D12_RAY_FLAG_SKIP_TRIANGLES</unmanaged>
	SkipTriangles = 256,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES"]/*' />
	/// <unmanaged>D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES</unmanaged>
	SkipProceduralPrimitives = 512,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HIT_KIND"]/*' />
/// <unmanaged>D3D12_HIT_KIND</unmanaged>
public enum HitKind : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HIT_KIND::D3D12_HIT_KIND_TRIANGLE_FRONT_FACE"]/*' />
	/// <unmanaged>D3D12_HIT_KIND_TRIANGLE_FRONT_FACE</unmanaged>
	TriangleFrontFace = 254,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HIT_KIND::D3D12_HIT_KIND_TRIANGLE_BACK_FACE"]/*' />
	/// <unmanaged>D3D12_HIT_KIND_TRIANGLE_BACK_FACE</unmanaged>
	TriangleBackFace = 255,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP"]/*' />
/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP</unmanaged>
public enum AutoBreadcrumbOp : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_SETMARKER"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_SETMARKER</unmanaged>
	Setmarker = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT</unmanaged>
	Beginevent = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_ENDEVENT"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_ENDEVENT</unmanaged>
	Endevent = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED</unmanaged>
	Drawinstanced = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED</unmanaged>
	Drawindexedinstanced = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT</unmanaged>
	Executeindirect = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_DISPATCH"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_DISPATCH</unmanaged>
	Dispatch = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION</unmanaged>
	Copybufferregion = 7,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION</unmanaged>
	Copytextureregion = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE</unmanaged>
	Copyresource = 9,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_COPYTILES"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_COPYTILES</unmanaged>
	Copytiles = 10,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE</unmanaged>
	Resolvesubresource = 11,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW</unmanaged>
	Clearrendertargetview = 12,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW</unmanaged>
	Clearunorderedaccessview = 13,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW</unmanaged>
	Cleardepthstencilview = 14,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER</unmanaged>
	Resourcebarrier = 15,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE</unmanaged>
	Executebundle = 16,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_PRESENT"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_PRESENT</unmanaged>
	Present = 17,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA</unmanaged>
	Resolvequerydata = 18,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION</unmanaged>
	Beginsubmission = 19,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION</unmanaged>
	Endsubmission = 20,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME</unmanaged>
	Decodeframe = 21,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES</unmanaged>
	Processframes = 22,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT</unmanaged>
	Atomiccopybufferuint = 23,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64</unmanaged>
	Atomiccopybufferuint64 = 24,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION</unmanaged>
	Resolvesubresourceregion = 25,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE</unmanaged>
	Writebufferimmediate = 26,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1</unmanaged>
	Decodeframe1 = 27,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION</unmanaged>
	Setprotectedresourcesession = 28,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2</unmanaged>
	Decodeframe2 = 29,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1</unmanaged>
	Processframes1 = 30,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE</unmanaged>
	Buildraytracingaccelerationstructure = 31,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO</unmanaged>
	Emitraytracingaccelerationstructurepostbuildinfo = 32,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE</unmanaged>
	Copyraytracingaccelerationstructure = 33,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS</unmanaged>
	Dispatchrays = 34,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND</unmanaged>
	Initializemetacommand = 35,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND</unmanaged>
	Executemetacommand = 36,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION</unmanaged>
	Estimatemotion = 37,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP</unmanaged>
	Resolvemotionvectorheap = 38,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1</unmanaged>
	Setpipelinestate1 = 39,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_INITIALIZEEXTENSIONCOMMAND"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_INITIALIZEEXTENSIONCOMMAND</unmanaged>
	Initializeextensioncommand = 40,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_EXECUTEEXTENSIONCOMMAND"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_EXECUTEEXTENSIONCOMMAND</unmanaged>
	Executeextensioncommand = 41,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_DISPATCHMESH"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_DISPATCHMESH</unmanaged>
	Dispatchmesh = 42,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_ENCODEFRAME"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_ENCODEFRAME</unmanaged>
	Encodeframe = 43,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_OP::D3D12_AUTO_BREADCRUMB_OP_RESOLVEENCODEROUTPUTMETADATA"]/*' />
	/// <unmanaged>D3D12_AUTO_BREADCRUMB_OP_RESOLVEENCODEROUTPUTMETADATA</unmanaged>
	Resolveencoderoutputmetadata = 44,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_VERSION"]/*' />
/// <unmanaged>D3D12_DRED_VERSION</unmanaged>
public enum DredVersion : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_VERSION::D3D12_DRED_VERSION_1_0"]/*' />
	/// <unmanaged>D3D12_DRED_VERSION_1_0</unmanaged>
	_10 = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_VERSION::D3D12_DRED_VERSION_1_1"]/*' />
	/// <unmanaged>D3D12_DRED_VERSION_1_1</unmanaged>
	_11 = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_VERSION::D3D12_DRED_VERSION_1_2"]/*' />
	/// <unmanaged>D3D12_DRED_VERSION_1_2</unmanaged>
	_12 = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_VERSION::D3D12_DRED_VERSION_1_3"]/*' />
	/// <unmanaged>D3D12_DRED_VERSION_1_3</unmanaged>
	_13 = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_FLAGS"]/*' />
/// <unmanaged>D3D12_DRED_FLAGS</unmanaged>
[Flags]
public enum DredFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_FLAGS::D3D12_DRED_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_DRED_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_FLAGS::D3D12_DRED_FLAG_FORCE_ENABLE"]/*' />
	/// <unmanaged>D3D12_DRED_FLAG_FORCE_ENABLE</unmanaged>
	ForceEnable = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_FLAGS::D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS"]/*' />
	/// <unmanaged>D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS</unmanaged>
	DisableAutobreadcrumbs = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ENABLEMENT"]/*' />
/// <unmanaged>D3D12_DRED_ENABLEMENT</unmanaged>
public enum DredEnablement : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ENABLEMENT::D3D12_DRED_ENABLEMENT_SYSTEM_CONTROLLED"]/*' />
	/// <unmanaged>D3D12_DRED_ENABLEMENT_SYSTEM_CONTROLLED</unmanaged>
	SystemControlled = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ENABLEMENT::D3D12_DRED_ENABLEMENT_FORCED_OFF"]/*' />
	/// <unmanaged>D3D12_DRED_ENABLEMENT_FORCED_OFF</unmanaged>
	ForcedOff = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ENABLEMENT::D3D12_DRED_ENABLEMENT_FORCED_ON"]/*' />
	/// <unmanaged>D3D12_DRED_ENABLEMENT_FORCED_ON</unmanaged>
	ForcedOn = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE"]/*' />
/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE</unmanaged>
public enum DredAllocationType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_COMMAND_QUEUE"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_COMMAND_QUEUE</unmanaged>
	CommandQueue = 19,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_COMMAND_ALLOCATOR"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_COMMAND_ALLOCATOR</unmanaged>
	CommandAllocator = 20,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_PIPELINE_STATE"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_PIPELINE_STATE</unmanaged>
	PipelineState = 21,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_COMMAND_LIST"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_COMMAND_LIST</unmanaged>
	CommandList = 22,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_FENCE"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_FENCE</unmanaged>
	Fence = 23,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_DESCRIPTOR_HEAP"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_DESCRIPTOR_HEAP</unmanaged>
	DescriptorHeap = 24,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_HEAP"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_HEAP</unmanaged>
	Heap = 25,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_QUERY_HEAP"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_QUERY_HEAP</unmanaged>
	QueryHeap = 27,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_COMMAND_SIGNATURE"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_COMMAND_SIGNATURE</unmanaged>
	CommandSignature = 28,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_PIPELINE_LIBRARY"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_PIPELINE_LIBRARY</unmanaged>
	PipelineLibrary = 29,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER</unmanaged>
	VideoDecoder = 30,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_VIDEO_PROCESSOR"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_VIDEO_PROCESSOR</unmanaged>
	VideoProcessor = 32,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_RESOURCE"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_RESOURCE</unmanaged>
	Resource = 34,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_PASS"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_PASS</unmanaged>
	Pass = 35,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSION"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSION</unmanaged>
	Cryptosession = 36,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSIONPOLICY"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSIONPOLICY</unmanaged>
	Cryptosessionpolicy = 37,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_PROTECTEDRESOURCESESSION"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_PROTECTEDRESOURCESESSION</unmanaged>
	Protectedresourcesession = 38,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER_HEAP"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER_HEAP</unmanaged>
	VideoDecoderHeap = 39,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_COMMAND_POOL"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_COMMAND_POOL</unmanaged>
	CommandPool = 40,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_COMMAND_RECORDER"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_COMMAND_RECORDER</unmanaged>
	CommandRecorder = 41,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_STATE_OBJECT"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_STATE_OBJECT</unmanaged>
	StateObject = 42,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_METACOMMAND"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_METACOMMAND</unmanaged>
	Metacommand = 43,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_SCHEDULINGGROUP"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_SCHEDULINGGROUP</unmanaged>
	Schedulinggroup = 44,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_ESTIMATOR"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_ESTIMATOR</unmanaged>
	VideoMotionEstimator = 45,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_VECTOR_HEAP"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_VECTOR_HEAP</unmanaged>
	VideoMotionVectorHeap = 46,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_VIDEO_EXTENSION_COMMAND"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_VIDEO_EXTENSION_COMMAND</unmanaged>
	VideoExtensionCommand = 47,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER</unmanaged>
	VideoEncoder = 48,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER_HEAP"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER_HEAP</unmanaged>
	VideoEncoderHeap = 49,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_TYPE::D3D12_DRED_ALLOCATION_TYPE_INVALID"]/*' />
	/// <unmanaged>D3D12_DRED_ALLOCATION_TYPE_INVALID</unmanaged>
	Invalid = -1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_PAGE_FAULT_FLAGS"]/*' />
/// <unmanaged>D3D12_DRED_PAGE_FAULT_FLAGS</unmanaged>
[Flags]
public enum DredPageFaultFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_PAGE_FAULT_FLAGS::D3D12_DRED_PAGE_FAULT_FLAGS_NONE"]/*' />
	/// <unmanaged>D3D12_DRED_PAGE_FAULT_FLAGS_NONE</unmanaged>
	None = 0,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_DEVICE_STATE"]/*' />
/// <unmanaged>D3D12_DRED_DEVICE_STATE</unmanaged>
public enum DredDeviceState : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_DEVICE_STATE::D3D12_DRED_DEVICE_STATE_UNKNOWN"]/*' />
	/// <unmanaged>D3D12_DRED_DEVICE_STATE_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_DEVICE_STATE::D3D12_DRED_DEVICE_STATE_HUNG"]/*' />
	/// <unmanaged>D3D12_DRED_DEVICE_STATE_HUNG</unmanaged>
	Hung = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_DEVICE_STATE::D3D12_DRED_DEVICE_STATE_FAULT"]/*' />
	/// <unmanaged>D3D12_DRED_DEVICE_STATE_FAULT</unmanaged>
	Fault = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_DEVICE_STATE::D3D12_DRED_DEVICE_STATE_PAGEFAULT"]/*' />
	/// <unmanaged>D3D12_DRED_DEVICE_STATE_PAGEFAULT</unmanaged>
	Pagefault = 7,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BACKGROUND_PROCESSING_MODE"]/*' />
/// <unmanaged>D3D12_BACKGROUND_PROCESSING_MODE</unmanaged>
public enum BackgroundProcessingMode : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BACKGROUND_PROCESSING_MODE::D3D12_BACKGROUND_PROCESSING_MODE_ALLOWED"]/*' />
	/// <unmanaged>D3D12_BACKGROUND_PROCESSING_MODE_ALLOWED</unmanaged>
	Allowed = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BACKGROUND_PROCESSING_MODE::D3D12_BACKGROUND_PROCESSING_MODE_ALLOW_INTRUSIVE_MEASUREMENTS"]/*' />
	/// <unmanaged>D3D12_BACKGROUND_PROCESSING_MODE_ALLOW_INTRUSIVE_MEASUREMENTS</unmanaged>
	AllowIntrusiveMeasurements = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BACKGROUND_PROCESSING_MODE::D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_BACKGROUND_WORK"]/*' />
	/// <unmanaged>D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_BACKGROUND_WORK</unmanaged>
	DisableBackgroundWork = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BACKGROUND_PROCESSING_MODE::D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_PROFILING_BY_SYSTEM"]/*' />
	/// <unmanaged>D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_PROFILING_BY_SYSTEM</unmanaged>
	DisableProfilingBySystem = 3,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MEASUREMENTS_ACTION"]/*' />
/// <unmanaged>D3D12_MEASUREMENTS_ACTION</unmanaged>
public enum MeasurementsAction : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MEASUREMENTS_ACTION::D3D12_MEASUREMENTS_ACTION_KEEP_ALL"]/*' />
	/// <unmanaged>D3D12_MEASUREMENTS_ACTION_KEEP_ALL</unmanaged>
	KeepAll = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MEASUREMENTS_ACTION::D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS"]/*' />
	/// <unmanaged>D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS</unmanaged>
	CommitResults = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MEASUREMENTS_ACTION::D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS_HIGH_PRIORITY"]/*' />
	/// <unmanaged>D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS_HIGH_PRIORITY</unmanaged>
	CommitResultsHighPriority = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MEASUREMENTS_ACTION::D3D12_MEASUREMENTS_ACTION_DISCARD_PREVIOUS"]/*' />
	/// <unmanaged>D3D12_MEASUREMENTS_ACTION_DISCARD_PREVIOUS</unmanaged>
	DiscardPrevious = 3,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE"]/*' />
/// <unmanaged>D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE</unmanaged>
public enum RenderPassBeginningAccessType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE::D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD"]/*' />
	/// <unmanaged>D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD</unmanaged>
	Discard = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE::D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE"]/*' />
	/// <unmanaged>D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE</unmanaged>
	Preserve = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE::D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR"]/*' />
	/// <unmanaged>D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR</unmanaged>
	Clear = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE::D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS"]/*' />
	/// <unmanaged>D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS</unmanaged>
	NoAccess = 3,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_TYPE"]/*' />
/// <unmanaged>D3D12_RENDER_PASS_ENDING_ACCESS_TYPE</unmanaged>
public enum RenderPassEndingAccessType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_TYPE::D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD"]/*' />
	/// <unmanaged>D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD</unmanaged>
	Discard = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_TYPE::D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE"]/*' />
	/// <unmanaged>D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE</unmanaged>
	Preserve = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_TYPE::D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE"]/*' />
	/// <unmanaged>D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE</unmanaged>
	Resolve = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_TYPE::D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS"]/*' />
	/// <unmanaged>D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS</unmanaged>
	NoAccess = 3,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_FLAGS"]/*' />
/// <unmanaged>D3D12_RENDER_PASS_FLAGS</unmanaged>
[Flags]
public enum RenderPassFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_FLAGS::D3D12_RENDER_PASS_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_RENDER_PASS_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_FLAGS::D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES"]/*' />
	/// <unmanaged>D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES</unmanaged>
	AllowUavWrites = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_FLAGS::D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS"]/*' />
	/// <unmanaged>D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS</unmanaged>
	SuspendingPass = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_FLAGS::D3D12_RENDER_PASS_FLAG_RESUMING_PASS"]/*' />
	/// <unmanaged>D3D12_RENDER_PASS_FLAG_RESUMING_PASS</unmanaged>
	ResumingPass = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_MODE"]/*' />
/// <unmanaged>D3D12_SHADER_CACHE_MODE</unmanaged>
public enum ShaderCacheMode : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_MODE::D3D12_SHADER_CACHE_MODE_MEMORY"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_MODE_MEMORY</unmanaged>
	Memory = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_MODE::D3D12_SHADER_CACHE_MODE_DISK"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_MODE_DISK</unmanaged>
	Disk = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_FLAGS"]/*' />
/// <unmanaged>D3D12_SHADER_CACHE_FLAGS</unmanaged>
[Flags]
public enum ShaderCacheFlags : uint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_FLAGS::D3D12_SHADER_CACHE_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_FLAGS::D3D12_SHADER_CACHE_FLAG_DRIVER_VERSIONED"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_FLAG_DRIVER_VERSIONED</unmanaged>
	DriverVersioned = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_FLAGS::D3D12_SHADER_CACHE_FLAG_USE_WORKING_DIR"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_FLAG_USE_WORKING_DIR</unmanaged>
	UseWorkingDir = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_KIND_FLAGS"]/*' />
/// <unmanaged>D3D12_SHADER_CACHE_KIND_FLAGS</unmanaged>
[Flags]
public enum ShaderCacheKindFlags : uint
{
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_KIND_FLAGS::D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CACHE_FOR_DRIVER"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CACHE_FOR_DRIVER</unmanaged>
	ImplicitD3DCacheForDriver = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_KIND_FLAGS::D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CONVERSIONS"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CONVERSIONS</unmanaged>
	ImplicitD3DConversions = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_KIND_FLAGS::D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_DRIVER_MANAGED"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_DRIVER_MANAGED</unmanaged>
	ImplicitDriverManaged = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_KIND_FLAGS::D3D12_SHADER_CACHE_KIND_FLAG_APPLICATION_MANAGED"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_KIND_FLAG_APPLICATION_MANAGED</unmanaged>
	ApplicationManaged = 8,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_CONTROL_FLAGS"]/*' />
/// <unmanaged>D3D12_SHADER_CACHE_CONTROL_FLAGS</unmanaged>
[Flags]
public enum ShaderCacheControlFlags : uint
{
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_CONTROL_FLAGS::D3D12_SHADER_CACHE_CONTROL_FLAG_DISABLE"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_CONTROL_FLAG_DISABLE</unmanaged>
	Disable = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_CONTROL_FLAGS::D3D12_SHADER_CACHE_CONTROL_FLAG_ENABLE"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_CONTROL_FLAG_ENABLE</unmanaged>
	Enable = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_CONTROL_FLAGS::D3D12_SHADER_CACHE_CONTROL_FLAG_CLEAR"]/*' />
	/// <unmanaged>D3D12_SHADER_CACHE_CONTROL_FLAG_CLEAR</unmanaged>
	Clear = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_BASED_VALIDATION_FLAGS"]/*' />
/// <unmanaged>D3D12_GPU_BASED_VALIDATION_FLAGS</unmanaged>
[Flags]
public enum GpuBasedValidationFlags : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_BASED_VALIDATION_FLAGS::D3D12_GPU_BASED_VALIDATION_FLAGS_NONE"]/*' />
	/// <unmanaged>D3D12_GPU_BASED_VALIDATION_FLAGS_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_BASED_VALIDATION_FLAGS::D3D12_GPU_BASED_VALIDATION_FLAGS_DISABLE_STATE_TRACKING"]/*' />
	/// <unmanaged>D3D12_GPU_BASED_VALIDATION_FLAGS_DISABLE_STATE_TRACKING</unmanaged>
	DisableStateTracking = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RLDO_FLAGS"]/*' />
/// <unmanaged>D3D12_RLDO_FLAGS</unmanaged>
[Flags]
public enum RldoFlags : int
{
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RLDO_FLAGS::D3D12_RLDO_NONE"]/*' />
	/// <unmanaged>D3D12_RLDO_NONE</unmanaged>
	D3D12_RLDO_NONE = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RLDO_FLAGS::D3D12_RLDO_SUMMARY"]/*' />
	/// <unmanaged>D3D12_RLDO_SUMMARY</unmanaged>
	D3D12_RLDO_SUMMARY = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RLDO_FLAGS::D3D12_RLDO_DETAIL"]/*' />
	/// <unmanaged>D3D12_RLDO_DETAIL</unmanaged>
	D3D12_RLDO_DETAIL = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RLDO_FLAGS::D3D12_RLDO_IGNORE_INTERNAL"]/*' />
	/// <unmanaged>D3D12_RLDO_IGNORE_INTERNAL</unmanaged>
	D3D12_RLDO_IGNORE_INTERNAL = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_DEVICE_PARAMETER_TYPE"]/*' />
/// <unmanaged>D3D12_DEBUG_DEVICE_PARAMETER_TYPE</unmanaged>
public enum DebugDeviceParameterType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_DEVICE_PARAMETER_TYPE::D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS"]/*' />
	/// <unmanaged>D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS</unmanaged>
	D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_DEVICE_PARAMETER_TYPE::D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS"]/*' />
	/// <unmanaged>D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS</unmanaged>
	D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_DEVICE_PARAMETER_TYPE::D3D12_DEBUG_DEVICE_PARAMETER_GPU_SLOWDOWN_PERFORMANCE_FACTOR"]/*' />
	/// <unmanaged>D3D12_DEBUG_DEVICE_PARAMETER_GPU_SLOWDOWN_PERFORMANCE_FACTOR</unmanaged>
	D3D12_DEBUG_DEVICE_PARAMETER_GPU_SLOWDOWN_PERFORMANCE_FACTOR = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_FEATURE"]/*' />
/// <unmanaged>D3D12_DEBUG_FEATURE</unmanaged>
public enum DebugFeature : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_FEATURE::D3D12_DEBUG_FEATURE_NONE"]/*' />
	/// <unmanaged>D3D12_DEBUG_FEATURE_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_FEATURE::D3D12_DEBUG_FEATURE_ALLOW_BEHAVIOR_CHANGING_DEBUG_AIDS"]/*' />
	/// <unmanaged>D3D12_DEBUG_FEATURE_ALLOW_BEHAVIOR_CHANGING_DEBUG_AIDS</unmanaged>
	AllowBehaviorChangingDebugAids = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_FEATURE::D3D12_DEBUG_FEATURE_CONSERVATIVE_RESOURCE_STATE_TRACKING"]/*' />
	/// <unmanaged>D3D12_DEBUG_FEATURE_CONSERVATIVE_RESOURCE_STATE_TRACKING</unmanaged>
	ConservativeResourceStateTracking = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_FEATURE::D3D12_DEBUG_FEATURE_DISABLE_VIRTUALIZED_BUNDLES_VALIDATION"]/*' />
	/// <unmanaged>D3D12_DEBUG_FEATURE_DISABLE_VIRTUALIZED_BUNDLES_VALIDATION</unmanaged>
	DisableVirtualizedBundlesValidation = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_FEATURE::D3D12_DEBUG_FEATURE_EMULATE_WINDOWS7"]/*' />
	/// <unmanaged>D3D12_DEBUG_FEATURE_EMULATE_WINDOWS7</unmanaged>
	EmulateWindows7 = 8,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE"]/*' />
/// <unmanaged>D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE</unmanaged>
public enum GpuBasedValidationShaderPatchMode : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE::D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_NONE"]/*' />
	/// <unmanaged>D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE::D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_STATE_TRACKING_ONLY"]/*' />
	/// <unmanaged>D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_STATE_TRACKING_ONLY</unmanaged>
	StateTrackingOnly = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE::D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_UNGUARDED_VALIDATION"]/*' />
	/// <unmanaged>D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_UNGUARDED_VALIDATION</unmanaged>
	UnguardedValidation = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE::D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_GUARDED_VALIDATION"]/*' />
	/// <unmanaged>D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_GUARDED_VALIDATION</unmanaged>
	GuardedValidation = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE::NUM_D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODES"]/*' />
	/// <unmanaged>NUM_D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODES</unmanaged>
	NUM_D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODES = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS"]/*' />
/// <unmanaged>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS</unmanaged>
[Flags]
public enum GpuBasedValidationPipelineStateCreateFlags : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS::D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS::D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_TRACKING_ONLY_SHADERS"]/*' />
	/// <unmanaged>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_TRACKING_ONLY_SHADERS</unmanaged>
	FrontLoadCreateTrackingOnlyShaders = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS::D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_UNGUARDED_VALIDATION_SHADERS"]/*' />
	/// <unmanaged>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_UNGUARDED_VALIDATION_SHADERS</unmanaged>
	FrontLoadCreateUnguardedValidationShaders = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS::D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_GUARDED_VALIDATION_SHADERS"]/*' />
	/// <unmanaged>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_GUARDED_VALIDATION_SHADERS</unmanaged>
	FrontLoadCreateGuardedValidationShaders = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS::D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS_VALID_MASK"]/*' />
	/// <unmanaged>D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS_VALID_MASK</unmanaged>
	ValidMask = 7,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE"]/*' />
/// <unmanaged>D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE</unmanaged>
public enum DebugCommandListParameterType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE::D3D12_DEBUG_COMMAND_LIST_PARAMETER_GPU_BASED_VALIDATION_SETTINGS"]/*' />
	/// <unmanaged>D3D12_DEBUG_COMMAND_LIST_PARAMETER_GPU_BASED_VALIDATION_SETTINGS</unmanaged>
	D3D12_DEBUG_COMMAND_LIST_PARAMETER_GPU_BASED_VALIDATION_SETTINGS = 0,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_CATEGORY"]/*' />
/// <unmanaged>D3D12_MESSAGE_CATEGORY</unmanaged>
public enum MessageCategory : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_CATEGORY::D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED</unmanaged>
	ApplicationDefined = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_CATEGORY::D3D12_MESSAGE_CATEGORY_MISCELLANEOUS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_CATEGORY_MISCELLANEOUS</unmanaged>
	Miscellaneous = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_CATEGORY::D3D12_MESSAGE_CATEGORY_INITIALIZATION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_CATEGORY_INITIALIZATION</unmanaged>
	Initialization = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_CATEGORY::D3D12_MESSAGE_CATEGORY_CLEANUP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_CATEGORY_CLEANUP</unmanaged>
	Cleanup = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_CATEGORY::D3D12_MESSAGE_CATEGORY_COMPILATION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_CATEGORY_COMPILATION</unmanaged>
	Compilation = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_CATEGORY::D3D12_MESSAGE_CATEGORY_STATE_CREATION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_CATEGORY_STATE_CREATION</unmanaged>
	StateCreation = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_CATEGORY::D3D12_MESSAGE_CATEGORY_STATE_SETTING"]/*' />
	/// <unmanaged>D3D12_MESSAGE_CATEGORY_STATE_SETTING</unmanaged>
	StateSetting = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_CATEGORY::D3D12_MESSAGE_CATEGORY_STATE_GETTING"]/*' />
	/// <unmanaged>D3D12_MESSAGE_CATEGORY_STATE_GETTING</unmanaged>
	StateGetting = 7,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_CATEGORY::D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION</unmanaged>
	ResourceManipulation = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_CATEGORY::D3D12_MESSAGE_CATEGORY_EXECUTION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_CATEGORY_EXECUTION</unmanaged>
	Execution = 9,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_CATEGORY::D3D12_MESSAGE_CATEGORY_SHADER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_CATEGORY_SHADER</unmanaged>
	Shader = 10,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_SEVERITY"]/*' />
/// <unmanaged>D3D12_MESSAGE_SEVERITY</unmanaged>
public enum MessageSeverity : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_SEVERITY::D3D12_MESSAGE_SEVERITY_CORRUPTION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_SEVERITY_CORRUPTION</unmanaged>
	Corruption = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_SEVERITY::D3D12_MESSAGE_SEVERITY_ERROR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_SEVERITY_ERROR</unmanaged>
	Error = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_SEVERITY::D3D12_MESSAGE_SEVERITY_WARNING"]/*' />
	/// <unmanaged>D3D12_MESSAGE_SEVERITY_WARNING</unmanaged>
	Warning = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_SEVERITY::D3D12_MESSAGE_SEVERITY_INFO"]/*' />
	/// <unmanaged>D3D12_MESSAGE_SEVERITY_INFO</unmanaged>
	Info = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_SEVERITY::D3D12_MESSAGE_SEVERITY_MESSAGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_SEVERITY_MESSAGE</unmanaged>
	Message = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID"]/*' />
/// <unmanaged>D3D12_MESSAGE_ID</unmanaged>
public enum MessageId : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_UNKNOWN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_STRING_FROM_APPLICATION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_STRING_FROM_APPLICATION</unmanaged>
	StringFromApplication = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_THIS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_THIS</unmanaged>
	CorruptedThis = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_PARAMETER1"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER1</unmanaged>
	CorruptedParameter1 = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_PARAMETER2"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER2</unmanaged>
	CorruptedParameter2 = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_PARAMETER3"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER3</unmanaged>
	CorruptedParameter3 = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_PARAMETER4"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER4</unmanaged>
	CorruptedParameter4 = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_PARAMETER5"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER5</unmanaged>
	CorruptedParameter5 = 7,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_PARAMETER6"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER6</unmanaged>
	CorruptedParameter6 = 8,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_PARAMETER7"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER7</unmanaged>
	CorruptedParameter7 = 9,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_PARAMETER8"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER8</unmanaged>
	CorruptedParameter8 = 10,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_PARAMETER9"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER9</unmanaged>
	CorruptedParameter9 = 11,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_PARAMETER10"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER10</unmanaged>
	CorruptedParameter10 = 12,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_PARAMETER11"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER11</unmanaged>
	CorruptedParameter11 = 13,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_PARAMETER12"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER12</unmanaged>
	CorruptedParameter12 = 14,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_PARAMETER13"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER13</unmanaged>
	CorruptedParameter13 = 15,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_PARAMETER14"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER14</unmanaged>
	CorruptedParameter14 = 16,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_PARAMETER15"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_PARAMETER15</unmanaged>
	CorruptedParameter15 = 17,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CORRUPTED_MULTITHREADING"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CORRUPTED_MULTITHREADING</unmanaged>
	CorruptedMultithreading = 18,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY</unmanaged>
	MessageReportingOutofmemory = 19,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GETPRIVATEDATA_MOREDATA"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GETPRIVATEDATA_MOREDATA</unmanaged>
	GetprivatedataMoredata = 20,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA</unmanaged>
	SetprivatedataInvalidfreedata = 21,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS</unmanaged>
	SetprivatedataChangingparams = 24,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY</unmanaged>
	SetprivatedataOutofmemory = 25,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT</unmanaged>
	CreateshaderresourceviewUnrecognizedformat = 26,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC</unmanaged>
	CreateshaderresourceviewInvaliddesc = 27,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT</unmanaged>
	CreateshaderresourceviewInvalidformat = 28,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE</unmanaged>
	CreateshaderresourceviewInvalidvideoplaneslice = 29,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE</unmanaged>
	CreateshaderresourceviewInvalidplaneslice = 30,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS</unmanaged>
	CreateshaderresourceviewInvaliddimensions = 31,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE</unmanaged>
	CreateshaderresourceviewInvalidresource = 32,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT</unmanaged>
	CreaterendertargetviewUnrecognizedformat = 35,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT</unmanaged>
	CreaterendertargetviewUnsupportedformat = 36,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC</unmanaged>
	CreaterendertargetviewInvaliddesc = 37,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT</unmanaged>
	CreaterendertargetviewInvalidformat = 38,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE</unmanaged>
	CreaterendertargetviewInvalidvideoplaneslice = 39,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANESLICE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANESLICE</unmanaged>
	CreaterendertargetviewInvalidplaneslice = 40,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS</unmanaged>
	CreaterendertargetviewInvaliddimensions = 41,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE</unmanaged>
	CreaterendertargetviewInvalidresource = 42,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT</unmanaged>
	CreatedepthstencilviewUnrecognizedformat = 45,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC</unmanaged>
	CreatedepthstencilviewInvaliddesc = 46,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT</unmanaged>
	CreatedepthstencilviewInvalidformat = 47,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS</unmanaged>
	CreatedepthstencilviewInvaliddimensions = 48,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE</unmanaged>
	CreatedepthstencilviewInvalidresource = 49,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY</unmanaged>
	CreateinputlayoutOutofmemory = 52,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS</unmanaged>
	CreateinputlayoutToomanyelements = 53,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT</unmanaged>
	CreateinputlayoutInvalidformat = 54,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT</unmanaged>
	CreateinputlayoutIncompatibleformat = 55,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT</unmanaged>
	CreateinputlayoutInvalidslot = 56,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS</unmanaged>
	CreateinputlayoutInvalidinputslotclass = 57,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH</unmanaged>
	CreateinputlayoutSteprateslotclassmismatch = 58,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE</unmanaged>
	CreateinputlayoutInvalidslotclasschange = 59,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE</unmanaged>
	CreateinputlayoutInvalidstepratechange = 60,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT</unmanaged>
	CreateinputlayoutInvalidalignment = 61,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC</unmanaged>
	CreateinputlayoutDuplicatesemantic = 62,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE</unmanaged>
	CreateinputlayoutUnparseableinputsignature = 63,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC</unmanaged>
	CreateinputlayoutNullsemantic = 64,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT</unmanaged>
	CreateinputlayoutMissingelement = 65,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY</unmanaged>
	CreatevertexshaderOutofmemory = 66,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE</unmanaged>
	CreatevertexshaderInvalidshaderbytecode = 67,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE</unmanaged>
	CreatevertexshaderInvalidshadertype = 68,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY</unmanaged>
	CreategeometryshaderOutofmemory = 69,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE</unmanaged>
	CreategeometryshaderInvalidshaderbytecode = 70,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE</unmanaged>
	CreategeometryshaderInvalidshadertype = 71,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY</unmanaged>
	CreategeometryshaderwithstreamoutputOutofmemory = 72,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE</unmanaged>
	CreategeometryshaderwithstreamoutputInvalidshaderbytecode = 73,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE</unmanaged>
	CreategeometryshaderwithstreamoutputInvalidshadertype = 74,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES</unmanaged>
	CreategeometryshaderwithstreamoutputInvalidnumentries = 75,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED</unmanaged>
	CreategeometryshaderwithstreamoutputOutputstreamstrideunused = 76,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED</unmanaged>
	CreategeometryshaderwithstreamoutputOutputslot0expected = 79,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT</unmanaged>
	CreategeometryshaderwithstreamoutputInvalidoutputslot = 80,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT</unmanaged>
	CreategeometryshaderwithstreamoutputOnlyoneelementperslot = 81,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT</unmanaged>
	CreategeometryshaderwithstreamoutputInvalidcomponentcount = 82,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT</unmanaged>
	CreategeometryshaderwithstreamoutputInvalidstartcomponentandcomponentcount = 83,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION</unmanaged>
	CreategeometryshaderwithstreamoutputInvalidgapdefinition = 84,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT</unmanaged>
	CreategeometryshaderwithstreamoutputRepeatedoutput = 85,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE</unmanaged>
	CreategeometryshaderwithstreamoutputInvalidoutputstreamstride = 86,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC</unmanaged>
	CreategeometryshaderwithstreamoutputMissingsemantic = 87,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH</unmanaged>
	CreategeometryshaderwithstreamoutputMaskmismatch = 88,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS</unmanaged>
	CreategeometryshaderwithstreamoutputCanthaveonlygaps = 89,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX</unmanaged>
	CreategeometryshaderwithstreamoutputDecltoocomplex = 90,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE</unmanaged>
	CreategeometryshaderwithstreamoutputMissingoutputsignature = 91,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY</unmanaged>
	CreatepixelshaderOutofmemory = 92,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE</unmanaged>
	CreatepixelshaderInvalidshaderbytecode = 93,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE</unmanaged>
	CreatepixelshaderInvalidshadertype = 94,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE</unmanaged>
	CreaterasterizerstateInvalidfillmode = 95,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE</unmanaged>
	CreaterasterizerstateInvalidcullmode = 96,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP</unmanaged>
	CreaterasterizerstateInvaliddepthbiasclamp = 97,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS</unmanaged>
	CreaterasterizerstateInvalidslopescaleddepthbias = 98,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK</unmanaged>
	CreatedepthstencilstateInvaliddepthwritemask = 100,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC</unmanaged>
	CreatedepthstencilstateInvaliddepthfunc = 101,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP</unmanaged>
	CreatedepthstencilstateInvalidfrontfacestencilfailop = 102,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP</unmanaged>
	CreatedepthstencilstateInvalidfrontfacestencilzfailop = 103,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP</unmanaged>
	CreatedepthstencilstateInvalidfrontfacestencilpassop = 104,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC</unmanaged>
	CreatedepthstencilstateInvalidfrontfacestencilfunc = 105,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP</unmanaged>
	CreatedepthstencilstateInvalidbackfacestencilfailop = 106,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP</unmanaged>
	CreatedepthstencilstateInvalidbackfacestencilzfailop = 107,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP</unmanaged>
	CreatedepthstencilstateInvalidbackfacestencilpassop = 108,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC</unmanaged>
	CreatedepthstencilstateInvalidbackfacestencilfunc = 109,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND</unmanaged>
	CreateblendstateInvalidsrcblend = 111,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND</unmanaged>
	CreateblendstateInvaliddestblend = 112,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP</unmanaged>
	CreateblendstateInvalidblendop = 113,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA</unmanaged>
	CreateblendstateInvalidsrcblendalpha = 114,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA</unmanaged>
	CreateblendstateInvaliddestblendalpha = 115,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA</unmanaged>
	CreateblendstateInvalidblendopalpha = 116,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK</unmanaged>
	CreateblendstateInvalidrendertargetwritemask = 117,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID</unmanaged>
	CleardepthstencilviewInvalid = 135,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET</unmanaged>
	CommandListDrawRootSignatureNotSet = 200,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH</unmanaged>
	CommandListDrawRootSignatureMismatch = 201,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET</unmanaged>
	CommandListDrawVertexBufferNotSet = 202,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL</unmanaged>
	CommandListDrawVertexBufferStrideTooSmall = 209,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL</unmanaged>
	CommandListDrawVertexBufferTooSmall = 210,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET</unmanaged>
	CommandListDrawIndexBufferNotSet = 211,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID</unmanaged>
	CommandListDrawIndexBufferFormatInvalid = 212,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL</unmanaged>
	CommandListDrawIndexBufferTooSmall = 213,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY</unmanaged>
	CommandListDrawInvalidPrimitivetopology = 219,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED</unmanaged>
	CommandListDrawVertexStrideUnaligned = 221,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED</unmanaged>
	CommandListDrawIndexOffsetUnaligned = 222,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT</unmanaged>
	DeviceRemovalProcessAtFault = 232,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT</unmanaged>
	DeviceRemovalProcessPossiblyAtFault = 233,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT</unmanaged>
	DeviceRemovalProcessNotAtFault = 234,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC</unmanaged>
	CreateinputlayoutTrailingDigitInSemantic = 239,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC</unmanaged>
	CreategeometryshaderwithstreamoutputTrailingDigitInSemantic = 240,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH</unmanaged>
	CreateinputlayoutTypeMismatch = 245,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT</unmanaged>
	CreateinputlayoutEmptyLayout = 253,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_OBJECT_SUMMARY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_OBJECT_SUMMARY</unmanaged>
	LiveObjectSummary = 255,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_DEVICE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_DEVICE</unmanaged>
	LiveDevice = 274,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_SWAPCHAIN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_SWAPCHAIN</unmanaged>
	LiveSwapchain = 275,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS</unmanaged>
	CreatedepthstencilviewInvalidflags = 276,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE</unmanaged>
	CreatevertexshaderInvalidclasslinkage = 277,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE</unmanaged>
	CreategeometryshaderInvalidclasslinkage = 278,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER</unmanaged>
	CreategeometryshaderwithstreamoutputInvalidstreamtorasterizer = 280,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE</unmanaged>
	CreatepixelshaderInvalidclasslinkage = 283,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM</unmanaged>
	CreategeometryshaderwithstreamoutputInvalidstream = 284,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES</unmanaged>
	CreategeometryshaderwithstreamoutputUnexpectedentries = 285,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES</unmanaged>
	CreategeometryshaderwithstreamoutputUnexpectedstrides = 286,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES</unmanaged>
	CreategeometryshaderwithstreamoutputInvalidnumstrides = 287,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY</unmanaged>
	CreatehullshaderOutofmemory = 289,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE</unmanaged>
	CreatehullshaderInvalidshaderbytecode = 290,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE</unmanaged>
	CreatehullshaderInvalidshadertype = 291,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE</unmanaged>
	CreatehullshaderInvalidclasslinkage = 292,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY</unmanaged>
	CreatedomainshaderOutofmemory = 294,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE</unmanaged>
	CreatedomainshaderInvalidshaderbytecode = 295,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE</unmanaged>
	CreatedomainshaderInvalidshadertype = 296,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE</unmanaged>
	CreatedomainshaderInvalidclasslinkage = 297,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED</unmanaged>
	ResourceUnmapNotmapped = 310,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE</unmanaged>
	DeviceCheckfeaturesupportMismatchedDataSize = 318,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY</unmanaged>
	CreatecomputeshaderOutofmemory = 321,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE</unmanaged>
	CreatecomputeshaderInvalidshaderbytecode = 322,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE</unmanaged>
	CreatecomputeshaderInvalidclasslinkage = 323,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
	DeviceCreatevertexshaderDoublefloatopsnotsupported = 331,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
	DeviceCreatehullshaderDoublefloatopsnotsupported = 332,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
	DeviceCreatedomainshaderDoublefloatopsnotsupported = 333,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
	DeviceCreategeometryshaderDoublefloatopsnotsupported = 334,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
	DeviceCreategeometryshaderwithstreamoutputDoublefloatopsnotsupported = 335,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
	DeviceCreatepixelshaderDoublefloatopsnotsupported = 336,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED</unmanaged>
	DeviceCreatecomputeshaderDoublefloatopsnotsupported = 337,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE</unmanaged>
	CreateunorderedaccessviewInvalidresource = 340,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC</unmanaged>
	CreateunorderedaccessviewInvaliddesc = 341,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT</unmanaged>
	CreateunorderedaccessviewInvalidformat = 342,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE</unmanaged>
	CreateunorderedaccessviewInvalidvideoplaneslice = 343,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE</unmanaged>
	CreateunorderedaccessviewInvalidplaneslice = 344,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS</unmanaged>
	CreateunorderedaccessviewInvaliddimensions = 345,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT</unmanaged>
	CreateunorderedaccessviewUnrecognizedformat = 346,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS</unmanaged>
	CreateunorderedaccessviewInvalidflags = 354,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT</unmanaged>
	CreaterasterizerstateInvalidforcedsamplecount = 401,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS</unmanaged>
	CreateblendstateInvalidlogicops = 403,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged>
	DeviceCreatevertexshaderDoubleextensionsnotsupported = 410,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged>
	DeviceCreatehullshaderDoubleextensionsnotsupported = 412,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged>
	DeviceCreatedomainshaderDoubleextensionsnotsupported = 414,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged>
	DeviceCreategeometryshaderDoubleextensionsnotsupported = 416,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged>
	DeviceCreategeometryshaderwithstreamoutputDoubleextensionsnotsupported = 418,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged>
	DeviceCreatepixelshaderDoubleextensionsnotsupported = 420,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED</unmanaged>
	DeviceCreatecomputeshaderDoubleextensionsnotsupported = 422,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED</unmanaged>
	DeviceCreatevertexshaderUavsnotsupported = 425,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED</unmanaged>
	DeviceCreatehullshaderUavsnotsupported = 426,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED</unmanaged>
	DeviceCreatedomainshaderUavsnotsupported = 427,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED</unmanaged>
	DeviceCreategeometryshaderUavsnotsupported = 428,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED</unmanaged>
	DeviceCreategeometryshaderwithstreamoutputUavsnotsupported = 429,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED</unmanaged>
	DeviceCreatepixelshaderUavsnotsupported = 430,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED</unmanaged>
	DeviceCreatecomputeshaderUavsnotsupported = 431,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT</unmanaged>
	DeviceClearviewInvalidsourcerect = 447,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT</unmanaged>
	DeviceClearviewEmptyrect = 448,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER</unmanaged>
	UpdatetilemappingsInvalidParameter = 493,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER</unmanaged>
	CopytilemappingsInvalidParameter = 494,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEVICE_INVALIDARGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEVICE_INVALIDARGS</unmanaged>
	CreatedeviceInvalidargs = 506,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEVICE_WARNING"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEVICE_WARNING</unmanaged>
	CreatedeviceWarning = 507,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_TYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_TYPE</unmanaged>
	ResourceBarrierInvalidType = 519,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_NULL_POINTER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_NULL_POINTER</unmanaged>
	ResourceBarrierNullPointer = 520,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SUBRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SUBRESOURCE</unmanaged>
	ResourceBarrierInvalidSubresource = 521,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_RESERVED_BITS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_RESERVED_BITS</unmanaged>
	ResourceBarrierReservedBits = 522,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISSING_BIND_FLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISSING_BIND_FLAGS</unmanaged>
	ResourceBarrierMissingBindFlags = 523,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS</unmanaged>
	ResourceBarrierMismatchingMiscFlags = 524,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_MATCHING_STATES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_MATCHING_STATES</unmanaged>
	ResourceBarrierMatchingStates = 525,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINATION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINATION</unmanaged>
	ResourceBarrierInvalidCombination = 526,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH</unmanaged>
	ResourceBarrierBeforeAfterMismatch = 527,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_RESOURCE</unmanaged>
	ResourceBarrierInvalidResource = 528,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_SAMPLE_COUNT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_SAMPLE_COUNT</unmanaged>
	ResourceBarrierSampleCount = 529,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS</unmanaged>
	ResourceBarrierInvalidFlags = 530,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINED_FLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINED_FLAGS</unmanaged>
	ResourceBarrierInvalidCombinedFlags = 531,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT</unmanaged>
	ResourceBarrierInvalidFlagsForFormat = 532,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SPLIT_BARRIER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SPLIT_BARRIER</unmanaged>
	ResourceBarrierInvalidSplitBarrier = 533,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_END"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_END</unmanaged>
	ResourceBarrierUnmatchedEnd = 534,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_BEGIN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_BEGIN</unmanaged>
	ResourceBarrierUnmatchedBegin = 535,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAG"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAG</unmanaged>
	ResourceBarrierInvalidFlag = 536,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE</unmanaged>
	ResourceBarrierInvalidCommandListType = 537,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_INVALID_SUBRESOURCE_STATE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_INVALID_SUBRESOURCE_STATE</unmanaged>
	InvalidSubresourceState = 538,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CONTENTION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CONTENTION</unmanaged>
	CommandAllocatorContention = 540,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET</unmanaged>
	CommandAllocatorReset = 541,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET_BUNDLE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET_BUNDLE</unmanaged>
	CommandAllocatorResetBundle = 542,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CANNOT_RESET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CANNOT_RESET</unmanaged>
	CommandAllocatorCannotReset = 543,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_OPEN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_OPEN</unmanaged>
	CommandListOpen = 544,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_INVALID_BUNDLE_API"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_INVALID_BUNDLE_API</unmanaged>
	InvalidBundleApi = 546,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED</unmanaged>
	CommandListClosed = 547,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_WRONG_COMMAND_ALLOCATOR_TYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_WRONG_COMMAND_ALLOCATOR_TYPE</unmanaged>
	WrongCommandAllocatorType = 549,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_SYNC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_SYNC</unmanaged>
	CommandAllocatorSync = 552,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_SYNC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_SYNC</unmanaged>
	CommandListSync = 553,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SET_DESCRIPTOR_HEAP_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SET_DESCRIPTOR_HEAP_INVALID</unmanaged>
	SetDescriptorHeapInvalid = 554,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMANDQUEUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMANDQUEUE</unmanaged>
	CreateCommandqueue = 557,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMANDALLOCATOR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMANDALLOCATOR</unmanaged>
	CreateCommandallocator = 558,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_PIPELINESTATE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_PIPELINESTATE</unmanaged>
	CreatePipelinestate = 559,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMANDLIST12"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMANDLIST12</unmanaged>
	CreateCommandlist12 = 560,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_RESOURCE</unmanaged>
	CreateResource = 562,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_DESCRIPTORHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_DESCRIPTORHEAP</unmanaged>
	CreateDescriptorheap = 563,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_ROOTSIGNATURE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_ROOTSIGNATURE</unmanaged>
	CreateRootsignature = 564,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_LIBRARY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_LIBRARY</unmanaged>
	CreateLibrary = 565,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_HEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_HEAP</unmanaged>
	CreateHeap = 566,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_MONITOREDFENCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_MONITOREDFENCE</unmanaged>
	CreateMonitoredfence = 567,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_QUERYHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_QUERYHEAP</unmanaged>
	CreateQueryheap = 568,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMANDSIGNATURE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMANDSIGNATURE</unmanaged>
	CreateCommandsignature = 569,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_COMMANDQUEUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_COMMANDQUEUE</unmanaged>
	LiveCommandqueue = 570,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_COMMANDALLOCATOR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_COMMANDALLOCATOR</unmanaged>
	LiveCommandallocator = 571,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_PIPELINESTATE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_PIPELINESTATE</unmanaged>
	LivePipelinestate = 572,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_COMMANDLIST12"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_COMMANDLIST12</unmanaged>
	LiveCommandlist12 = 573,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_RESOURCE</unmanaged>
	LiveResource = 575,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_DESCRIPTORHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_DESCRIPTORHEAP</unmanaged>
	LiveDescriptorheap = 576,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_ROOTSIGNATURE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_ROOTSIGNATURE</unmanaged>
	LiveRootsignature = 577,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_LIBRARY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_LIBRARY</unmanaged>
	LiveLibrary = 578,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_HEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_HEAP</unmanaged>
	LiveHeap = 579,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_MONITOREDFENCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_MONITOREDFENCE</unmanaged>
	LiveMonitoredfence = 580,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_QUERYHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_QUERYHEAP</unmanaged>
	LiveQueryheap = 581,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_COMMANDSIGNATURE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_COMMANDSIGNATURE</unmanaged>
	LiveCommandsignature = 582,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_COMMANDQUEUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_COMMANDQUEUE</unmanaged>
	DestroyCommandqueue = 583,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_COMMANDALLOCATOR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_COMMANDALLOCATOR</unmanaged>
	DestroyCommandallocator = 584,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_PIPELINESTATE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_PIPELINESTATE</unmanaged>
	DestroyPipelinestate = 585,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_COMMANDLIST12"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_COMMANDLIST12</unmanaged>
	DestroyCommandlist12 = 586,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_RESOURCE</unmanaged>
	DestroyResource = 588,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_DESCRIPTORHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_DESCRIPTORHEAP</unmanaged>
	DestroyDescriptorheap = 589,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_ROOTSIGNATURE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_ROOTSIGNATURE</unmanaged>
	DestroyRootsignature = 590,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_LIBRARY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_LIBRARY</unmanaged>
	DestroyLibrary = 591,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_HEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_HEAP</unmanaged>
	DestroyHeap = 592,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_MONITOREDFENCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_MONITOREDFENCE</unmanaged>
	DestroyMonitoredfence = 593,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_QUERYHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_QUERYHEAP</unmanaged>
	DestroyQueryheap = 594,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_COMMANDSIGNATURE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_COMMANDSIGNATURE</unmanaged>
	DestroyCommandsignature = 595,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONS</unmanaged>
	CreateresourceInvaliddimensions = 597,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMISCFLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMISCFLAGS</unmanaged>
	CreateresourceInvalidmiscflags = 599,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDARG_RETURN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDARG_RETURN</unmanaged>
	CreateresourceInvalidargReturn = 602,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_OUTOFMEMORY_RETURN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_OUTOFMEMORY_RETURN</unmanaged>
	CreateresourceOutofmemoryReturn = 603,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDESC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDESC</unmanaged>
	CreateresourceInvaliddesc = 604,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_POSSIBLY_INVALID_SUBRESOURCE_STATE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_POSSIBLY_INVALID_SUBRESOURCE_STATE</unmanaged>
	PossiblyInvalidSubresourceState = 607,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_INVALID_USE_OF_NON_RESIDENT_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_INVALID_USE_OF_NON_RESIDENT_RESOURCE</unmanaged>
	InvalidUseOfNonResidentResource = 608,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE</unmanaged>
	PossibleInvalidUseOfNonResidentResource = 609,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_BUNDLE_PIPELINE_STATE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_BUNDLE_PIPELINE_STATE_MISMATCH</unmanaged>
	BundlePipelineStateMismatch = 610,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE</unmanaged>
	PrimitiveTopologyMismatchPipelineState = 611,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE</unmanaged>
	RenderTargetFormatMismatchPipelineState = 613,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE</unmanaged>
	RenderTargetSampleDescMismatchPipelineState = 614,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE</unmanaged>
	DepthStencilFormatMismatchPipelineState = 615,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE</unmanaged>
	DepthStencilSampleDescMismatchPipelineState = 616,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATESHADER_INVALIDBYTECODE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATESHADER_INVALIDBYTECODE</unmanaged>
	CreateshaderInvalidbytecode = 622,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEHEAP_NULLDESC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_NULLDESC</unmanaged>
	CreateheapNulldesc = 623,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEHEAP_INVALIDSIZE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_INVALIDSIZE</unmanaged>
	CreateheapInvalidsize = 624,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDHEAPTYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDHEAPTYPE</unmanaged>
	CreateheapUnrecognizedheaptype = 625,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES</unmanaged>
	CreateheapUnrecognizedcpupageproperties = 626,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMEMORYPOOL"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMEMORYPOOL</unmanaged>
	CreateheapUnrecognizedmemorypool = 627,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEHEAP_INVALIDPROPERTIES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_INVALIDPROPERTIES</unmanaged>
	CreateheapInvalidproperties = 628,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEHEAP_INVALIDALIGNMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_INVALIDALIGNMENT</unmanaged>
	CreateheapInvalidalignment = 629,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMISCFLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMISCFLAGS</unmanaged>
	CreateheapUnrecognizedmiscflags = 630,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEHEAP_INVALIDMISCFLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_INVALIDMISCFLAGS</unmanaged>
	CreateheapInvalidmiscflags = 631,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEHEAP_INVALIDARG_RETURN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_INVALIDARG_RETURN</unmanaged>
	CreateheapInvalidargReturn = 632,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEHEAP_OUTOFMEMORY_RETURN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEHEAP_OUTOFMEMORY_RETURN</unmanaged>
	CreateheapOutofmemoryReturn = 633,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES</unmanaged>
	CreateresourceandheapNullheapproperties = 634,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE</unmanaged>
	CreateresourceandheapUnrecognizedheaptype = 635,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES</unmanaged>
	CreateresourceandheapUnrecognizedcpupageproperties = 636,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL</unmanaged>
	CreateresourceandheapUnrecognizedmemorypool = 637,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES</unmanaged>
	CreateresourceandheapInvalidheapproperties = 638,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS</unmanaged>
	CreateresourceandheapUnrecognizedheapmiscflags = 639,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS</unmanaged>
	CreateresourceandheapInvalidheapmiscflags = 640,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDARG_RETURN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDARG_RETURN</unmanaged>
	CreateresourceandheapInvalidargReturn = 641,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN</unmanaged>
	CreateresourceandheapOutofmemoryReturn = 642,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE</unmanaged>
	GetcustomheappropertiesUnrecognizedheaptype = 643,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE</unmanaged>
	GetcustomheappropertiesInvalidheaptype = 644,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_INVALID_DESC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_INVALID_DESC</unmanaged>
	CreateDescriptorHeapInvalidDesc = 645,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_INVALID_DESCRIPTOR_HANDLE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_INVALID_DESCRIPTOR_HANDLE</unmanaged>
	InvalidDescriptorHandle = 646,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE</unmanaged>
	CreaterasterizerstateInvalidConservativerastermode = 647,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE</unmanaged>
	CreateConstantBufferViewInvalidResource = 649,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC</unmanaged>
	CreateConstantBufferViewInvalidDesc = 650,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE</unmanaged>
	CreateUnorderedaccessViewInvalidCounterUsage = 652,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPY_DESCRIPTORS_INVALID_RANGES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPY_DESCRIPTORS_INVALID_RANGES</unmanaged>
	CopyDescriptorsInvalidRanges = 653,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR</unmanaged>
	CopyDescriptorsWriteOnlyDescriptor = 654,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN</unmanaged>
	CreategraphicspipelinestateRtvFormatNotUnknown = 655,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT</unmanaged>
	CreategraphicspipelinestateInvalidRenderTargetCount = 656,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET</unmanaged>
	CreategraphicspipelinestateVertexShaderNotSet = 657,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET</unmanaged>
	CreategraphicspipelinestateInputlayoutNotSet = 658,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH</unmanaged>
	CreategraphicspipelinestateShaderLinkageHsDsSignatureMismatch = 659,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX</unmanaged>
	CreategraphicspipelinestateShaderLinkageRegisterindex = 660,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE</unmanaged>
	CreategraphicspipelinestateShaderLinkageComponenttype = 661,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK</unmanaged>
	CreategraphicspipelinestateShaderLinkageRegistermask = 662,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE</unmanaged>
	CreategraphicspipelinestateShaderLinkageSystemvalue = 663,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS</unmanaged>
	CreategraphicspipelinestateShaderLinkageNeverwrittenAlwaysreads = 664,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION</unmanaged>
	CreategraphicspipelinestateShaderLinkageMinprecision = 665,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND</unmanaged>
	CreategraphicspipelinestateShaderLinkageSemanticnameNotFound = 666,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH</unmanaged>
	CreategraphicspipelinestateHsXorDsMismatch = 667,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH</unmanaged>
	CreategraphicspipelinestateHullShaderInputTopologyMismatch = 668,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH</unmanaged>
	CreategraphicspipelinestateHsDsControlPointCountMismatch = 669,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH</unmanaged>
	CreategraphicspipelinestateHsDsTessellatorDomainMismatch = 670,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN</unmanaged>
	CreategraphicspipelinestateInvalidUseOfCenterMultisamplePattern = 671,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT</unmanaged>
	CreategraphicspipelinestateInvalidUseOfForcedSampleCount = 672,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY</unmanaged>
	CreategraphicspipelinestateInvalidPrimitivetopology = 673,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE</unmanaged>
	CreategraphicspipelinestateInvalidSystemvalue = 674,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0</unmanaged>
	CreategraphicspipelinestateOmDualSourceBlendingCanOnlyHaveRenderTarget0 = 675,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING</unmanaged>
	CreategraphicspipelinestateOmRenderTargetDoesNotSupportBlending = 676,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH</unmanaged>
	CreategraphicspipelinestatePsOutputTypeMismatch = 677,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS</unmanaged>
	CreategraphicspipelinestateOmRenderTargetDoesNotSupportLogicOps = 678,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET</unmanaged>
	CreategraphicspipelinestateRenderTargetViewNotSet = 679,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET</unmanaged>
	CreategraphicspipelinestateDepthStencilViewNotSet = 680,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH</unmanaged>
	CreategraphicspipelinestateGsInputPrimitiveMismatch = 681,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT</unmanaged>
	CreategraphicspipelinestatePositionNotPresent = 682,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS</unmanaged>
	CreategraphicspipelinestateMissingRootSignatureFlags = 683,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES</unmanaged>
	CreategraphicspipelinestateInvalidIndexBufferProperties = 684,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC</unmanaged>
	CreategraphicspipelinestateInvalidSampleDesc = 685,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH</unmanaged>
	CreategraphicspipelinestateHsRootSignatureMismatch = 686,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH</unmanaged>
	CreategraphicspipelinestateDsRootSignatureMismatch = 687,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH</unmanaged>
	CreategraphicspipelinestateVsRootSignatureMismatch = 688,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH</unmanaged>
	CreategraphicspipelinestateGsRootSignatureMismatch = 689,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH</unmanaged>
	CreategraphicspipelinestatePsRootSignatureMismatch = 690,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE</unmanaged>
	CreategraphicspipelinestateMissingRootSignature = 691,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_EXECUTE_BUNDLE_OPEN_BUNDLE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_EXECUTE_BUNDLE_OPEN_BUNDLE</unmanaged>
	ExecuteBundleOpenBundle = 692,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH</unmanaged>
	ExecuteBundleDescriptorHeapMismatch = 693,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_EXECUTE_BUNDLE_TYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_EXECUTE_BUNDLE_TYPE</unmanaged>
	ExecuteBundleType = 694,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DRAW_EMPTY_SCISSOR_RECTANGLE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DRAW_EMPTY_SCISSOR_RECTANGLE</unmanaged>
	DrawEmptyScissorRectangle = 695,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND</unmanaged>
	CreateRootSignatureBlobNotFound = 696,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED</unmanaged>
	CreateRootSignatureDeserializeFailed = 697,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION</unmanaged>
	CreateRootSignatureInvalidConfiguration = 698,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE</unmanaged>
	CreateRootSignatureNotSupportedOnDevice = 699,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES</unmanaged>
	CreateresourceandheapNullresourceproperties = 700,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAP</unmanaged>
	CreateresourceandheapNullheap = 701,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GETRESOURCEALLOCATIONINFO_INVALIDRDESCS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GETRESOURCEALLOCATIONINFO_INVALIDRDESCS</unmanaged>
	GetresourceallocationinfoInvalidrdescs = 702,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_MAKERESIDENT_NULLOBJECTARRAY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_MAKERESIDENT_NULLOBJECTARRAY</unmanaged>
	MakeresidentNullobjectarray = 703,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_EVICT_NULLOBJECTARRAY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_EVICT_NULLOBJECTARRAY</unmanaged>
	EvictNullobjectarray = 705,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SET_DESCRIPTOR_TABLE_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SET_DESCRIPTOR_TABLE_INVALID</unmanaged>
	SetDescriptorTableInvalid = 708,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_INVALID</unmanaged>
	SetRootConstantInvalid = 709,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID</unmanaged>
	SetRootConstantBufferViewInvalid = 710,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SET_ROOT_SHADER_RESOURCE_VIEW_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SET_ROOT_SHADER_RESOURCE_VIEW_INVALID</unmanaged>
	SetRootShaderResourceViewInvalid = 711,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID</unmanaged>
	SetRootUnorderedAccessViewInvalid = 712,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID_DESC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID_DESC</unmanaged>
	SetVertexBuffersInvalidDesc = 713,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID_DESC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID_DESC</unmanaged>
	SetIndexBufferInvalidDesc = 715,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC</unmanaged>
	SetStreamOutputBuffersInvalidDesc = 717,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY</unmanaged>
	CreateresourceUnrecognizeddimensionality = 718,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDLAYOUT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDLAYOUT</unmanaged>
	CreateresourceUnrecognizedlayout = 719,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONALITY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONALITY</unmanaged>
	CreateresourceInvaliddimensionality = 720,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDALIGNMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDALIGNMENT</unmanaged>
	CreateresourceInvalidalignment = 721,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMIPLEVELS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMIPLEVELS</unmanaged>
	CreateresourceInvalidmiplevels = 722,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDSAMPLEDESC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDSAMPLEDESC</unmanaged>
	CreateresourceInvalidsampledesc = 723,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDLAYOUT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDLAYOUT</unmanaged>
	CreateresourceInvalidlayout = 724,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID</unmanaged>
	SetIndexBufferInvalid = 725,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID</unmanaged>
	SetVertexBuffersInvalid = 726,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID</unmanaged>
	SetStreamOutputBuffersInvalid = 727,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SET_RENDER_TARGETS_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SET_RENDER_TARGETS_INVALID</unmanaged>
	SetRenderTargetsInvalid = 728,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEQUERY_HEAP_INVALID_PARAMETERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEQUERY_HEAP_INVALID_PARAMETERS</unmanaged>
	CreatequeryHeapInvalidParameters = 729,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_BEGIN_END_QUERY_INVALID_PARAMETERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_BEGIN_END_QUERY_INVALID_PARAMETERS</unmanaged>
	BeginEndQueryInvalidParameters = 731,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CLOSE_COMMAND_LIST_OPEN_QUERY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CLOSE_COMMAND_LIST_OPEN_QUERY</unmanaged>
	CloseCommandListOpenQuery = 732,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVE_QUERY_DATA_INVALID_PARAMETERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVE_QUERY_DATA_INVALID_PARAMETERS</unmanaged>
	ResolveQueryDataInvalidParameters = 733,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SET_PREDICATION_INVALID_PARAMETERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SET_PREDICATION_INVALID_PARAMETERS</unmanaged>
	SetPredicationInvalidParameters = 734,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_TIMESTAMPS_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_TIMESTAMPS_NOT_SUPPORTED</unmanaged>
	TimestampsNotSupported = 735,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDFORMAT</unmanaged>
	CreateresourceUnrecognizedformat = 737,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDFORMAT</unmanaged>
	CreateresourceInvalidformat = 738,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDSUBRESOURCERANGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDSUBRESOURCERANGE</unmanaged>
	GetcopyablefootprintsInvalidsubresourcerange = 739,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDBASEOFFSET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDBASEOFFSET</unmanaged>
	GetcopyablefootprintsInvalidbaseoffset = 740,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE</unmanaged>
	GetcopyablelayoutInvalidsubresourcerange = 739,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDBASEOFFSET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDBASEOFFSET</unmanaged>
	GetcopyablelayoutInvalidbaseoffset = 740,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_HEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_HEAP</unmanaged>
	ResourceBarrierInvalidHeap = 741,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_SAMPLER_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_SAMPLER_INVALID</unmanaged>
	CreateSamplerInvalid = 742,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATECOMMANDSIGNATURE_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATECOMMANDSIGNATURE_INVALID</unmanaged>
	CreatecommandsignatureInvalid = 743,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_EXECUTE_INDIRECT_INVALID_PARAMETERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_EXECUTE_INDIRECT_INVALID_PARAMETERS</unmanaged>
	ExecuteIndirectInvalidParameters = 744,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION</unmanaged>
	GetgpuvirtualaddressInvalidResourceDimension = 745,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUE</unmanaged>
	CreateresourceInvalidclearvalue = 815,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT</unmanaged>
	CreateresourceUnrecognizedclearvalueformat = 816,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUEFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUEFORMAT</unmanaged>
	CreateresourceInvalidclearvalueformat = 817,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATERESOURCE_CLEARVALUEDENORMFLUSH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATERESOURCE_CLEARVALUEDENORMFLUSH</unmanaged>
	CreateresourceClearvaluedenormflush = 818,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE</unmanaged>
	ClearrendertargetviewMismatchingclearvalue = 820,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE</unmanaged>
	CleardepthstencilviewMismatchingclearvalue = 821,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_MAP_INVALIDHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_MAP_INVALIDHEAP</unmanaged>
	MapInvalidheap = 822,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_UNMAP_INVALIDHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_UNMAP_INVALIDHEAP</unmanaged>
	UnmapInvalidheap = 823,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_MAP_INVALIDRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_MAP_INVALIDRESOURCE</unmanaged>
	MapInvalidresource = 824,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_UNMAP_INVALIDRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_UNMAP_INVALIDRESOURCE</unmanaged>
	UnmapInvalidresource = 825,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_MAP_INVALIDSUBRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_MAP_INVALIDSUBRESOURCE</unmanaged>
	MapInvalidsubresource = 826,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_UNMAP_INVALIDSUBRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_UNMAP_INVALIDSUBRESOURCE</unmanaged>
	UnmapInvalidsubresource = 827,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_MAP_INVALIDRANGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_MAP_INVALIDRANGE</unmanaged>
	MapInvalidrange = 828,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_UNMAP_INVALIDRANGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_UNMAP_INVALIDRANGE</unmanaged>
	UnmapInvalidrange = 829,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_MAP_INVALIDDATAPOINTER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_MAP_INVALIDDATAPOINTER</unmanaged>
	MapInvaliddatapointer = 832,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_MAP_INVALIDARG_RETURN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_MAP_INVALIDARG_RETURN</unmanaged>
	MapInvalidargReturn = 833,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_MAP_OUTOFMEMORY_RETURN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_MAP_OUTOFMEMORY_RETURN</unmanaged>
	MapOutofmemoryReturn = 834,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED</unmanaged>
	ExecutecommandlistsBundlenotsupported = 835,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH</unmanaged>
	ExecutecommandlistsCommandlistmismatch = 836,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_OPENCOMMANDLIST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_OPENCOMMANDLIST</unmanaged>
	ExecutecommandlistsOpencommandlist = 837,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST</unmanaged>
	ExecutecommandlistsFailedcommandlist = 838,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLDST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLDST</unmanaged>
	CopybufferregionNulldst = 839,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION</unmanaged>
	CopybufferregionInvaliddstresourcedimension = 840,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS</unmanaged>
	CopybufferregionDstrangeoutofbounds = 841,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLSRC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLSRC</unmanaged>
	CopybufferregionNullsrc = 842,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION</unmanaged>
	CopybufferregionInvalidsrcresourcedimension = 843,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS</unmanaged>
	CopybufferregionSrcrangeoutofbounds = 844,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDCOPYFLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDCOPYFLAGS</unmanaged>
	CopybufferregionInvalidcopyflags = 845,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLDST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLDST</unmanaged>
	CopytextureregionNulldst = 846,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE</unmanaged>
	CopytextureregionUnrecognizeddsttype = 847,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION</unmanaged>
	CopytextureregionInvaliddstresourcedimension = 848,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCE</unmanaged>
	CopytextureregionInvaliddstresource = 849,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE</unmanaged>
	CopytextureregionInvaliddstsubresource = 850,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTOFFSET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTOFFSET</unmanaged>
	CopytextureregionInvaliddstoffset = 851,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT</unmanaged>
	CopytextureregionUnrecognizeddstformat = 852,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTFORMAT</unmanaged>
	CopytextureregionInvaliddstformat = 853,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDIMENSIONS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDIMENSIONS</unmanaged>
	CopytextureregionInvaliddstdimensions = 854,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTROWPITCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTROWPITCH</unmanaged>
	CopytextureregionInvaliddstrowpitch = 855,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTPLACEMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTPLACEMENT</unmanaged>
	CopytextureregionInvaliddstplacement = 856,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT</unmanaged>
	CopytextureregionInvaliddstdsplacedfootprintformat = 857,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS</unmanaged>
	CopytextureregionDstregionoutofbounds = 858,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLSRC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLSRC</unmanaged>
	CopytextureregionNullsrc = 859,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE</unmanaged>
	CopytextureregionUnrecognizedsrctype = 860,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION</unmanaged>
	CopytextureregionInvalidsrcresourcedimension = 861,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCE</unmanaged>
	CopytextureregionInvalidsrcresource = 862,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE</unmanaged>
	CopytextureregionInvalidsrcsubresource = 863,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCOFFSET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCOFFSET</unmanaged>
	CopytextureregionInvalidsrcoffset = 864,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT</unmanaged>
	CopytextureregionUnrecognizedsrcformat = 865,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCFORMAT</unmanaged>
	CopytextureregionInvalidsrcformat = 866,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDIMENSIONS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDIMENSIONS</unmanaged>
	CopytextureregionInvalidsrcdimensions = 867,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCROWPITCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCROWPITCH</unmanaged>
	CopytextureregionInvalidsrcrowpitch = 868,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCPLACEMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCPLACEMENT</unmanaged>
	CopytextureregionInvalidsrcplacement = 869,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT</unmanaged>
	CopytextureregionInvalidsrcdsplacedfootprintformat = 870,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS</unmanaged>
	CopytextureregionSrcregionoutofbounds = 871,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTCOORDINATES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTCOORDINATES</unmanaged>
	CopytextureregionInvaliddstcoordinates = 872,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCBOX"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCBOX</unmanaged>
	CopytextureregionInvalidsrcbox = 873,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_FORMATMISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_FORMATMISMATCH</unmanaged>
	CopytextureregionFormatmismatch = 874,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_EMPTYBOX"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_EMPTYBOX</unmanaged>
	CopytextureregionEmptybox = 875,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDCOPYFLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDCOPYFLAGS</unmanaged>
	CopytextureregionInvalidcopyflags = 876,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX</unmanaged>
	ResolvesubresourceInvalidSubresourceIndex = 877,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_FORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_FORMAT</unmanaged>
	ResolvesubresourceInvalidFormat = 878,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_MISMATCH</unmanaged>
	ResolvesubresourceResourceMismatch = 879,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT</unmanaged>
	ResolvesubresourceInvalidSampleCount = 880,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_INVALID_SHADER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_INVALID_SHADER</unmanaged>
	CreatecomputepipelinestateInvalidShader = 881,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH</unmanaged>
	CreatecomputepipelinestateCsRootSignatureMismatch = 882,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE</unmanaged>
	CreatecomputepipelinestateMissingRootSignature = 883,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALIDCACHEDBLOB"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALIDCACHEDBLOB</unmanaged>
	CreatepipelinestateInvalidcachedblob = 884,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH</unmanaged>
	CreatepipelinestateCachedblobadaptermismatch = 885,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH</unmanaged>
	CreatepipelinestateCachedblobdriverversionmismatch = 886,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH</unmanaged>
	CreatepipelinestateCachedblobdescmismatch = 887,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBIGNORED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBIGNORED</unmanaged>
	CreatepipelinestateCachedblobignored = 888,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDHEAP</unmanaged>
	WritetosubresourceInvalidheap = 889,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDRESOURCE</unmanaged>
	WritetosubresourceInvalidresource = 890,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDBOX"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDBOX</unmanaged>
	WritetosubresourceInvalidbox = 891,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDSUBRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDSUBRESOURCE</unmanaged>
	WritetosubresourceInvalidsubresource = 892,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_EMPTYBOX"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_EMPTYBOX</unmanaged>
	WritetosubresourceEmptybox = 893,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDHEAP</unmanaged>
	ReadfromsubresourceInvalidheap = 894,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDRESOURCE</unmanaged>
	ReadfromsubresourceInvalidresource = 895,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDBOX"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDBOX</unmanaged>
	ReadfromsubresourceInvalidbox = 896,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDSUBRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDSUBRESOURCE</unmanaged>
	ReadfromsubresourceInvalidsubresource = 897,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_READFROMSUBRESOURCE_EMPTYBOX"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_READFROMSUBRESOURCE_EMPTYBOX</unmanaged>
	ReadfromsubresourceEmptybox = 898,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_TOO_MANY_NODES_SPECIFIED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_TOO_MANY_NODES_SPECIFIED</unmanaged>
	TooManyNodesSpecified = 899,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_INVALID_NODE_INDEX"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_INVALID_NODE_INDEX</unmanaged>
	InvalidNodeIndex = 900,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GETHEAPPROPERTIES_INVALIDRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GETHEAPPROPERTIES_INVALIDRESOURCE</unmanaged>
	GetheappropertiesInvalidresource = 901,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_NODE_MASK_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_NODE_MASK_MISMATCH</unmanaged>
	NodeMaskMismatch = 902,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_OUTOFMEMORY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_OUTOFMEMORY</unmanaged>
	CommandListOutofmemory = 903,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES</unmanaged>
	CommandListMultipleSwapchainBufferReferences = 904,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES</unmanaged>
	CommandListTooManySwapchainReferences = 905,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES</unmanaged>
	CommandQueueTooManySwapchainReferences = 906,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE</unmanaged>
	ExecutecommandlistsWrongswapchainbufferreference = 907,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS</unmanaged>
	CommandListSetrendertargetsInvalidnumrendertargets = 908,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_TYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_TYPE</unmanaged>
	CreateQueueInvalidType = 909,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_FLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_FLAGS</unmanaged>
	CreateQueueInvalidFlags = 910,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFLAGS</unmanaged>
	CreatesharedresourceInvalidflags = 911,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFORMAT</unmanaged>
	CreatesharedresourceInvalidformat = 912,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATESHAREDHEAP_INVALIDFLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATESHAREDHEAP_INVALIDFLAGS</unmanaged>
	CreatesharedheapInvalidflags = 913,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES</unmanaged>
	ReflectsharedpropertiesUnrecognizedproperties = 914,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDSIZE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDSIZE</unmanaged>
	ReflectsharedpropertiesInvalidsize = 915,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDOBJECT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDOBJECT</unmanaged>
	ReflectsharedpropertiesInvalidobject = 916,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDOBJECT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDOBJECT</unmanaged>
	KeyedMutexInvalidobject = 917,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDKEY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDKEY</unmanaged>
	KeyedMutexInvalidkey = 918,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_KEYEDMUTEX_WRONGSTATE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_KEYEDMUTEX_WRONGSTATE</unmanaged>
	KeyedMutexWrongstate = 919,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_PRIORITY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_PRIORITY</unmanaged>
	CreateQueueInvalidPriority = 920,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_OBJECT_DELETED_WHILE_STILL_IN_USE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_OBJECT_DELETED_WHILE_STILL_IN_USE</unmanaged>
	ObjectDeletedWhileStillInUse = 921,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_FLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_FLAGS</unmanaged>
	CreatepipelinestateInvalidFlags = 922,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE</unmanaged>
	HeapAddressRangeHasNoResource = 923,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RENDER_TARGET_DELETED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RENDER_TARGET_DELETED</unmanaged>
	CommandListDrawRenderTargetDeleted = 924,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT</unmanaged>
	CreategraphicspipelinestateAllRenderTargetsHaveUnknownFormat = 925,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS</unmanaged>
	HeapAddressRangeIntersectsMultipleBuffers = 926,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED</unmanaged>
	ExecutecommandlistsGpuWrittenReadbackResourceMapped = 927,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_EMPTY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_EMPTY</unmanaged>
	UnmapRangeNotEmpty = 929,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_MAP_INVALID_NULLRANGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_MAP_INVALID_NULLRANGE</unmanaged>
	MapInvalidNullrange = 930,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_UNMAP_INVALID_NULLRANGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_UNMAP_INVALID_NULLRANGE</unmanaged>
	UnmapInvalidNullrange = 931,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_NO_GRAPHICS_API_SUPPORT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_NO_GRAPHICS_API_SUPPORT</unmanaged>
	NoGraphicsApiSupport = 932,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_NO_COMPUTE_API_SUPPORT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_NO_COMPUTE_API_SUPPORT</unmanaged>
	NoComputeApiSupport = 933,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_FLAGS_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_FLAGS_NOT_SUPPORTED</unmanaged>
	ResolvesubresourceResourceFlagsNotSupported = 934,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_ARGUMENT_UNINITIALIZED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_ARGUMENT_UNINITIALIZED</unmanaged>
	GpuBasedValidationRootArgumentUninitialized = 935,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_HEAP_INDEX_OUT_OF_BOUNDS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_HEAP_INDEX_OUT_OF_BOUNDS</unmanaged>
	GpuBasedValidationDescriptorHeapIndexOutOfBounds = 936,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TABLE_REGISTER_INDEX_OUT_OF_BOUNDS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TABLE_REGISTER_INDEX_OUT_OF_BOUNDS</unmanaged>
	GpuBasedValidationDescriptorTableRegisterIndexOutOfBounds = 937,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_UNINITIALIZED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_UNINITIALIZED</unmanaged>
	GpuBasedValidationDescriptorUninitialized = 938,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TYPE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TYPE_MISMATCH</unmanaged>
	GpuBasedValidationDescriptorTypeMismatch = 939,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SRV_RESOURCE_DIMENSION_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SRV_RESOURCE_DIMENSION_MISMATCH</unmanaged>
	GpuBasedValidationSrvResourceDimensionMismatch = 940,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UAV_RESOURCE_DIMENSION_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UAV_RESOURCE_DIMENSION_MISMATCH</unmanaged>
	GpuBasedValidationUavResourceDimensionMismatch = 941,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INCOMPATIBLE_RESOURCE_STATE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INCOMPATIBLE_RESOURCE_STATE</unmanaged>
	GpuBasedValidationIncompatibleResourceState = 942,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYRESOURCE_NULLDST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYRESOURCE_NULLDST</unmanaged>
	CopyresourceNulldst = 943,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDSTRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDSTRESOURCE</unmanaged>
	CopyresourceInvaliddstresource = 944,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYRESOURCE_NULLSRC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYRESOURCE_NULLSRC</unmanaged>
	CopyresourceNullsrc = 945,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSRCRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSRCRESOURCE</unmanaged>
	CopyresourceInvalidsrcresource = 946,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLDST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLDST</unmanaged>
	ResolvesubresourceNulldst = 947,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDDSTRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDDSTRESOURCE</unmanaged>
	ResolvesubresourceInvaliddstresource = 948,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLSRC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLSRC</unmanaged>
	ResolvesubresourceNullsrc = 949,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDSRCRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDSRCRESOURCE</unmanaged>
	ResolvesubresourceInvalidsrcresource = 950,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_PIPELINE_STATE_TYPE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_PIPELINE_STATE_TYPE_MISMATCH</unmanaged>
	PipelineStateTypeMismatch = 951,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_NOT_SET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_NOT_SET</unmanaged>
	CommandListDispatchRootSignatureNotSet = 952,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_MISMATCH</unmanaged>
	CommandListDispatchRootSignatureMismatch = 953,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_ZERO_BARRIERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_ZERO_BARRIERS</unmanaged>
	ResourceBarrierZeroBarriers = 954,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_BEGIN_END_EVENT_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_BEGIN_END_EVENT_MISMATCH</unmanaged>
	BeginEndEventMismatch = 955,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_POSSIBLE_BEFORE_AFTER_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_POSSIBLE_BEFORE_AFTER_MISMATCH</unmanaged>
	ResourceBarrierPossibleBeforeAfterMismatch = 956,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_BEGIN_END"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_BEGIN_END</unmanaged>
	ResourceBarrierMismatchingBeginEnd = 957,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INVALID_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INVALID_RESOURCE</unmanaged>
	GpuBasedValidationInvalidResource = 958,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT</unmanaged>
	UseOfZeroRefcountObject = 959,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_OBJECT_EVICTED_WHILE_STILL_IN_USE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_OBJECT_EVICTED_WHILE_STILL_IN_USE</unmanaged>
	ObjectEvictedWhileStillInUse = 960,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_DESCRIPTOR_ACCESS_OUT_OF_BOUNDS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_DESCRIPTOR_ACCESS_OUT_OF_BOUNDS</unmanaged>
	GpuBasedValidationRootDescriptorAccessOutOfBounds = 961,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_INVALIDLIBRARYBLOB"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_INVALIDLIBRARYBLOB</unmanaged>
	CreatepipelinelibraryInvalidlibraryblob = 962,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_DRIVERVERSIONMISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_DRIVERVERSIONMISMATCH</unmanaged>
	CreatepipelinelibraryDriverversionmismatch = 963,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_ADAPTERVERSIONMISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_ADAPTERVERSIONMISMATCH</unmanaged>
	CreatepipelinelibraryAdapterversionmismatch = 964,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_UNSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_UNSUPPORTED</unmanaged>
	CreatepipelinelibraryUnsupported = 965,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_PIPELINELIBRARY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_PIPELINELIBRARY</unmanaged>
	CreatePipelinelibrary = 966,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_PIPELINELIBRARY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_PIPELINELIBRARY</unmanaged>
	LivePipelinelibrary = 967,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_PIPELINELIBRARY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_PIPELINELIBRARY</unmanaged>
	DestroyPipelinelibrary = 968,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_STOREPIPELINE_NONAME"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_STOREPIPELINE_NONAME</unmanaged>
	StorepipelineNoname = 969,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_STOREPIPELINE_DUPLICATENAME"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_STOREPIPELINE_DUPLICATENAME</unmanaged>
	StorepipelineDuplicatename = 970,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LOADPIPELINE_NAMENOTFOUND"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LOADPIPELINE_NAMENOTFOUND</unmanaged>
	LoadpipelineNamenotfound = 971,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LOADPIPELINE_INVALIDDESC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LOADPIPELINE_INVALIDDESC</unmanaged>
	LoadpipelineInvaliddesc = 972,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_PIPELINELIBRARY_SERIALIZE_NOTENOUGHMEMORY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_PIPELINELIBRARY_SERIALIZE_NOTENOUGHMEMORY</unmanaged>
	PipelinelibrarySerializeNotenoughmemory = 973,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_RT_OUTPUT_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_RT_OUTPUT_MISMATCH</unmanaged>
	CreategraphicspipelinestatePsOutputRtOutputMismatch = 974,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SETEVENTONMULTIPLEFENCECOMPLETION_INVALIDFLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SETEVENTONMULTIPLEFENCECOMPLETION_INVALIDFLAGS</unmanaged>
	SeteventonmultiplefencecompletionInvalidflags = 975,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_QUEUE_VIDEO_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_QUEUE_VIDEO_NOT_SUPPORTED</unmanaged>
	CreateQueueVideoNotSupported = 976,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_VIDEO_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_VIDEO_NOT_SUPPORTED</unmanaged>
	CreateCommandAllocatorVideoNotSupported = 977,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEQUERY_HEAP_VIDEO_DECODE_STATISTICS_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEQUERY_HEAP_VIDEO_DECODE_STATISTICS_NOT_SUPPORTED</unmanaged>
	CreatequeryHeapVideoDecodeStatisticsNotSupported = 978,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDLIST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDLIST</unmanaged>
	CreateVideodecodecommandlist = 979,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEODECODER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEODECODER</unmanaged>
	CreateVideodecoder = 980,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEODECODESTREAM"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEODECODESTREAM</unmanaged>
	CreateVideodecodestream = 981,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDLIST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDLIST</unmanaged>
	LiveVideodecodecommandlist = 982,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_VIDEODECODER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEODECODER</unmanaged>
	LiveVideodecoder = 983,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_VIDEODECODESTREAM"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEODECODESTREAM</unmanaged>
	LiveVideodecodestream = 984,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDLIST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDLIST</unmanaged>
	DestroyVideodecodecommandlist = 985,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_VIDEODECODER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEODECODER</unmanaged>
	DestroyVideodecoder = 986,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_VIDEODECODESTREAM"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEODECODESTREAM</unmanaged>
	DestroyVideodecodestream = 987,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DECODE_FRAME_INVALID_PARAMETERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DECODE_FRAME_INVALID_PARAMETERS</unmanaged>
	DecodeFrameInvalidParameters = 988,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEPRECATED_API"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEPRECATED_API</unmanaged>
	DeprecatedApi = 989,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_COMMAND_LIST_TYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_COMMAND_LIST_TYPE</unmanaged>
	ResourceBarrierMismatchingCommandListType = 990,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_DESCRIPTOR_TABLE_NOT_SET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_DESCRIPTOR_TABLE_NOT_SET</unmanaged>
	CommandListDescriptorTableNotSet = 991,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_CONSTANT_BUFFER_VIEW_NOT_SET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_CONSTANT_BUFFER_VIEW_NOT_SET</unmanaged>
	CommandListRootConstantBufferViewNotSet = 992,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_SHADER_RESOURCE_VIEW_NOT_SET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_SHADER_RESOURCE_VIEW_NOT_SET</unmanaged>
	CommandListRootShaderResourceViewNotSet = 993,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_UNORDERED_ACCESS_VIEW_NOT_SET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_UNORDERED_ACCESS_VIEW_NOT_SET</unmanaged>
	CommandListRootUnorderedAccessViewNotSet = 994,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DISCARD_INVALID_SUBRESOURCE_RANGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DISCARD_INVALID_SUBRESOURCE_RANGE</unmanaged>
	DiscardInvalidSubresourceRange = 995,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DISCARD_ONE_SUBRESOURCE_FOR_MIPS_WITH_RECTS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DISCARD_ONE_SUBRESOURCE_FOR_MIPS_WITH_RECTS</unmanaged>
	DiscardOneSubresourceForMipsWithRects = 996,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DISCARD_NO_RECTS_FOR_NON_TEXTURE2D"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DISCARD_NO_RECTS_FOR_NON_TEXTURE2D</unmanaged>
	DiscardNoRectsForNonTexture2D = 997,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPY_ON_SAME_SUBRESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPY_ON_SAME_SUBRESOURCE</unmanaged>
	CopyOnSameSubresource = 998,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PAGEABLE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PAGEABLE</unmanaged>
	SetresidencypriorityInvalidPageable = 999,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UNSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UNSUPPORTED</unmanaged>
	GpuBasedValidationUnsupported = 1000,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_STATIC_DESCRIPTOR_INVALID_DESCRIPTOR_CHANGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_STATIC_DESCRIPTOR_INVALID_DESCRIPTOR_CHANGE</unmanaged>
	StaticDescriptorInvalidDescriptorChange = 1001,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DATA_STATIC_DESCRIPTOR_INVALID_DATA_CHANGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DATA_STATIC_DESCRIPTOR_INVALID_DATA_CHANGE</unmanaged>
	DataStaticDescriptorInvalidDataChange = 1002,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DATA_STATIC_WHILE_SET_AT_EXECUTE_DESCRIPTOR_INVALID_DATA_CHANGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DATA_STATIC_WHILE_SET_AT_EXECUTE_DESCRIPTOR_INVALID_DATA_CHANGE</unmanaged>
	DataStaticWhileSetAtExecuteDescriptorInvalidDataChange = 1003,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_EXECUTE_BUNDLE_STATIC_DESCRIPTOR_DATA_STATIC_NOT_SET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_EXECUTE_BUNDLE_STATIC_DESCRIPTOR_DATA_STATIC_NOT_SET</unmanaged>
	ExecuteBundleStaticDescriptorDataStaticNotSet = 1004,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_ACCESS_OUT_OF_BOUNDS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_ACCESS_OUT_OF_BOUNDS</unmanaged>
	GpuBasedValidationResourceAccessOutOfBounds = 1005,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SAMPLER_MODE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SAMPLER_MODE_MISMATCH</unmanaged>
	GpuBasedValidationSamplerModeMismatch = 1006,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_FENCE_INVALID_FLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_FENCE_INVALID_FLAGS</unmanaged>
	CreateFenceInvalidFlags = 1007,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_BARRIER_DUPLICATE_SUBRESOURCE_TRANSITIONS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_BARRIER_DUPLICATE_SUBRESOURCE_TRANSITIONS</unmanaged>
	ResourceBarrierDuplicateSubresourceTransitions = 1008,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PRIORITY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PRIORITY</unmanaged>
	SetresidencypriorityInvalidPriority = 1009,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_LARGE_NUM_DESCRIPTORS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_LARGE_NUM_DESCRIPTORS</unmanaged>
	CreateDescriptorHeapLargeNumDescriptors = 1013,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_BEGIN_EVENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_BEGIN_EVENT</unmanaged>
	BeginEvent = 1014,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_END_EVENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_END_EVENT</unmanaged>
	EndEvent = 1015,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEVICE_DEBUG_LAYER_STARTUP_OPTIONS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEVICE_DEBUG_LAYER_STARTUP_OPTIONS</unmanaged>
	CreatedeviceDebugLayerStartupOptions = 1016,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_DEPTHBOUNDSTEST_UNSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_DEPTHBOUNDSTEST_UNSUPPORTED</unmanaged>
	CreatedepthstencilstateDepthboundstestUnsupported = 1017,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIPELINESTATE_DUPLICATE_SUBOBJECT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_DUPLICATE_SUBOBJECT</unmanaged>
	CreatepipelinestateDuplicateSubobject = 1018,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIPELINESTATE_UNKNOWN_SUBOBJECT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_UNKNOWN_SUBOBJECT</unmanaged>
	CreatepipelinestateUnknownSubobject = 1019,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIPELINESTATE_ZERO_SIZE_STREAM"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_ZERO_SIZE_STREAM</unmanaged>
	CreatepipelinestateZeroSizeStream = 1020,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_STREAM"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_STREAM</unmanaged>
	CreatepipelinestateInvalidStream = 1021,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CANNOT_DEDUCE_TYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CANNOT_DEDUCE_TYPE</unmanaged>
	CreatepipelinestateCannotDeduceType = 1022,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_RESOURCE_DIMENSION_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_RESOURCE_DIMENSION_MISMATCH</unmanaged>
	CommandListStaticDescriptorResourceDimensionMismatch = 1023,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_PRIVILEGE_FOR_GLOBAL_REALTIME"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_PRIVILEGE_FOR_GLOBAL_REALTIME</unmanaged>
	CreateCommandQueueInsufficientPrivilegeForGlobalRealtime = 1024,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_HARDWARE_SUPPORT_FOR_GLOBAL_REALTIME"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_HARDWARE_SUPPORT_FOR_GLOBAL_REALTIME</unmanaged>
	CreateCommandQueueInsufficientHardwareSupportForGlobalRealtime = 1025,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_ARCHITECTURE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_ARCHITECTURE</unmanaged>
	AtomiccopybufferInvalidArchitecture = 1026,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DST</unmanaged>
	AtomiccopybufferNullDst = 1027,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE_DIMENSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE_DIMENSION</unmanaged>
	AtomiccopybufferInvalidDstResourceDimension = 1028,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DST_RANGE_OUT_OF_BOUNDS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DST_RANGE_OUT_OF_BOUNDS</unmanaged>
	AtomiccopybufferDstRangeOutOfBounds = 1029,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_SRC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_SRC</unmanaged>
	AtomiccopybufferNullSrc = 1030,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE_DIMENSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE_DIMENSION</unmanaged>
	AtomiccopybufferInvalidSrcResourceDimension = 1031,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_SRC_RANGE_OUT_OF_BOUNDS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_SRC_RANGE_OUT_OF_BOUNDS</unmanaged>
	AtomiccopybufferSrcRangeOutOfBounds = 1032,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_OFFSET_ALIGNMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_OFFSET_ALIGNMENT</unmanaged>
	AtomiccopybufferInvalidOffsetAlignment = 1033,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_RESOURCES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_RESOURCES</unmanaged>
	AtomiccopybufferNullDependentResources = 1034,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_SUBRESOURCE_RANGES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_SUBRESOURCE_RANGES</unmanaged>
	AtomiccopybufferNullDependentSubresourceRanges = 1035,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_RESOURCE</unmanaged>
	AtomiccopybufferInvalidDependentResource = 1036,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_SUBRESOURCE_RANGE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_SUBRESOURCE_RANGE</unmanaged>
	AtomiccopybufferInvalidDependentSubresourceRange = 1037,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_SUBRESOURCE_OUT_OF_BOUNDS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_SUBRESOURCE_OUT_OF_BOUNDS</unmanaged>
	AtomiccopybufferDependentSubresourceOutOfBounds = 1038,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_RANGE_OUT_OF_BOUNDS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_RANGE_OUT_OF_BOUNDS</unmanaged>
	AtomiccopybufferDependentRangeOutOfBounds = 1039,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_ZERO_DEPENDENCIES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_ZERO_DEPENDENCIES</unmanaged>
	AtomiccopybufferZeroDependencies = 1040,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DEVICE_CREATE_SHARED_HANDLE_INVALIDARG"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DEVICE_CREATE_SHARED_HANDLE_INVALIDARG</unmanaged>
	DeviceCreateSharedHandleInvalidarg = 1041,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESCRIPTOR_HANDLE_WITH_INVALID_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESCRIPTOR_HANDLE_WITH_INVALID_RESOURCE</unmanaged>
	DescriptorHandleWithInvalidResource = 1042,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SETDEPTHBOUNDS_INVALIDARGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SETDEPTHBOUNDS_INVALIDARGS</unmanaged>
	SetdepthboundsInvalidargs = 1043,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_STATE_IMPRECISE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_STATE_IMPRECISE</unmanaged>
	GpuBasedValidationResourceStateImprecise = 1044,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_PIPELINE_STATE_NOT_SET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_PIPELINE_STATE_NOT_SET</unmanaged>
	CommandListPipelineStateNotSet = 1045,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_MODEL_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_MODEL_MISMATCH</unmanaged>
	CreategraphicspipelinestateShaderModelMismatch = 1046,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_OBJECT_ACCESSED_WHILE_STILL_IN_USE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_OBJECT_ACCESSED_WHILE_STILL_IN_USE</unmanaged>
	ObjectAccessedWhileStillInUse = 1047,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_PROGRAMMABLE_MSAA_UNSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_PROGRAMMABLE_MSAA_UNSUPPORTED</unmanaged>
	ProgrammableMsaaUnsupported = 1048,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SETSAMPLEPOSITIONS_INVALIDARGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SETSAMPLEPOSITIONS_INVALIDARGS</unmanaged>
	SetsamplepositionsInvalidargs = 1049,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVESUBRESOURCEREGION_INVALID_RECT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCEREGION_INVALID_RECT</unmanaged>
	ResolvesubresourceregionInvalidRect = 1050,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDQUEUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDQUEUE</unmanaged>
	CreateVideodecodecommandqueue = 1051,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDLIST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDLIST</unmanaged>
	CreateVideoprocesscommandlist = 1052,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDQUEUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDQUEUE</unmanaged>
	CreateVideoprocesscommandqueue = 1053,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDQUEUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDQUEUE</unmanaged>
	LiveVideodecodecommandqueue = 1054,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDLIST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDLIST</unmanaged>
	LiveVideoprocesscommandlist = 1055,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDQUEUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDQUEUE</unmanaged>
	LiveVideoprocesscommandqueue = 1056,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDQUEUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDQUEUE</unmanaged>
	DestroyVideodecodecommandqueue = 1057,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDLIST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDLIST</unmanaged>
	DestroyVideoprocesscommandlist = 1058,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDQUEUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDQUEUE</unmanaged>
	DestroyVideoprocesscommandqueue = 1059,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSOR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSOR</unmanaged>
	CreateVideoprocessor = 1060,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSSTREAM"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSSTREAM</unmanaged>
	CreateVideoprocessstream = 1061,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSOR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSOR</unmanaged>
	LiveVideoprocessor = 1062,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSSTREAM"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSSTREAM</unmanaged>
	LiveVideoprocessstream = 1063,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSOR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSOR</unmanaged>
	DestroyVideoprocessor = 1064,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSSTREAM"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSSTREAM</unmanaged>
	DestroyVideoprocessstream = 1065,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_PROCESS_FRAME_INVALID_PARAMETERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_PROCESS_FRAME_INVALID_PARAMETERS</unmanaged>
	ProcessFrameInvalidParameters = 1066,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPY_INVALIDLAYOUT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPY_INVALIDLAYOUT</unmanaged>
	CopyInvalidlayout = 1067,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION</unmanaged>
	CreateCryptoSession = 1068,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION_POLICY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION_POLICY</unmanaged>
	CreateCryptoSessionPolicy = 1069,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION</unmanaged>
	CreateProtectedResourceSession = 1070,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION</unmanaged>
	LiveCryptoSession = 1071,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION_POLICY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION_POLICY</unmanaged>
	LiveCryptoSessionPolicy = 1072,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_PROTECTED_RESOURCE_SESSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_PROTECTED_RESOURCE_SESSION</unmanaged>
	LiveProtectedResourceSession = 1073,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION</unmanaged>
	DestroyCryptoSession = 1074,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION_POLICY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION_POLICY</unmanaged>
	DestroyCryptoSessionPolicy = 1075,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_PROTECTED_RESOURCE_SESSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_PROTECTED_RESOURCE_SESSION</unmanaged>
	DestroyProtectedResourceSession = 1076,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_PROTECTED_RESOURCE_SESSION_UNSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_PROTECTED_RESOURCE_SESSION_UNSUPPORTED</unmanaged>
	ProtectedResourceSessionUnsupported = 1077,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_FENCE_INVALIDOPERATION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_FENCE_INVALIDOPERATION</unmanaged>
	FenceInvalidoperation = 1078,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEQUERY_HEAP_COPY_QUEUE_TIMESTAMPS_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEQUERY_HEAP_COPY_QUEUE_TIMESTAMPS_NOT_SUPPORTED</unmanaged>
	CreatequeryHeapCopyQueueTimestampsNotSupported = 1079,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_DEFERRED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_DEFERRED</unmanaged>
	SamplepositionsMismatchDeferred = 1080,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMFIRSTUSE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMFIRSTUSE</unmanaged>
	SamplepositionsMismatchRecordtimeAssumedfromfirstuse = 1081,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMCLEAR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMCLEAR</unmanaged>
	SamplepositionsMismatchRecordtimeAssumedfromclear = 1082,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEODECODERHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEODECODERHEAP</unmanaged>
	CreateVideodecoderheap = 1083,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_VIDEODECODERHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEODECODERHEAP</unmanaged>
	LiveVideodecoderheap = 1084,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_VIDEODECODERHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEODECODERHEAP</unmanaged>
	DestroyVideodecoderheap = 1085,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDARG_RETURN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDARG_RETURN</unmanaged>
	OpenexistingheapInvalidargReturn = 1086,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_OPENEXISTINGHEAP_OUTOFMEMORY_RETURN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_OPENEXISTINGHEAP_OUTOFMEMORY_RETURN</unmanaged>
	OpenexistingheapOutofmemoryReturn = 1087,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDADDRESS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDADDRESS</unmanaged>
	OpenexistingheapInvalidaddress = 1088,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDHANDLE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDHANDLE</unmanaged>
	OpenexistingheapInvalidhandle = 1089,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_DEST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_DEST</unmanaged>
	WritebufferimmediateInvalidDest = 1090,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_MODE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_MODE</unmanaged>
	WritebufferimmediateInvalidMode = 1091,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_ALIGNMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_ALIGNMENT</unmanaged>
	WritebufferimmediateInvalidAlignment = 1092,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_NOT_SUPPORTED</unmanaged>
	WritebufferimmediateNotSupported = 1093,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SETVIEWINSTANCEMASK_INVALIDARGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SETVIEWINSTANCEMASK_INVALIDARGS</unmanaged>
	SetviewinstancemaskInvalidargs = 1094,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_VIEW_INSTANCING_UNSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_VIEW_INSTANCING_UNSUPPORTED</unmanaged>
	ViewInstancingUnsupported = 1095,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_VIEW_INSTANCING_INVALIDARGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_VIEW_INSTANCING_INVALIDARGS</unmanaged>
	ViewInstancingInvalidargs = 1096,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_DECODE_REFERENCE_ONLY_FLAG"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_DECODE_REFERENCE_ONLY_FLAG</unmanaged>
	CopytextureregionMismatchDecodeReferenceOnlyFlag = 1097,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_DECODE_REFERENCE_ONLY_FLAG"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_DECODE_REFERENCE_ONLY_FLAG</unmanaged>
	CopyresourceMismatchDecodeReferenceOnlyFlag = 1098,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_FAILURE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_FAILURE</unmanaged>
	CreateVideoDecodeHeapCapsFailure = 1099,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_UNSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_UNSUPPORTED</unmanaged>
	CreateVideoDecodeHeapCapsUnsupported = 1100,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_INVALID_INPUT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_INVALID_INPUT</unmanaged>
	VideoDecodeSupportInvalidInput = 1101,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEO_DECODER_UNSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEO_DECODER_UNSUPPORTED</unmanaged>
	CreateVideoDecoderUnsupported = 1102,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_METADATA_ERROR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_METADATA_ERROR</unmanaged>
	CreategraphicspipelinestateMetadataError = 1103,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VIEW_INSTANCING_VERTEX_SIZE_EXCEEDED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VIEW_INSTANCING_VERTEX_SIZE_EXCEEDED</unmanaged>
	CreategraphicspipelinestateViewInstancingVertexSizeExceeded = 1104,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RUNTIME_INTERNAL_ERROR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RUNTIME_INTERNAL_ERROR</unmanaged>
	CreategraphicspipelinestateRuntimeInternalError = 1105,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_NO_VIDEO_API_SUPPORT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_NO_VIDEO_API_SUPPORT</unmanaged>
	NoVideoApiSupport = 1106,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_INVALID_INPUT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_INVALID_INPUT</unmanaged>
	VideoProcessSupportInvalidInput = 1107,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEO_PROCESSOR_CAPS_FAILURE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEO_PROCESSOR_CAPS_FAILURE</unmanaged>
	CreateVideoProcessorCapsFailure = 1108,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_UNSUPPORTED_FORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_UNSUPPORTED_FORMAT</unmanaged>
	VideoProcessSupportUnsupportedFormat = 1109,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_VIDEO_DECODE_FRAME_INVALID_ARGUMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_VIDEO_DECODE_FRAME_INVALID_ARGUMENT</unmanaged>
	VideoDecodeFrameInvalidArgument = 1110,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ENQUEUE_MAKE_RESIDENT_INVALID_FLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ENQUEUE_MAKE_RESIDENT_INVALID_FLAGS</unmanaged>
	EnqueueMakeResidentInvalidFlags = 1111,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_OPENEXISTINGHEAP_UNSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_OPENEXISTINGHEAP_UNSUPPORTED</unmanaged>
	OpenexistingheapUnsupported = 1112,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_VIDEO_PROCESS_FRAMES_INVALID_ARGUMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_VIDEO_PROCESS_FRAMES_INVALID_ARGUMENT</unmanaged>
	VideoProcessFramesInvalidArgument = 1113,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_UNSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_UNSUPPORTED</unmanaged>
	VideoDecodeSupportUnsupported = 1114,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMANDRECORDER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMANDRECORDER</unmanaged>
	CreateCommandrecorder = 1115,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_COMMANDRECORDER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_COMMANDRECORDER</unmanaged>
	LiveCommandrecorder = 1116,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_COMMANDRECORDER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_COMMANDRECORDER</unmanaged>
	DestroyCommandrecorder = 1117,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_VIDEO_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_VIDEO_NOT_SUPPORTED</unmanaged>
	CreateCommandRecorderVideoNotSupported = 1118,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_SUPPORT_FLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_SUPPORT_FLAGS</unmanaged>
	CreateCommandRecorderInvalidSupportFlags = 1119,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_FLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_FLAGS</unmanaged>
	CreateCommandRecorderInvalidFlags = 1120,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_MORE_RECORDERS_THAN_LOGICAL_PROCESSORS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_MORE_RECORDERS_THAN_LOGICAL_PROCESSORS</unmanaged>
	CreateCommandRecorderMoreRecordersThanLogicalProcessors = 1121,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMANDPOOL"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMANDPOOL</unmanaged>
	CreateCommandpool = 1122,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_COMMANDPOOL"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_COMMANDPOOL</unmanaged>
	LiveCommandpool = 1123,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_COMMANDPOOL"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_COMMANDPOOL</unmanaged>
	DestroyCommandpool = 1124,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMAND_POOL_INVALID_FLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_POOL_INVALID_FLAGS</unmanaged>
	CreateCommandPoolInvalidFlags = 1125,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_VIDEO_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_VIDEO_NOT_SUPPORTED</unmanaged>
	CreateCommandListVideoNotSupported = 1126,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_RECORDER_SUPPORT_FLAGS_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_RECORDER_SUPPORT_FLAGS_MISMATCH</unmanaged>
	CommandRecorderSupportFlagsMismatch = 1127,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_RECORDER_CONTENTION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_RECORDER_CONTENTION</unmanaged>
	CommandRecorderContention = 1128,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_RECORDER_USAGE_WITH_CREATECOMMANDLIST_COMMAND_LIST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_RECORDER_USAGE_WITH_CREATECOMMANDLIST_COMMAND_LIST</unmanaged>
	CommandRecorderUsageWithCreatecommandlistCommandList = 1129,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_USAGE_WITH_CREATECOMMANDLIST1_COMMAND_LIST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_USAGE_WITH_CREATECOMMANDLIST1_COMMAND_LIST</unmanaged>
	CommandAllocatorUsageWithCreatecommandlist1CommandList = 1130,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CANNOT_EXECUTE_EMPTY_COMMAND_LIST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CANNOT_EXECUTE_EMPTY_COMMAND_LIST</unmanaged>
	CannotExecuteEmptyCommandList = 1131,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CANNOT_RESET_COMMAND_POOL_WITH_OPEN_COMMAND_LISTS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CANNOT_RESET_COMMAND_POOL_WITH_OPEN_COMMAND_LISTS</unmanaged>
	CannotResetCommandPoolWithOpenCommandLists = 1132,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CANNOT_USE_COMMAND_RECORDER_WITHOUT_CURRENT_TARGET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CANNOT_USE_COMMAND_RECORDER_WITHOUT_CURRENT_TARGET</unmanaged>
	CannotUseCommandRecorderWithoutCurrentTarget = 1133,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CANNOT_CHANGE_COMMAND_RECORDER_TARGET_WHILE_RECORDING"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CANNOT_CHANGE_COMMAND_RECORDER_TARGET_WHILE_RECORDING</unmanaged>
	CannotChangeCommandRecorderTargetWhileRecording = 1134,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_POOL_SYNC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_POOL_SYNC</unmanaged>
	CommandPoolSync = 1135,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_EVICT_UNDERFLOW"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_EVICT_UNDERFLOW</unmanaged>
	EvictUnderflow = 1136,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_META_COMMAND"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_META_COMMAND</unmanaged>
	CreateMetaCommand = 1137,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_META_COMMAND"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_META_COMMAND</unmanaged>
	LiveMetaCommand = 1138,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_META_COMMAND"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_META_COMMAND</unmanaged>
	DestroyMetaCommand = 1139,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_DST_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_DST_RESOURCE</unmanaged>
	CopybufferregionInvalidDstResource = 1140,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_SRC_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_SRC_RESOURCE</unmanaged>
	CopybufferregionInvalidSrcResource = 1141,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE</unmanaged>
	AtomiccopybufferInvalidDstResource = 1142,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE</unmanaged>
	AtomiccopybufferInvalidSrcResource = 1143,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_BUFFER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_BUFFER</unmanaged>
	CreateplacedresourceonbufferNullBuffer = 1144,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_RESOURCE_DESC"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_RESOURCE_DESC</unmanaged>
	CreateplacedresourceonbufferNullResourceDesc = 1145,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_UNSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_UNSUPPORTED</unmanaged>
	CreateplacedresourceonbufferUnsupported = 1146,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_DIMENSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_DIMENSION</unmanaged>
	CreateplacedresourceonbufferInvalidBufferDimension = 1147,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_FLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_FLAGS</unmanaged>
	CreateplacedresourceonbufferInvalidBufferFlags = 1148,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_OFFSET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_OFFSET</unmanaged>
	CreateplacedresourceonbufferInvalidBufferOffset = 1149,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_DIMENSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_DIMENSION</unmanaged>
	CreateplacedresourceonbufferInvalidResourceDimension = 1150,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_FLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_FLAGS</unmanaged>
	CreateplacedresourceonbufferInvalidResourceFlags = 1151,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_OUTOFMEMORY_RETURN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_OUTOFMEMORY_RETURN</unmanaged>
	CreateplacedresourceonbufferOutofmemoryReturn = 1152,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CANNOT_CREATE_GRAPHICS_AND_VIDEO_COMMAND_RECORDER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CANNOT_CREATE_GRAPHICS_AND_VIDEO_COMMAND_RECORDER</unmanaged>
	CannotCreateGraphicsAndVideoCommandRecorder = 1153,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_POSSIBLY_MISMATCHING_PROPERTIES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_POSSIBLY_MISMATCHING_PROPERTIES</unmanaged>
	UpdatetilemappingsPossiblyMismatchingProperties = 1154,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE</unmanaged>
	CreateCommandListInvalidCommandListType = 1155,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INCOMPATIBLE_WITH_STRUCTURED_BUFFERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INCOMPATIBLE_WITH_STRUCTURED_BUFFERS</unmanaged>
	ClearunorderedaccessviewIncompatibleWithStructuredBuffers = 1156,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMPUTE_ONLY_DEVICE_OPERATION_UNSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMPUTE_ONLY_DEVICE_OPERATION_UNSUPPORTED</unmanaged>
	ComputeOnlyDeviceOperationUnsupported = 1157,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INVALID</unmanaged>
	BuildRaytracingAccelerationStructureInvalid = 1158,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_INVALID</unmanaged>
	EmitRaytracingAccelerationStructurePostbuildInfoInvalid = 1159,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPY_RAYTRACING_ACCELERATION_STRUCTURE_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPY_RAYTRACING_ACCELERATION_STRUCTURE_INVALID</unmanaged>
	CopyRaytracingAccelerationStructureInvalid = 1160,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DISPATCH_RAYS_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DISPATCH_RAYS_INVALID</unmanaged>
	DispatchRaysInvalid = 1161,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GET_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GET_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO_INVALID</unmanaged>
	GetRaytracingAccelerationStructurePrebuildInfoInvalid = 1162,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_LIFETIMETRACKER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_LIFETIMETRACKER</unmanaged>
	CreateLifetimetracker = 1163,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_LIFETIMETRACKER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_LIFETIMETRACKER</unmanaged>
	LiveLifetimetracker = 1164,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_LIFETIMETRACKER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_LIFETIMETRACKER</unmanaged>
	DestroyLifetimetracker = 1165,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROYOWNEDOBJECT_OBJECTNOTOWNED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROYOWNEDOBJECT_OBJECTNOTOWNED</unmanaged>
	DestroyownedobjectObjectnotowned = 1166,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_TRACKEDWORKLOAD"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_TRACKEDWORKLOAD</unmanaged>
	CreateTrackedworkload = 1167,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_TRACKEDWORKLOAD"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_TRACKEDWORKLOAD</unmanaged>
	LiveTrackedworkload = 1168,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD</unmanaged>
	DestroyTrackedworkload = 1169,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RENDER_PASS_ERROR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_ERROR</unmanaged>
	RenderPassError = 1170,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_META_COMMAND_ID_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_META_COMMAND_ID_INVALID</unmanaged>
	MetaCommandIdInvalid = 1171,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_META_COMMAND_UNSUPPORTED_PARAMS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_META_COMMAND_UNSUPPORTED_PARAMS</unmanaged>
	MetaCommandUnsupportedParams = 1172,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_META_COMMAND_FAILED_ENUMERATION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_META_COMMAND_FAILED_ENUMERATION</unmanaged>
	MetaCommandFailedEnumeration = 1173,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_META_COMMAND_PARAMETER_SIZE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_META_COMMAND_PARAMETER_SIZE_MISMATCH</unmanaged>
	MetaCommandParameterSizeMismatch = 1174,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_UNINITIALIZED_META_COMMAND"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_UNINITIALIZED_META_COMMAND</unmanaged>
	UninitializedMetaCommand = 1175,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_META_COMMAND_INVALID_GPU_VIRTUAL_ADDRESS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_META_COMMAND_INVALID_GPU_VIRTUAL_ADDRESS</unmanaged>
	MetaCommandInvalidGpuVirtualAddress = 1176,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDLIST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDLIST</unmanaged>
	CreateVideoencodecommandlist = 1177,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDLIST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDLIST</unmanaged>
	LiveVideoencodecommandlist = 1178,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDLIST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDLIST</unmanaged>
	DestroyVideoencodecommandlist = 1179,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDQUEUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDQUEUE</unmanaged>
	CreateVideoencodecommandqueue = 1180,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDQUEUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDQUEUE</unmanaged>
	LiveVideoencodecommandqueue = 1181,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDQUEUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDQUEUE</unmanaged>
	DestroyVideoencodecommandqueue = 1182,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONESTIMATOR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONESTIMATOR</unmanaged>
	CreateVideomotionestimator = 1183,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONESTIMATOR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONESTIMATOR</unmanaged>
	LiveVideomotionestimator = 1184,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONESTIMATOR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONESTIMATOR</unmanaged>
	DestroyVideomotionestimator = 1185,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONVECTORHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONVECTORHEAP</unmanaged>
	CreateVideomotionvectorheap = 1186,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONVECTORHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONVECTORHEAP</unmanaged>
	LiveVideomotionvectorheap = 1187,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONVECTORHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONVECTORHEAP</unmanaged>
	DestroyVideomotionvectorheap = 1188,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS</unmanaged>
	MultipleTrackedWorkloads = 1189,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS</unmanaged>
	MultipleTrackedWorkloadPairs = 1190,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR</unmanaged>
	OutOfOrderTrackedWorkloadPair = 1191,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD</unmanaged>
	CannotAddTrackedWorkload = 1192,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR</unmanaged>
	IncompleteTrackedWorkloadPair = 1193,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_STATE_OBJECT_ERROR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_STATE_OBJECT_ERROR</unmanaged>
	CreateStateObjectError = 1194,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_ERROR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_ERROR</unmanaged>
	GetShaderIdentifierError = 1195,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GET_SHADER_STACK_SIZE_ERROR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GET_SHADER_STACK_SIZE_ERROR</unmanaged>
	GetShaderStackSizeError = 1196,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GET_PIPELINE_STACK_SIZE_ERROR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GET_PIPELINE_STACK_SIZE_ERROR</unmanaged>
	GetPipelineStackSizeError = 1197,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SET_PIPELINE_STACK_SIZE_ERROR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SET_PIPELINE_STACK_SIZE_ERROR</unmanaged>
	SetPipelineStackSizeError = 1198,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_SIZE_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_SIZE_INVALID</unmanaged>
	GetShaderIdentifierSizeInvalid = 1199,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_INVALID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_INVALID</unmanaged>
	CheckDriverMatchingIdentifierInvalid = 1200,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_DRIVER_REPORTED_ISSUE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_DRIVER_REPORTED_ISSUE</unmanaged>
	CheckDriverMatchingIdentifierDriverReportedIssue = 1201,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RENDER_PASS_INVALID_RESOURCE_BARRIER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_INVALID_RESOURCE_BARRIER</unmanaged>
	RenderPassInvalidResourceBarrier = 1202,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RENDER_PASS_DISALLOWED_API_CALLED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_DISALLOWED_API_CALLED</unmanaged>
	RenderPassDisallowedApiCalled = 1203,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_NEST_RENDER_PASSES"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_NEST_RENDER_PASSES</unmanaged>
	RenderPassCannotNestRenderPasses = 1204,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_END_WITHOUT_BEGIN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_END_WITHOUT_BEGIN</unmanaged>
	RenderPassCannotEndWithoutBegin = 1205,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_CLOSE_COMMAND_LIST"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_CLOSE_COMMAND_LIST</unmanaged>
	RenderPassCannotCloseCommandList = 1206,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RENDER_PASS_GPU_WORK_WHILE_SUSPENDED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_GPU_WORK_WHILE_SUSPENDED</unmanaged>
	RenderPassGpuWorkWhileSuspended = 1207,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_SUSPEND_RESUME"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_SUSPEND_RESUME</unmanaged>
	RenderPassMismatchingSuspendResume = 1208,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RENDER_PASS_NO_PRIOR_SUSPEND_WITHIN_EXECUTECOMMANDLISTS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_NO_PRIOR_SUSPEND_WITHIN_EXECUTECOMMANDLISTS</unmanaged>
	RenderPassNoPriorSuspendWithinExecutecommandlists = 1209,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RENDER_PASS_NO_SUBSEQUENT_RESUME_WITHIN_EXECUTECOMMANDLISTS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_NO_SUBSEQUENT_RESUME_WITHIN_EXECUTECOMMANDLISTS</unmanaged>
	RenderPassNoSubsequentResumeWithinExecutecommandlists = 1210,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_TRACKED_WORKLOAD_COMMAND_QUEUE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_TRACKED_WORKLOAD_COMMAND_QUEUE_MISMATCH</unmanaged>
	TrackedWorkloadCommandQueueMismatch = 1211,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED</unmanaged>
	TrackedWorkloadNotSupported = 1212,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_NO_ACCESS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_NO_ACCESS</unmanaged>
	RenderPassMismatchingNoAccess = 1213,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RENDER_PASS_UNSUPPORTED_RESOLVE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RENDER_PASS_UNSUPPORTED_RESOLVE</unmanaged>
	RenderPassUnsupportedResolve = 1214,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INVALID_RESOURCE_PTR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INVALID_RESOURCE_PTR</unmanaged>
	ClearunorderedaccessviewInvalidResourcePtr = 1215,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_SIGNAL"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_SIGNAL</unmanaged>
	Windows7FenceOutoforderSignal = 1216,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_WAIT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_WAIT</unmanaged>
	Windows7FenceOutoforderWait = 1217,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_ESTIMATOR_INVALID_ARGUMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_ESTIMATOR_INVALID_ARGUMENT</unmanaged>
	VideoCreateMotionEstimatorInvalidArgument = 1218,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT</unmanaged>
	VideoCreateMotionVectorHeapInvalidArgument = 1219,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ESTIMATE_MOTION_INVALID_ARGUMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ESTIMATE_MOTION_INVALID_ARGUMENT</unmanaged>
	EstimateMotionInvalidArgument = 1220,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT</unmanaged>
	ResolveMotionVectorHeapInvalidArgument = 1221,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_HEAP_TYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_HEAP_TYPE</unmanaged>
	GetgpuvirtualaddressInvalidHeapType = 1222,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SET_BACKGROUND_PROCESSING_MODE_INVALID_ARGUMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SET_BACKGROUND_PROCESSING_MODE_INVALID_ARGUMENT</unmanaged>
	SetBackgroundProcessingModeInvalidArgument = 1223,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE_FOR_FEATURE_LEVEL"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE_FOR_FEATURE_LEVEL</unmanaged>
	CreateCommandListInvalidCommandListTypeForFeatureLevel = 1224,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEOEXTENSIONCOMMAND"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOEXTENSIONCOMMAND</unmanaged>
	CreateVideoextensioncommand = 1225,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_VIDEOEXTENSIONCOMMAND"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOEXTENSIONCOMMAND</unmanaged>
	LiveVideoextensioncommand = 1226,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_VIDEOEXTENSIONCOMMAND"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOEXTENSIONCOMMAND</unmanaged>
	DestroyVideoextensioncommand = 1227,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_INVALID_VIDEO_EXTENSION_COMMAND_ID"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_INVALID_VIDEO_EXTENSION_COMMAND_ID</unmanaged>
	InvalidVideoExtensionCommandId = 1228,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_VIDEO_EXTENSION_COMMAND_INVALID_ARGUMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_VIDEO_EXTENSION_COMMAND_INVALID_ARGUMENT</unmanaged>
	VideoExtensionCommandInvalidArgument = 1229,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_UNIQUE_IN_DXIL_LIBRARY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_UNIQUE_IN_DXIL_LIBRARY</unmanaged>
	CreateRootSignatureNotUniqueInDxilLibrary = 1230,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_VARIABLE_SHADING_RATE_NOT_ALLOWED_WITH_TIR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_VARIABLE_SHADING_RATE_NOT_ALLOWED_WITH_TIR</unmanaged>
	VariableShadingRateNotAllowedWithTir = 1231,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GEOMETRY_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GEOMETRY_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE</unmanaged>
	GeometryShaderOutputtingBothViewportArrayIndexAndShadingRateNotSupportedOnDevice = 1232,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_SHADING_RATE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_SHADING_RATE</unmanaged>
	RssetshadingRateInvalidShadingRate = 1233,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RSSETSHADING_RATE_SHADING_RATE_NOT_PERMITTED_BY_CAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RSSETSHADING_RATE_SHADING_RATE_NOT_PERMITTED_BY_CAP</unmanaged>
	RssetshadingRateShadingRateNotPermittedByCap = 1234,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_COMBINER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_COMBINER</unmanaged>
	RssetshadingRateInvalidCombiner = 1235,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RSSETSHADINGRATEIMAGE_REQUIRES_TIER_2"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RSSETSHADINGRATEIMAGE_REQUIRES_TIER_2</unmanaged>
	RssetshadingrateimageRequiresTier2 = 1236,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RSSETSHADINGRATE_REQUIRES_TIER_1"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RSSETSHADINGRATE_REQUIRES_TIER_1</unmanaged>
	RssetshadingrateRequiresTier1 = 1237,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_FORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_FORMAT</unmanaged>
	ShadingRateImageIncorrectFormat = 1238,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_ARRAY_SIZE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_ARRAY_SIZE</unmanaged>
	ShadingRateImageIncorrectArraySize = 1239,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_MIP_LEVEL"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_MIP_LEVEL</unmanaged>
	ShadingRateImageIncorrectMipLevel = 1240,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_COUNT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_COUNT</unmanaged>
	ShadingRateImageIncorrectSampleCount = 1241,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_QUALITY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_QUALITY</unmanaged>
	ShadingRateImageIncorrectSampleQuality = 1242,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_NON_RETAIL_SHADER_MODEL_WONT_VALIDATE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_NON_RETAIL_SHADER_MODEL_WONT_VALIDATE</unmanaged>
	NonRetailShaderModelWontValidate = 1243,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_ROOT_SIGNATURE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_ROOT_SIGNATURE_MISMATCH</unmanaged>
	CreategraphicspipelinestateAsRootSignatureMismatch = 1244,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_ROOT_SIGNATURE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_ROOT_SIGNATURE_MISMATCH</unmanaged>
	CreategraphicspipelinestateMsRootSignatureMismatch = 1245,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ADD_TO_STATE_OBJECT_ERROR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ADD_TO_STATE_OBJECT_ERROR</unmanaged>
	AddToStateObjectError = 1246,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION_INVALID_ARGUMENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION_INVALID_ARGUMENT</unmanaged>
	CreateProtectedResourceSessionInvalidArgument = 1247,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_PSO_DESC_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_PSO_DESC_MISMATCH</unmanaged>
	CreategraphicspipelinestateMsPsoDescMismatch = 1248,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEPIPELINESTATE_MS_INCOMPLETE_TYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEPIPELINESTATE_MS_INCOMPLETE_TYPE</unmanaged>
	CreatepipelinestateMsIncompleteType = 1249,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_NOT_MS_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_NOT_MS_MISMATCH</unmanaged>
	CreategraphicspipelinestateAsNotMsMismatch = 1250,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_NOT_PS_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_NOT_PS_MISMATCH</unmanaged>
	CreategraphicspipelinestateMsNotPsMismatch = 1251,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_NONZERO_SAMPLER_FEEDBACK_MIP_REGION_WITH_INCOMPATIBLE_FORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_NONZERO_SAMPLER_FEEDBACK_MIP_REGION_WITH_INCOMPATIBLE_FORMAT</unmanaged>
	NonzeroSamplerFeedbackMipRegionWithIncompatibleFormat = 1252,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_SHADER_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_SHADER_MISMATCH</unmanaged>
	CreategraphicspipelinestateInputlayoutShaderMismatch = 1253,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_EMPTY_DISPATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_EMPTY_DISPATCH</unmanaged>
	EmptyDispatch = 1254,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOURCE_FORMAT_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOURCE_FORMAT_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY</unmanaged>
	ResourceFormatRequiresSamplerFeedbackCapability = 1255,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_MIP_REGION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_MIP_REGION</unmanaged>
	SamplerFeedbackMapInvalidMipRegion = 1256,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_DIMENSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_DIMENSION</unmanaged>
	SamplerFeedbackMapInvalidDimension = 1257,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_COUNT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_COUNT</unmanaged>
	SamplerFeedbackMapInvalidSampleCount = 1258,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_QUALITY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_QUALITY</unmanaged>
	SamplerFeedbackMapInvalidSampleQuality = 1259,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_LAYOUT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_LAYOUT</unmanaged>
	SamplerFeedbackMapInvalidLayout = 1260,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_REQUIRES_UNORDERED_ACCESS_FLAG"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_REQUIRES_UNORDERED_ACCESS_FLAG</unmanaged>
	SamplerFeedbackMapRequiresUnorderedAccessFlag = 1261,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_NULL_ARGUMENTS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_NULL_ARGUMENTS</unmanaged>
	SamplerFeedbackCreateUavNullArguments = 1262,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_UAV_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_UAV_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY</unmanaged>
	SamplerFeedbackUavRequiresSamplerFeedbackCapability = 1263,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_REQUIRES_FEEDBACK_MAP_FORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_REQUIRES_FEEDBACK_MAP_FORMAT</unmanaged>
	SamplerFeedbackCreateUavRequiresFeedbackMapFormat = 1264,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEMESHSHADER_INVALIDSHADERBYTECODE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEMESHSHADER_INVALIDSHADERBYTECODE</unmanaged>
	CreatemeshshaderInvalidshaderbytecode = 1265,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTOFMEMORY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTOFMEMORY</unmanaged>
	CreatemeshshaderOutofmemory = 1266,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEMESHSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEMESHSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE</unmanaged>
	CreatemeshshaderwithstreamoutputInvalidshadertype = 1267,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_INVALID_FORMAT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_INVALID_FORMAT</unmanaged>
	ResolvesubresourceSamplerFeedbackTranscodeInvalidFormat = 1268,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_INVALID_MIP_LEVEL_COUNT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_INVALID_MIP_LEVEL_COUNT</unmanaged>
	ResolvesubresourceSamplerFeedbackInvalidMipLevelCount = 1269,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_ARRAY_SIZE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_ARRAY_SIZE_MISMATCH</unmanaged>
	ResolvesubresourceSamplerFeedbackTranscodeArraySizeMismatch = 1270,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_MISMATCHING_TARGETED_RESOURCE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_MISMATCHING_TARGETED_RESOURCE</unmanaged>
	SamplerFeedbackCreateUavMismatchingTargetedResource = 1271,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTPUTEXCEEDSMAXSIZE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTPUTEXCEEDSMAXSIZE</unmanaged>
	CreatemeshshaderOutputexceedsmaxsize = 1272,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEMESHSHADER_GROUPSHAREDEXCEEDSMAXSIZE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEMESHSHADER_GROUPSHAREDEXCEEDSMAXSIZE</unmanaged>
	CreatemeshshaderGroupsharedexceedsmaxsize = 1273,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_VERTEX_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_VERTEX_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE</unmanaged>
	VertexShaderOutputtingBothViewportArrayIndexAndShadingRateNotSupportedOnDevice = 1274,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_MESH_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_MESH_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE</unmanaged>
	MeshShaderOutputtingBothViewportArrayIndexAndShadingRateNotSupportedOnDevice = 1275,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEMESHSHADER_MISMATCHEDASMSPAYLOADSIZE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEMESHSHADER_MISMATCHEDASMSPAYLOADSIZE</unmanaged>
	CreatemeshshaderMismatchedasmspayloadsize = 1276,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_UNBOUNDED_STATIC_DESCRIPTORS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_UNBOUNDED_STATIC_DESCRIPTORS</unmanaged>
	CreateRootSignatureUnboundedStaticDescriptors = 1277,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_INVALIDSHADERBYTECODE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_INVALIDSHADERBYTECODE</unmanaged>
	CreateamplificationshaderInvalidshaderbytecode = 1278,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_OUTOFMEMORY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_OUTOFMEMORY</unmanaged>
	CreateamplificationshaderOutofmemory = 1279,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_SHADERCACHESESSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_SHADERCACHESESSION</unmanaged>
	CreateShadercachesession = 1280,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_SHADERCACHESESSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_SHADERCACHESESSION</unmanaged>
	LiveShadercachesession = 1281,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_SHADERCACHESESSION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_SHADERCACHESESSION</unmanaged>
	DestroyShadercachesession = 1282,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_INVALIDARGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_INVALIDARGS</unmanaged>
	CreateshadercachesessionInvalidargs = 1283,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_DISABLED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_DISABLED</unmanaged>
	CreateshadercachesessionDisabled = 1284,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_ALREADYOPEN"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_ALREADYOPEN</unmanaged>
	CreateshadercachesessionAlreadyopen = 1285,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADERCACHECONTROL_DEVELOPERMODE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADERCACHECONTROL_DEVELOPERMODE</unmanaged>
	ShadercachecontrolDevelopermode = 1286,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADERCACHECONTROL_INVALIDFLAGS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADERCACHECONTROL_INVALIDFLAGS</unmanaged>
	ShadercachecontrolInvalidflags = 1287,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADERCACHECONTROL_STATEALREADYSET"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADERCACHECONTROL_STATEALREADYSET</unmanaged>
	ShadercachecontrolStatealreadyset = 1288,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADERCACHECONTROL_IGNOREDFLAG"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADERCACHECONTROL_IGNOREDFLAG</unmanaged>
	ShadercachecontrolIgnoredflag = 1289,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_ALREADYPRESENT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_ALREADYPRESENT</unmanaged>
	ShadercachesessionStorevalueAlreadypresent = 1290,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_HASHCOLLISION"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_HASHCOLLISION</unmanaged>
	ShadercachesessionStorevalueHashcollision = 1291,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_CACHEFULL"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_CACHEFULL</unmanaged>
	ShadercachesessionStorevalueCachefull = 1292,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADERCACHESESSION_FINDVALUE_NOTFOUND"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADERCACHESESSION_FINDVALUE_NOTFOUND</unmanaged>
	ShadercachesessionFindvalueNotfound = 1293,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADERCACHESESSION_CORRUPT"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADERCACHESESSION_CORRUPT</unmanaged>
	ShadercachesessionCorrupt = 1294,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADERCACHESESSION_DISABLED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADERCACHESESSION_DISABLED</unmanaged>
	ShadercachesessionDisabled = 1295,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_OVERSIZED_DISPATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_OVERSIZED_DISPATCH</unmanaged>
	OversizedDispatch = 1296,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEOENCODER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOENCODER</unmanaged>
	CreateVideoencoder = 1297,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_VIDEOENCODER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOENCODER</unmanaged>
	LiveVideoencoder = 1298,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_VIDEOENCODER"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOENCODER</unmanaged>
	DestroyVideoencoder = 1299,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEOENCODERHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEOENCODERHEAP</unmanaged>
	CreateVideoencoderheap = 1300,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_LIVE_VIDEOENCODERHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_LIVE_VIDEOENCODERHEAP</unmanaged>
	LiveVideoencoderheap = 1301,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESTROY_VIDEOENCODERHEAP"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESTROY_VIDEOENCODERHEAP</unmanaged>
	DestroyVideoencoderheap = 1302,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG</unmanaged>
	CopytextureregionMismatchEncodeReferenceOnlyFlag = 1303,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG</unmanaged>
	CopyresourceMismatchEncodeReferenceOnlyFlag = 1304,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ENCODE_FRAME_INVALID_PARAMETERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ENCODE_FRAME_INVALID_PARAMETERS</unmanaged>
	EncodeFrameInvalidParameters = 1305,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_ENCODE_FRAME_UNSUPPORTED_PARAMETERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_ENCODE_FRAME_UNSUPPORTED_PARAMETERS</unmanaged>
	EncodeFrameUnsupportedParameters = 1306,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVE_ENCODER_OUTPUT_METADATA_INVALID_PARAMETERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVE_ENCODER_OUTPUT_METADATA_INVALID_PARAMETERS</unmanaged>
	ResolveEncoderOutputMetadataInvalidParameters = 1307,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVE_ENCODER_OUTPUT_METADATA_UNSUPPORTED_PARAMETERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVE_ENCODER_OUTPUT_METADATA_UNSUPPORTED_PARAMETERS</unmanaged>
	ResolveEncoderOutputMetadataUnsupportedParameters = 1308,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_INVALID_PARAMETERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_INVALID_PARAMETERS</unmanaged>
	CreateVideoEncoderInvalidParameters = 1309,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_UNSUPPORTED_PARAMETERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_UNSUPPORTED_PARAMETERS</unmanaged>
	CreateVideoEncoderUnsupportedParameters = 1310,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_HEAP_INVALID_PARAMETERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_HEAP_INVALID_PARAMETERS</unmanaged>
	CreateVideoEncoderHeapInvalidParameters = 1311,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_HEAP_UNSUPPORTED_PARAMETERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_HEAP_UNSUPPORTED_PARAMETERS</unmanaged>
	CreateVideoEncoderHeapUnsupportedParameters = 1312,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATECOMMANDLIST_NULL_COMMANDALLOCATOR"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATECOMMANDLIST_NULL_COMMANDALLOCATOR</unmanaged>
	CreatecommandlistNullCommandallocator = 1313,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CLEAR_UNORDERED_ACCESS_VIEW_INVALID_DESCRIPTOR_HANDLE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CLEAR_UNORDERED_ACCESS_VIEW_INVALID_DESCRIPTOR_HANDLE</unmanaged>
	ClearUnorderedAccessViewInvalidDescriptorHandle = 1314,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_DESCRIPTOR_HEAP_NOT_SHADER_VISIBLE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_DESCRIPTOR_HEAP_NOT_SHADER_VISIBLE</unmanaged>
	DescriptorHeapNotShaderVisible = 1315,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEBLENDSTATE_BLENDOP_WARNING"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_BLENDOP_WARNING</unmanaged>
	CreateblendstateBlendopWarning = 1316,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEBLENDSTATE_BLENDOPALPHA_WARNING"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEBLENDSTATE_BLENDOPALPHA_WARNING</unmanaged>
	CreateblendstateBlendopalphaWarning = 1317,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_WRITE_COMBINE_PERFORMANCE_WARNING"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_WRITE_COMBINE_PERFORMANCE_WARNING</unmanaged>
	WriteCombinePerformanceWarning = 1318,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_RESOLVE_QUERY_INVALID_QUERY_STATE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_RESOLVE_QUERY_INVALID_QUERY_STATE</unmanaged>
	ResolveQueryInvalidQueryState = 1319,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SETPRIVATEDATA_NO_ACCESS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SETPRIVATEDATA_NO_ACCESS</unmanaged>
	SetprivatedataNoAccess = 1320,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_SAMPLER_MODE_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_SAMPLER_MODE_MISMATCH</unmanaged>
	CommandListStaticDescriptorSamplerModeMismatch = 1321,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_UNSUPPORTED_BUFFER_WIDTH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_UNSUPPORTED_BUFFER_WIDTH</unmanaged>
	GetcopyablefootprintsUnsupportedBufferWidth = 1322,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_CREATEMESHSHADER_TOPOLOGY_MISMATCH"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_CREATEMESHSHADER_TOPOLOGY_MISMATCH</unmanaged>
	CreatemeshshaderTopologyMismatch = 1323,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_VRS_SUM_COMBINER_REQUIRES_CAPABILITY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_VRS_SUM_COMBINER_REQUIRES_CAPABILITY</unmanaged>
	VrsSumCombinerRequiresCapability = 1324,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SETTING_SHADING_RATE_FROM_MS_REQUIRES_CAPABILITY"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SETTING_SHADING_RATE_FROM_MS_REQUIRES_CAPABILITY</unmanaged>
	SettingShadingRateFromMsRequiresCapability = 1325,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADERCACHESESSION_SHADERCACHEDELETE_NOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADERCACHESESSION_SHADERCACHEDELETE_NOTSUPPORTED</unmanaged>
	ShadercachesessionShadercachedeleteNotsupported = 1326,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_ID::D3D12_MESSAGE_ID_SHADERCACHECONTROL_SHADERCACHECLEAR_NOTSUPPORTED"]/*' />
	/// <unmanaged>D3D12_MESSAGE_ID_SHADERCACHECONTROL_SHADERCACHECLEAR_NOTSUPPORTED</unmanaged>
	ShadercachecontrolShadercacheclearNotsupported = 1327,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_CALLBACK_FLAGS"]/*' />
/// <unmanaged>D3D12_MESSAGE_CALLBACK_FLAGS</unmanaged>
[Flags]
public enum MessageCallbackFlags : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_CALLBACK_FLAGS::D3D12_MESSAGE_CALLBACK_FLAG_NONE"]/*' />
	/// <unmanaged>D3D12_MESSAGE_CALLBACK_FLAG_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE_CALLBACK_FLAGS::D3D12_MESSAGE_CALLBACK_IGNORE_FILTERS"]/*' />
	/// <unmanaged>D3D12_MESSAGE_CALLBACK_IGNORE_FILTERS</unmanaged>
	D3D12_MESSAGE_CALLBACK_IGNORE_FILTERS = 1,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AXIS_SHADING_RATE"]/*' />
/// <unmanaged>D3D12_AXIS_SHADING_RATE</unmanaged>
public enum AxisShadingRate : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AXIS_SHADING_RATE::D3D12_AXIS_SHADING_RATE_1X"]/*' />
	/// <unmanaged>D3D12_AXIS_SHADING_RATE_1X</unmanaged>
	_1x = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AXIS_SHADING_RATE::D3D12_AXIS_SHADING_RATE_2X"]/*' />
	/// <unmanaged>D3D12_AXIS_SHADING_RATE_2X</unmanaged>
	_2x = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AXIS_SHADING_RATE::D3D12_AXIS_SHADING_RATE_4X"]/*' />
	/// <unmanaged>D3D12_AXIS_SHADING_RATE_4X</unmanaged>
	_4x = 2,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADING_RATE"]/*' />
/// <unmanaged>D3D12_SHADING_RATE</unmanaged>
public enum ShadingRate : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADING_RATE::D3D12_SHADING_RATE_1X1"]/*' />
	/// <unmanaged>D3D12_SHADING_RATE_1X1</unmanaged>
	_1x1 = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADING_RATE::D3D12_SHADING_RATE_1X2"]/*' />
	/// <unmanaged>D3D12_SHADING_RATE_1X2</unmanaged>
	_1x2 = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADING_RATE::D3D12_SHADING_RATE_2X1"]/*' />
	/// <unmanaged>D3D12_SHADING_RATE_2X1</unmanaged>
	_2x1 = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADING_RATE::D3D12_SHADING_RATE_2X2"]/*' />
	/// <unmanaged>D3D12_SHADING_RATE_2X2</unmanaged>
	_2x2 = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADING_RATE::D3D12_SHADING_RATE_2X4"]/*' />
	/// <unmanaged>D3D12_SHADING_RATE_2X4</unmanaged>
	_2x4 = 6,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADING_RATE::D3D12_SHADING_RATE_4X2"]/*' />
	/// <unmanaged>D3D12_SHADING_RATE_4X2</unmanaged>
	_4x2 = 9,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADING_RATE::D3D12_SHADING_RATE_4X4"]/*' />
	/// <unmanaged>D3D12_SHADING_RATE_4X4</unmanaged>
	_4x4 = 10,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADING_RATE_COMBINER"]/*' />
/// <unmanaged>D3D12_SHADING_RATE_COMBINER</unmanaged>
public enum ShadingRateCombiner : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADING_RATE_COMBINER::D3D12_SHADING_RATE_COMBINER_PASSTHROUGH"]/*' />
	/// <unmanaged>D3D12_SHADING_RATE_COMBINER_PASSTHROUGH</unmanaged>
	Passthrough = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADING_RATE_COMBINER::D3D12_SHADING_RATE_COMBINER_OVERRIDE"]/*' />
	/// <unmanaged>D3D12_SHADING_RATE_COMBINER_OVERRIDE</unmanaged>
	Override = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADING_RATE_COMBINER::D3D12_SHADING_RATE_COMBINER_MIN"]/*' />
	/// <unmanaged>D3D12_SHADING_RATE_COMBINER_MIN</unmanaged>
	Min = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADING_RATE_COMBINER::D3D12_SHADING_RATE_COMBINER_MAX"]/*' />
	/// <unmanaged>D3D12_SHADING_RATE_COMBINER_MAX</unmanaged>
	Max = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADING_RATE_COMBINER::D3D12_SHADING_RATE_COMBINER_SUM"]/*' />
	/// <unmanaged>D3D12_SHADING_RATE_COMBINER_SUM</unmanaged>
	Sum = 4,
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VERSION_TYPE"]/*' />
/// <unmanaged>D3D12_SHADER_VERSION_TYPE</unmanaged>
public enum ShaderVersionType : int
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VERSION_TYPE::D3D12_SHVER_PIXEL_SHADER"]/*' />
	/// <unmanaged>D3D12_SHVER_PIXEL_SHADER</unmanaged>
	D3D12_SHVER_PIXEL_SHADER = 0,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VERSION_TYPE::D3D12_SHVER_VERTEX_SHADER"]/*' />
	/// <unmanaged>D3D12_SHVER_VERTEX_SHADER</unmanaged>
	D3D12_SHVER_VERTEX_SHADER = 1,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VERSION_TYPE::D3D12_SHVER_GEOMETRY_SHADER"]/*' />
	/// <unmanaged>D3D12_SHVER_GEOMETRY_SHADER</unmanaged>
	D3D12_SHVER_GEOMETRY_SHADER = 2,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VERSION_TYPE::D3D12_SHVER_HULL_SHADER"]/*' />
	/// <unmanaged>D3D12_SHVER_HULL_SHADER</unmanaged>
	D3D12_SHVER_HULL_SHADER = 3,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VERSION_TYPE::D3D12_SHVER_DOMAIN_SHADER"]/*' />
	/// <unmanaged>D3D12_SHVER_DOMAIN_SHADER</unmanaged>
	D3D12_SHVER_DOMAIN_SHADER = 4,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VERSION_TYPE::D3D12_SHVER_COMPUTE_SHADER"]/*' />
	/// <unmanaged>D3D12_SHVER_COMPUTE_SHADER</unmanaged>
	D3D12_SHVER_COMPUTE_SHADER = 5,
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VERSION_TYPE::D3D12_SHVER_RESERVED0"]/*' />
	/// <unmanaged>D3D12_SHVER_RESERVED0</unmanaged>
	D3D12_SHVER_RESERVED0 = 65520,
}

#endregion Enums

#region Generated Enums
#endregion Generated Enums

#region Unions
#endregion Unions

#region Structs
/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_QUEUE_DESC"]/*' />
/// <unmanaged>D3D12_COMMAND_QUEUE_DESC</unmanaged>
public partial struct CommandQueueDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_QUEUE_DESC::Type"]/*' />
	public CommandListType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_QUEUE_DESC::Priority"]/*' />
	public int Priority;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_QUEUE_DESC::Flags"]/*' />
	public CommandQueueFlags Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_QUEUE_DESC::NodeMask"]/*' />
	public uint NodeMask;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INPUT_ELEMENT_DESC"]/*' />
/// <unmanaged>D3D12_INPUT_ELEMENT_DESC</unmanaged>
public partial struct InputElementDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INPUT_ELEMENT_DESC::SemanticName"]/*' />
	public unsafe byte* SemanticName;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INPUT_ELEMENT_DESC::SemanticIndex"]/*' />
	public uint SemanticIndex;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INPUT_ELEMENT_DESC::Format"]/*' />
	public Graphics.Dxgi.Common.Format Format;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INPUT_ELEMENT_DESC::InputSlot"]/*' />
	public uint InputSlot;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INPUT_ELEMENT_DESC::AlignedByteOffset"]/*' />
	public uint AlignedByteOffset;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INPUT_ELEMENT_DESC::InputSlotClass"]/*' />
	public InputClassification InputSlotClass;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INPUT_ELEMENT_DESC::InstanceDataStepRate"]/*' />
	public uint InstanceDataStepRate;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SO_DECLARATION_ENTRY"]/*' />
/// <unmanaged>D3D12_SO_DECLARATION_ENTRY</unmanaged>
public partial struct SODeclarationEntry
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SO_DECLARATION_ENTRY::Stream"]/*' />
	public uint Stream;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SO_DECLARATION_ENTRY::SemanticName"]/*' />
	public unsafe byte* SemanticName;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SO_DECLARATION_ENTRY::SemanticIndex"]/*' />
	public uint SemanticIndex;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SO_DECLARATION_ENTRY::StartComponent"]/*' />
	public byte StartComponent;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SO_DECLARATION_ENTRY::ComponentCount"]/*' />
	public byte ComponentCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SO_DECLARATION_ENTRY::OutputSlot"]/*' />
	public byte OutputSlot;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEWPORT"]/*' />
/// <unmanaged>D3D12_VIEWPORT</unmanaged>
public partial struct Viewport
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEWPORT::TopLeftX"]/*' />
	public float TopLeftX;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEWPORT::TopLeftY"]/*' />
	public float TopLeftY;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEWPORT::Width"]/*' />
	public float Width;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEWPORT::Height"]/*' />
	public float Height;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEWPORT::MinDepth"]/*' />
	public float MinDepth;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEWPORT::MaxDepth"]/*' />
	public float MaxDepth;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BOX"]/*' />
/// <unmanaged>D3D12_BOX</unmanaged>
public partial struct Box
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BOX::left"]/*' />
	public uint left;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BOX::top"]/*' />
	public uint top;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BOX::front"]/*' />
	public uint front;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BOX::right"]/*' />
	public uint right;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BOX::bottom"]/*' />
	public uint bottom;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BOX::back"]/*' />
	public uint back;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCILOP_DESC"]/*' />
/// <unmanaged>D3D12_DEPTH_STENCILOP_DESC</unmanaged>
public partial struct DepthStencilopDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCILOP_DESC::StencilFailOp"]/*' />
	public StencilOp StencilFailOp;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCILOP_DESC::StencilDepthFailOp"]/*' />
	public StencilOp StencilDepthFailOp;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCILOP_DESC::StencilPassOp"]/*' />
	public StencilOp StencilPassOp;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCILOP_DESC::StencilFunc"]/*' />
	public ComparisonFunc StencilFunc;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC"]/*' />
/// <unmanaged>D3D12_DEPTH_STENCIL_DESC</unmanaged>
public partial struct DepthStencilDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC::DepthEnable"]/*' />
	public Bool32 DepthEnable;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC::DepthWriteMask"]/*' />
	public DepthWriteMask DepthWriteMask;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC::DepthFunc"]/*' />
	public ComparisonFunc DepthFunc;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC::StencilEnable"]/*' />
	public Bool32 StencilEnable;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC::StencilReadMask"]/*' />
	public byte StencilReadMask;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC::StencilWriteMask"]/*' />
	public byte StencilWriteMask;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC::FrontFace"]/*' />
	public DepthStencilopDescription FrontFace;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC::BackFace"]/*' />
	public DepthStencilopDescription BackFace;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC1"]/*' />
/// <unmanaged>D3D12_DEPTH_STENCIL_DESC1</unmanaged>
public partial struct DepthStencilDescription1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC1::DepthEnable"]/*' />
	public Bool32 DepthEnable;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC1::DepthWriteMask"]/*' />
	public DepthWriteMask DepthWriteMask;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC1::DepthFunc"]/*' />
	public ComparisonFunc DepthFunc;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC1::StencilEnable"]/*' />
	public Bool32 StencilEnable;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC1::StencilReadMask"]/*' />
	public byte StencilReadMask;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC1::StencilWriteMask"]/*' />
	public byte StencilWriteMask;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC1::FrontFace"]/*' />
	public DepthStencilopDescription FrontFace;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC1::BackFace"]/*' />
	public DepthStencilopDescription BackFace;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_DESC1::DepthBoundsTestEnable"]/*' />
	public Bool32 DepthBoundsTestEnable;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_TARGET_BLEND_DESC"]/*' />
/// <unmanaged>D3D12_RENDER_TARGET_BLEND_DESC</unmanaged>
public partial struct RenderTargetBlendDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_TARGET_BLEND_DESC::BlendEnable"]/*' />
	public Bool32 BlendEnable;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_TARGET_BLEND_DESC::LogicOpEnable"]/*' />
	public Bool32 LogicOpEnable;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_TARGET_BLEND_DESC::SrcBlend"]/*' />
	public Blend SrcBlend;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_TARGET_BLEND_DESC::DestBlend"]/*' />
	public Blend DestBlend;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_TARGET_BLEND_DESC::BlendOp"]/*' />
	public BlendOp BlendOp;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_TARGET_BLEND_DESC::SrcBlendAlpha"]/*' />
	public Blend SrcBlendAlpha;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_TARGET_BLEND_DESC::DestBlendAlpha"]/*' />
	public Blend DestBlendAlpha;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_TARGET_BLEND_DESC::BlendOpAlpha"]/*' />
	public BlendOp BlendOpAlpha;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_TARGET_BLEND_DESC::LogicOp"]/*' />
	public LogicOp LogicOp;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_TARGET_BLEND_DESC::RenderTargetWriteMask"]/*' />
	public ColorWriteEnable RenderTargetWriteMask;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND_DESC"]/*' />
/// <unmanaged>D3D12_BLEND_DESC</unmanaged>
public partial struct BlendDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND_DESC::AlphaToCoverageEnable"]/*' />
	public Bool32 AlphaToCoverageEnable;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND_DESC::IndependentBlendEnable"]/*' />
	public Bool32 IndependentBlendEnable;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BLEND_DESC::RenderTarget"]/*' />
	public RenderTarget__FixedBuffer RenderTarget;

	public unsafe struct RenderTarget__FixedBuffer
	{
		public RenderTargetBlendDescription e0;
		public RenderTargetBlendDescription e1;
		public RenderTargetBlendDescription e2;
		public RenderTargetBlendDescription e3;
		public RenderTargetBlendDescription e4;
		public RenderTargetBlendDescription e5;
		public RenderTargetBlendDescription e6;
		public RenderTargetBlendDescription e7;

		[UnscopedRef]
		public ref RenderTargetBlendDescription this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<RenderTargetBlendDescription> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 8);
		}
	}
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RASTERIZER_DESC"]/*' />
/// <unmanaged>D3D12_RASTERIZER_DESC</unmanaged>
public partial struct RasterizerDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RASTERIZER_DESC::FillMode"]/*' />
	public FillMode FillMode;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RASTERIZER_DESC::CullMode"]/*' />
	public CullMode CullMode;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RASTERIZER_DESC::FrontCounterClockwise"]/*' />
	public Bool32 FrontCounterClockwise;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RASTERIZER_DESC::DepthBias"]/*' />
	public int DepthBias;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RASTERIZER_DESC::DepthBiasClamp"]/*' />
	public float DepthBiasClamp;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RASTERIZER_DESC::SlopeScaledDepthBias"]/*' />
	public float SlopeScaledDepthBias;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RASTERIZER_DESC::DepthClipEnable"]/*' />
	public Bool32 DepthClipEnable;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RASTERIZER_DESC::MultisampleEnable"]/*' />
	public Bool32 MultisampleEnable;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RASTERIZER_DESC::AntialiasedLineEnable"]/*' />
	public Bool32 AntialiasedLineEnable;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RASTERIZER_DESC::ForcedSampleCount"]/*' />
	public uint ForcedSampleCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RASTERIZER_DESC::ConservativeRaster"]/*' />
	public ConservativeRasterizationMode ConservativeRaster;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_BYTECODE"]/*' />
/// <unmanaged>D3D12_SHADER_BYTECODE</unmanaged>
public partial struct ShaderBytecode
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_BYTECODE::pShaderBytecode"]/*' />
	public unsafe void* pShaderBytecode;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_BYTECODE::BytecodeLength"]/*' />
	public nuint BytecodeLength;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STREAM_OUTPUT_DESC"]/*' />
/// <unmanaged>D3D12_STREAM_OUTPUT_DESC</unmanaged>
public partial struct StreamOutputDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STREAM_OUTPUT_DESC::pSODeclaration"]/*' />
	public unsafe SODeclarationEntry* pSODeclaration;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STREAM_OUTPUT_DESC::NumEntries"]/*' />
	public uint NumEntries;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STREAM_OUTPUT_DESC::pBufferStrides"]/*' />
	public unsafe uint* pBufferStrides;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STREAM_OUTPUT_DESC::NumStrides"]/*' />
	public uint NumStrides;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STREAM_OUTPUT_DESC::RasterizedStream"]/*' />
	public uint RasterizedStream;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INPUT_LAYOUT_DESC"]/*' />
/// <unmanaged>D3D12_INPUT_LAYOUT_DESC</unmanaged>
public partial struct InputLayoutDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INPUT_LAYOUT_DESC::pInputElementDescs"]/*' />
	public unsafe InputElementDescription* pInputElementDescs;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INPUT_LAYOUT_DESC::NumElements"]/*' />
	public uint NumElements;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CACHED_PIPELINE_STATE"]/*' />
/// <unmanaged>D3D12_CACHED_PIPELINE_STATE</unmanaged>
public partial struct CachedPipelineState
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CACHED_PIPELINE_STATE::pCachedBlob"]/*' />
	public unsafe void* pCachedBlob;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CACHED_PIPELINE_STATE::CachedBlobSizeInBytes"]/*' />
	public nuint CachedBlobSizeInBytes;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC"]/*' />
/// <unmanaged>D3D12_GRAPHICS_PIPELINE_STATE_DESC</unmanaged>
public partial struct GraphicsPipelineStateDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::pRootSignature"]/*' />
	public ID3D12RootSignature pRootSignature;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::VS"]/*' />
	public ShaderBytecode VS;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::PS"]/*' />
	public ShaderBytecode PS;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::DS"]/*' />
	public ShaderBytecode DS;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::HS"]/*' />
	public ShaderBytecode HS;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::GS"]/*' />
	public ShaderBytecode GS;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::StreamOutput"]/*' />
	public StreamOutputDescription StreamOutput;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::BlendState"]/*' />
	public BlendDescription BlendState;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::SampleMask"]/*' />
	public uint SampleMask;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::RasterizerState"]/*' />
	public RasterizerDescription RasterizerState;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::DepthStencilState"]/*' />
	public DepthStencilDescription DepthStencilState;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::InputLayout"]/*' />
	public InputLayoutDescription InputLayout;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::IBStripCutValue"]/*' />
	public IndexBufferStripCutValue IBStripCutValue;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::PrimitiveTopologyType"]/*' />
	public PrimitiveTopologyType PrimitiveTopologyType;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::NumRenderTargets"]/*' />
	public uint NumRenderTargets;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::RTVFormats"]/*' />
	public RTVFormats__FixedBuffer RTVFormats;

	public unsafe struct RTVFormats__FixedBuffer
	{
		public Graphics.Dxgi.Common.Format e0;
		public Graphics.Dxgi.Common.Format e1;
		public Graphics.Dxgi.Common.Format e2;
		public Graphics.Dxgi.Common.Format e3;
		public Graphics.Dxgi.Common.Format e4;
		public Graphics.Dxgi.Common.Format e5;
		public Graphics.Dxgi.Common.Format e6;
		public Graphics.Dxgi.Common.Format e7;

		[UnscopedRef]
		public ref Graphics.Dxgi.Common.Format this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<Graphics.Dxgi.Common.Format> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 8);
		}
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::DSVFormat"]/*' />
	public Graphics.Dxgi.Common.Format DSVFormat;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::SampleDesc"]/*' />
	public Graphics.Dxgi.Common.SampleDescription SampleDesc;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::NodeMask"]/*' />
	public uint NodeMask;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::CachedPSO"]/*' />
	public CachedPipelineState CachedPSO;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GRAPHICS_PIPELINE_STATE_DESC::Flags"]/*' />
	public PipelineStateFlags Flags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMPUTE_PIPELINE_STATE_DESC"]/*' />
/// <unmanaged>D3D12_COMPUTE_PIPELINE_STATE_DESC</unmanaged>
public partial struct ComputePipelineStateDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMPUTE_PIPELINE_STATE_DESC::pRootSignature"]/*' />
	public ID3D12RootSignature pRootSignature;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMPUTE_PIPELINE_STATE_DESC::CS"]/*' />
	public ShaderBytecode CS;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMPUTE_PIPELINE_STATE_DESC::NodeMask"]/*' />
	public uint NodeMask;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMPUTE_PIPELINE_STATE_DESC::CachedPSO"]/*' />
	public CachedPipelineState CachedPSO;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMPUTE_PIPELINE_STATE_DESC::Flags"]/*' />
	public PipelineStateFlags Flags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RT_FORMAT_ARRAY"]/*' />
/// <unmanaged>D3D12_RT_FORMAT_ARRAY</unmanaged>
public partial struct RtFormatArray
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RT_FORMAT_ARRAY::RTFormats"]/*' />
	public RTFormats__FixedBuffer RTFormats;

	public unsafe struct RTFormats__FixedBuffer
	{
		public Graphics.Dxgi.Common.Format e0;
		public Graphics.Dxgi.Common.Format e1;
		public Graphics.Dxgi.Common.Format e2;
		public Graphics.Dxgi.Common.Format e3;
		public Graphics.Dxgi.Common.Format e4;
		public Graphics.Dxgi.Common.Format e5;
		public Graphics.Dxgi.Common.Format e6;
		public Graphics.Dxgi.Common.Format e7;

		[UnscopedRef]
		public ref Graphics.Dxgi.Common.Format this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<Graphics.Dxgi.Common.Format> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 8);
		}
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RT_FORMAT_ARRAY::NumRenderTargets"]/*' />
	public uint NumRenderTargets;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_STREAM_DESC"]/*' />
/// <unmanaged>D3D12_PIPELINE_STATE_STREAM_DESC</unmanaged>
public partial struct PipelineStateStreamDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_STREAM_DESC::SizeInBytes"]/*' />
	public nuint SizeInBytes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PIPELINE_STATE_STREAM_DESC::pPipelineStateSubobjectStream"]/*' />
	public unsafe void* pPipelineStateSubobjectStream;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_D3D12_OPTIONS</unmanaged>
public partial struct FeatureDataD3D12Options
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS::DoublePrecisionFloatShaderOps"]/*' />
	public Bool32 DoublePrecisionFloatShaderOps;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS::OutputMergerLogicOp"]/*' />
	public Bool32 OutputMergerLogicOp;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS::MinPrecisionSupport"]/*' />
	public ShaderMinPrecisionSupport MinPrecisionSupport;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS::TiledResourcesTier"]/*' />
	public TiledResourcesTier TiledResourcesTier;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS::ResourceBindingTier"]/*' />
	public ResourceBindingTier ResourceBindingTier;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS::PSSpecifiedStencilRefSupported"]/*' />
	public Bool32 PSSpecifiedStencilRefSupported;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS::TypedUAVLoadAdditionalFormats"]/*' />
	public Bool32 TypedUAVLoadAdditionalFormats;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS::ROVsSupported"]/*' />
	public Bool32 ROVsSupported;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS::ConservativeRasterizationTier"]/*' />
	public ConservativeRasterizationTier ConservativeRasterizationTier;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS::MaxGPUVirtualAddressBitsPerResource"]/*' />
	public uint MaxGPUVirtualAddressBitsPerResource;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS::StandardSwizzle64KBSupported"]/*' />
	public Bool32 StandardSwizzle64KBSupported;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS::CrossNodeSharingTier"]/*' />
	public CrossNodeSharingTier CrossNodeSharingTier;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS::CrossAdapterRowMajorTextureSupported"]/*' />
	public Bool32 CrossAdapterRowMajorTextureSupported;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS::VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation"]/*' />
	public Bool32 VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS::ResourceHeapTier"]/*' />
	public ResourceHeapTier ResourceHeapTier;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS1"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_D3D12_OPTIONS1</unmanaged>
public partial struct FeatureDataD3D12Options1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS1::WaveOps"]/*' />
	public Bool32 WaveOps;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS1::WaveLaneCountMin"]/*' />
	public uint WaveLaneCountMin;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS1::WaveLaneCountMax"]/*' />
	public uint WaveLaneCountMax;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS1::TotalLaneCount"]/*' />
	public uint TotalLaneCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS1::ExpandedComputeResourceStates"]/*' />
	public Bool32 ExpandedComputeResourceStates;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS1::Int64ShaderOps"]/*' />
	public Bool32 Int64ShaderOps;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS2"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_D3D12_OPTIONS2</unmanaged>
public partial struct FeatureDataD3D12Options2
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS2::DepthBoundsTestSupported"]/*' />
	public Bool32 DepthBoundsTestSupported;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS2::ProgrammableSamplePositionsTier"]/*' />
	public ProgrammableSamplePositionsTier ProgrammableSamplePositionsTier;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_ROOT_SIGNATURE"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_ROOT_SIGNATURE</unmanaged>
public partial struct FeatureDataRootSignature
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_ROOT_SIGNATURE::HighestVersion"]/*' />
	public RootSignatureVersion HighestVersion;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_ARCHITECTURE"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_ARCHITECTURE</unmanaged>
public partial struct FeatureDataArchitecture
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_ARCHITECTURE::NodeIndex"]/*' />
	public uint NodeIndex;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_ARCHITECTURE::TileBasedRenderer"]/*' />
	public Bool32 TileBasedRenderer;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_ARCHITECTURE::UMA"]/*' />
	public Bool32 UMA;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_ARCHITECTURE::CacheCoherentUMA"]/*' />
	public Bool32 CacheCoherentUMA;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_ARCHITECTURE1"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_ARCHITECTURE1</unmanaged>
public partial struct FeatureDataArchitecture1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_ARCHITECTURE1::NodeIndex"]/*' />
	public uint NodeIndex;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_ARCHITECTURE1::TileBasedRenderer"]/*' />
	public Bool32 TileBasedRenderer;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_ARCHITECTURE1::UMA"]/*' />
	public Bool32 UMA;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_ARCHITECTURE1::CacheCoherentUMA"]/*' />
	public Bool32 CacheCoherentUMA;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_ARCHITECTURE1::IsolatedMMU"]/*' />
	public Bool32 IsolatedMMU;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_FEATURE_LEVELS"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_FEATURE_LEVELS</unmanaged>
public partial struct FeatureDataFeatureLevels
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_FEATURE_LEVELS::NumFeatureLevels"]/*' />
	public uint NumFeatureLevels;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_FEATURE_LEVELS::pFeatureLevelsRequested"]/*' />
	public unsafe Graphics.Direct3D.FeatureLevel* pFeatureLevelsRequested;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_FEATURE_LEVELS::MaxSupportedFeatureLevel"]/*' />
	public Graphics.Direct3D.FeatureLevel MaxSupportedFeatureLevel;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_SHADER_MODEL"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_SHADER_MODEL</unmanaged>
public partial struct FeatureDataShaderModel
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_SHADER_MODEL::HighestShaderModel"]/*' />
	public ShaderModel HighestShaderModel;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_FORMAT_SUPPORT"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_FORMAT_SUPPORT</unmanaged>
public partial struct FeatureDataFormatSupport
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_FORMAT_SUPPORT::Format"]/*' />
	public Graphics.Dxgi.Common.Format Format;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_FORMAT_SUPPORT::Support1"]/*' />
	public FormatSupport1 Support1;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_FORMAT_SUPPORT::Support2"]/*' />
	public FormatSupport2 Support2;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS</unmanaged>
public partial struct FeatureDataMultisampleQualityLevels
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS::Format"]/*' />
	public Graphics.Dxgi.Common.Format Format;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS::SampleCount"]/*' />
	public uint SampleCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS::Flags"]/*' />
	public MultisampleQualityLevelFlags Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS::NumQualityLevels"]/*' />
	public uint NumQualityLevels;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_FORMAT_INFO"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_FORMAT_INFO</unmanaged>
public partial struct FeatureDataFormatInfo
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_FORMAT_INFO::Format"]/*' />
	public Graphics.Dxgi.Common.Format Format;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_FORMAT_INFO::PlaneCount"]/*' />
	public byte PlaneCount;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT</unmanaged>
public partial struct FeatureDataGpuVirtualAddressSupport
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT::MaxGPUVirtualAddressBitsPerResource"]/*' />
	public uint MaxGPUVirtualAddressBitsPerResource;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT::MaxGPUVirtualAddressBitsPerProcess"]/*' />
	public uint MaxGPUVirtualAddressBitsPerProcess;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_SHADER_CACHE"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_SHADER_CACHE</unmanaged>
public partial struct FeatureDataShaderCache
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_SHADER_CACHE::SupportFlags"]/*' />
	public ShaderCacheSupportFlags SupportFlags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY</unmanaged>
public partial struct FeatureDataCommandQueuePriority
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY::CommandListType"]/*' />
	public CommandListType CommandListType;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY::Priority"]/*' />
	public uint Priority;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY::PriorityForTypeIsSupported"]/*' />
	public Bool32 PriorityForTypeIsSupported;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS3"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_D3D12_OPTIONS3</unmanaged>
public partial struct FeatureDataD3D12Options3
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS3::CopyQueueTimestampQueriesSupported"]/*' />
	public Bool32 CopyQueueTimestampQueriesSupported;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS3::CastingFullyTypedFormatSupported"]/*' />
	public Bool32 CastingFullyTypedFormatSupported;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS3::WriteBufferImmediateSupportFlags"]/*' />
	public CommandListSupportFlags WriteBufferImmediateSupportFlags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS3::ViewInstancingTier"]/*' />
	public ViewInstancingTier ViewInstancingTier;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS3::BarycentricsSupported"]/*' />
	public Bool32 BarycentricsSupported;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_EXISTING_HEAPS"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_EXISTING_HEAPS</unmanaged>
public partial struct FeatureDataExistingHeaps
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_EXISTING_HEAPS::Supported"]/*' />
	public Bool32 Supported;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_DISPLAYABLE"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_DISPLAYABLE</unmanaged>
public partial struct FeatureDataDisplayable
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_DISPLAYABLE::DisplayableTexture"]/*' />
	public Bool32 DisplayableTexture;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_DISPLAYABLE::SharedResourceCompatibilityTier"]/*' />
	public SharedResourceCompatibilityTier SharedResourceCompatibilityTier;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS4"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_D3D12_OPTIONS4</unmanaged>
public partial struct FeatureDataD3D12Options4
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS4::MSAA64KBAlignedTextureSupported"]/*' />
	public Bool32 MSAA64KBAlignedTextureSupported;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS4::SharedResourceCompatibilityTier"]/*' />
	public SharedResourceCompatibilityTier SharedResourceCompatibilityTier;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS4::Native16BitShaderOpsSupported"]/*' />
	public Bool32 Native16BitShaderOpsSupported;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_SERIALIZATION"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_SERIALIZATION</unmanaged>
public partial struct FeatureDataSerialization
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_SERIALIZATION::NodeIndex"]/*' />
	public uint NodeIndex;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_SERIALIZATION::HeapSerializationTier"]/*' />
	public HeapSerializationTier HeapSerializationTier;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_CROSS_NODE"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_CROSS_NODE</unmanaged>
public partial struct FeatureDataCrossNode
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_CROSS_NODE::SharingTier"]/*' />
	public CrossNodeSharingTier SharingTier;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_CROSS_NODE::AtomicShaderInstructions"]/*' />
	public Bool32 AtomicShaderInstructions;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS5"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_D3D12_OPTIONS5</unmanaged>
public partial struct FeatureDataD3D12Options5
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS5::SRVOnlyTiledResourceTier3"]/*' />
	public Bool32 SRVOnlyTiledResourceTier3;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS5::RenderPassesTier"]/*' />
	public RenderPassTier RenderPassesTier;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS5::RaytracingTier"]/*' />
	public RaytracingTier RaytracingTier;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS6"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_D3D12_OPTIONS6</unmanaged>
public partial struct FeatureDataD3D12Options6
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS6::AdditionalShadingRatesSupported"]/*' />
	public Bool32 AdditionalShadingRatesSupported;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS6::PerPrimitiveShadingRateSupportedWithViewportIndexing"]/*' />
	public Bool32 PerPrimitiveShadingRateSupportedWithViewportIndexing;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS6::VariableShadingRateTier"]/*' />
	public VariableShadingRateTier VariableShadingRateTier;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS6::ShadingRateImageTileSize"]/*' />
	public uint ShadingRateImageTileSize;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS6::BackgroundProcessingSupported"]/*' />
	public Bool32 BackgroundProcessingSupported;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS7"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_D3D12_OPTIONS7</unmanaged>
public partial struct FeatureDataD3D12Options7
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS7::MeshShaderTier"]/*' />
	public MeshShaderTier MeshShaderTier;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS7::SamplerFeedbackTier"]/*' />
	public SamplerFeedbackTier SamplerFeedbackTier;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_QUERY_META_COMMAND"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_QUERY_META_COMMAND</unmanaged>
public partial struct FeatureDataQueryMetaCommand
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_QUERY_META_COMMAND::CommandId"]/*' />
	public Guid CommandId;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_QUERY_META_COMMAND::NodeMask"]/*' />
	public uint NodeMask;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_QUERY_META_COMMAND::pQueryInputData"]/*' />
	public unsafe void* pQueryInputData;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_QUERY_META_COMMAND::QueryInputDataSizeInBytes"]/*' />
	public nuint QueryInputDataSizeInBytes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_QUERY_META_COMMAND::pQueryOutputData"]/*' />
	public unsafe void* pQueryOutputData;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_QUERY_META_COMMAND::QueryOutputDataSizeInBytes"]/*' />
	public nuint QueryOutputDataSizeInBytes;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS8"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_D3D12_OPTIONS8</unmanaged>
public partial struct FeatureDataD3D12Options8
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS8::UnalignedBlockTexturesSupported"]/*' />
	public Bool32 UnalignedBlockTexturesSupported;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS9"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_D3D12_OPTIONS9</unmanaged>
public partial struct FeatureDataD3D12Options9
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS9::MeshShaderPipelineStatsSupported"]/*' />
	public Bool32 MeshShaderPipelineStatsSupported;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS9::MeshShaderSupportsFullRangeRenderTargetArrayIndex"]/*' />
	public Bool32 MeshShaderSupportsFullRangeRenderTargetArrayIndex;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS9::AtomicInt64OnTypedResourceSupported"]/*' />
	public Bool32 AtomicInt64OnTypedResourceSupported;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS9::AtomicInt64OnGroupSharedSupported"]/*' />
	public Bool32 AtomicInt64OnGroupSharedSupported;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS9::DerivativesInMeshAndAmplificationShadersSupported"]/*' />
	public Bool32 DerivativesInMeshAndAmplificationShadersSupported;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS9::WaveMMATier"]/*' />
	public WaveMmaTier WaveMMATier;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS10"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_D3D12_OPTIONS10</unmanaged>
public partial struct FeatureDataD3D12Options10
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS10::VariableRateShadingSumCombinerSupported"]/*' />
	public Bool32 VariableRateShadingSumCombinerSupported;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS10::MeshShaderPerPrimitiveShadingRateSupported"]/*' />
	public Bool32 MeshShaderPerPrimitiveShadingRateSupported;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS11"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_D3D12_OPTIONS11</unmanaged>
public partial struct FeatureDataD3D12Options11
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_D3D12_OPTIONS11::AtomicInt64OnDescriptorHeapResourceSupported"]/*' />
	public Bool32 AtomicInt64OnDescriptorHeapResourceSupported;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_ALLOCATION_INFO"]/*' />
/// <unmanaged>D3D12_RESOURCE_ALLOCATION_INFO</unmanaged>
public partial struct ResourceAllocationInfo
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_ALLOCATION_INFO::SizeInBytes"]/*' />
	public ulong SizeInBytes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_ALLOCATION_INFO::Alignment"]/*' />
	public ulong Alignment;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_ALLOCATION_INFO1"]/*' />
/// <unmanaged>D3D12_RESOURCE_ALLOCATION_INFO1</unmanaged>
public partial struct ResourceAllocationInfo1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_ALLOCATION_INFO1::Offset"]/*' />
	public ulong Offset;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_ALLOCATION_INFO1::Alignment"]/*' />
	public ulong Alignment;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_ALLOCATION_INFO1::SizeInBytes"]/*' />
	public ulong SizeInBytes;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_PROPERTIES"]/*' />
/// <unmanaged>D3D12_HEAP_PROPERTIES</unmanaged>
public partial struct HeapProperties
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_PROPERTIES::Type"]/*' />
	public HeapType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_PROPERTIES::CPUPageProperty"]/*' />
	public CpuPageProperty CPUPageProperty;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_PROPERTIES::MemoryPoolPreference"]/*' />
	public MemoryPool MemoryPoolPreference;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_PROPERTIES::CreationNodeMask"]/*' />
	public uint CreationNodeMask;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_PROPERTIES::VisibleNodeMask"]/*' />
	public uint VisibleNodeMask;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_DESC"]/*' />
/// <unmanaged>D3D12_HEAP_DESC</unmanaged>
public partial struct HeapDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_DESC::SizeInBytes"]/*' />
	public ulong SizeInBytes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_DESC::Properties"]/*' />
	public HeapProperties Properties;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_DESC::Alignment"]/*' />
	public ulong Alignment;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HEAP_DESC::Flags"]/*' />
	public HeapFlags Flags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MIP_REGION"]/*' />
/// <unmanaged>D3D12_MIP_REGION</unmanaged>
public partial struct MipRegion
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MIP_REGION::Width"]/*' />
	public uint Width;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MIP_REGION::Height"]/*' />
	public uint Height;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MIP_REGION::Depth"]/*' />
	public uint Depth;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC"]/*' />
/// <unmanaged>D3D12_RESOURCE_DESC</unmanaged>
public partial struct ResourceDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC::Dimension"]/*' />
	public ResourceDimension Dimension;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC::Alignment"]/*' />
	public ulong Alignment;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC::Width"]/*' />
	public ulong Width;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC::Height"]/*' />
	public uint Height;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC::DepthOrArraySize"]/*' />
	public ushort DepthOrArraySize;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC::MipLevels"]/*' />
	public ushort MipLevels;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC::Format"]/*' />
	public Graphics.Dxgi.Common.Format Format;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC::SampleDesc"]/*' />
	public Graphics.Dxgi.Common.SampleDescription SampleDesc;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC::Layout"]/*' />
	public TextureLayout Layout;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC::Flags"]/*' />
	public ResourceFlags Flags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC1"]/*' />
/// <unmanaged>D3D12_RESOURCE_DESC1</unmanaged>
public partial struct ResourceDescription1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC1::Dimension"]/*' />
	public ResourceDimension Dimension;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC1::Alignment"]/*' />
	public ulong Alignment;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC1::Width"]/*' />
	public ulong Width;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC1::Height"]/*' />
	public uint Height;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC1::DepthOrArraySize"]/*' />
	public ushort DepthOrArraySize;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC1::MipLevels"]/*' />
	public ushort MipLevels;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC1::Format"]/*' />
	public Graphics.Dxgi.Common.Format Format;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC1::SampleDesc"]/*' />
	public Graphics.Dxgi.Common.SampleDescription SampleDesc;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC1::Layout"]/*' />
	public TextureLayout Layout;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC1::Flags"]/*' />
	public ResourceFlags Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_DESC1::SamplerFeedbackMipRegion"]/*' />
	public MipRegion SamplerFeedbackMipRegion;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_VALUE"]/*' />
/// <unmanaged>D3D12_DEPTH_STENCIL_VALUE</unmanaged>
public partial struct DepthStencilValue
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_VALUE::Depth"]/*' />
	public float Depth;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_VALUE::Stencil"]/*' />
	public byte Stencil;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CLEAR_VALUE"]/*' />
/// <unmanaged>D3D12_CLEAR_VALUE</unmanaged>
public partial struct ClearValue
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CLEAR_VALUE::Format"]/*' />
	public Graphics.Dxgi.Common.Format Format;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CLEAR_VALUE::Anonymous"]/*' />
	public _Anonymous_e__Union Anonymous;

	[UnscopedRef]
	public unsafe Span<float> Color
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			return MemoryMarshal.CreateSpan(ref Anonymous.Color[0], 4);
		}
	}

	[UnscopedRef]
	public ref DepthStencilValue DepthStencil
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.DepthStencil;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.DepthStencil, 1));
#endif
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	public partial struct _Anonymous_e__Union
	{
		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Color"]/*' />
		[FieldOffset(0)]
		public unsafe fixed float Color[4];

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::DepthStencil"]/*' />
		[FieldOffset(0)]
		public DepthStencilValue DepthStencil;
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RANGE"]/*' />
/// <unmanaged>D3D12_RANGE</unmanaged>
public partial struct Range
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RANGE::Begin"]/*' />
	public nuint Begin;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RANGE::End"]/*' />
	public nuint End;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RANGE_UINT64"]/*' />
/// <unmanaged>D3D12_RANGE_UINT64</unmanaged>
public partial struct RangeUint64
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RANGE_UINT64::Begin"]/*' />
	public ulong Begin;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RANGE_UINT64::End"]/*' />
	public ulong End;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_RANGE_UINT64"]/*' />
/// <unmanaged>D3D12_SUBRESOURCE_RANGE_UINT64</unmanaged>
public partial struct SubresourceRangeUint64
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_RANGE_UINT64::Subresource"]/*' />
	public uint Subresource;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_RANGE_UINT64::Range"]/*' />
	public RangeUint64 Range;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_INFO"]/*' />
/// <unmanaged>D3D12_SUBRESOURCE_INFO</unmanaged>
public partial struct SubresourceInfo
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_INFO::Offset"]/*' />
	public ulong Offset;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_INFO::RowPitch"]/*' />
	public uint RowPitch;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_INFO::DepthPitch"]/*' />
	public uint DepthPitch;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILED_RESOURCE_COORDINATE"]/*' />
/// <unmanaged>D3D12_TILED_RESOURCE_COORDINATE</unmanaged>
public partial struct TiledResourceCoordinate
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILED_RESOURCE_COORDINATE::X"]/*' />
	public uint X;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILED_RESOURCE_COORDINATE::Y"]/*' />
	public uint Y;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILED_RESOURCE_COORDINATE::Z"]/*' />
	public uint Z;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILED_RESOURCE_COORDINATE::Subresource"]/*' />
	public uint Subresource;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_REGION_SIZE"]/*' />
/// <unmanaged>D3D12_TILE_REGION_SIZE</unmanaged>
public partial struct TileRegionSize
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_REGION_SIZE::NumTiles"]/*' />
	public uint NumTiles;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_REGION_SIZE::UseBox"]/*' />
	public Bool32 UseBox;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_REGION_SIZE::Width"]/*' />
	public uint Width;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_REGION_SIZE::Height"]/*' />
	public ushort Height;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_REGION_SIZE::Depth"]/*' />
	public ushort Depth;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_TILING"]/*' />
/// <unmanaged>D3D12_SUBRESOURCE_TILING</unmanaged>
public partial struct SubresourceTiling
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_TILING::WidthInTiles"]/*' />
	public uint WidthInTiles;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_TILING::HeightInTiles"]/*' />
	public ushort HeightInTiles;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_TILING::DepthInTiles"]/*' />
	public ushort DepthInTiles;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_TILING::StartTileIndexInOverallResource"]/*' />
	public uint StartTileIndexInOverallResource;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_SHAPE"]/*' />
/// <unmanaged>D3D12_TILE_SHAPE</unmanaged>
public partial struct TileShape
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_SHAPE::WidthInTexels"]/*' />
	public uint WidthInTexels;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_SHAPE::HeightInTexels"]/*' />
	public uint HeightInTexels;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TILE_SHAPE::DepthInTexels"]/*' />
	public uint DepthInTexels;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PACKED_MIP_INFO"]/*' />
/// <unmanaged>D3D12_PACKED_MIP_INFO</unmanaged>
public partial struct PackedMipInfo
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PACKED_MIP_INFO::NumStandardMips"]/*' />
	public byte NumStandardMips;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PACKED_MIP_INFO::NumPackedMips"]/*' />
	public byte NumPackedMips;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PACKED_MIP_INFO::NumTilesForPackedMips"]/*' />
	public uint NumTilesForPackedMips;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PACKED_MIP_INFO::StartTileIndexInOverallResource"]/*' />
	public uint StartTileIndexInOverallResource;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_TRANSITION_BARRIER"]/*' />
/// <unmanaged>D3D12_RESOURCE_TRANSITION_BARRIER</unmanaged>
public partial struct ResourceTransitionBarrier
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_TRANSITION_BARRIER::pResource"]/*' />
	public ID3D12Resource pResource;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_TRANSITION_BARRIER::Subresource"]/*' />
	public uint Subresource;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_TRANSITION_BARRIER::StateBefore"]/*' />
	public ResourceStates StateBefore;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_TRANSITION_BARRIER::StateAfter"]/*' />
	public ResourceStates StateAfter;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_ALIASING_BARRIER"]/*' />
/// <unmanaged>D3D12_RESOURCE_ALIASING_BARRIER</unmanaged>
public partial struct ResourceAliasingBarrier
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_ALIASING_BARRIER::pResourceBefore"]/*' />
	public ID3D12Resource pResourceBefore;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_ALIASING_BARRIER::pResourceAfter"]/*' />
	public ID3D12Resource pResourceAfter;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_UAV_BARRIER"]/*' />
/// <unmanaged>D3D12_RESOURCE_UAV_BARRIER</unmanaged>
public partial struct ResourceUavBarrier
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_UAV_BARRIER::pResource"]/*' />
	public ID3D12Resource pResource;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_BARRIER"]/*' />
/// <unmanaged>D3D12_RESOURCE_BARRIER</unmanaged>
public partial struct ResourceBarrier
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_BARRIER::Type"]/*' />
	public ResourceBarrierType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_BARRIER::Flags"]/*' />
	public ResourceBarrierFlags Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RESOURCE_BARRIER::Anonymous"]/*' />
	public _Anonymous_e__Union Anonymous;

	[UnscopedRef]
	public ref ResourceTransitionBarrier Transition
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Transition;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Transition, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref ResourceAliasingBarrier Aliasing
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Aliasing;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Aliasing, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref ResourceUavBarrier UAV
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.UAV;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.UAV, 1));
#endif
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	public partial struct _Anonymous_e__Union
	{
		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Transition"]/*' />
		[FieldOffset(0)]
		public ResourceTransitionBarrier Transition;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Aliasing"]/*' />
		[FieldOffset(0)]
		public ResourceAliasingBarrier Aliasing;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::UAV"]/*' />
		[FieldOffset(0)]
		public ResourceUavBarrier UAV;
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_FOOTPRINT"]/*' />
/// <unmanaged>D3D12_SUBRESOURCE_FOOTPRINT</unmanaged>
public partial struct SubresourceFootprint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_FOOTPRINT::Format"]/*' />
	public Graphics.Dxgi.Common.Format Format;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_FOOTPRINT::Width"]/*' />
	public uint Width;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_FOOTPRINT::Height"]/*' />
	public uint Height;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_FOOTPRINT::Depth"]/*' />
	public uint Depth;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_FOOTPRINT::RowPitch"]/*' />
	public uint RowPitch;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PLACED_SUBRESOURCE_FOOTPRINT"]/*' />
/// <unmanaged>D3D12_PLACED_SUBRESOURCE_FOOTPRINT</unmanaged>
public partial struct PlacedSubresourceFootprint
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PLACED_SUBRESOURCE_FOOTPRINT::Offset"]/*' />
	public ulong Offset;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PLACED_SUBRESOURCE_FOOTPRINT::Footprint"]/*' />
	public SubresourceFootprint Footprint;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_COPY_LOCATION"]/*' />
/// <unmanaged>D3D12_TEXTURE_COPY_LOCATION</unmanaged>
public partial struct TextureCopyLocation
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_COPY_LOCATION::pResource"]/*' />
	public ID3D12Resource pResource;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_COPY_LOCATION::Type"]/*' />
	public TextureCopyType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXTURE_COPY_LOCATION::Anonymous"]/*' />
	public _Anonymous_e__Union Anonymous;

	[UnscopedRef]
	public ref PlacedSubresourceFootprint PlacedFootprint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.PlacedFootprint;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.PlacedFootprint, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref uint SubresourceIndex
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.SubresourceIndex;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.SubresourceIndex, 1));
#endif
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	public partial struct _Anonymous_e__Union
	{
		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::PlacedFootprint"]/*' />
		[FieldOffset(0)]
		public PlacedSubresourceFootprint PlacedFootprint;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::SubresourceIndex"]/*' />
		[FieldOffset(0)]
		public uint SubresourceIndex;
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLE_POSITION"]/*' />
/// <unmanaged>D3D12_SAMPLE_POSITION</unmanaged>
public partial struct SamplePosition
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLE_POSITION::X"]/*' />
	public sbyte X;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLE_POSITION::Y"]/*' />
	public sbyte Y;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEW_INSTANCE_LOCATION"]/*' />
/// <unmanaged>D3D12_VIEW_INSTANCE_LOCATION</unmanaged>
public partial struct ViewInstanceLocation
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEW_INSTANCE_LOCATION::ViewportArrayIndex"]/*' />
	public uint ViewportArrayIndex;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEW_INSTANCE_LOCATION::RenderTargetArrayIndex"]/*' />
	public uint RenderTargetArrayIndex;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEW_INSTANCING_DESC"]/*' />
/// <unmanaged>D3D12_VIEW_INSTANCING_DESC</unmanaged>
public partial struct ViewInstancingDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEW_INSTANCING_DESC::ViewInstanceCount"]/*' />
	public uint ViewInstanceCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEW_INSTANCING_DESC::pViewInstanceLocations"]/*' />
	public unsafe ViewInstanceLocation* pViewInstanceLocations;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VIEW_INSTANCING_DESC::Flags"]/*' />
	public ViewInstancingFlags Flags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_SRV"]/*' />
/// <unmanaged>D3D12_BUFFER_SRV</unmanaged>
public partial struct BufferSrv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_SRV::FirstElement"]/*' />
	public ulong FirstElement;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_SRV::NumElements"]/*' />
	public uint NumElements;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_SRV::StructureByteStride"]/*' />
	public uint StructureByteStride;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_SRV::Flags"]/*' />
	public BufferSrvFlags Flags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_SRV"]/*' />
/// <unmanaged>D3D12_TEX1D_SRV</unmanaged>
public partial struct Texture1DSrv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_SRV::MostDetailedMip"]/*' />
	public uint MostDetailedMip;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_SRV::MipLevels"]/*' />
	public uint MipLevels;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_SRV::ResourceMinLODClamp"]/*' />
	public float ResourceMinLODClamp;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_SRV"]/*' />
/// <unmanaged>D3D12_TEX1D_ARRAY_SRV</unmanaged>
public partial struct Texture1DArraySrv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_SRV::MostDetailedMip"]/*' />
	public uint MostDetailedMip;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_SRV::MipLevels"]/*' />
	public uint MipLevels;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_SRV::FirstArraySlice"]/*' />
	public uint FirstArraySlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_SRV::ArraySize"]/*' />
	public uint ArraySize;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_SRV::ResourceMinLODClamp"]/*' />
	public float ResourceMinLODClamp;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_SRV"]/*' />
/// <unmanaged>D3D12_TEX2D_SRV</unmanaged>
public partial struct Texture2DSrv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_SRV::MostDetailedMip"]/*' />
	public uint MostDetailedMip;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_SRV::MipLevels"]/*' />
	public uint MipLevels;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_SRV::PlaneSlice"]/*' />
	public uint PlaneSlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_SRV::ResourceMinLODClamp"]/*' />
	public float ResourceMinLODClamp;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_SRV"]/*' />
/// <unmanaged>D3D12_TEX2D_ARRAY_SRV</unmanaged>
public partial struct Texture2DArraySrv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_SRV::MostDetailedMip"]/*' />
	public uint MostDetailedMip;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_SRV::MipLevels"]/*' />
	public uint MipLevels;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_SRV::FirstArraySlice"]/*' />
	public uint FirstArraySlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_SRV::ArraySize"]/*' />
	public uint ArraySize;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_SRV::PlaneSlice"]/*' />
	public uint PlaneSlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_SRV::ResourceMinLODClamp"]/*' />
	public float ResourceMinLODClamp;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX3D_SRV"]/*' />
/// <unmanaged>D3D12_TEX3D_SRV</unmanaged>
public partial struct Texture3DSrv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX3D_SRV::MostDetailedMip"]/*' />
	public uint MostDetailedMip;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX3D_SRV::MipLevels"]/*' />
	public uint MipLevels;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX3D_SRV::ResourceMinLODClamp"]/*' />
	public float ResourceMinLODClamp;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXCUBE_SRV"]/*' />
/// <unmanaged>D3D12_TEXCUBE_SRV</unmanaged>
public partial struct TexureCubeSrv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXCUBE_SRV::MostDetailedMip"]/*' />
	public uint MostDetailedMip;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXCUBE_SRV::MipLevels"]/*' />
	public uint MipLevels;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXCUBE_SRV::ResourceMinLODClamp"]/*' />
	public float ResourceMinLODClamp;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXCUBE_ARRAY_SRV"]/*' />
/// <unmanaged>D3D12_TEXCUBE_ARRAY_SRV</unmanaged>
public partial struct TexureCubeArraySrv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXCUBE_ARRAY_SRV::MostDetailedMip"]/*' />
	public uint MostDetailedMip;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXCUBE_ARRAY_SRV::MipLevels"]/*' />
	public uint MipLevels;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXCUBE_ARRAY_SRV::First2DArrayFace"]/*' />
	public uint First2DArrayFace;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXCUBE_ARRAY_SRV::NumCubes"]/*' />
	public uint NumCubes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEXCUBE_ARRAY_SRV::ResourceMinLODClamp"]/*' />
	public float ResourceMinLODClamp;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2DMS_SRV"]/*' />
/// <unmanaged>D3D12_TEX2DMS_SRV</unmanaged>
public partial struct Texture2DMsSrv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2DMS_SRV::UnusedField_NothingToDefine"]/*' />
	public uint UnusedField_NothingToDefine;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2DMS_ARRAY_SRV"]/*' />
/// <unmanaged>D3D12_TEX2DMS_ARRAY_SRV</unmanaged>
public partial struct Texture2DMsArraySrv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2DMS_ARRAY_SRV::FirstArraySlice"]/*' />
	public uint FirstArraySlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2DMS_ARRAY_SRV::ArraySize"]/*' />
	public uint ArraySize;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV"]/*' />
/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV</unmanaged>
public partial struct RaytracingAccelerationStructureSrv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV::Location"]/*' />
	public ulong Location;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_RESOURCE_VIEW_DESC"]/*' />
/// <unmanaged>D3D12_SHADER_RESOURCE_VIEW_DESC</unmanaged>
public partial struct ShaderResourceViewDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_RESOURCE_VIEW_DESC::Format"]/*' />
	public Graphics.Dxgi.Common.Format Format;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_RESOURCE_VIEW_DESC::ViewDimension"]/*' />
	public SrvDimension ViewDimension;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_RESOURCE_VIEW_DESC::Shader4ComponentMapping"]/*' />
	public uint Shader4ComponentMapping;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_RESOURCE_VIEW_DESC::Anonymous"]/*' />
	public _Anonymous_e__Union Anonymous;

	[UnscopedRef]
	public ref BufferSrv Buffer
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Buffer;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Buffer, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture1DSrv Texture1D
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture1D;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture1D, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture1DArraySrv Texture1DArray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture1DArray;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture1DArray, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture2DSrv Texture2D
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture2D;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture2D, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture2DArraySrv Texture2DArray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture2DArray;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture2DArray, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture2DMsSrv Texture2DMS
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture2DMS;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture2DMS, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture2DMsArraySrv Texture2DMSArray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture2DMSArray;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture2DMSArray, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture3DSrv Texture3D
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture3D;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture3D, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref TexureCubeSrv TextureCube
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.TextureCube;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.TextureCube, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref TexureCubeArraySrv TextureCubeArray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.TextureCubeArray;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.TextureCubeArray, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref RaytracingAccelerationStructureSrv RaytracingAccelerationStructure
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.RaytracingAccelerationStructure;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.RaytracingAccelerationStructure, 1));
#endif
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	public partial struct _Anonymous_e__Union
	{
		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Buffer"]/*' />
		[FieldOffset(0)]
		public BufferSrv Buffer;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture1D"]/*' />
		[FieldOffset(0)]
		public Texture1DSrv Texture1D;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture1DArray"]/*' />
		[FieldOffset(0)]
		public Texture1DArraySrv Texture1DArray;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture2D"]/*' />
		[FieldOffset(0)]
		public Texture2DSrv Texture2D;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture2DArray"]/*' />
		[FieldOffset(0)]
		public Texture2DArraySrv Texture2DArray;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture2DMS"]/*' />
		[FieldOffset(0)]
		public Texture2DMsSrv Texture2DMS;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture2DMSArray"]/*' />
		[FieldOffset(0)]
		public Texture2DMsArraySrv Texture2DMSArray;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture3D"]/*' />
		[FieldOffset(0)]
		public Texture3DSrv Texture3D;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::TextureCube"]/*' />
		[FieldOffset(0)]
		public TexureCubeSrv TextureCube;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::TextureCubeArray"]/*' />
		[FieldOffset(0)]
		public TexureCubeArraySrv TextureCubeArray;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::RaytracingAccelerationStructure"]/*' />
		[FieldOffset(0)]
		public RaytracingAccelerationStructureSrv RaytracingAccelerationStructure;
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CONSTANT_BUFFER_VIEW_DESC"]/*' />
/// <unmanaged>D3D12_CONSTANT_BUFFER_VIEW_DESC</unmanaged>
public partial struct ConstantBufferViewDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CONSTANT_BUFFER_VIEW_DESC::BufferLocation"]/*' />
	public ulong BufferLocation;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CONSTANT_BUFFER_VIEW_DESC::SizeInBytes"]/*' />
	public uint SizeInBytes;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLER_DESC"]/*' />
/// <unmanaged>D3D12_SAMPLER_DESC</unmanaged>
public partial struct SamplerDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLER_DESC::Filter"]/*' />
	public Filter Filter;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLER_DESC::AddressU"]/*' />
	public TextureAddressMode AddressU;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLER_DESC::AddressV"]/*' />
	public TextureAddressMode AddressV;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLER_DESC::AddressW"]/*' />
	public TextureAddressMode AddressW;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLER_DESC::MipLODBias"]/*' />
	public float MipLODBias;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLER_DESC::MaxAnisotropy"]/*' />
	public uint MaxAnisotropy;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLER_DESC::ComparisonFunc"]/*' />
	public ComparisonFunc ComparisonFunc;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLER_DESC::BorderColor"]/*' />
	public unsafe fixed float BorderColor[4];

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLER_DESC::MinLOD"]/*' />
	public float MinLOD;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SAMPLER_DESC::MaxLOD"]/*' />
	public float MaxLOD;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_UAV"]/*' />
/// <unmanaged>D3D12_BUFFER_UAV</unmanaged>
public partial struct BufferUav
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_UAV::FirstElement"]/*' />
	public ulong FirstElement;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_UAV::NumElements"]/*' />
	public uint NumElements;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_UAV::StructureByteStride"]/*' />
	public uint StructureByteStride;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_UAV::CounterOffsetInBytes"]/*' />
	public ulong CounterOffsetInBytes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_UAV::Flags"]/*' />
	public BufferUavFlags Flags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_UAV"]/*' />
/// <unmanaged>D3D12_TEX1D_UAV</unmanaged>
public partial struct Texture1DUav
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_UAV::MipSlice"]/*' />
	public uint MipSlice;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_UAV"]/*' />
/// <unmanaged>D3D12_TEX1D_ARRAY_UAV</unmanaged>
public partial struct Texture1DArrayUav
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_UAV::MipSlice"]/*' />
	public uint MipSlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_UAV::FirstArraySlice"]/*' />
	public uint FirstArraySlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_UAV::ArraySize"]/*' />
	public uint ArraySize;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_UAV"]/*' />
/// <unmanaged>D3D12_TEX2D_UAV</unmanaged>
public partial struct Texture2DUav
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_UAV::MipSlice"]/*' />
	public uint MipSlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_UAV::PlaneSlice"]/*' />
	public uint PlaneSlice;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_UAV"]/*' />
/// <unmanaged>D3D12_TEX2D_ARRAY_UAV</unmanaged>
public partial struct Texture2DArrayUav
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_UAV::MipSlice"]/*' />
	public uint MipSlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_UAV::FirstArraySlice"]/*' />
	public uint FirstArraySlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_UAV::ArraySize"]/*' />
	public uint ArraySize;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_UAV::PlaneSlice"]/*' />
	public uint PlaneSlice;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX3D_UAV"]/*' />
/// <unmanaged>D3D12_TEX3D_UAV</unmanaged>
public partial struct Texture3DUav
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX3D_UAV::MipSlice"]/*' />
	public uint MipSlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX3D_UAV::FirstWSlice"]/*' />
	public uint FirstWSlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX3D_UAV::WSize"]/*' />
	public uint WSize;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_UNORDERED_ACCESS_VIEW_DESC"]/*' />
/// <unmanaged>D3D12_UNORDERED_ACCESS_VIEW_DESC</unmanaged>
public partial struct UnorderedAccessViewDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_UNORDERED_ACCESS_VIEW_DESC::Format"]/*' />
	public Graphics.Dxgi.Common.Format Format;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_UNORDERED_ACCESS_VIEW_DESC::ViewDimension"]/*' />
	public UavDimension ViewDimension;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_UNORDERED_ACCESS_VIEW_DESC::Anonymous"]/*' />
	public _Anonymous_e__Union Anonymous;

	[UnscopedRef]
	public ref BufferUav Buffer
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Buffer;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Buffer, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture1DUav Texture1D
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture1D;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture1D, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture1DArrayUav Texture1DArray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture1DArray;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture1DArray, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture2DUav Texture2D
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture2D;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture2D, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture2DArrayUav Texture2DArray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture2DArray;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture2DArray, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture3DUav Texture3D
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture3D;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture3D, 1));
#endif
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	public partial struct _Anonymous_e__Union
	{
		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Buffer"]/*' />
		[FieldOffset(0)]
		public BufferUav Buffer;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture1D"]/*' />
		[FieldOffset(0)]
		public Texture1DUav Texture1D;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture1DArray"]/*' />
		[FieldOffset(0)]
		public Texture1DArrayUav Texture1DArray;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture2D"]/*' />
		[FieldOffset(0)]
		public Texture2DUav Texture2D;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture2DArray"]/*' />
		[FieldOffset(0)]
		public Texture2DArrayUav Texture2DArray;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture3D"]/*' />
		[FieldOffset(0)]
		public Texture3DUav Texture3D;
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_RTV"]/*' />
/// <unmanaged>D3D12_BUFFER_RTV</unmanaged>
public partial struct BufferRtv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_RTV::FirstElement"]/*' />
	public ulong FirstElement;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUFFER_RTV::NumElements"]/*' />
	public uint NumElements;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_RTV"]/*' />
/// <unmanaged>D3D12_TEX1D_RTV</unmanaged>
public partial struct Texture1DRtv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_RTV::MipSlice"]/*' />
	public uint MipSlice;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_RTV"]/*' />
/// <unmanaged>D3D12_TEX1D_ARRAY_RTV</unmanaged>
public partial struct Texture1DArrayRtv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_RTV::MipSlice"]/*' />
	public uint MipSlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_RTV::FirstArraySlice"]/*' />
	public uint FirstArraySlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_RTV::ArraySize"]/*' />
	public uint ArraySize;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_RTV"]/*' />
/// <unmanaged>D3D12_TEX2D_RTV</unmanaged>
public partial struct Texture2DRtv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_RTV::MipSlice"]/*' />
	public uint MipSlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_RTV::PlaneSlice"]/*' />
	public uint PlaneSlice;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2DMS_RTV"]/*' />
/// <unmanaged>D3D12_TEX2DMS_RTV</unmanaged>
public partial struct Texture2DMsRtv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2DMS_RTV::UnusedField_NothingToDefine"]/*' />
	public uint UnusedField_NothingToDefine;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_RTV"]/*' />
/// <unmanaged>D3D12_TEX2D_ARRAY_RTV</unmanaged>
public partial struct Texture2DArrayRtv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_RTV::MipSlice"]/*' />
	public uint MipSlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_RTV::FirstArraySlice"]/*' />
	public uint FirstArraySlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_RTV::ArraySize"]/*' />
	public uint ArraySize;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_RTV::PlaneSlice"]/*' />
	public uint PlaneSlice;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2DMS_ARRAY_RTV"]/*' />
/// <unmanaged>D3D12_TEX2DMS_ARRAY_RTV</unmanaged>
public partial struct Texture2DMsArrayRtv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2DMS_ARRAY_RTV::FirstArraySlice"]/*' />
	public uint FirstArraySlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2DMS_ARRAY_RTV::ArraySize"]/*' />
	public uint ArraySize;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX3D_RTV"]/*' />
/// <unmanaged>D3D12_TEX3D_RTV</unmanaged>
public partial struct Texture3DRtv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX3D_RTV::MipSlice"]/*' />
	public uint MipSlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX3D_RTV::FirstWSlice"]/*' />
	public uint FirstWSlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX3D_RTV::WSize"]/*' />
	public uint WSize;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_TARGET_VIEW_DESC"]/*' />
/// <unmanaged>D3D12_RENDER_TARGET_VIEW_DESC</unmanaged>
public partial struct RenderTargetViewDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_TARGET_VIEW_DESC::Format"]/*' />
	public Graphics.Dxgi.Common.Format Format;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_TARGET_VIEW_DESC::ViewDimension"]/*' />
	public RtvDimension ViewDimension;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_TARGET_VIEW_DESC::Anonymous"]/*' />
	public _Anonymous_e__Union Anonymous;

	[UnscopedRef]
	public ref BufferRtv Buffer
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Buffer;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Buffer, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture1DRtv Texture1D
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture1D;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture1D, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture1DArrayRtv Texture1DArray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture1DArray;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture1DArray, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture2DRtv Texture2D
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture2D;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture2D, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture2DArrayRtv Texture2DArray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture2DArray;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture2DArray, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture2DMsRtv Texture2DMS
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture2DMS;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture2DMS, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture2DMsArrayRtv Texture2DMSArray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture2DMSArray;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture2DMSArray, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture3DRtv Texture3D
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture3D;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture3D, 1));
#endif
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	public partial struct _Anonymous_e__Union
	{
		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Buffer"]/*' />
		[FieldOffset(0)]
		public BufferRtv Buffer;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture1D"]/*' />
		[FieldOffset(0)]
		public Texture1DRtv Texture1D;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture1DArray"]/*' />
		[FieldOffset(0)]
		public Texture1DArrayRtv Texture1DArray;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture2D"]/*' />
		[FieldOffset(0)]
		public Texture2DRtv Texture2D;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture2DArray"]/*' />
		[FieldOffset(0)]
		public Texture2DArrayRtv Texture2DArray;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture2DMS"]/*' />
		[FieldOffset(0)]
		public Texture2DMsRtv Texture2DMS;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture2DMSArray"]/*' />
		[FieldOffset(0)]
		public Texture2DMsArrayRtv Texture2DMSArray;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture3D"]/*' />
		[FieldOffset(0)]
		public Texture3DRtv Texture3D;
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_DSV"]/*' />
/// <unmanaged>D3D12_TEX1D_DSV</unmanaged>
public partial struct Texture1DDsv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_DSV::MipSlice"]/*' />
	public uint MipSlice;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_DSV"]/*' />
/// <unmanaged>D3D12_TEX1D_ARRAY_DSV</unmanaged>
public partial struct Texture1DArrayDsv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_DSV::MipSlice"]/*' />
	public uint MipSlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_DSV::FirstArraySlice"]/*' />
	public uint FirstArraySlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX1D_ARRAY_DSV::ArraySize"]/*' />
	public uint ArraySize;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_DSV"]/*' />
/// <unmanaged>D3D12_TEX2D_DSV</unmanaged>
public partial struct Texture2DDsv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_DSV::MipSlice"]/*' />
	public uint MipSlice;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_DSV"]/*' />
/// <unmanaged>D3D12_TEX2D_ARRAY_DSV</unmanaged>
public partial struct Texture2DArrayDsv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_DSV::MipSlice"]/*' />
	public uint MipSlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_DSV::FirstArraySlice"]/*' />
	public uint FirstArraySlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2D_ARRAY_DSV::ArraySize"]/*' />
	public uint ArraySize;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2DMS_DSV"]/*' />
/// <unmanaged>D3D12_TEX2DMS_DSV</unmanaged>
public partial struct Texture2DMsDsv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2DMS_DSV::UnusedField_NothingToDefine"]/*' />
	public uint UnusedField_NothingToDefine;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2DMS_ARRAY_DSV"]/*' />
/// <unmanaged>D3D12_TEX2DMS_ARRAY_DSV</unmanaged>
public partial struct Texture2DMsArrayDsv
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2DMS_ARRAY_DSV::FirstArraySlice"]/*' />
	public uint FirstArraySlice;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_TEX2DMS_ARRAY_DSV::ArraySize"]/*' />
	public uint ArraySize;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_VIEW_DESC"]/*' />
/// <unmanaged>D3D12_DEPTH_STENCIL_VIEW_DESC</unmanaged>
public partial struct DepthStencilViewDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_VIEW_DESC::Format"]/*' />
	public Graphics.Dxgi.Common.Format Format;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_VIEW_DESC::ViewDimension"]/*' />
	public DsvDimension ViewDimension;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_VIEW_DESC::Flags"]/*' />
	public DsvFlags Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEPTH_STENCIL_VIEW_DESC::Anonymous"]/*' />
	public _Anonymous_e__Union Anonymous;

	[UnscopedRef]
	public ref Texture1DDsv Texture1D
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture1D;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture1D, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture1DArrayDsv Texture1DArray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture1DArray;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture1DArray, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture2DDsv Texture2D
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture2D;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture2D, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture2DArrayDsv Texture2DArray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture2DArray;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture2DArray, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture2DMsDsv Texture2DMS
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture2DMS;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture2DMS, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref Texture2DMsArrayDsv Texture2DMSArray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Texture2DMSArray;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Texture2DMSArray, 1));
#endif
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	public partial struct _Anonymous_e__Union
	{
		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture1D"]/*' />
		[FieldOffset(0)]
		public Texture1DDsv Texture1D;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture1DArray"]/*' />
		[FieldOffset(0)]
		public Texture1DArrayDsv Texture1DArray;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture2D"]/*' />
		[FieldOffset(0)]
		public Texture2DDsv Texture2D;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture2DArray"]/*' />
		[FieldOffset(0)]
		public Texture2DArrayDsv Texture2DArray;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture2DMS"]/*' />
		[FieldOffset(0)]
		public Texture2DMsDsv Texture2DMS;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Texture2DMSArray"]/*' />
		[FieldOffset(0)]
		public Texture2DMsArrayDsv Texture2DMSArray;
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_HEAP_DESC"]/*' />
/// <unmanaged>D3D12_DESCRIPTOR_HEAP_DESC</unmanaged>
public partial struct DescriptorHeapDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_HEAP_DESC::Type"]/*' />
	public DescriptorHeapType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_HEAP_DESC::NumDescriptors"]/*' />
	public uint NumDescriptors;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_HEAP_DESC::Flags"]/*' />
	public DescriptorHeapFlags Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_HEAP_DESC::NodeMask"]/*' />
	public uint NodeMask;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE"]/*' />
/// <unmanaged>D3D12_DESCRIPTOR_RANGE</unmanaged>
public partial struct DescriptorRange
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE::RangeType"]/*' />
	public DescriptorRangeType RangeType;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE::NumDescriptors"]/*' />
	public uint NumDescriptors;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE::BaseShaderRegister"]/*' />
	public uint BaseShaderRegister;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE::RegisterSpace"]/*' />
	public uint RegisterSpace;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE::OffsetInDescriptorsFromTableStart"]/*' />
	public uint OffsetInDescriptorsFromTableStart;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR_TABLE"]/*' />
/// <unmanaged>D3D12_ROOT_DESCRIPTOR_TABLE</unmanaged>
public partial struct RootDescriptorTable
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR_TABLE::NumDescriptorRanges"]/*' />
	public uint NumDescriptorRanges;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR_TABLE::pDescriptorRanges"]/*' />
	public unsafe DescriptorRange* pDescriptorRanges;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_CONSTANTS"]/*' />
/// <unmanaged>D3D12_ROOT_CONSTANTS</unmanaged>
public partial struct RootConstants
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_CONSTANTS::ShaderRegister"]/*' />
	public uint ShaderRegister;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_CONSTANTS::RegisterSpace"]/*' />
	public uint RegisterSpace;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_CONSTANTS::Num32BitValues"]/*' />
	public uint Num32BitValues;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR"]/*' />
/// <unmanaged>D3D12_ROOT_DESCRIPTOR</unmanaged>
public partial struct RootDescriptor
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR::ShaderRegister"]/*' />
	public uint ShaderRegister;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR::RegisterSpace"]/*' />
	public uint RegisterSpace;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_PARAMETER"]/*' />
/// <unmanaged>D3D12_ROOT_PARAMETER</unmanaged>
public partial struct RootParameter
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_PARAMETER::ParameterType"]/*' />
	public RootParameterType ParameterType;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_PARAMETER::Anonymous"]/*' />
	public _Anonymous_e__Union Anonymous;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_PARAMETER::ShaderVisibility"]/*' />
	public ShaderVisibility ShaderVisibility;

	[UnscopedRef]
	public ref RootDescriptorTable DescriptorTable
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.DescriptorTable;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.DescriptorTable, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref RootConstants Constants
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Constants;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Constants, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref RootDescriptor Descriptor
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Descriptor;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Descriptor, 1));
#endif
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	public partial struct _Anonymous_e__Union
	{
		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::DescriptorTable"]/*' />
		[FieldOffset(0)]
		public RootDescriptorTable DescriptorTable;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Constants"]/*' />
		[FieldOffset(0)]
		public RootConstants Constants;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Descriptor"]/*' />
		[FieldOffset(0)]
		public RootDescriptor Descriptor;
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_SAMPLER_DESC"]/*' />
/// <unmanaged>D3D12_STATIC_SAMPLER_DESC</unmanaged>
public partial struct StaticSamplerDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_SAMPLER_DESC::Filter"]/*' />
	public Filter Filter;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_SAMPLER_DESC::AddressU"]/*' />
	public TextureAddressMode AddressU;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_SAMPLER_DESC::AddressV"]/*' />
	public TextureAddressMode AddressV;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_SAMPLER_DESC::AddressW"]/*' />
	public TextureAddressMode AddressW;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_SAMPLER_DESC::MipLODBias"]/*' />
	public float MipLODBias;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_SAMPLER_DESC::MaxAnisotropy"]/*' />
	public uint MaxAnisotropy;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_SAMPLER_DESC::ComparisonFunc"]/*' />
	public ComparisonFunc ComparisonFunc;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_SAMPLER_DESC::BorderColor"]/*' />
	public StaticBorderColor BorderColor;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_SAMPLER_DESC::MinLOD"]/*' />
	public float MinLOD;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_SAMPLER_DESC::MaxLOD"]/*' />
	public float MaxLOD;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_SAMPLER_DESC::ShaderRegister"]/*' />
	public uint ShaderRegister;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_SAMPLER_DESC::RegisterSpace"]/*' />
	public uint RegisterSpace;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATIC_SAMPLER_DESC::ShaderVisibility"]/*' />
	public ShaderVisibility ShaderVisibility;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_DESC"]/*' />
/// <unmanaged>D3D12_ROOT_SIGNATURE_DESC</unmanaged>
public partial struct RootSignatureDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_DESC::NumParameters"]/*' />
	public uint NumParameters;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_DESC::pParameters"]/*' />
	public unsafe RootParameter* pParameters;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_DESC::NumStaticSamplers"]/*' />
	public uint NumStaticSamplers;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_DESC::pStaticSamplers"]/*' />
	public unsafe StaticSamplerDescription* pStaticSamplers;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_DESC::Flags"]/*' />
	public RootSignatureFlags Flags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE1"]/*' />
/// <unmanaged>D3D12_DESCRIPTOR_RANGE1</unmanaged>
public partial struct DescriptorRange1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE1::RangeType"]/*' />
	public DescriptorRangeType RangeType;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE1::NumDescriptors"]/*' />
	public uint NumDescriptors;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE1::BaseShaderRegister"]/*' />
	public uint BaseShaderRegister;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE1::RegisterSpace"]/*' />
	public uint RegisterSpace;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE1::Flags"]/*' />
	public DescriptorRangeFlags Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DESCRIPTOR_RANGE1::OffsetInDescriptorsFromTableStart"]/*' />
	public uint OffsetInDescriptorsFromTableStart;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR_TABLE1"]/*' />
/// <unmanaged>D3D12_ROOT_DESCRIPTOR_TABLE1</unmanaged>
public partial struct RootDescriptorTable1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR_TABLE1::NumDescriptorRanges"]/*' />
	public uint NumDescriptorRanges;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR_TABLE1::pDescriptorRanges"]/*' />
	public unsafe DescriptorRange1* pDescriptorRanges;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR1"]/*' />
/// <unmanaged>D3D12_ROOT_DESCRIPTOR1</unmanaged>
public partial struct RootDescriptor1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR1::ShaderRegister"]/*' />
	public uint ShaderRegister;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR1::RegisterSpace"]/*' />
	public uint RegisterSpace;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_DESCRIPTOR1::Flags"]/*' />
	public RootDescriptorFlags Flags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_PARAMETER1"]/*' />
/// <unmanaged>D3D12_ROOT_PARAMETER1</unmanaged>
public partial struct RootParameter1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_PARAMETER1::ParameterType"]/*' />
	public RootParameterType ParameterType;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_PARAMETER1::Anonymous"]/*' />
	public _Anonymous_e__Union Anonymous;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_PARAMETER1::ShaderVisibility"]/*' />
	public ShaderVisibility ShaderVisibility;

	[UnscopedRef]
	public ref RootDescriptorTable1 DescriptorTable
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.DescriptorTable;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.DescriptorTable, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref RootConstants Constants
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Constants;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Constants, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref RootDescriptor1 Descriptor
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Descriptor;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Descriptor, 1));
#endif
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	public partial struct _Anonymous_e__Union
	{
		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::DescriptorTable"]/*' />
		[FieldOffset(0)]
		public RootDescriptorTable1 DescriptorTable;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Constants"]/*' />
		[FieldOffset(0)]
		public RootConstants Constants;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Descriptor"]/*' />
		[FieldOffset(0)]
		public RootDescriptor1 Descriptor;
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_DESC1"]/*' />
/// <unmanaged>D3D12_ROOT_SIGNATURE_DESC1</unmanaged>
public partial struct RootSignatureDescription1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_DESC1::NumParameters"]/*' />
	public uint NumParameters;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_DESC1::pParameters"]/*' />
	public unsafe RootParameter1* pParameters;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_DESC1::NumStaticSamplers"]/*' />
	public uint NumStaticSamplers;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_DESC1::pStaticSamplers"]/*' />
	public unsafe StaticSamplerDescription* pStaticSamplers;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_ROOT_SIGNATURE_DESC1::Flags"]/*' />
	public RootSignatureFlags Flags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VERSIONED_ROOT_SIGNATURE_DESC"]/*' />
/// <unmanaged>D3D12_VERSIONED_ROOT_SIGNATURE_DESC</unmanaged>
public partial struct VersionedRootSignatureDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VERSIONED_ROOT_SIGNATURE_DESC::Version"]/*' />
	public RootSignatureVersion Version;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VERSIONED_ROOT_SIGNATURE_DESC::Anonymous"]/*' />
	public _Anonymous_e__Union Anonymous;

	[UnscopedRef]
	public ref RootSignatureDescription Desc_1_0
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Desc_1_0;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Desc_1_0, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref RootSignatureDescription1 Desc_1_1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Desc_1_1;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Desc_1_1, 1));
#endif
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	public partial struct _Anonymous_e__Union
	{
		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Desc_1_0"]/*' />
		[FieldOffset(0)]
		public RootSignatureDescription Desc_1_0;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Desc_1_1"]/*' />
		[FieldOffset(0)]
		public RootSignatureDescription1 Desc_1_1;
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CPU_DESCRIPTOR_HANDLE"]/*' />
/// <unmanaged>D3D12_CPU_DESCRIPTOR_HANDLE</unmanaged>
public partial struct CpuDescriptorHandle
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_CPU_DESCRIPTOR_HANDLE::ptr"]/*' />
	public nuint ptr;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_DESCRIPTOR_HANDLE"]/*' />
/// <unmanaged>D3D12_GPU_DESCRIPTOR_HANDLE</unmanaged>
public partial struct GpuDescriptorHandle
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_DESCRIPTOR_HANDLE::ptr"]/*' />
	public ulong ptr;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISCARD_REGION"]/*' />
/// <unmanaged>D3D12_DISCARD_REGION</unmanaged>
public partial struct DiscardRegion
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISCARD_REGION::NumRects"]/*' />
	public uint NumRects;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISCARD_REGION::pRects"]/*' />
	public unsafe RawRect* pRects;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISCARD_REGION::FirstSubresource"]/*' />
	public uint FirstSubresource;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISCARD_REGION::NumSubresources"]/*' />
	public uint NumSubresources;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_HEAP_DESC"]/*' />
/// <unmanaged>D3D12_QUERY_HEAP_DESC</unmanaged>
public partial struct QueryHeapDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_HEAP_DESC::Type"]/*' />
	public QueryHeapType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_HEAP_DESC::Count"]/*' />
	public uint Count;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_HEAP_DESC::NodeMask"]/*' />
	public uint NodeMask;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS"]/*' />
/// <unmanaged>D3D12_QUERY_DATA_PIPELINE_STATISTICS</unmanaged>
public partial struct QueryDataPipelineStatistics
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS::IAVertices"]/*' />
	public ulong IAVertices;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS::IAPrimitives"]/*' />
	public ulong IAPrimitives;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS::VSInvocations"]/*' />
	public ulong VSInvocations;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS::GSInvocations"]/*' />
	public ulong GSInvocations;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS::GSPrimitives"]/*' />
	public ulong GSPrimitives;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS::CInvocations"]/*' />
	public ulong CInvocations;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS::CPrimitives"]/*' />
	public ulong CPrimitives;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS::PSInvocations"]/*' />
	public ulong PSInvocations;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS::HSInvocations"]/*' />
	public ulong HSInvocations;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS::DSInvocations"]/*' />
	public ulong DSInvocations;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS::CSInvocations"]/*' />
	public ulong CSInvocations;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS1"]/*' />
/// <unmanaged>D3D12_QUERY_DATA_PIPELINE_STATISTICS1</unmanaged>
public partial struct QueryDataPipelineStatistics1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS1::IAVertices"]/*' />
	public ulong IAVertices;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS1::IAPrimitives"]/*' />
	public ulong IAPrimitives;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS1::VSInvocations"]/*' />
	public ulong VSInvocations;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS1::GSInvocations"]/*' />
	public ulong GSInvocations;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS1::GSPrimitives"]/*' />
	public ulong GSPrimitives;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS1::CInvocations"]/*' />
	public ulong CInvocations;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS1::CPrimitives"]/*' />
	public ulong CPrimitives;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS1::PSInvocations"]/*' />
	public ulong PSInvocations;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS1::HSInvocations"]/*' />
	public ulong HSInvocations;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS1::DSInvocations"]/*' />
	public ulong DSInvocations;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS1::CSInvocations"]/*' />
	public ulong CSInvocations;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS1::ASInvocations"]/*' />
	public ulong ASInvocations;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS1::MSInvocations"]/*' />
	public ulong MSInvocations;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_PIPELINE_STATISTICS1::MSPrimitives"]/*' />
	public ulong MSPrimitives;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_SO_STATISTICS"]/*' />
/// <unmanaged>D3D12_QUERY_DATA_SO_STATISTICS</unmanaged>
public partial struct QueryDataSOStatistics
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_SO_STATISTICS::NumPrimitivesWritten"]/*' />
	public ulong NumPrimitivesWritten;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_QUERY_DATA_SO_STATISTICS::PrimitivesStorageNeeded"]/*' />
	public ulong PrimitivesStorageNeeded;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STREAM_OUTPUT_BUFFER_VIEW"]/*' />
/// <unmanaged>D3D12_STREAM_OUTPUT_BUFFER_VIEW</unmanaged>
public partial struct StreamOutputBufferView
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STREAM_OUTPUT_BUFFER_VIEW::BufferLocation"]/*' />
	public ulong BufferLocation;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STREAM_OUTPUT_BUFFER_VIEW::SizeInBytes"]/*' />
	public ulong SizeInBytes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STREAM_OUTPUT_BUFFER_VIEW::BufferFilledSizeLocation"]/*' />
	public ulong BufferFilledSizeLocation;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRAW_ARGUMENTS"]/*' />
/// <unmanaged>D3D12_DRAW_ARGUMENTS</unmanaged>
public partial struct DrawArguments
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRAW_ARGUMENTS::VertexCountPerInstance"]/*' />
	public uint VertexCountPerInstance;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRAW_ARGUMENTS::InstanceCount"]/*' />
	public uint InstanceCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRAW_ARGUMENTS::StartVertexLocation"]/*' />
	public uint StartVertexLocation;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRAW_ARGUMENTS::StartInstanceLocation"]/*' />
	public uint StartInstanceLocation;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRAW_INDEXED_ARGUMENTS"]/*' />
/// <unmanaged>D3D12_DRAW_INDEXED_ARGUMENTS</unmanaged>
public partial struct DrawIndexedArguments
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRAW_INDEXED_ARGUMENTS::IndexCountPerInstance"]/*' />
	public uint IndexCountPerInstance;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRAW_INDEXED_ARGUMENTS::InstanceCount"]/*' />
	public uint InstanceCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRAW_INDEXED_ARGUMENTS::StartIndexLocation"]/*' />
	public uint StartIndexLocation;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRAW_INDEXED_ARGUMENTS::BaseVertexLocation"]/*' />
	public int BaseVertexLocation;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRAW_INDEXED_ARGUMENTS::StartInstanceLocation"]/*' />
	public uint StartInstanceLocation;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISPATCH_ARGUMENTS"]/*' />
/// <unmanaged>D3D12_DISPATCH_ARGUMENTS</unmanaged>
public partial struct DispatchArguments
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISPATCH_ARGUMENTS::ThreadGroupCountX"]/*' />
	public uint ThreadGroupCountX;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISPATCH_ARGUMENTS::ThreadGroupCountY"]/*' />
	public uint ThreadGroupCountY;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISPATCH_ARGUMENTS::ThreadGroupCountZ"]/*' />
	public uint ThreadGroupCountZ;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VERTEX_BUFFER_VIEW"]/*' />
/// <unmanaged>D3D12_VERTEX_BUFFER_VIEW</unmanaged>
public partial struct VertexBufferView
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VERTEX_BUFFER_VIEW::BufferLocation"]/*' />
	public ulong BufferLocation;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VERTEX_BUFFER_VIEW::SizeInBytes"]/*' />
	public uint SizeInBytes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VERTEX_BUFFER_VIEW::StrideInBytes"]/*' />
	public uint StrideInBytes;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDEX_BUFFER_VIEW"]/*' />
/// <unmanaged>D3D12_INDEX_BUFFER_VIEW</unmanaged>
public partial struct IndexBufferView
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDEX_BUFFER_VIEW::BufferLocation"]/*' />
	public ulong BufferLocation;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDEX_BUFFER_VIEW::SizeInBytes"]/*' />
	public uint SizeInBytes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDEX_BUFFER_VIEW::Format"]/*' />
	public Graphics.Dxgi.Common.Format Format;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDIRECT_ARGUMENT_DESC"]/*' />
/// <unmanaged>D3D12_INDIRECT_ARGUMENT_DESC</unmanaged>
public partial struct IndirectArgumentDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDIRECT_ARGUMENT_DESC::Type"]/*' />
	public IndirectArgumentType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INDIRECT_ARGUMENT_DESC::Anonymous"]/*' />
	public _Anonymous_e__Union Anonymous;

	[UnscopedRef]
	public ref _Anonymous_e__Union._VertexBuffer_e__Struct VertexBuffer
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.VertexBuffer;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.VertexBuffer, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref _Anonymous_e__Union._Constant_e__Struct Constant
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Constant;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Constant, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref _Anonymous_e__Union._ConstantBufferView_e__Struct ConstantBufferView
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.ConstantBufferView;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.ConstantBufferView, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref _Anonymous_e__Union._ShaderResourceView_e__Struct ShaderResourceView
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.ShaderResourceView;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.ShaderResourceView, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref _Anonymous_e__Union._UnorderedAccessView_e__Struct UnorderedAccessView
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.UnorderedAccessView;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.UnorderedAccessView, 1));
#endif
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	public partial struct _Anonymous_e__Union
	{
		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::VertexBuffer"]/*' />
		[FieldOffset(0)]
		public _Anonymous_e__Union._VertexBuffer_e__Struct VertexBuffer;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Constant"]/*' />
		[FieldOffset(0)]
		public _Anonymous_e__Union._Constant_e__Struct Constant;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::ConstantBufferView"]/*' />
		[FieldOffset(0)]
		public _Anonymous_e__Union._ConstantBufferView_e__Struct ConstantBufferView;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::ShaderResourceView"]/*' />
		[FieldOffset(0)]
		public _Anonymous_e__Union._ShaderResourceView_e__Struct ShaderResourceView;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::UnorderedAccessView"]/*' />
		[FieldOffset(0)]
		public _Anonymous_e__Union._UnorderedAccessView_e__Struct UnorderedAccessView;

		public partial struct _ShaderResourceView_e__Struct
		{
			/// <include file='../Direct3D12.xml' path='doc/member[@name="_ShaderResourceView_e__Struct::RootParameterIndex"]/*' />
			public uint RootParameterIndex;
		}

		public partial struct _Constant_e__Struct
		{
			/// <include file='../Direct3D12.xml' path='doc/member[@name="_Constant_e__Struct::RootParameterIndex"]/*' />
			public uint RootParameterIndex;

			/// <include file='../Direct3D12.xml' path='doc/member[@name="_Constant_e__Struct::DestOffsetIn32BitValues"]/*' />
			public uint DestOffsetIn32BitValues;

			/// <include file='../Direct3D12.xml' path='doc/member[@name="_Constant_e__Struct::Num32BitValuesToSet"]/*' />
			public uint Num32BitValuesToSet;
		}

		public partial struct _UnorderedAccessView_e__Struct
		{
			/// <include file='../Direct3D12.xml' path='doc/member[@name="_UnorderedAccessView_e__Struct::RootParameterIndex"]/*' />
			public uint RootParameterIndex;
		}

		public partial struct _VertexBuffer_e__Struct
		{
			/// <include file='../Direct3D12.xml' path='doc/member[@name="_VertexBuffer_e__Struct::Slot"]/*' />
			public uint Slot;
		}

		public partial struct _ConstantBufferView_e__Struct
		{
			/// <include file='../Direct3D12.xml' path='doc/member[@name="_ConstantBufferView_e__Struct::RootParameterIndex"]/*' />
			public uint RootParameterIndex;
		}

	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_SIGNATURE_DESC"]/*' />
/// <unmanaged>D3D12_COMMAND_SIGNATURE_DESC</unmanaged>
public partial struct CommandSignatureDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_SIGNATURE_DESC::ByteStride"]/*' />
	public uint ByteStride;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_SIGNATURE_DESC::NumArgumentDescs"]/*' />
	public uint NumArgumentDescs;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_SIGNATURE_DESC::pArgumentDescs"]/*' />
	public unsafe IndirectArgumentDescription* pArgumentDescs;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_COMMAND_SIGNATURE_DESC::NodeMask"]/*' />
	public uint NodeMask;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_WRITEBUFFERIMMEDIATE_PARAMETER"]/*' />
/// <unmanaged>D3D12_WRITEBUFFERIMMEDIATE_PARAMETER</unmanaged>
public partial struct WritebufferimmediateParameter
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_WRITEBUFFERIMMEDIATE_PARAMETER::Dest"]/*' />
	public ulong Dest;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_WRITEBUFFERIMMEDIATE_PARAMETER::Value"]/*' />
	public uint Value;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT</unmanaged>
public partial struct FeatureDataProtectedResourceSessionSupport
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT::NodeIndex"]/*' />
	public uint NodeIndex;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT::Support"]/*' />
	public ProtectedResourceSessionSupportFlags Support;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROTECTED_RESOURCE_SESSION_DESC"]/*' />
/// <unmanaged>D3D12_PROTECTED_RESOURCE_SESSION_DESC</unmanaged>
public partial struct ProtectedResourceSessionDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROTECTED_RESOURCE_SESSION_DESC::NodeMask"]/*' />
	public uint NodeMask;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROTECTED_RESOURCE_SESSION_DESC::Flags"]/*' />
	public ProtectedResourceSessionFlags Flags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_DESC"]/*' />
/// <unmanaged>D3D12_META_COMMAND_PARAMETER_DESC</unmanaged>
public partial struct MetaCommandParameterDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_DESC::Name"]/*' />
	public unsafe char* Name;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_DESC::Type"]/*' />
	public MetaCommandParameterType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_DESC::Flags"]/*' />
	public MetaCommandParameterFlags Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_DESC::RequiredResourceState"]/*' />
	public ResourceStates RequiredResourceState;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_PARAMETER_DESC::StructureOffset"]/*' />
	public uint StructureOffset;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_DESC"]/*' />
/// <unmanaged>D3D12_META_COMMAND_DESC</unmanaged>
public partial struct MetaCommandDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_DESC::Id"]/*' />
	public Guid Id;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_DESC::Name"]/*' />
	public unsafe char* Name;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_DESC::InitializationDirtyState"]/*' />
	public GraphicsStates InitializationDirtyState;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_META_COMMAND_DESC::ExecutionDirtyState"]/*' />
	public GraphicsStates ExecutionDirtyState;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT"]/*' />
/// <unmanaged>D3D12_STATE_SUBOBJECT</unmanaged>
public partial struct StateSubobject
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT::Type"]/*' />
	public StateSubobjectType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_SUBOBJECT::pDesc"]/*' />
	public unsafe void* pDesc;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_OBJECT_CONFIG"]/*' />
/// <unmanaged>D3D12_STATE_OBJECT_CONFIG</unmanaged>
public partial struct StateObjectConfig
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_OBJECT_CONFIG::Flags"]/*' />
	public StateObjectFlags Flags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GLOBAL_ROOT_SIGNATURE"]/*' />
/// <unmanaged>D3D12_GLOBAL_ROOT_SIGNATURE</unmanaged>
public partial struct GlobalRootSignature
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GLOBAL_ROOT_SIGNATURE::pGlobalRootSignature"]/*' />
	public ID3D12RootSignature pGlobalRootSignature;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOCAL_ROOT_SIGNATURE"]/*' />
/// <unmanaged>D3D12_LOCAL_ROOT_SIGNATURE</unmanaged>
public partial struct LocalRootSignature
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LOCAL_ROOT_SIGNATURE::pLocalRootSignature"]/*' />
	public ID3D12RootSignature pLocalRootSignature;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_NODE_MASK"]/*' />
/// <unmanaged>D3D12_NODE_MASK</unmanaged>
public partial struct NodeMask
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_NODE_MASK::NodeMask"]/*' />
	public uint Mask;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_EXPORT_DESC"]/*' />
/// <unmanaged>D3D12_EXPORT_DESC</unmanaged>
public partial struct ExportDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_EXPORT_DESC::Name"]/*' />
	public unsafe char* Name;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_EXPORT_DESC::ExportToRename"]/*' />
	public unsafe char* ExportToRename;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_EXPORT_DESC::Flags"]/*' />
	public ExportFlags Flags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DXIL_LIBRARY_DESC"]/*' />
/// <unmanaged>D3D12_DXIL_LIBRARY_DESC</unmanaged>
public partial struct DxilLibraryDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DXIL_LIBRARY_DESC::DXILLibrary"]/*' />
	public ShaderBytecode DXILLibrary;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DXIL_LIBRARY_DESC::NumExports"]/*' />
	public uint NumExports;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DXIL_LIBRARY_DESC::pExports"]/*' />
	public unsafe ExportDescription* pExports;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_EXISTING_COLLECTION_DESC"]/*' />
/// <unmanaged>D3D12_EXISTING_COLLECTION_DESC</unmanaged>
public partial struct ExistingCollectionDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_EXISTING_COLLECTION_DESC::pExistingCollection"]/*' />
	public ID3D12StateObject pExistingCollection;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_EXISTING_COLLECTION_DESC::NumExports"]/*' />
	public uint NumExports;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_EXISTING_COLLECTION_DESC::pExports"]/*' />
	public unsafe ExportDescription* pExports;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION"]/*' />
/// <unmanaged>D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION</unmanaged>
public partial struct SubobjectToExportsAssociation
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION::pSubobjectToAssociate"]/*' />
	public unsafe StateSubobject* pSubobjectToAssociate;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION::NumExports"]/*' />
	public uint NumExports;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION::pExports"]/*' />
	public unsafe char** pExports;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION"]/*' />
/// <unmanaged>D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION</unmanaged>
public partial struct DxilSubobjectToExportsAssociation
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION::SubobjectToAssociate"]/*' />
	public unsafe char* SubobjectToAssociate;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION::NumExports"]/*' />
	public uint NumExports;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION::pExports"]/*' />
	public unsafe char** pExports;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HIT_GROUP_DESC"]/*' />
/// <unmanaged>D3D12_HIT_GROUP_DESC</unmanaged>
public partial struct HitGroupDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HIT_GROUP_DESC::HitGroupExport"]/*' />
	public unsafe char* HitGroupExport;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HIT_GROUP_DESC::Type"]/*' />
	public HitGroupType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HIT_GROUP_DESC::AnyHitShaderImport"]/*' />
	public unsafe char* AnyHitShaderImport;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HIT_GROUP_DESC::ClosestHitShaderImport"]/*' />
	public unsafe char* ClosestHitShaderImport;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_HIT_GROUP_DESC::IntersectionShaderImport"]/*' />
	public unsafe char* IntersectionShaderImport;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_SHADER_CONFIG"]/*' />
/// <unmanaged>D3D12_RAYTRACING_SHADER_CONFIG</unmanaged>
public partial struct RaytracingShaderConfig
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_SHADER_CONFIG::MaxPayloadSizeInBytes"]/*' />
	public uint MaxPayloadSizeInBytes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_SHADER_CONFIG::MaxAttributeSizeInBytes"]/*' />
	public uint MaxAttributeSizeInBytes;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_PIPELINE_CONFIG"]/*' />
/// <unmanaged>D3D12_RAYTRACING_PIPELINE_CONFIG</unmanaged>
public partial struct RaytracingPipelineConfig
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_PIPELINE_CONFIG::MaxTraceRecursionDepth"]/*' />
	public uint MaxTraceRecursionDepth;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_PIPELINE_CONFIG1"]/*' />
/// <unmanaged>D3D12_RAYTRACING_PIPELINE_CONFIG1</unmanaged>
public partial struct RaytracingPipelineConfig1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_PIPELINE_CONFIG1::MaxTraceRecursionDepth"]/*' />
	public uint MaxTraceRecursionDepth;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_PIPELINE_CONFIG1::Flags"]/*' />
	public RaytracingPipelineFlags Flags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_OBJECT_DESC"]/*' />
/// <unmanaged>D3D12_STATE_OBJECT_DESC</unmanaged>
public partial struct StateObjectDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_OBJECT_DESC::Type"]/*' />
	public StateObjectType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_OBJECT_DESC::NumSubobjects"]/*' />
	public uint NumSubobjects;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_STATE_OBJECT_DESC::pSubobjects"]/*' />
	public unsafe StateSubobject* pSubobjects;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE"]/*' />
/// <unmanaged>D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE</unmanaged>
public partial struct GpuVirtualAddressAndStride
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE::StartAddress"]/*' />
	public ulong StartAddress;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE::StrideInBytes"]/*' />
	public ulong StrideInBytes;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_VIRTUAL_ADDRESS_RANGE"]/*' />
/// <unmanaged>D3D12_GPU_VIRTUAL_ADDRESS_RANGE</unmanaged>
public partial struct GpuVirtualAddressRange
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_VIRTUAL_ADDRESS_RANGE::StartAddress"]/*' />
	public ulong StartAddress;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_VIRTUAL_ADDRESS_RANGE::SizeInBytes"]/*' />
	public ulong SizeInBytes;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE"]/*' />
/// <unmanaged>D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE</unmanaged>
public partial struct GpuVirtualAddressRangeAndStride
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE::StartAddress"]/*' />
	public ulong StartAddress;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE::SizeInBytes"]/*' />
	public ulong SizeInBytes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE::StrideInBytes"]/*' />
	public ulong StrideInBytes;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC"]/*' />
/// <unmanaged>D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC</unmanaged>
public partial struct RaytracingGeometryTrianglesDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC::Transform3x4"]/*' />
	public ulong Transform3x4;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC::IndexFormat"]/*' />
	public Graphics.Dxgi.Common.Format IndexFormat;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC::VertexFormat"]/*' />
	public Graphics.Dxgi.Common.Format VertexFormat;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC::IndexCount"]/*' />
	public uint IndexCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC::VertexCount"]/*' />
	public uint VertexCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC::IndexBuffer"]/*' />
	public ulong IndexBuffer;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC::VertexBuffer"]/*' />
	public GpuVirtualAddressAndStride VertexBuffer;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_AABB"]/*' />
/// <unmanaged>D3D12_RAYTRACING_AABB</unmanaged>
public partial struct RaytracingAabb
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_AABB::MinX"]/*' />
	public float MinX;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_AABB::MinY"]/*' />
	public float MinY;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_AABB::MinZ"]/*' />
	public float MinZ;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_AABB::MaxX"]/*' />
	public float MaxX;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_AABB::MaxY"]/*' />
	public float MaxY;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_AABB::MaxZ"]/*' />
	public float MaxZ;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_AABBS_DESC"]/*' />
/// <unmanaged>D3D12_RAYTRACING_GEOMETRY_AABBS_DESC</unmanaged>
public partial struct RaytracingGeometryAabbsDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_AABBS_DESC::AABBCount"]/*' />
	public ulong AABBCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_AABBS_DESC::AABBs"]/*' />
	public GpuVirtualAddressAndStride AABBs;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC"]/*' />
/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC</unmanaged>
public partial struct RaytracingAccelerationStructurePostbuildInfoDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC::DestBuffer"]/*' />
	public ulong DestBuffer;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC::InfoType"]/*' />
	public RaytracingAccelerationStructurePostbuildInfoType InfoType;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC"]/*' />
/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC</unmanaged>
public partial struct RaytracingAccelerationStructurePostbuildInfoCompactedSizeDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC::CompactedSizeInBytes"]/*' />
	public ulong CompactedSizeInBytes;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC"]/*' />
/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC</unmanaged>
public partial struct RaytracingAccelerationStructurePostbuildInfoToolsVisualizationDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC::DecodedSizeInBytes"]/*' />
	public ulong DecodedSizeInBytes;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER"]/*' />
/// <unmanaged>D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER</unmanaged>
public partial struct BuildRaytracingAccelerationStructureToolsVisualizationHeader
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER::Type"]/*' />
	public RaytracingAccelerationStructureType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER::NumDescs"]/*' />
	public uint NumDescs;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC"]/*' />
/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC</unmanaged>
public partial struct RaytracingAccelerationStructurePostbuildInfoSerializationDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC::SerializedSizeInBytes"]/*' />
	public ulong SerializedSizeInBytes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC::NumBottomLevelAccelerationStructurePointers"]/*' />
	public ulong NumBottomLevelAccelerationStructurePointers;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER"]/*' />
/// <unmanaged>D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER</unmanaged>
public partial struct SerializedDataDriverMatchingIdentifier
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER::DriverOpaqueGUID"]/*' />
	public Guid DriverOpaqueGUID;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER::DriverOpaqueVersioningData"]/*' />
	public unsafe fixed byte DriverOpaqueVersioningData[16];
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER"]/*' />
/// <unmanaged>D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER</unmanaged>
public partial struct SerializedRaytracingAccelerationStructureHeader
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER::DriverMatchingIdentifier"]/*' />
	public SerializedDataDriverMatchingIdentifier DriverMatchingIdentifier;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER::SerializedSizeInBytesIncludingHeader"]/*' />
	public ulong SerializedSizeInBytesIncludingHeader;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER::DeserializedSizeInBytes"]/*' />
	public ulong DeserializedSizeInBytes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER::NumBottomLevelAccelerationStructurePointersAfterHeader"]/*' />
	public ulong NumBottomLevelAccelerationStructurePointersAfterHeader;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC"]/*' />
/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC</unmanaged>
public partial struct RaytracingAccelerationStructurePostbuildInfoCurrentSizeDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC::CurrentSizeInBytes"]/*' />
	public ulong CurrentSizeInBytes;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_INSTANCE_DESC"]/*' />
/// <unmanaged>D3D12_RAYTRACING_INSTANCE_DESC</unmanaged>
public partial struct RaytracingInstanceDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_INSTANCE_DESC::Transform"]/*' />
	public unsafe fixed float Transform[12];

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_INSTANCE_DESC::_bitfield1"]/*' />
	public uint _bitfield1;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_INSTANCE_DESC::_bitfield2"]/*' />
	public uint _bitfield2;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_INSTANCE_DESC::AccelerationStructure"]/*' />
	public ulong AccelerationStructure;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_DESC"]/*' />
/// <unmanaged>D3D12_RAYTRACING_GEOMETRY_DESC</unmanaged>
public partial struct RaytracingGeometryDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_DESC::Type"]/*' />
	public RaytracingGeometryType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_DESC::Flags"]/*' />
	public RaytracingGeometryFlags Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_GEOMETRY_DESC::Anonymous"]/*' />
	public _Anonymous_e__Union Anonymous;

	[UnscopedRef]
	public ref RaytracingGeometryTrianglesDescription Triangles
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Triangles;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Triangles, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref RaytracingGeometryAabbsDescription AABBs
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.AABBs;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.AABBs, 1));
#endif
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	public partial struct _Anonymous_e__Union
	{
		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Triangles"]/*' />
		[FieldOffset(0)]
		public RaytracingGeometryTrianglesDescription Triangles;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::AABBs"]/*' />
		[FieldOffset(0)]
		public RaytracingGeometryAabbsDescription AABBs;
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS"]/*' />
/// <unmanaged>D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS</unmanaged>
public partial struct BuildRaytracingAccelerationStructureInputs
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS::Type"]/*' />
	public RaytracingAccelerationStructureType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS::Flags"]/*' />
	public RaytracingAccelerationStructureBuildFlags Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS::NumDescs"]/*' />
	public uint NumDescs;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS::DescsLayout"]/*' />
	public ElementsLayout DescsLayout;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS::Anonymous"]/*' />
	public _Anonymous_e__Union Anonymous;

	[UnscopedRef]
	public ref ulong InstanceDescs
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.InstanceDescs;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.InstanceDescs, 1));
#endif
		}
	}

	[UnscopedRef]
	public unsafe ref RaytracingGeometryDescription* pGeometryDescs
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.pGeometryDescs;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref this, 1)).Anonymous.pGeometryDescs;
#endif
		}
	}

	[UnscopedRef]
	public unsafe ref RaytracingGeometryDescription** ppGeometryDescs
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.ppGeometryDescs;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref this, 1)).Anonymous.ppGeometryDescs;
#endif
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	public partial struct _Anonymous_e__Union
	{
		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::InstanceDescs"]/*' />
		[FieldOffset(0)]
		public ulong InstanceDescs;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::pGeometryDescs"]/*' />
		[FieldOffset(0)]
		public unsafe RaytracingGeometryDescription* pGeometryDescs;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::ppGeometryDescs"]/*' />
		[FieldOffset(0)]
		public unsafe RaytracingGeometryDescription** ppGeometryDescs;
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC"]/*' />
/// <unmanaged>D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC</unmanaged>
public partial struct BuildRaytracingAccelerationStructureDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC::DestAccelerationStructureData"]/*' />
	public ulong DestAccelerationStructureData;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC::Inputs"]/*' />
	public BuildRaytracingAccelerationStructureInputs Inputs;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC::SourceAccelerationStructureData"]/*' />
	public ulong SourceAccelerationStructureData;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC::ScratchAccelerationStructureData"]/*' />
	public ulong ScratchAccelerationStructureData;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO"]/*' />
/// <unmanaged>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO</unmanaged>
public partial struct RaytracingAccelerationStructurePrebuildInfo
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO::ResultDataMaxSizeInBytes"]/*' />
	public ulong ResultDataMaxSizeInBytes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO::ScratchDataSizeInBytes"]/*' />
	public ulong ScratchDataSizeInBytes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO::UpdateScratchDataSizeInBytes"]/*' />
	public ulong UpdateScratchDataSizeInBytes;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE"]/*' />
/// <unmanaged>D3D12_AUTO_BREADCRUMB_NODE</unmanaged>
public partial struct AutoBreadcrumbNode
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE::pCommandListDebugNameA"]/*' />
	public unsafe byte* pCommandListDebugNameA;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE::pCommandListDebugNameW"]/*' />
	public unsafe char* pCommandListDebugNameW;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE::pCommandQueueDebugNameA"]/*' />
	public unsafe byte* pCommandQueueDebugNameA;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE::pCommandQueueDebugNameW"]/*' />
	public unsafe char* pCommandQueueDebugNameW;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE::pCommandList"]/*' />
	public ID3D12GraphicsCommandList pCommandList;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE::pCommandQueue"]/*' />
	public ID3D12CommandQueue pCommandQueue;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE::BreadcrumbCount"]/*' />
	public uint BreadcrumbCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE::pLastBreadcrumbValue"]/*' />
	public unsafe uint* pLastBreadcrumbValue;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE::pCommandHistory"]/*' />
	public unsafe AutoBreadcrumbOp* pCommandHistory;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE::pNext"]/*' />
	public unsafe AutoBreadcrumbNode* pNext;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_BREADCRUMB_CONTEXT"]/*' />
/// <unmanaged>D3D12_DRED_BREADCRUMB_CONTEXT</unmanaged>
public partial struct DredBreadcrumbContext
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_BREADCRUMB_CONTEXT::BreadcrumbIndex"]/*' />
	public uint BreadcrumbIndex;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_BREADCRUMB_CONTEXT::pContextString"]/*' />
	public unsafe char* pContextString;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE1"]/*' />
/// <unmanaged>D3D12_AUTO_BREADCRUMB_NODE1</unmanaged>
public partial struct AutoBreadcrumbNode1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE1::pCommandListDebugNameA"]/*' />
	public unsafe byte* pCommandListDebugNameA;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE1::pCommandListDebugNameW"]/*' />
	public unsafe char* pCommandListDebugNameW;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE1::pCommandQueueDebugNameA"]/*' />
	public unsafe byte* pCommandQueueDebugNameA;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE1::pCommandQueueDebugNameW"]/*' />
	public unsafe char* pCommandQueueDebugNameW;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE1::pCommandList"]/*' />
	public ID3D12GraphicsCommandList pCommandList;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE1::pCommandQueue"]/*' />
	public ID3D12CommandQueue pCommandQueue;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE1::BreadcrumbCount"]/*' />
	public uint BreadcrumbCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE1::pLastBreadcrumbValue"]/*' />
	public unsafe uint* pLastBreadcrumbValue;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE1::pCommandHistory"]/*' />
	public unsafe AutoBreadcrumbOp* pCommandHistory;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE1::pNext"]/*' />
	public unsafe AutoBreadcrumbNode1* pNext;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE1::BreadcrumbContextsCount"]/*' />
	public uint BreadcrumbContextsCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_AUTO_BREADCRUMB_NODE1::pBreadcrumbContexts"]/*' />
	public unsafe DredBreadcrumbContext* pBreadcrumbContexts;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEVICE_REMOVED_EXTENDED_DATA"]/*' />
/// <unmanaged>D3D12_DEVICE_REMOVED_EXTENDED_DATA</unmanaged>
public partial struct DeviceRemovedExtendedData
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEVICE_REMOVED_EXTENDED_DATA::Flags"]/*' />
	public DredFlags Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEVICE_REMOVED_EXTENDED_DATA::pHeadAutoBreadcrumbNode"]/*' />
	public unsafe AutoBreadcrumbNode* pHeadAutoBreadcrumbNode;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_NODE"]/*' />
/// <unmanaged>D3D12_DRED_ALLOCATION_NODE</unmanaged>
public partial struct DredAllocationNode
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_NODE::ObjectNameA"]/*' />
	public unsafe byte* ObjectNameA;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_NODE::ObjectNameW"]/*' />
	public unsafe char* ObjectNameW;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_NODE::AllocationType"]/*' />
	public DredAllocationType AllocationType;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_NODE::pNext"]/*' />
	public unsafe DredAllocationNode* pNext;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_NODE1"]/*' />
/// <unmanaged>D3D12_DRED_ALLOCATION_NODE1</unmanaged>
public partial struct DredAllocationNode1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_NODE1::ObjectNameA"]/*' />
	public unsafe byte* ObjectNameA;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_NODE1::ObjectNameW"]/*' />
	public unsafe char* ObjectNameW;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_NODE1::AllocationType"]/*' />
	public DredAllocationType AllocationType;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_NODE1::pNext"]/*' />
	public unsafe DredAllocationNode1* pNext;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_ALLOCATION_NODE1::pObject"]/*' />
	public IUnknown pObject;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT"]/*' />
/// <unmanaged>D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT</unmanaged>
public partial struct DredAutoBreadcrumbsOutput
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT::pHeadAutoBreadcrumbNode"]/*' />
	public unsafe AutoBreadcrumbNode* pHeadAutoBreadcrumbNode;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1"]/*' />
/// <unmanaged>D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1</unmanaged>
public partial struct DredAutoBreadcrumbsOutput1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1::pHeadAutoBreadcrumbNode"]/*' />
	public unsafe AutoBreadcrumbNode1* pHeadAutoBreadcrumbNode;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_PAGE_FAULT_OUTPUT"]/*' />
/// <unmanaged>D3D12_DRED_PAGE_FAULT_OUTPUT</unmanaged>
public partial struct DredPageFaultOutput
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_PAGE_FAULT_OUTPUT::PageFaultVA"]/*' />
	public ulong PageFaultVA;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_PAGE_FAULT_OUTPUT::pHeadExistingAllocationNode"]/*' />
	public unsafe DredAllocationNode* pHeadExistingAllocationNode;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_PAGE_FAULT_OUTPUT::pHeadRecentFreedAllocationNode"]/*' />
	public unsafe DredAllocationNode* pHeadRecentFreedAllocationNode;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_PAGE_FAULT_OUTPUT1"]/*' />
/// <unmanaged>D3D12_DRED_PAGE_FAULT_OUTPUT1</unmanaged>
public partial struct DredPageFaultOutput1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_PAGE_FAULT_OUTPUT1::PageFaultVA"]/*' />
	public ulong PageFaultVA;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_PAGE_FAULT_OUTPUT1::pHeadExistingAllocationNode"]/*' />
	public unsafe DredAllocationNode1* pHeadExistingAllocationNode;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_PAGE_FAULT_OUTPUT1::pHeadRecentFreedAllocationNode"]/*' />
	public unsafe DredAllocationNode1* pHeadRecentFreedAllocationNode;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_PAGE_FAULT_OUTPUT2"]/*' />
/// <unmanaged>D3D12_DRED_PAGE_FAULT_OUTPUT2</unmanaged>
public partial struct DredPageFaultOutput2
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_PAGE_FAULT_OUTPUT2::PageFaultVA"]/*' />
	public ulong PageFaultVA;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_PAGE_FAULT_OUTPUT2::pHeadExistingAllocationNode"]/*' />
	public unsafe DredAllocationNode1* pHeadExistingAllocationNode;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_PAGE_FAULT_OUTPUT2::pHeadRecentFreedAllocationNode"]/*' />
	public unsafe DredAllocationNode1* pHeadRecentFreedAllocationNode;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DRED_PAGE_FAULT_OUTPUT2::PageFaultFlags"]/*' />
	public DredPageFaultFlags PageFaultFlags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEVICE_REMOVED_EXTENDED_DATA1"]/*' />
/// <unmanaged>D3D12_DEVICE_REMOVED_EXTENDED_DATA1</unmanaged>
public partial struct DeviceRemovedExtendedData1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEVICE_REMOVED_EXTENDED_DATA1::DeviceRemovedReason"]/*' />
	public HResult DeviceRemovedReason;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEVICE_REMOVED_EXTENDED_DATA1::AutoBreadcrumbsOutput"]/*' />
	public DredAutoBreadcrumbsOutput AutoBreadcrumbsOutput;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEVICE_REMOVED_EXTENDED_DATA1::PageFaultOutput"]/*' />
	public DredPageFaultOutput PageFaultOutput;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEVICE_REMOVED_EXTENDED_DATA2"]/*' />
/// <unmanaged>D3D12_DEVICE_REMOVED_EXTENDED_DATA2</unmanaged>
public partial struct DeviceRemovedExtendedData2
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEVICE_REMOVED_EXTENDED_DATA2::DeviceRemovedReason"]/*' />
	public HResult DeviceRemovedReason;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEVICE_REMOVED_EXTENDED_DATA2::AutoBreadcrumbsOutput"]/*' />
	public DredAutoBreadcrumbsOutput1 AutoBreadcrumbsOutput;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEVICE_REMOVED_EXTENDED_DATA2::PageFaultOutput"]/*' />
	public DredPageFaultOutput1 PageFaultOutput;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEVICE_REMOVED_EXTENDED_DATA3"]/*' />
/// <unmanaged>D3D12_DEVICE_REMOVED_EXTENDED_DATA3</unmanaged>
public partial struct DeviceRemovedExtendedData3
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEVICE_REMOVED_EXTENDED_DATA3::DeviceRemovedReason"]/*' />
	public HResult DeviceRemovedReason;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEVICE_REMOVED_EXTENDED_DATA3::AutoBreadcrumbsOutput"]/*' />
	public DredAutoBreadcrumbsOutput1 AutoBreadcrumbsOutput;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEVICE_REMOVED_EXTENDED_DATA3::PageFaultOutput"]/*' />
	public DredPageFaultOutput2 PageFaultOutput;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEVICE_REMOVED_EXTENDED_DATA3::DeviceState"]/*' />
	public DredDeviceState DeviceState;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA"]/*' />
/// <unmanaged>D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA</unmanaged>
public partial struct VersionedDeviceRemovedExtendedData
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA::Version"]/*' />
	public DredVersion Version;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA::Anonymous"]/*' />
	public _Anonymous_e__Union Anonymous;

	[UnscopedRef]
	public ref DeviceRemovedExtendedData Dred_1_0
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Dred_1_0;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Dred_1_0, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref DeviceRemovedExtendedData1 Dred_1_1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Dred_1_1;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Dred_1_1, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref DeviceRemovedExtendedData2 Dred_1_2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Dred_1_2;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Dred_1_2, 1));
#endif
		}
	}

	[UnscopedRef]
	public ref DeviceRemovedExtendedData3 Dred_1_3
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Dred_1_3;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Dred_1_3, 1));
#endif
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	public partial struct _Anonymous_e__Union
	{
		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Dred_1_0"]/*' />
		[FieldOffset(0)]
		public DeviceRemovedExtendedData Dred_1_0;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Dred_1_1"]/*' />
		[FieldOffset(0)]
		public DeviceRemovedExtendedData1 Dred_1_1;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Dred_1_2"]/*' />
		[FieldOffset(0)]
		public DeviceRemovedExtendedData2 Dred_1_2;

		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Dred_1_3"]/*' />
		[FieldOffset(0)]
		public DeviceRemovedExtendedData3 Dred_1_3;
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT</unmanaged>
public partial struct FeatureDataProtectedResourceSessionTypeCount
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT::NodeIndex"]/*' />
	public uint NodeIndex;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT::Count"]/*' />
	public uint Count;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES"]/*' />
/// <unmanaged>D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES</unmanaged>
public partial struct FeatureDataProtectedResourceSessionTypes
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES::NodeIndex"]/*' />
	public uint NodeIndex;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES::Count"]/*' />
	public uint Count;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES::pTypes"]/*' />
	public unsafe Guid* pTypes;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROTECTED_RESOURCE_SESSION_DESC1"]/*' />
/// <unmanaged>D3D12_PROTECTED_RESOURCE_SESSION_DESC1</unmanaged>
public partial struct ProtectedResourceSessionDescription1
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROTECTED_RESOURCE_SESSION_DESC1::NodeMask"]/*' />
	public uint NodeMask;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROTECTED_RESOURCE_SESSION_DESC1::Flags"]/*' />
	public ProtectedResourceSessionFlags Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PROTECTED_RESOURCE_SESSION_DESC1::ProtectionType"]/*' />
	public Guid ProtectionType;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS"]/*' />
/// <unmanaged>D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS</unmanaged>
public partial struct RenderPassBeginningAccessClearParameters
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS::ClearValue"]/*' />
	public ClearValue ClearValue;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_BEGINNING_ACCESS"]/*' />
/// <unmanaged>D3D12_RENDER_PASS_BEGINNING_ACCESS</unmanaged>
public partial struct RenderPassBeginningAccess
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_BEGINNING_ACCESS::Type"]/*' />
	public RenderPassBeginningAccessType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_BEGINNING_ACCESS::Anonymous"]/*' />
	public _Anonymous_e__Union Anonymous;

	[UnscopedRef]
	public ref RenderPassBeginningAccessClearParameters Clear
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Clear;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Clear, 1));
#endif
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	public partial struct _Anonymous_e__Union
	{
		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Clear"]/*' />
		[FieldOffset(0)]
		public RenderPassBeginningAccessClearParameters Clear;
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS"]/*' />
/// <unmanaged>D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS</unmanaged>
public partial struct RenderPassEndingAccessResolveSubresourceParameters
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS::SrcSubresource"]/*' />
	public uint SrcSubresource;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS::DstSubresource"]/*' />
	public uint DstSubresource;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS::DstX"]/*' />
	public uint DstX;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS::DstY"]/*' />
	public uint DstY;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS::SrcRect"]/*' />
	public RawRect SrcRect;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS"]/*' />
/// <unmanaged>D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS</unmanaged>
public partial struct RenderPassEndingAccessResolveParameters
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS::pSrcResource"]/*' />
	public ID3D12Resource pSrcResource;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS::pDstResource"]/*' />
	public ID3D12Resource pDstResource;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS::SubresourceCount"]/*' />
	public uint SubresourceCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS::pSubresourceParameters"]/*' />
	public unsafe RenderPassEndingAccessResolveSubresourceParameters* pSubresourceParameters;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS::Format"]/*' />
	public Graphics.Dxgi.Common.Format Format;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS::ResolveMode"]/*' />
	public ResolveMode ResolveMode;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS::PreserveResolveSource"]/*' />
	public Bool32 PreserveResolveSource;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS"]/*' />
/// <unmanaged>D3D12_RENDER_PASS_ENDING_ACCESS</unmanaged>
public partial struct RenderPassEndingAccess
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS::Type"]/*' />
	public RenderPassEndingAccessType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_ENDING_ACCESS::Anonymous"]/*' />
	public _Anonymous_e__Union Anonymous;

	[UnscopedRef]
	public ref RenderPassEndingAccessResolveParameters Resolve
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
#if NET7_0_OR_GREATER
			return ref Anonymous.Resolve;
#else
			return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Resolve, 1));
#endif
		}
	}

	[StructLayout(LayoutKind.Explicit)]
	public partial struct _Anonymous_e__Union
	{
		/// <include file='../Direct3D12.xml' path='doc/member[@name="_Anonymous_e__Union::Resolve"]/*' />
		[FieldOffset(0)]
		public RenderPassEndingAccessResolveParameters Resolve;
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_RENDER_TARGET_DESC"]/*' />
/// <unmanaged>D3D12_RENDER_PASS_RENDER_TARGET_DESC</unmanaged>
public partial struct RenderPassRenderTargetDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_RENDER_TARGET_DESC::cpuDescriptor"]/*' />
	public CpuDescriptorHandle cpuDescriptor;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_RENDER_TARGET_DESC::BeginningAccess"]/*' />
	public RenderPassBeginningAccess BeginningAccess;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_RENDER_TARGET_DESC::EndingAccess"]/*' />
	public RenderPassEndingAccess EndingAccess;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_DEPTH_STENCIL_DESC"]/*' />
/// <unmanaged>D3D12_RENDER_PASS_DEPTH_STENCIL_DESC</unmanaged>
public partial struct RenderPassDepthStencilDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_DEPTH_STENCIL_DESC::cpuDescriptor"]/*' />
	public CpuDescriptorHandle cpuDescriptor;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_DEPTH_STENCIL_DESC::DepthBeginningAccess"]/*' />
	public RenderPassBeginningAccess DepthBeginningAccess;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_DEPTH_STENCIL_DESC::StencilBeginningAccess"]/*' />
	public RenderPassBeginningAccess StencilBeginningAccess;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_DEPTH_STENCIL_DESC::DepthEndingAccess"]/*' />
	public RenderPassEndingAccess DepthEndingAccess;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_RENDER_PASS_DEPTH_STENCIL_DESC::StencilEndingAccess"]/*' />
	public RenderPassEndingAccess StencilEndingAccess;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISPATCH_RAYS_DESC"]/*' />
/// <unmanaged>D3D12_DISPATCH_RAYS_DESC</unmanaged>
public partial struct DispatchRaysDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISPATCH_RAYS_DESC::RayGenerationShaderRecord"]/*' />
	public GpuVirtualAddressRange RayGenerationShaderRecord;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISPATCH_RAYS_DESC::MissShaderTable"]/*' />
	public GpuVirtualAddressRangeAndStride MissShaderTable;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISPATCH_RAYS_DESC::HitGroupTable"]/*' />
	public GpuVirtualAddressRangeAndStride HitGroupTable;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISPATCH_RAYS_DESC::CallableShaderTable"]/*' />
	public GpuVirtualAddressRangeAndStride CallableShaderTable;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISPATCH_RAYS_DESC::Width"]/*' />
	public uint Width;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISPATCH_RAYS_DESC::Height"]/*' />
	public uint Height;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISPATCH_RAYS_DESC::Depth"]/*' />
	public uint Depth;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SESSION_DESC"]/*' />
/// <unmanaged>D3D12_SHADER_CACHE_SESSION_DESC</unmanaged>
public partial struct ShaderCacheSessionDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SESSION_DESC::Identifier"]/*' />
	public Guid Identifier;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SESSION_DESC::Mode"]/*' />
	public ShaderCacheMode Mode;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SESSION_DESC::Flags"]/*' />
	public ShaderCacheFlags Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SESSION_DESC::MaximumInMemoryCacheSizeBytes"]/*' />
	public uint MaximumInMemoryCacheSizeBytes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SESSION_DESC::MaximumInMemoryCacheEntries"]/*' />
	public uint MaximumInMemoryCacheEntries;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SESSION_DESC::MaximumValueFileSizeBytes"]/*' />
	public uint MaximumValueFileSizeBytes;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_CACHE_SESSION_DESC::Version"]/*' />
	public ulong Version;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_DATA"]/*' />
/// <unmanaged>D3D12_SUBRESOURCE_DATA</unmanaged>
public partial struct SubresourceData
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_DATA::pData"]/*' />
	public unsafe void* pData;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_DATA::RowPitch"]/*' />
	public nint RowPitch;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SUBRESOURCE_DATA::SlicePitch"]/*' />
	public nint SlicePitch;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MEMCPY_DEST"]/*' />
/// <unmanaged>D3D12_MEMCPY_DEST</unmanaged>
public partial struct MemcpyDest
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MEMCPY_DEST::pData"]/*' />
	public unsafe void* pData;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MEMCPY_DEST::RowPitch"]/*' />
	public nuint RowPitch;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MEMCPY_DEST::SlicePitch"]/*' />
	public nuint SlicePitch;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS"]/*' />
/// <unmanaged>D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS</unmanaged>
public partial struct DebugDeviceGpuBasedValidationSettings
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS::MaxMessagesPerCommandList"]/*' />
	public uint MaxMessagesPerCommandList;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS::DefaultShaderPatchMode"]/*' />
	public GpuBasedValidationShaderPatchMode DefaultShaderPatchMode;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS::PipelineStateCreateFlags"]/*' />
	public GpuBasedValidationPipelineStateCreateFlags PipelineStateCreateFlags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR"]/*' />
/// <unmanaged>D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR</unmanaged>
public partial struct DebugDeviceGpuSlowdownPerformanceFactor
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR::SlowdownFactor"]/*' />
	public float SlowdownFactor;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS"]/*' />
/// <unmanaged>D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS</unmanaged>
public partial struct DebugCommandListGpuBasedValidationSettings
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS::ShaderPatchMode"]/*' />
	public GpuBasedValidationShaderPatchMode ShaderPatchMode;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE"]/*' />
/// <unmanaged>D3D12_MESSAGE</unmanaged>
public partial struct Message
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE::Category"]/*' />
	public MessageCategory Category;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE::Severity"]/*' />
	public MessageSeverity Severity;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE::ID"]/*' />
	public MessageId ID;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE::pDescription"]/*' />
	public unsafe byte* pDescription;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_MESSAGE::DescriptionByteLength"]/*' />
	public nuint DescriptionByteLength;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INFO_QUEUE_FILTER_DESC"]/*' />
/// <unmanaged>D3D12_INFO_QUEUE_FILTER_DESC</unmanaged>
public partial struct InfoQueueFilterDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INFO_QUEUE_FILTER_DESC::NumCategories"]/*' />
	public uint NumCategories;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INFO_QUEUE_FILTER_DESC::pCategoryList"]/*' />
	public unsafe MessageCategory* pCategoryList;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INFO_QUEUE_FILTER_DESC::NumSeverities"]/*' />
	public uint NumSeverities;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INFO_QUEUE_FILTER_DESC::pSeverityList"]/*' />
	public unsafe MessageSeverity* pSeverityList;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INFO_QUEUE_FILTER_DESC::NumIDs"]/*' />
	public uint NumIDs;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INFO_QUEUE_FILTER_DESC::pIDList"]/*' />
	public unsafe MessageId* pIDList;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INFO_QUEUE_FILTER"]/*' />
/// <unmanaged>D3D12_INFO_QUEUE_FILTER</unmanaged>
public partial struct InfoQueueFilter
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INFO_QUEUE_FILTER::AllowList"]/*' />
	public InfoQueueFilterDescription AllowList;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_INFO_QUEUE_FILTER::DenyList"]/*' />
	public InfoQueueFilterDescription DenyList;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISPATCH_MESH_ARGUMENTS"]/*' />
/// <unmanaged>D3D12_DISPATCH_MESH_ARGUMENTS</unmanaged>
public partial struct DispatchMeshArguments
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISPATCH_MESH_ARGUMENTS::ThreadGroupCountX"]/*' />
	public uint ThreadGroupCountX;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISPATCH_MESH_ARGUMENTS::ThreadGroupCountY"]/*' />
	public uint ThreadGroupCountY;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_DISPATCH_MESH_ARGUMENTS::ThreadGroupCountZ"]/*' />
	public uint ThreadGroupCountZ;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SIGNATURE_PARAMETER_DESC"]/*' />
/// <unmanaged>D3D12_SIGNATURE_PARAMETER_DESC</unmanaged>
public partial struct SignatureParameterDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SIGNATURE_PARAMETER_DESC::SemanticName"]/*' />
	public unsafe byte* SemanticName;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SIGNATURE_PARAMETER_DESC::SemanticIndex"]/*' />
	public uint SemanticIndex;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SIGNATURE_PARAMETER_DESC::Register"]/*' />
	public uint Register;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SIGNATURE_PARAMETER_DESC::SystemValueType"]/*' />
	public Graphics.Direct3D.Name SystemValueType;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SIGNATURE_PARAMETER_DESC::ComponentType"]/*' />
	public Graphics.Direct3D.RegisterComponentType ComponentType;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SIGNATURE_PARAMETER_DESC::Mask"]/*' />
	public byte Mask;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SIGNATURE_PARAMETER_DESC::ReadWriteMask"]/*' />
	public byte ReadWriteMask;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SIGNATURE_PARAMETER_DESC::Stream"]/*' />
	public uint Stream;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SIGNATURE_PARAMETER_DESC::MinPrecision"]/*' />
	public Graphics.Direct3D.MinPrecision MinPrecision;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_BUFFER_DESC"]/*' />
/// <unmanaged>D3D12_SHADER_BUFFER_DESC</unmanaged>
public partial struct ShaderBufferDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_BUFFER_DESC::Name"]/*' />
	public unsafe byte* Name;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_BUFFER_DESC::Type"]/*' />
	public Graphics.Direct3D.CBufferType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_BUFFER_DESC::Variables"]/*' />
	public uint Variables;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_BUFFER_DESC::Size"]/*' />
	public uint Size;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_BUFFER_DESC::uFlags"]/*' />
	public uint uFlags;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VARIABLE_DESC"]/*' />
/// <unmanaged>D3D12_SHADER_VARIABLE_DESC</unmanaged>
public partial struct ShaderVariableDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VARIABLE_DESC::Name"]/*' />
	public unsafe byte* Name;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VARIABLE_DESC::StartOffset"]/*' />
	public uint StartOffset;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VARIABLE_DESC::Size"]/*' />
	public uint Size;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VARIABLE_DESC::uFlags"]/*' />
	public uint uFlags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VARIABLE_DESC::DefaultValue"]/*' />
	public unsafe void* DefaultValue;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VARIABLE_DESC::StartTexture"]/*' />
	public uint StartTexture;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VARIABLE_DESC::TextureSize"]/*' />
	public uint TextureSize;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VARIABLE_DESC::StartSampler"]/*' />
	public uint StartSampler;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_VARIABLE_DESC::SamplerSize"]/*' />
	public uint SamplerSize;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_TYPE_DESC"]/*' />
/// <unmanaged>D3D12_SHADER_TYPE_DESC</unmanaged>
public partial struct ShaderTypeDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_TYPE_DESC::Class"]/*' />
	public Graphics.Direct3D.ShaderVariableClass Class;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_TYPE_DESC::Type"]/*' />
	public Graphics.Direct3D.ShaderVariableType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_TYPE_DESC::Rows"]/*' />
	public uint Rows;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_TYPE_DESC::Columns"]/*' />
	public uint Columns;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_TYPE_DESC::Elements"]/*' />
	public uint Elements;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_TYPE_DESC::Members"]/*' />
	public uint Members;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_TYPE_DESC::Offset"]/*' />
	public uint Offset;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_TYPE_DESC::Name"]/*' />
	public unsafe byte* Name;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC"]/*' />
/// <unmanaged>D3D12_SHADER_DESC</unmanaged>
public partial struct ShaderDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::Version"]/*' />
	public uint Version;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::Creator"]/*' />
	public unsafe byte* Creator;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::Flags"]/*' />
	public uint Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::ConstantBuffers"]/*' />
	public uint ConstantBuffers;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::BoundResources"]/*' />
	public uint BoundResources;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::InputParameters"]/*' />
	public uint InputParameters;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::OutputParameters"]/*' />
	public uint OutputParameters;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::InstructionCount"]/*' />
	public uint InstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::TempRegisterCount"]/*' />
	public uint TempRegisterCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::TempArrayCount"]/*' />
	public uint TempArrayCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::DefCount"]/*' />
	public uint DefCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::DclCount"]/*' />
	public uint DclCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::TextureNormalInstructions"]/*' />
	public uint TextureNormalInstructions;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::TextureLoadInstructions"]/*' />
	public uint TextureLoadInstructions;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::TextureCompInstructions"]/*' />
	public uint TextureCompInstructions;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::TextureBiasInstructions"]/*' />
	public uint TextureBiasInstructions;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::TextureGradientInstructions"]/*' />
	public uint TextureGradientInstructions;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::FloatInstructionCount"]/*' />
	public uint FloatInstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::IntInstructionCount"]/*' />
	public uint IntInstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::UintInstructionCount"]/*' />
	public uint UintInstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::StaticFlowControlCount"]/*' />
	public uint StaticFlowControlCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::DynamicFlowControlCount"]/*' />
	public uint DynamicFlowControlCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::MacroInstructionCount"]/*' />
	public uint MacroInstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::ArrayInstructionCount"]/*' />
	public uint ArrayInstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::CutInstructionCount"]/*' />
	public uint CutInstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::EmitInstructionCount"]/*' />
	public uint EmitInstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::GSOutputTopology"]/*' />
	public Graphics.Direct3D.PrimitiveTopology GSOutputTopology;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::GSMaxOutputVertexCount"]/*' />
	public uint GSMaxOutputVertexCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::InputPrimitive"]/*' />
	public Graphics.Direct3D.Primitive InputPrimitive;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::PatchConstantParameters"]/*' />
	public uint PatchConstantParameters;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::cGSInstanceCount"]/*' />
	public uint cGSInstanceCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::cControlPoints"]/*' />
	public uint cControlPoints;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::HSOutputPrimitive"]/*' />
	public Graphics.Direct3D.TessellatorOutputPrimitive HSOutputPrimitive;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::HSPartitioning"]/*' />
	public Graphics.Direct3D.TessellatorPartitioning HSPartitioning;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::TessellatorDomain"]/*' />
	public Graphics.Direct3D.TessellatorDomain TessellatorDomain;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::cBarrierInstructions"]/*' />
	public uint cBarrierInstructions;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::cInterlockedInstructions"]/*' />
	public uint cInterlockedInstructions;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_DESC::cTextureStoreInstructions"]/*' />
	public uint cTextureStoreInstructions;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_INPUT_BIND_DESC"]/*' />
/// <unmanaged>D3D12_SHADER_INPUT_BIND_DESC</unmanaged>
public partial struct ShaderInputBindDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_INPUT_BIND_DESC::Name"]/*' />
	public unsafe byte* Name;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_INPUT_BIND_DESC::Type"]/*' />
	public Graphics.Direct3D.ShaderInputType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_INPUT_BIND_DESC::BindPoint"]/*' />
	public uint BindPoint;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_INPUT_BIND_DESC::BindCount"]/*' />
	public uint BindCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_INPUT_BIND_DESC::uFlags"]/*' />
	public uint uFlags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_INPUT_BIND_DESC::ReturnType"]/*' />
	public Graphics.Direct3D.ResourceReturnType ReturnType;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_INPUT_BIND_DESC::Dimension"]/*' />
	public Graphics.Direct3D.SrvDimension Dimension;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_INPUT_BIND_DESC::NumSamples"]/*' />
	public uint NumSamples;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_INPUT_BIND_DESC::Space"]/*' />
	public uint Space;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_SHADER_INPUT_BIND_DESC::uID"]/*' />
	public uint uID;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LIBRARY_DESC"]/*' />
/// <unmanaged>D3D12_LIBRARY_DESC</unmanaged>
public partial struct LibraryDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LIBRARY_DESC::Creator"]/*' />
	public unsafe byte* Creator;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LIBRARY_DESC::Flags"]/*' />
	public uint Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_LIBRARY_DESC::FunctionCount"]/*' />
	public uint FunctionCount;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC"]/*' />
/// <unmanaged>D3D12_FUNCTION_DESC</unmanaged>
public partial struct FunctionDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::Version"]/*' />
	public uint Version;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::Creator"]/*' />
	public unsafe byte* Creator;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::Flags"]/*' />
	public uint Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::ConstantBuffers"]/*' />
	public uint ConstantBuffers;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::BoundResources"]/*' />
	public uint BoundResources;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::InstructionCount"]/*' />
	public uint InstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::TempRegisterCount"]/*' />
	public uint TempRegisterCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::TempArrayCount"]/*' />
	public uint TempArrayCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::DefCount"]/*' />
	public uint DefCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::DclCount"]/*' />
	public uint DclCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::TextureNormalInstructions"]/*' />
	public uint TextureNormalInstructions;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::TextureLoadInstructions"]/*' />
	public uint TextureLoadInstructions;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::TextureCompInstructions"]/*' />
	public uint TextureCompInstructions;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::TextureBiasInstructions"]/*' />
	public uint TextureBiasInstructions;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::TextureGradientInstructions"]/*' />
	public uint TextureGradientInstructions;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::FloatInstructionCount"]/*' />
	public uint FloatInstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::IntInstructionCount"]/*' />
	public uint IntInstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::UintInstructionCount"]/*' />
	public uint UintInstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::StaticFlowControlCount"]/*' />
	public uint StaticFlowControlCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::DynamicFlowControlCount"]/*' />
	public uint DynamicFlowControlCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::MacroInstructionCount"]/*' />
	public uint MacroInstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::ArrayInstructionCount"]/*' />
	public uint ArrayInstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::MovInstructionCount"]/*' />
	public uint MovInstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::MovcInstructionCount"]/*' />
	public uint MovcInstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::ConversionInstructionCount"]/*' />
	public uint ConversionInstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::BitwiseInstructionCount"]/*' />
	public uint BitwiseInstructionCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::MinFeatureLevel"]/*' />
	public Graphics.Direct3D.FeatureLevel MinFeatureLevel;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::RequiredFeatureFlags"]/*' />
	public ulong RequiredFeatureFlags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::Name"]/*' />
	public unsafe byte* Name;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::FunctionParameterCount"]/*' />
	public int FunctionParameterCount;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::HasReturn"]/*' />
	public Bool32 HasReturn;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::Has10Level9VertexShader"]/*' />
	public Bool32 Has10Level9VertexShader;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_FUNCTION_DESC::Has10Level9PixelShader"]/*' />
	public Bool32 Has10Level9PixelShader;
}

/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PARAMETER_DESC"]/*' />
/// <unmanaged>D3D12_PARAMETER_DESC</unmanaged>
public partial struct ParameterDescription
{
	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PARAMETER_DESC::Name"]/*' />
	public unsafe byte* Name;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PARAMETER_DESC::SemanticName"]/*' />
	public unsafe byte* SemanticName;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PARAMETER_DESC::Type"]/*' />
	public Graphics.Direct3D.ShaderVariableType Type;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PARAMETER_DESC::Class"]/*' />
	public Graphics.Direct3D.ShaderVariableClass Class;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PARAMETER_DESC::Rows"]/*' />
	public uint Rows;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PARAMETER_DESC::Columns"]/*' />
	public uint Columns;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PARAMETER_DESC::InterpolationMode"]/*' />
	public Graphics.Direct3D.InterpolationMode InterpolationMode;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PARAMETER_DESC::Flags"]/*' />
	public Graphics.Direct3D.ParameterFlags Flags;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PARAMETER_DESC::FirstInRegister"]/*' />
	public uint FirstInRegister;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PARAMETER_DESC::FirstInComponent"]/*' />
	public uint FirstInComponent;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PARAMETER_DESC::FirstOutRegister"]/*' />
	public uint FirstOutRegister;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="D3D12_PARAMETER_DESC::FirstOutComponent"]/*' />
	public uint FirstOutComponent;
}

#endregion Structs

#region COM Types
/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Object"]/*' />
/// <unmanaged>ID3D12Object</unmanaged>
[Guid("c4fec28f-7966-4e95-9f94-f431cb56c3b8")]
[NativeTypeName("struct ID3D12Object : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12Object
{
	public static ref readonly Guid IID_ID3D12Object
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8F, 0xC2, 0xFE, 0xC4,
				0x66, 0x79,
				0x95, 0x4E,
				0x9F,
				0x94,
				0xF4,
				0x31,
				0xCB,
				0x56,
				0xC3,
				0xB8
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Object));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Object::GetPrivateData"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, int>)(lpVtbl[3]))((ID3D12Object*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Object::SetPrivateData"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint, void*, int>)(lpVtbl[4]))((ID3D12Object*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Object::SetPrivateDataInterface"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, IUnknown*, int>)(lpVtbl[5]))((ID3D12Object*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Object::SetName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Object*, char**, int>)(lpVtbl[6]))((ID3D12Object*)Unsafe.AsPointer(ref this), Name);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceChild"]/*' />
/// <unmanaged>ID3D12DeviceChild</unmanaged>
[Guid("905db94b-a00c-4140-9df5-2b64ca9ea357")]
[NativeTypeName("struct ID3D12DeviceChild : ID3D12Object")]
[NativeInheritance("ID3D12Object")]
public unsafe partial struct ID3D12DeviceChild
{
	public static ref readonly Guid IID_ID3D12DeviceChild
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x4B, 0xB9, 0x5D, 0x90,
				0x0C, 0xA0,
				0x40, 0x41,
				0x9D,
				0xF5,
				0x2B,
				0x64,
				0xCA,
				0x9E,
				0xA3,
				0x57
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12DeviceChild));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, uint*, void*, int>)(lpVtbl[3]))((ID3D12DeviceChild*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, uint, void*, int>)(lpVtbl[4]))((ID3D12DeviceChild*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, IUnknown*, int>)(lpVtbl[5]))((ID3D12DeviceChild*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, char**, int>)(lpVtbl[6]))((ID3D12DeviceChild*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceChild::GetDevice"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, void**, int>)(lpVtbl[7]))((ID3D12DeviceChild*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12RootSignature"]/*' />
/// <unmanaged>ID3D12RootSignature</unmanaged>
[Guid("c54a6b66-72df-4ee8-8be5-a946a1429214")]
[NativeTypeName("struct ID3D12RootSignature : ID3D12DeviceChild")]
[NativeInheritance("ID3D12DeviceChild")]
public unsafe partial struct ID3D12RootSignature
{
	public static ref readonly Guid IID_ID3D12RootSignature
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x66, 0x6B, 0x4A, 0xC5,
				0xDF, 0x72,
				0xE8, 0x4E,
				0x8B,
				0xE5,
				0xA9,
				0x46,
				0xA1,
				0x42,
				0x92,
				0x14
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12RootSignature));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12RootSignature*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12RootSignature*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12RootSignature*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12RootSignature*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12RootSignature*, char**, int>)(lpVtbl[7]))((ID3D12RootSignature*)Unsafe.AsPointer(ref this), Name);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12RootSignatureDeserializer"]/*' />
/// <unmanaged>ID3D12RootSignatureDeserializer</unmanaged>
[Guid("34ab647b-3cc8-46ac-841b-c0965645c046")]
[NativeTypeName("struct ID3D12RootSignatureDeserializer : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12RootSignatureDeserializer
{
	public static ref readonly Guid IID_ID3D12RootSignatureDeserializer
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7B, 0x64, 0xAB, 0x34,
				0xC8, 0x3C,
				0xAC, 0x46,
				0x84,
				0x1B,
				0xC0,
				0x96,
				0x56,
				0x45,
				0xC0,
				0x46
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12RootSignatureDeserializer));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12RootSignatureDeserializer::GetRootSignatureDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public Graphics.Direct3D12.RootSignatureDescription* GetRootSignatureDesc()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12RootSignatureDeserializer*, Graphics.Direct3D12.RootSignatureDescription*>)(lpVtbl[3]))((ID3D12RootSignatureDeserializer*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12VersionedRootSignatureDeserializer"]/*' />
/// <unmanaged>ID3D12VersionedRootSignatureDeserializer</unmanaged>
[Guid("7f91ce67-090c-4bb7-b78e-ed8ff2e31da0")]
[NativeTypeName("struct ID3D12VersionedRootSignatureDeserializer : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12VersionedRootSignatureDeserializer
{
	public static ref readonly Guid IID_ID3D12VersionedRootSignatureDeserializer
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x67, 0xCE, 0x91, 0x7F,
				0x0C, 0x09,
				0xB7, 0x4B,
				0xB7,
				0x8E,
				0xED,
				0x8F,
				0xF2,
				0xE3,
				0x1D,
				0xA0
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12VersionedRootSignatureDeserializer));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12VersionedRootSignatureDeserializer::GetRootSignatureDescAtVersion"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetRootSignatureDescAtVersion(RootSignatureVersion convertToVersion, VersionedRootSignatureDescription** ppDesc)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, RootSignatureVersion, VersionedRootSignatureDescription**, int>)(lpVtbl[3]))((ID3D12VersionedRootSignatureDeserializer*)Unsafe.AsPointer(ref this), convertToVersion, ppDesc);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12VersionedRootSignatureDeserializer::GetUnconvertedRootSignatureDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public Graphics.Direct3D12.VersionedRootSignatureDescription* GetUnconvertedRootSignatureDesc()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, Graphics.Direct3D12.VersionedRootSignatureDescription*>)(lpVtbl[4]))((ID3D12VersionedRootSignatureDeserializer*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Pageable"]/*' />
/// <unmanaged>ID3D12Pageable</unmanaged>
[Guid("63ee58fb-1268-4835-86da-f008ce62f0d6")]
[NativeTypeName("struct ID3D12Pageable : ID3D12DeviceChild")]
[NativeInheritance("ID3D12DeviceChild")]
public unsafe partial struct ID3D12Pageable
{
	public static ref readonly Guid IID_ID3D12Pageable
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFB, 0x58, 0xEE, 0x63,
				0x68, 0x12,
				0x35, 0x48,
				0x86,
				0xDA,
				0xF0,
				0x08,
				0xCE,
				0x62,
				0xF0,
				0xD6
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Pageable));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12Pageable*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12Pageable*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12Pageable*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12Pageable*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Pageable*, char**, int>)(lpVtbl[7]))((ID3D12Pageable*)Unsafe.AsPointer(ref this), Name);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Heap"]/*' />
/// <unmanaged>ID3D12Heap</unmanaged>
[Guid("6b3b2502-6e51-45b3-90ee-9884265e8df3")]
[NativeTypeName("struct ID3D12Heap : ID3D12Pageable")]
[NativeInheritance("ID3D12Pageable")]
public unsafe partial struct ID3D12Heap
{
	public static ref readonly Guid IID_ID3D12Heap
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x02, 0x25, 0x3B, 0x6B,
				0x51, 0x6E,
				0xB3, 0x45,
				0x90,
				0xEE,
				0x98,
				0x84,
				0x26,
				0x5E,
				0x8D,
				0xF3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Heap));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12Heap*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12Heap*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12Heap*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12Heap*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Heap*, char**, int>)(lpVtbl[7]))((ID3D12Heap*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Heap::GetDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public Graphics.Direct3D12.HeapDescription GetDesc()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Heap*, Graphics.Direct3D12.HeapDescription>)(lpVtbl[8]))((ID3D12Heap*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Resource"]/*' />
/// <unmanaged>ID3D12Resource</unmanaged>
[Guid("696442be-a72e-4059-bc79-5b5c98040fad")]
[NativeTypeName("struct ID3D12Resource : ID3D12Pageable")]
[NativeInheritance("ID3D12Pageable")]
public unsafe partial struct ID3D12Resource
{
	public static ref readonly Guid IID_ID3D12Resource
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xBE, 0x42, 0x64, 0x69,
				0x2E, 0xA7,
				0x59, 0x40,
				0xBC,
				0x79,
				0x5B,
				0x5C,
				0x98,
				0x04,
				0x0F,
				0xAD
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Resource));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12Resource*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12Resource*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12Resource*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12Resource*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource*, char**, int>)(lpVtbl[7]))((ID3D12Resource*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Resource::Map"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult Map(uint Subresource, Range* pReadRange, void** ppData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, Range*, void**, int>)(lpVtbl[8]))((ID3D12Resource*)Unsafe.AsPointer(ref this), Subresource, pReadRange, ppData);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Resource::Unmap"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public void Unmap(uint Subresource, Range* pWrittenRange)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, Range*, void>)(lpVtbl[9]))((ID3D12Resource*)Unsafe.AsPointer(ref this), Subresource, pWrittenRange);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Resource::GetDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public Graphics.Direct3D12.ResourceDescription GetDesc()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource*, Graphics.Direct3D12.ResourceDescription>)(lpVtbl[10]))((ID3D12Resource*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Resource::GetGPUVirtualAddress"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public ulong GetGPUVirtualAddress()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource*, ulong>)(lpVtbl[11]))((ID3D12Resource*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Resource::WriteToSubresource"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult WriteToSubresource(uint DstSubresource, Box* pDstBox, void* pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, Box*, void*, uint, uint, int>)(lpVtbl[12]))((ID3D12Resource*)Unsafe.AsPointer(ref this), DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Resource::ReadFromSubresource"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult ReadFromSubresource(void* pDstData, uint DstRowPitch, uint DstDepthPitch, uint SrcSubresource, Box* pSrcBox)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource*, void*, uint, uint, uint, Box*, int>)(lpVtbl[13]))((ID3D12Resource*)Unsafe.AsPointer(ref this), pDstData, DstRowPitch, DstDepthPitch, SrcSubresource, pSrcBox);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Resource::GetHeapProperties"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult GetHeapProperties(HeapProperties* pHeapProperties, HeapFlags* pHeapFlags)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource*, HeapProperties*, HeapFlags*, int>)(lpVtbl[14]))((ID3D12Resource*)Unsafe.AsPointer(ref this), pHeapProperties, pHeapFlags);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandAllocator"]/*' />
/// <unmanaged>ID3D12CommandAllocator</unmanaged>
[Guid("6102dee4-af59-4b09-b999-b44d73f09b24")]
[NativeTypeName("struct ID3D12CommandAllocator : ID3D12Pageable")]
[NativeInheritance("ID3D12Pageable")]
public unsafe partial struct ID3D12CommandAllocator
{
	public static ref readonly Guid IID_ID3D12CommandAllocator
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE4, 0xDE, 0x02, 0x61,
				0x59, 0xAF,
				0x09, 0x4B,
				0xB9,
				0x99,
				0xB4,
				0x4D,
				0x73,
				0xF0,
				0x9B,
				0x24
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12CommandAllocator));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12CommandAllocator*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12CommandAllocator*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12CommandAllocator*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12CommandAllocator*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, char**, int>)(lpVtbl[7]))((ID3D12CommandAllocator*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandAllocator::Reset"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult Reset()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, int>)(lpVtbl[8]))((ID3D12CommandAllocator*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Fence"]/*' />
/// <unmanaged>ID3D12Fence</unmanaged>
[Guid("0a753dcf-c4d8-4b91-adf6-be5a60d95a76")]
[NativeTypeName("struct ID3D12Fence : ID3D12Pageable")]
[NativeInheritance("ID3D12Pageable")]
public unsafe partial struct ID3D12Fence
{
	public static ref readonly Guid IID_ID3D12Fence
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCF, 0x3D, 0x75, 0x0A,
				0xD8, 0xC4,
				0x91, 0x4B,
				0xAD,
				0xF6,
				0xBE,
				0x5A,
				0x60,
				0xD9,
				0x5A,
				0x76
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Fence));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12Fence*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12Fence*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12Fence*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12Fence*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence*, char**, int>)(lpVtbl[7]))((ID3D12Fence*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Fence::GetCompletedValue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public ulong GetCompletedValue()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence*, ulong>)(lpVtbl[8]))((ID3D12Fence*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Fence::SetEventOnCompletion"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetEventOnCompletion(ulong Value, IntPtr hEvent)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence*, ulong, IntPtr, int>)(lpVtbl[9]))((ID3D12Fence*)Unsafe.AsPointer(ref this), Value, hEvent);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Fence::Signal"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult Signal(ulong Value)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence*, ulong, int>)(lpVtbl[10]))((ID3D12Fence*)Unsafe.AsPointer(ref this), Value);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Fence1"]/*' />
/// <unmanaged>ID3D12Fence1</unmanaged>
[Guid("433685fe-e22b-4ca0-a8db-b5b4f4dd0e4a")]
[NativeTypeName("struct ID3D12Fence1 : ID3D12Fence")]
[NativeInheritance("ID3D12Fence")]
public unsafe partial struct ID3D12Fence1
{
	public static ref readonly Guid IID_ID3D12Fence1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFE, 0x85, 0x36, 0x43,
				0x2B, 0xE2,
				0xA0, 0x4C,
				0xA8,
				0xDB,
				0xB5,
				0xB4,
				0xF4,
				0xDD,
				0x0E,
				0x4A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Fence1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Fence.GetCompletedValue" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public ulong GetCompletedValue()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, ulong>)(lpVtbl[3]))((ID3D12Fence1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Fence.SetEventOnCompletion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetEventOnCompletion(ulong Value, IntPtr hEvent)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, ulong, IntPtr, int>)(lpVtbl[4]))((ID3D12Fence1*)Unsafe.AsPointer(ref this), Value, hEvent);
	}

	/// <inheritdoc cref="ID3D12Fence.Signal" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult Signal(ulong Value)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, ulong, int>)(lpVtbl[5]))((ID3D12Fence1*)Unsafe.AsPointer(ref this), Value);
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, void**, int>)(lpVtbl[6]))((ID3D12Fence1*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, uint*, void*, int>)(lpVtbl[7]))((ID3D12Fence1*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, uint, void*, int>)(lpVtbl[8]))((ID3D12Fence1*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Guid*, IUnknown*, int>)(lpVtbl[9]))((ID3D12Fence1*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, char**, int>)(lpVtbl[10]))((ID3D12Fence1*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Fence1::GetCreationFlags"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public Graphics.Direct3D12.FenceFlags GetCreationFlags()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, Graphics.Direct3D12.FenceFlags>)(lpVtbl[11]))((ID3D12Fence1*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12PipelineState"]/*' />
/// <unmanaged>ID3D12PipelineState</unmanaged>
[Guid("765a30f3-f624-4c6f-a828-ace948622445")]
[NativeTypeName("struct ID3D12PipelineState : ID3D12Pageable")]
[NativeInheritance("ID3D12Pageable")]
public unsafe partial struct ID3D12PipelineState
{
	public static ref readonly Guid IID_ID3D12PipelineState
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF3, 0x30, 0x5A, 0x76,
				0x24, 0xF6,
				0x6F, 0x4C,
				0xA8,
				0x28,
				0xAC,
				0xE9,
				0x48,
				0x62,
				0x24,
				0x45
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12PipelineState));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12PipelineState*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12PipelineState*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12PipelineState*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12PipelineState*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, char**, int>)(lpVtbl[7]))((ID3D12PipelineState*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12PipelineState::GetCachedBlob"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetCachedBlob(Graphics.Direct3D.ID3DBlob** ppBlob)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, Graphics.Direct3D.ID3DBlob**, int>)(lpVtbl[8]))((ID3D12PipelineState*)Unsafe.AsPointer(ref this), ppBlob);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DescriptorHeap"]/*' />
/// <unmanaged>ID3D12DescriptorHeap</unmanaged>
[Guid("8efb471d-616c-4f49-90f7-127bb763fa51")]
[NativeTypeName("struct ID3D12DescriptorHeap : ID3D12Pageable")]
[NativeInheritance("ID3D12Pageable")]
public unsafe partial struct ID3D12DescriptorHeap
{
	public static ref readonly Guid IID_ID3D12DescriptorHeap
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1D, 0x47, 0xFB, 0x8E,
				0x6C, 0x61,
				0x49, 0x4F,
				0x90,
				0xF7,
				0x12,
				0x7B,
				0xB7,
				0x63,
				0xFA,
				0x51
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12DescriptorHeap));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12DescriptorHeap*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12DescriptorHeap*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12DescriptorHeap*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12DescriptorHeap*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, char**, int>)(lpVtbl[7]))((ID3D12DescriptorHeap*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DescriptorHeap::GetDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public Graphics.Direct3D12.DescriptorHeapDescription GetDesc()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Graphics.Direct3D12.DescriptorHeapDescription>)(lpVtbl[8]))((ID3D12DescriptorHeap*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DescriptorHeap::GetCPUDescriptorHandleForHeapStart"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public Graphics.Direct3D12.CpuDescriptorHandle GetCPUDescriptorHandleForHeapStart()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Graphics.Direct3D12.CpuDescriptorHandle>)(lpVtbl[9]))((ID3D12DescriptorHeap*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DescriptorHeap::GetGPUDescriptorHandleForHeapStart"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public Graphics.Direct3D12.GpuDescriptorHandle GetGPUDescriptorHandleForHeapStart()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, Graphics.Direct3D12.GpuDescriptorHandle>)(lpVtbl[10]))((ID3D12DescriptorHeap*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12QueryHeap"]/*' />
/// <unmanaged>ID3D12QueryHeap</unmanaged>
[Guid("0d9658ae-ed45-469e-a61d-970ec583cab4")]
[NativeTypeName("struct ID3D12QueryHeap : ID3D12Pageable")]
[NativeInheritance("ID3D12Pageable")]
public unsafe partial struct ID3D12QueryHeap
{
	public static ref readonly Guid IID_ID3D12QueryHeap
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xAE, 0x58, 0x96, 0x0D,
				0x45, 0xED,
				0x9E, 0x46,
				0xA6,
				0x1D,
				0x97,
				0x0E,
				0xC5,
				0x83,
				0xCA,
				0xB4
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12QueryHeap));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12QueryHeap*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12QueryHeap*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12QueryHeap*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12QueryHeap*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12QueryHeap*, char**, int>)(lpVtbl[7]))((ID3D12QueryHeap*)Unsafe.AsPointer(ref this), Name);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandSignature"]/*' />
/// <unmanaged>ID3D12CommandSignature</unmanaged>
[Guid("c36a797c-ec80-4f0a-8985-a7b2475082d1")]
[NativeTypeName("struct ID3D12CommandSignature : ID3D12Pageable")]
[NativeInheritance("ID3D12Pageable")]
public unsafe partial struct ID3D12CommandSignature
{
	public static ref readonly Guid IID_ID3D12CommandSignature
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7C, 0x79, 0x6A, 0xC3,
				0x80, 0xEC,
				0x0A, 0x4F,
				0x89,
				0x85,
				0xA7,
				0xB2,
				0x47,
				0x50,
				0x82,
				0xD1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12CommandSignature));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandSignature*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12CommandSignature*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandSignature*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12CommandSignature*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandSignature*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12CommandSignature*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandSignature*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12CommandSignature*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandSignature*, char**, int>)(lpVtbl[7]))((ID3D12CommandSignature*)Unsafe.AsPointer(ref this), Name);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandList"]/*' />
/// <unmanaged>ID3D12CommandList</unmanaged>
[Guid("7116d91c-e7e4-47ce-b8c6-ec8168f437e5")]
[NativeTypeName("struct ID3D12CommandList : ID3D12DeviceChild")]
[NativeInheritance("ID3D12DeviceChild")]
public unsafe partial struct ID3D12CommandList
{
	public static ref readonly Guid IID_ID3D12CommandList
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1C, 0xD9, 0x16, 0x71,
				0xE4, 0xE7,
				0xCE, 0x47,
				0xB8,
				0xC6,
				0xEC,
				0x81,
				0x68,
				0xF4,
				0x37,
				0xE5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12CommandList));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandList*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12CommandList*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandList*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12CommandList*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandList*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12CommandList*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandList*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12CommandList*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandList*, char**, int>)(lpVtbl[7]))((ID3D12CommandList*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandList::GetType"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public new Graphics.Direct3D12.CommandListType GetType()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandList*, Graphics.Direct3D12.CommandListType>)(lpVtbl[8]))((ID3D12CommandList*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList"]/*' />
/// <unmanaged>ID3D12GraphicsCommandList</unmanaged>
[Guid("5b160d0f-ac1b-4185-8ba8-b3ae42a5a455")]
[NativeTypeName("struct ID3D12GraphicsCommandList : ID3D12CommandList")]
[NativeInheritance("ID3D12CommandList")]
public unsafe partial struct ID3D12GraphicsCommandList
{
	public static ref readonly Guid IID_ID3D12GraphicsCommandList
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0F, 0x0D, 0x16, 0x5B,
				0x1B, 0xAC,
				0x85, 0x41,
				0x8B,
				0xA8,
				0xB3,
				0xAE,
				0x42,
				0xA5,
				0xA4,
				0x55
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12GraphicsCommandList));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12CommandList.GetType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public new Graphics.Direct3D12.CommandListType GetType()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, Graphics.Direct3D12.CommandListType>)(lpVtbl[3]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, Guid*, void**, int>)(lpVtbl[4]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, Guid*, uint*, void*, int>)(lpVtbl[5]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, Guid*, uint, void*, int>)(lpVtbl[6]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, Guid*, IUnknown*, int>)(lpVtbl[7]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, char**, int>)(lpVtbl[8]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::Close"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult Close()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, int>)(lpVtbl[9]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::Reset"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult Reset(ID3D12CommandAllocator* pAllocator, ID3D12PipelineState* pInitialState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandAllocator*, ID3D12PipelineState*, int>)(lpVtbl[10]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pAllocator, pInitialState);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::ClearState"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public void ClearState(ID3D12PipelineState* pPipelineState)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12PipelineState*, void>)(lpVtbl[11]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pPipelineState);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::DrawInstanced"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, uint, void>)(lpVtbl[12]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::DrawIndexedInstanced"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, int, uint, void>)(lpVtbl[13]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::Dispatch"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, void>)(lpVtbl[14]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::CopyBufferRegion"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public void CopyBufferRegion(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, ulong NumBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, ulong, void>)(lpVtbl[15]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::CopyTextureRegion"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public void CopyTextureRegion(TextureCopyLocation* pDst, uint DstX, uint DstY, uint DstZ, TextureCopyLocation* pSrc, Box* pSrcBox)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, TextureCopyLocation*, uint, uint, uint, TextureCopyLocation*, Box*, void>)(lpVtbl[16]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::CopyResource"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public void CopyResource(ID3D12Resource* pDstResource, ID3D12Resource* pSrcResource)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ID3D12Resource*, void>)(lpVtbl[17]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pDstResource, pSrcResource);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::CopyTiles"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public void CopyTiles(ID3D12Resource* pTiledResource, TiledResourceCoordinate* pTileRegionStartCoordinate, TileRegionSize* pTileRegionSize, ID3D12Resource* pBuffer, ulong BufferStartOffsetInBytes, TileCopyFlags Flags)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, ID3D12Resource*, ulong, TileCopyFlags, void>)(lpVtbl[18]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::ResolveSubresource"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public void ResolveSubresource(ID3D12Resource* pDstResource, uint DstSubresource, ID3D12Resource* pSrcResource, uint SrcSubresource, Graphics.Dxgi.Common.Format Format)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, uint, ID3D12Resource*, uint, Graphics.Dxgi.Common.Format, void>)(lpVtbl[19]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::IASetPrimitiveTopology"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public void IASetPrimitiveTopology(Graphics.Direct3D.PrimitiveTopology PrimitiveTopology)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, Graphics.Direct3D.PrimitiveTopology, void>)(lpVtbl[20]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), PrimitiveTopology);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::RSSetViewports"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public void RSSetViewports(uint NumViewports, Viewport* pViewports)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, Viewport*, void>)(lpVtbl[21]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), NumViewports, pViewports);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::RSSetScissorRects"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public void RSSetScissorRects(uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, RawRect*, void>)(lpVtbl[22]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), NumRects, pRects);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::OMSetBlendFactor"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public void OMSetBlendFactor(float* BlendFactor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, float*, void>)(lpVtbl[23]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), BlendFactor);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::OMSetStencilRef"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public void OMSetStencilRef(uint StencilRef)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, void>)(lpVtbl[24]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), StencilRef);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetPipelineState"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public void SetPipelineState(ID3D12PipelineState* pPipelineState)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12PipelineState*, void>)(lpVtbl[25]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pPipelineState);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::ResourceBarrier"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public void ResourceBarrier(uint NumBarriers, ResourceBarrier* pBarriers)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ResourceBarrier*, void>)(lpVtbl[26]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), NumBarriers, pBarriers);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::ExecuteBundle"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public void ExecuteBundle(ID3D12GraphicsCommandList* pCommandList)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12GraphicsCommandList*, void>)(lpVtbl[27]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pCommandList);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetDescriptorHeaps"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public void SetDescriptorHeaps(uint NumDescriptorHeaps, ID3D12DescriptorHeap* ppDescriptorHeaps)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ID3D12DescriptorHeap*, void>)(lpVtbl[28]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), NumDescriptorHeaps, ppDescriptorHeaps);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetComputeRootSignature"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public void SetComputeRootSignature(ID3D12RootSignature* pRootSignature)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12RootSignature*, void>)(lpVtbl[29]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pRootSignature);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetGraphicsRootSignature"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public void SetGraphicsRootSignature(ID3D12RootSignature* pRootSignature)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12RootSignature*, void>)(lpVtbl[30]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pRootSignature);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetComputeRootDescriptorTable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public void SetComputeRootDescriptorTable(uint RootParameterIndex, GpuDescriptorHandle* BaseDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, GpuDescriptorHandle*, void>)(lpVtbl[31]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), RootParameterIndex, BaseDescriptor);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetGraphicsRootDescriptorTable"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public void SetGraphicsRootDescriptorTable(uint RootParameterIndex, GpuDescriptorHandle* BaseDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, GpuDescriptorHandle*, void>)(lpVtbl[32]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), RootParameterIndex, BaseDescriptor);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetComputeRoot32BitConstant"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public void SetComputeRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, void>)(lpVtbl[33]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), RootParameterIndex, SrcData, DestOffsetIn32BitValues);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetGraphicsRoot32BitConstant"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public void SetGraphicsRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, void>)(lpVtbl[34]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), RootParameterIndex, SrcData, DestOffsetIn32BitValues);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetComputeRoot32BitConstants"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public void SetComputeRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void* pSrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, void*, uint, void>)(lpVtbl[35]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetGraphicsRoot32BitConstants"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public void SetGraphicsRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void* pSrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, void*, uint, void>)(lpVtbl[36]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetComputeRootConstantBufferView"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public void SetComputeRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>)(lpVtbl[37]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetGraphicsRootConstantBufferView"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public void SetGraphicsRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>)(lpVtbl[38]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetComputeRootShaderResourceView"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public void SetComputeRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>)(lpVtbl[39]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetGraphicsRootShaderResourceView"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public void SetGraphicsRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>)(lpVtbl[40]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetComputeRootUnorderedAccessView"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public void SetComputeRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>)(lpVtbl[41]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetGraphicsRootUnorderedAccessView"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public void SetGraphicsRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>)(lpVtbl[42]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::IASetIndexBuffer"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public void IASetIndexBuffer(IndexBufferView* pView)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, IndexBufferView*, void>)(lpVtbl[43]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pView);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::IASetVertexBuffers"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public void IASetVertexBuffers(uint StartSlot, uint NumViews, VertexBufferView* pViews)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, VertexBufferView*, void>)(lpVtbl[44]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), StartSlot, NumViews, pViews);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SOSetTargets"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public void SOSetTargets(uint StartSlot, uint NumViews, StreamOutputBufferView* pViews)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, StreamOutputBufferView*, void>)(lpVtbl[45]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), StartSlot, NumViews, pViews);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::OMSetRenderTargets"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public void OMSetRenderTargets(uint NumRenderTargetDescriptors, CpuDescriptorHandle* pRenderTargetDescriptors, Bool32 RTsSingleHandleToDescriptorRange, CpuDescriptorHandle* pDepthStencilDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, CpuDescriptorHandle*, Bool32, CpuDescriptorHandle*, void>)(lpVtbl[46]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::ClearDepthStencilView"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public void ClearDepthStencilView(CpuDescriptorHandle* DepthStencilView, ClearFlags ClearFlags, float Depth, byte Stencil, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, CpuDescriptorHandle*, ClearFlags, float, byte, uint, RawRect*, void>)(lpVtbl[47]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::ClearRenderTargetView"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public void ClearRenderTargetView(CpuDescriptorHandle* RenderTargetView, float* ColorRGBA, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, CpuDescriptorHandle*, float*, uint, RawRect*, void>)(lpVtbl[48]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), RenderTargetView, ColorRGBA, NumRects, pRects);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::ClearUnorderedAccessViewUint"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public void ClearUnorderedAccessViewUint(GpuDescriptorHandle* ViewGPUHandleInCurrentHeap, CpuDescriptorHandle* ViewCPUHandle, ID3D12Resource* pResource, uint* Values, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, GpuDescriptorHandle*, CpuDescriptorHandle*, ID3D12Resource*, uint*, uint, RawRect*, void>)(lpVtbl[49]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::ClearUnorderedAccessViewFloat"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public void ClearUnorderedAccessViewFloat(GpuDescriptorHandle* ViewGPUHandleInCurrentHeap, CpuDescriptorHandle* ViewCPUHandle, ID3D12Resource* pResource, float* Values, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, GpuDescriptorHandle*, CpuDescriptorHandle*, ID3D12Resource*, float*, uint, RawRect*, void>)(lpVtbl[50]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::DiscardResource"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public void DiscardResource(ID3D12Resource* pResource, DiscardRegion* pRegion)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, DiscardRegion*, void>)(lpVtbl[51]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pResource, pRegion);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::BeginQuery"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public void BeginQuery(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint Index)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, QueryType, uint, void>)(lpVtbl[52]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pQueryHeap, Type, Index);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::EndQuery"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public void EndQuery(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint Index)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, QueryType, uint, void>)(lpVtbl[53]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pQueryHeap, Type, Index);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::ResolveQueryData"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public void ResolveQueryData(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint StartIndex, uint NumQueries, ID3D12Resource* pDestinationBuffer, ulong AlignedDestinationBufferOffset)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, QueryType, uint, uint, ID3D12Resource*, ulong, void>)(lpVtbl[54]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetPredication"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public void SetPredication(ID3D12Resource* pBuffer, ulong AlignedBufferOffset, PredicationOp Operation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ulong, PredicationOp, void>)(lpVtbl[55]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pBuffer, AlignedBufferOffset, Operation);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::SetMarker"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public void SetMarker(uint Metadata, void* pData, uint Size)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, void*, uint, void>)(lpVtbl[56]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), Metadata, pData, Size);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::BeginEvent"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public void BeginEvent(uint Metadata, void* pData, uint Size)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, void*, uint, void>)(lpVtbl[57]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), Metadata, pData, Size);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::EndEvent"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public void EndEvent()
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, void>)(lpVtbl[58]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList::ExecuteIndirect"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public void ExecuteIndirect(ID3D12CommandSignature* pCommandSignature, uint MaxCommandCount, ID3D12Resource* pArgumentBuffer, ulong ArgumentBufferOffset, ID3D12Resource* pCountBuffer, ulong CountBufferOffset)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(lpVtbl[59]))((ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref this), pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList1"]/*' />
/// <unmanaged>ID3D12GraphicsCommandList1</unmanaged>
[Guid("553103fb-1fe7-4557-bb38-946d7d0e7ca7")]
[NativeTypeName("struct ID3D12GraphicsCommandList1 : ID3D12GraphicsCommandList")]
[NativeInheritance("ID3D12GraphicsCommandList")]
public unsafe partial struct ID3D12GraphicsCommandList1
{
	public static ref readonly Guid IID_ID3D12GraphicsCommandList1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFB, 0x03, 0x31, 0x55,
				0xE7, 0x1F,
				0x57, 0x45,
				0xBB,
				0x38,
				0x94,
				0x6D,
				0x7D,
				0x0E,
				0x7C,
				0xA7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12GraphicsCommandList1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Close" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult Close()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, int>)(lpVtbl[3]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Reset" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult Reset(ID3D12CommandAllocator* pAllocator, ID3D12PipelineState* pInitialState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12CommandAllocator*, ID3D12PipelineState*, int>)(lpVtbl[4]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pAllocator, pInitialState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void ClearState(ID3D12PipelineState* pPipelineState)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12PipelineState*, void>)(lpVtbl[5]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pPipelineState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DrawInstanced" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, uint, uint, uint, void>)(lpVtbl[6]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DrawIndexedInstanced" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, uint, uint, int, uint, void>)(lpVtbl[7]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Dispatch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, uint, uint, void>)(lpVtbl[8]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyBufferRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public void CopyBufferRegion(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, ulong NumBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, ulong, void>)(lpVtbl[9]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyTextureRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public void CopyTextureRegion(TextureCopyLocation* pDst, uint DstX, uint DstY, uint DstZ, TextureCopyLocation* pSrc, Box* pSrcBox)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, TextureCopyLocation*, uint, uint, uint, TextureCopyLocation*, Box*, void>)(lpVtbl[10]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public void CopyResource(ID3D12Resource* pDstResource, ID3D12Resource* pSrcResource)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ID3D12Resource*, void>)(lpVtbl[11]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pDstResource, pSrcResource);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyTiles" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public void CopyTiles(ID3D12Resource* pTiledResource, TiledResourceCoordinate* pTileRegionStartCoordinate, TileRegionSize* pTileRegionSize, ID3D12Resource* pBuffer, ulong BufferStartOffsetInBytes, TileCopyFlags Flags)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, ID3D12Resource*, ulong, TileCopyFlags, void>)(lpVtbl[12]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResolveSubresource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public void ResolveSubresource(ID3D12Resource* pDstResource, uint DstSubresource, ID3D12Resource* pSrcResource, uint SrcSubresource, Graphics.Dxgi.Common.Format Format)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, ID3D12Resource*, uint, Graphics.Dxgi.Common.Format, void>)(lpVtbl[13]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetPrimitiveTopology" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public void IASetPrimitiveTopology(Graphics.Direct3D.PrimitiveTopology PrimitiveTopology)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, Graphics.Direct3D.PrimitiveTopology, void>)(lpVtbl[14]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), PrimitiveTopology);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.RSSetViewports" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public void RSSetViewports(uint NumViewports, Viewport* pViewports)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, Viewport*, void>)(lpVtbl[15]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), NumViewports, pViewports);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.RSSetScissorRects" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public void RSSetScissorRects(uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, RawRect*, void>)(lpVtbl[16]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetBlendFactor" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public void OMSetBlendFactor(float* BlendFactor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, float*, void>)(lpVtbl[17]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), BlendFactor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetStencilRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public void OMSetStencilRef(uint StencilRef)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, void>)(lpVtbl[18]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), StencilRef);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetPipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public void SetPipelineState(ID3D12PipelineState* pPipelineState)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12PipelineState*, void>)(lpVtbl[19]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pPipelineState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResourceBarrier" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public void ResourceBarrier(uint NumBarriers, ResourceBarrier* pBarriers)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, ResourceBarrier*, void>)(lpVtbl[20]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), NumBarriers, pBarriers);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ExecuteBundle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public void ExecuteBundle(ID3D12GraphicsCommandList* pCommandList)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12GraphicsCommandList*, void>)(lpVtbl[21]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pCommandList);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetDescriptorHeaps" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public void SetDescriptorHeaps(uint NumDescriptorHeaps, ID3D12DescriptorHeap* ppDescriptorHeaps)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, ID3D12DescriptorHeap*, void>)(lpVtbl[22]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), NumDescriptorHeaps, ppDescriptorHeaps);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public void SetComputeRootSignature(ID3D12RootSignature* pRootSignature)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12RootSignature*, void>)(lpVtbl[23]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pRootSignature);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public void SetGraphicsRootSignature(ID3D12RootSignature* pRootSignature)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12RootSignature*, void>)(lpVtbl[24]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pRootSignature);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootDescriptorTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public void SetComputeRootDescriptorTable(uint RootParameterIndex, GpuDescriptorHandle* BaseDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, GpuDescriptorHandle*, void>)(lpVtbl[25]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), RootParameterIndex, BaseDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootDescriptorTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public void SetGraphicsRootDescriptorTable(uint RootParameterIndex, GpuDescriptorHandle* BaseDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, GpuDescriptorHandle*, void>)(lpVtbl[26]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), RootParameterIndex, BaseDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRoot32BitConstant" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public void SetComputeRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, uint, uint, void>)(lpVtbl[27]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), RootParameterIndex, SrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRoot32BitConstant" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public void SetGraphicsRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, uint, uint, void>)(lpVtbl[28]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), RootParameterIndex, SrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRoot32BitConstants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public void SetComputeRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void* pSrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, uint, void*, uint, void>)(lpVtbl[29]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRoot32BitConstants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public void SetGraphicsRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void* pSrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, uint, void*, uint, void>)(lpVtbl[30]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public void SetComputeRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, ulong, void>)(lpVtbl[31]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public void SetGraphicsRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, ulong, void>)(lpVtbl[32]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public void SetComputeRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, ulong, void>)(lpVtbl[33]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public void SetGraphicsRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, ulong, void>)(lpVtbl[34]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public void SetComputeRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, ulong, void>)(lpVtbl[35]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public void SetGraphicsRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, ulong, void>)(lpVtbl[36]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetIndexBuffer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public void IASetIndexBuffer(IndexBufferView* pView)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, IndexBufferView*, void>)(lpVtbl[37]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pView);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetVertexBuffers" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public void IASetVertexBuffers(uint StartSlot, uint NumViews, VertexBufferView* pViews)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, uint, VertexBufferView*, void>)(lpVtbl[38]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), StartSlot, NumViews, pViews);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SOSetTargets" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public void SOSetTargets(uint StartSlot, uint NumViews, StreamOutputBufferView* pViews)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, uint, StreamOutputBufferView*, void>)(lpVtbl[39]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), StartSlot, NumViews, pViews);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetRenderTargets" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public void OMSetRenderTargets(uint NumRenderTargetDescriptors, CpuDescriptorHandle* pRenderTargetDescriptors, Bool32 RTsSingleHandleToDescriptorRange, CpuDescriptorHandle* pDepthStencilDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, CpuDescriptorHandle*, Bool32, CpuDescriptorHandle*, void>)(lpVtbl[40]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearDepthStencilView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public void ClearDepthStencilView(CpuDescriptorHandle* DepthStencilView, ClearFlags ClearFlags, float Depth, byte Stencil, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, CpuDescriptorHandle*, ClearFlags, float, byte, uint, RawRect*, void>)(lpVtbl[41]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearRenderTargetView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public void ClearRenderTargetView(CpuDescriptorHandle* RenderTargetView, float* ColorRGBA, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, CpuDescriptorHandle*, float*, uint, RawRect*, void>)(lpVtbl[42]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), RenderTargetView, ColorRGBA, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearUnorderedAccessViewUint" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public void ClearUnorderedAccessViewUint(GpuDescriptorHandle* ViewGPUHandleInCurrentHeap, CpuDescriptorHandle* ViewCPUHandle, ID3D12Resource* pResource, uint* Values, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, GpuDescriptorHandle*, CpuDescriptorHandle*, ID3D12Resource*, uint*, uint, RawRect*, void>)(lpVtbl[43]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearUnorderedAccessViewFloat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public void ClearUnorderedAccessViewFloat(GpuDescriptorHandle* ViewGPUHandleInCurrentHeap, CpuDescriptorHandle* ViewCPUHandle, ID3D12Resource* pResource, float* Values, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, GpuDescriptorHandle*, CpuDescriptorHandle*, ID3D12Resource*, float*, uint, RawRect*, void>)(lpVtbl[44]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DiscardResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public void DiscardResource(ID3D12Resource* pResource, DiscardRegion* pRegion)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, DiscardRegion*, void>)(lpVtbl[45]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pResource, pRegion);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.BeginQuery" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public void BeginQuery(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint Index)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12QueryHeap*, QueryType, uint, void>)(lpVtbl[46]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pQueryHeap, Type, Index);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.EndQuery" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public void EndQuery(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint Index)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12QueryHeap*, QueryType, uint, void>)(lpVtbl[47]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pQueryHeap, Type, Index);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResolveQueryData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public void ResolveQueryData(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint StartIndex, uint NumQueries, ID3D12Resource* pDestinationBuffer, ulong AlignedDestinationBufferOffset)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12QueryHeap*, QueryType, uint, uint, ID3D12Resource*, ulong, void>)(lpVtbl[48]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetPredication" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public void SetPredication(ID3D12Resource* pBuffer, ulong AlignedBufferOffset, PredicationOp Operation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, PredicationOp, void>)(lpVtbl[49]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pBuffer, AlignedBufferOffset, Operation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetMarker" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public void SetMarker(uint Metadata, void* pData, uint Size)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, void*, uint, void>)(lpVtbl[50]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), Metadata, pData, Size);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.BeginEvent" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public void BeginEvent(uint Metadata, void* pData, uint Size)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, void*, uint, void>)(lpVtbl[51]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), Metadata, pData, Size);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.EndEvent" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public void EndEvent()
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, void>)(lpVtbl[52]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ExecuteIndirect" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public void ExecuteIndirect(ID3D12CommandSignature* pCommandSignature, uint MaxCommandCount, ID3D12Resource* pArgumentBuffer, ulong ArgumentBufferOffset, ID3D12Resource* pCountBuffer, ulong CountBufferOffset)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(lpVtbl[53]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
	}

	/// <inheritdoc cref="ID3D12CommandList.GetType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public new Graphics.Direct3D12.CommandListType GetType()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, Graphics.Direct3D12.CommandListType>)(lpVtbl[54]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, Guid*, void**, int>)(lpVtbl[55]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, Guid*, uint*, void*, int>)(lpVtbl[56]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, Guid*, uint, void*, int>)(lpVtbl[57]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, Guid*, IUnknown*, int>)(lpVtbl[58]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, char**, int>)(lpVtbl[59]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList1::AtomicCopyBufferUINT"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(60)]
	public void AtomicCopyBufferUINT(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, uint Dependencies, ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource*, SubresourceRangeUint64*, void>)(lpVtbl[60]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList1::AtomicCopyBufferUINT64"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(61)]
	public void AtomicCopyBufferUINT64(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, uint Dependencies, ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource*, SubresourceRangeUint64*, void>)(lpVtbl[61]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList1::OMSetDepthBounds"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(62)]
	public void OMSetDepthBounds(float Min, float Max)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, float, float, void>)(lpVtbl[62]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), Min, Max);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList1::SetSamplePositions"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(63)]
	public void SetSamplePositions(uint NumSamplesPerPixel, uint NumPixels, SamplePosition* pSamplePositions)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, uint, SamplePosition*, void>)(lpVtbl[63]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), NumSamplesPerPixel, NumPixels, pSamplePositions);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList1::ResolveSubresourceRegion"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(64)]
	public void ResolveSubresourceRegion(ID3D12Resource* pDstResource, uint DstSubresource, uint DstX, uint DstY, ID3D12Resource* pSrcResource, uint SrcSubresource, RawRect* pSrcRect, Graphics.Dxgi.Common.Format Format, ResolveMode ResolveMode)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, RawRect*, Graphics.Dxgi.Common.Format, ResolveMode, void>)(lpVtbl[64]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), pDstResource, DstSubresource, DstX, DstY, pSrcResource, SrcSubresource, pSrcRect, Format, ResolveMode);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList1::SetViewInstanceMask"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(65)]
	public void SetViewInstanceMask(uint Mask)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, void>)(lpVtbl[65]))((ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref this), Mask);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList2"]/*' />
/// <unmanaged>ID3D12GraphicsCommandList2</unmanaged>
[Guid("38c3e585-ff17-412c-9150-4fc6f9d72a28")]
[NativeTypeName("struct ID3D12GraphicsCommandList2 : ID3D12GraphicsCommandList1")]
[NativeInheritance("ID3D12GraphicsCommandList1")]
public unsafe partial struct ID3D12GraphicsCommandList2
{
	public static ref readonly Guid IID_ID3D12GraphicsCommandList2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x85, 0xE5, 0xC3, 0x38,
				0x17, 0xFF,
				0x2C, 0x41,
				0x91,
				0x50,
				0x4F,
				0xC6,
				0xF9,
				0xD7,
				0x2A,
				0x28
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12GraphicsCommandList2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.AtomicCopyBufferUINT" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void AtomicCopyBufferUINT(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, uint Dependencies, ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource*, SubresourceRangeUint64*, void>)(lpVtbl[3]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.AtomicCopyBufferUINT64" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void AtomicCopyBufferUINT64(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, uint Dependencies, ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource*, SubresourceRangeUint64*, void>)(lpVtbl[4]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.OMSetDepthBounds" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void OMSetDepthBounds(float Min, float Max)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, float, float, void>)(lpVtbl[5]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), Min, Max);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.SetSamplePositions" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public void SetSamplePositions(uint NumSamplesPerPixel, uint NumPixels, SamplePosition* pSamplePositions)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, uint, SamplePosition*, void>)(lpVtbl[6]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), NumSamplesPerPixel, NumPixels, pSamplePositions);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.ResolveSubresourceRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public void ResolveSubresourceRegion(ID3D12Resource* pDstResource, uint DstSubresource, uint DstX, uint DstY, ID3D12Resource* pSrcResource, uint SrcSubresource, RawRect* pSrcRect, Graphics.Dxgi.Common.Format Format, ResolveMode ResolveMode)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, RawRect*, Graphics.Dxgi.Common.Format, ResolveMode, void>)(lpVtbl[7]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pDstResource, DstSubresource, DstX, DstY, pSrcResource, SrcSubresource, pSrcRect, Format, ResolveMode);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.SetViewInstanceMask" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public void SetViewInstanceMask(uint Mask)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, void>)(lpVtbl[8]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), Mask);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Close" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult Close()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, int>)(lpVtbl[9]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Reset" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult Reset(ID3D12CommandAllocator* pAllocator, ID3D12PipelineState* pInitialState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12CommandAllocator*, ID3D12PipelineState*, int>)(lpVtbl[10]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pAllocator, pInitialState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public void ClearState(ID3D12PipelineState* pPipelineState)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12PipelineState*, void>)(lpVtbl[11]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pPipelineState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DrawInstanced" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, uint, uint, uint, void>)(lpVtbl[12]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DrawIndexedInstanced" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, uint, uint, int, uint, void>)(lpVtbl[13]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Dispatch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, uint, uint, void>)(lpVtbl[14]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyBufferRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public void CopyBufferRegion(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, ulong NumBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, ulong, void>)(lpVtbl[15]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyTextureRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public void CopyTextureRegion(TextureCopyLocation* pDst, uint DstX, uint DstY, uint DstZ, TextureCopyLocation* pSrc, Box* pSrcBox)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, TextureCopyLocation*, uint, uint, uint, TextureCopyLocation*, Box*, void>)(lpVtbl[16]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public void CopyResource(ID3D12Resource* pDstResource, ID3D12Resource* pSrcResource)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ID3D12Resource*, void>)(lpVtbl[17]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pDstResource, pSrcResource);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyTiles" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public void CopyTiles(ID3D12Resource* pTiledResource, TiledResourceCoordinate* pTileRegionStartCoordinate, TileRegionSize* pTileRegionSize, ID3D12Resource* pBuffer, ulong BufferStartOffsetInBytes, TileCopyFlags Flags)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, ID3D12Resource*, ulong, TileCopyFlags, void>)(lpVtbl[18]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResolveSubresource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public void ResolveSubresource(ID3D12Resource* pDstResource, uint DstSubresource, ID3D12Resource* pSrcResource, uint SrcSubresource, Graphics.Dxgi.Common.Format Format)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, uint, ID3D12Resource*, uint, Graphics.Dxgi.Common.Format, void>)(lpVtbl[19]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetPrimitiveTopology" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public void IASetPrimitiveTopology(Graphics.Direct3D.PrimitiveTopology PrimitiveTopology)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, Graphics.Direct3D.PrimitiveTopology, void>)(lpVtbl[20]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), PrimitiveTopology);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.RSSetViewports" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public void RSSetViewports(uint NumViewports, Viewport* pViewports)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, Viewport*, void>)(lpVtbl[21]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), NumViewports, pViewports);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.RSSetScissorRects" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public void RSSetScissorRects(uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, RawRect*, void>)(lpVtbl[22]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetBlendFactor" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public void OMSetBlendFactor(float* BlendFactor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, float*, void>)(lpVtbl[23]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), BlendFactor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetStencilRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public void OMSetStencilRef(uint StencilRef)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, void>)(lpVtbl[24]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), StencilRef);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetPipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public void SetPipelineState(ID3D12PipelineState* pPipelineState)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12PipelineState*, void>)(lpVtbl[25]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pPipelineState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResourceBarrier" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public void ResourceBarrier(uint NumBarriers, ResourceBarrier* pBarriers)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, ResourceBarrier*, void>)(lpVtbl[26]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), NumBarriers, pBarriers);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ExecuteBundle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public void ExecuteBundle(ID3D12GraphicsCommandList* pCommandList)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12GraphicsCommandList*, void>)(lpVtbl[27]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pCommandList);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetDescriptorHeaps" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public void SetDescriptorHeaps(uint NumDescriptorHeaps, ID3D12DescriptorHeap* ppDescriptorHeaps)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, ID3D12DescriptorHeap*, void>)(lpVtbl[28]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), NumDescriptorHeaps, ppDescriptorHeaps);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public void SetComputeRootSignature(ID3D12RootSignature* pRootSignature)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12RootSignature*, void>)(lpVtbl[29]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pRootSignature);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public void SetGraphicsRootSignature(ID3D12RootSignature* pRootSignature)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12RootSignature*, void>)(lpVtbl[30]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pRootSignature);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootDescriptorTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public void SetComputeRootDescriptorTable(uint RootParameterIndex, GpuDescriptorHandle* BaseDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, GpuDescriptorHandle*, void>)(lpVtbl[31]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), RootParameterIndex, BaseDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootDescriptorTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public void SetGraphicsRootDescriptorTable(uint RootParameterIndex, GpuDescriptorHandle* BaseDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, GpuDescriptorHandle*, void>)(lpVtbl[32]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), RootParameterIndex, BaseDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRoot32BitConstant" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public void SetComputeRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, uint, uint, void>)(lpVtbl[33]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), RootParameterIndex, SrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRoot32BitConstant" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public void SetGraphicsRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, uint, uint, void>)(lpVtbl[34]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), RootParameterIndex, SrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRoot32BitConstants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public void SetComputeRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void* pSrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, uint, void*, uint, void>)(lpVtbl[35]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRoot32BitConstants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public void SetGraphicsRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void* pSrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, uint, void*, uint, void>)(lpVtbl[36]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public void SetComputeRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, ulong, void>)(lpVtbl[37]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public void SetGraphicsRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, ulong, void>)(lpVtbl[38]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public void SetComputeRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, ulong, void>)(lpVtbl[39]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public void SetGraphicsRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, ulong, void>)(lpVtbl[40]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public void SetComputeRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, ulong, void>)(lpVtbl[41]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public void SetGraphicsRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, ulong, void>)(lpVtbl[42]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetIndexBuffer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public void IASetIndexBuffer(IndexBufferView* pView)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, IndexBufferView*, void>)(lpVtbl[43]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pView);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetVertexBuffers" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public void IASetVertexBuffers(uint StartSlot, uint NumViews, VertexBufferView* pViews)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, uint, VertexBufferView*, void>)(lpVtbl[44]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), StartSlot, NumViews, pViews);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SOSetTargets" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public void SOSetTargets(uint StartSlot, uint NumViews, StreamOutputBufferView* pViews)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, uint, StreamOutputBufferView*, void>)(lpVtbl[45]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), StartSlot, NumViews, pViews);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetRenderTargets" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public void OMSetRenderTargets(uint NumRenderTargetDescriptors, CpuDescriptorHandle* pRenderTargetDescriptors, Bool32 RTsSingleHandleToDescriptorRange, CpuDescriptorHandle* pDepthStencilDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, CpuDescriptorHandle*, Bool32, CpuDescriptorHandle*, void>)(lpVtbl[46]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearDepthStencilView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public void ClearDepthStencilView(CpuDescriptorHandle* DepthStencilView, ClearFlags ClearFlags, float Depth, byte Stencil, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, CpuDescriptorHandle*, ClearFlags, float, byte, uint, RawRect*, void>)(lpVtbl[47]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearRenderTargetView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public void ClearRenderTargetView(CpuDescriptorHandle* RenderTargetView, float* ColorRGBA, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, CpuDescriptorHandle*, float*, uint, RawRect*, void>)(lpVtbl[48]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), RenderTargetView, ColorRGBA, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearUnorderedAccessViewUint" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public void ClearUnorderedAccessViewUint(GpuDescriptorHandle* ViewGPUHandleInCurrentHeap, CpuDescriptorHandle* ViewCPUHandle, ID3D12Resource* pResource, uint* Values, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, GpuDescriptorHandle*, CpuDescriptorHandle*, ID3D12Resource*, uint*, uint, RawRect*, void>)(lpVtbl[49]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearUnorderedAccessViewFloat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public void ClearUnorderedAccessViewFloat(GpuDescriptorHandle* ViewGPUHandleInCurrentHeap, CpuDescriptorHandle* ViewCPUHandle, ID3D12Resource* pResource, float* Values, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, GpuDescriptorHandle*, CpuDescriptorHandle*, ID3D12Resource*, float*, uint, RawRect*, void>)(lpVtbl[50]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DiscardResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public void DiscardResource(ID3D12Resource* pResource, DiscardRegion* pRegion)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, DiscardRegion*, void>)(lpVtbl[51]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pResource, pRegion);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.BeginQuery" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public void BeginQuery(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint Index)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12QueryHeap*, QueryType, uint, void>)(lpVtbl[52]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pQueryHeap, Type, Index);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.EndQuery" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public void EndQuery(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint Index)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12QueryHeap*, QueryType, uint, void>)(lpVtbl[53]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pQueryHeap, Type, Index);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResolveQueryData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public void ResolveQueryData(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint StartIndex, uint NumQueries, ID3D12Resource* pDestinationBuffer, ulong AlignedDestinationBufferOffset)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12QueryHeap*, QueryType, uint, uint, ID3D12Resource*, ulong, void>)(lpVtbl[54]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetPredication" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public void SetPredication(ID3D12Resource* pBuffer, ulong AlignedBufferOffset, PredicationOp Operation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12Resource*, ulong, PredicationOp, void>)(lpVtbl[55]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pBuffer, AlignedBufferOffset, Operation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetMarker" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public void SetMarker(uint Metadata, void* pData, uint Size)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, void*, uint, void>)(lpVtbl[56]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), Metadata, pData, Size);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.BeginEvent" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public void BeginEvent(uint Metadata, void* pData, uint Size)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, void*, uint, void>)(lpVtbl[57]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), Metadata, pData, Size);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.EndEvent" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public void EndEvent()
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, void>)(lpVtbl[58]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ExecuteIndirect" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public void ExecuteIndirect(ID3D12CommandSignature* pCommandSignature, uint MaxCommandCount, ID3D12Resource* pArgumentBuffer, ulong ArgumentBufferOffset, ID3D12Resource* pCountBuffer, ulong CountBufferOffset)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(lpVtbl[59]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
	}

	/// <inheritdoc cref="ID3D12CommandList.GetType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(60)]
	public new Graphics.Direct3D12.CommandListType GetType()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, Graphics.Direct3D12.CommandListType>)(lpVtbl[60]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(61)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, Guid*, void**, int>)(lpVtbl[61]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(62)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, Guid*, uint*, void*, int>)(lpVtbl[62]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(63)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, Guid*, uint, void*, int>)(lpVtbl[63]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(64)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, Guid*, IUnknown*, int>)(lpVtbl[64]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(65)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, char**, int>)(lpVtbl[65]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList2::WriteBufferImmediate"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(66)]
	public void WriteBufferImmediate(uint Count, WritebufferimmediateParameter* pParams, WritebufferimmediateMode* pModes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, WritebufferimmediateParameter*, WritebufferimmediateMode*, void>)(lpVtbl[66]))((ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref this), Count, pParams, pModes);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandQueue"]/*' />
/// <unmanaged>ID3D12CommandQueue</unmanaged>
[Guid("0ec870a6-5d7e-4c22-8cfc-5baae07616ed")]
[NativeTypeName("struct ID3D12CommandQueue : ID3D12Pageable")]
[NativeInheritance("ID3D12Pageable")]
public unsafe partial struct ID3D12CommandQueue
{
	public static ref readonly Guid IID_ID3D12CommandQueue
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA6, 0x70, 0xC8, 0x0E,
				0x7E, 0x5D,
				0x22, 0x4C,
				0x8C,
				0xFC,
				0x5B,
				0xAA,
				0xE0,
				0x76,
				0x16,
				0xED
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12CommandQueue));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12CommandQueue*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12CommandQueue*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12CommandQueue*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12CommandQueue*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, char**, int>)(lpVtbl[7]))((ID3D12CommandQueue*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandQueue::UpdateTileMappings"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public void UpdateTileMappings(ID3D12Resource* pResource, uint NumResourceRegions, TiledResourceCoordinate* pResourceRegionStartCoordinates, TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint NumRanges, TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, TileMappingFlags Flags)
	{
		((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, TiledResourceCoordinate*, TileRegionSize*, ID3D12Heap*, uint, TileRangeFlags*, uint*, uint*, TileMappingFlags, void>)(lpVtbl[8]))((ID3D12CommandQueue*)Unsafe.AsPointer(ref this), pResource, NumResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, NumRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, Flags);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandQueue::CopyTileMappings"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public void CopyTileMappings(ID3D12Resource* pDstResource, TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, TiledResourceCoordinate* pSrcRegionStartCoordinate, TileRegionSize* pRegionSize, TileMappingFlags Flags)
	{
		((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, TiledResourceCoordinate*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, TileMappingFlags, void>)(lpVtbl[9]))((ID3D12CommandQueue*)Unsafe.AsPointer(ref this), pDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, Flags);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandQueue::ExecuteCommandLists"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public void ExecuteCommandLists(uint NumCommandLists, ID3D12CommandList* ppCommandLists)
	{
		((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, uint, ID3D12CommandList*, void>)(lpVtbl[10]))((ID3D12CommandQueue*)Unsafe.AsPointer(ref this), NumCommandLists, ppCommandLists);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandQueue::SetMarker"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public void SetMarker(uint Metadata, void* pData, uint Size)
	{
		((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, uint, void*, uint, void>)(lpVtbl[11]))((ID3D12CommandQueue*)Unsafe.AsPointer(ref this), Metadata, pData, Size);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandQueue::BeginEvent"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public void BeginEvent(uint Metadata, void* pData, uint Size)
	{
		((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, uint, void*, uint, void>)(lpVtbl[12]))((ID3D12CommandQueue*)Unsafe.AsPointer(ref this), Metadata, pData, Size);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandQueue::EndEvent"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public void EndEvent()
	{
		((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, void>)(lpVtbl[13]))((ID3D12CommandQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandQueue::Signal"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult Signal(ID3D12Fence* pFence, ulong Value)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Fence*, ulong, int>)(lpVtbl[14]))((ID3D12CommandQueue*)Unsafe.AsPointer(ref this), pFence, Value);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandQueue::Wait"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult Wait(ID3D12Fence* pFence, ulong Value)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Fence*, ulong, int>)(lpVtbl[15]))((ID3D12CommandQueue*)Unsafe.AsPointer(ref this), pFence, Value);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandQueue::GetTimestampFrequency"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult GetTimestampFrequency(ulong* pFrequency)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, int>)(lpVtbl[16]))((ID3D12CommandQueue*)Unsafe.AsPointer(ref this), pFrequency);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandQueue::GetClockCalibration"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetClockCalibration(ulong* pGpuTimestamp, ulong* pCpuTimestamp)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, ulong*, int>)(lpVtbl[17]))((ID3D12CommandQueue*)Unsafe.AsPointer(ref this), pGpuTimestamp, pCpuTimestamp);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12CommandQueue::GetDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public Graphics.Direct3D12.CommandQueueDescription GetDesc()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, Graphics.Direct3D12.CommandQueueDescription>)(lpVtbl[18]))((ID3D12CommandQueue*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device"]/*' />
/// <unmanaged>ID3D12Device</unmanaged>
[Guid("189819f1-1db6-4b57-be54-1821339b85f7")]
[NativeTypeName("struct ID3D12Device : ID3D12Object")]
[NativeInheritance("ID3D12Object")]
public unsafe partial struct ID3D12Device
{
	public static ref readonly Guid IID_ID3D12Device
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF1, 0x19, 0x98, 0x18,
				0xB6, 0x1D,
				0x57, 0x4B,
				0xBE,
				0x54,
				0x18,
				0x21,
				0x33,
				0x9B,
				0x85,
				0xF7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Device));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, Guid*, uint*, void*, int>)(lpVtbl[3]))((ID3D12Device*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, Guid*, uint, void*, int>)(lpVtbl[4]))((ID3D12Device*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, Guid*, IUnknown*, int>)(lpVtbl[5]))((ID3D12Device*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, char**, int>)(lpVtbl[6]))((ID3D12Device*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::GetNodeCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public uint GetNodeCount()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint>)(lpVtbl[7]))((ID3D12Device*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateCommandQueue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult CreateCommandQueue(CommandQueueDescription* pDesc, Guid* riid, void** ppCommandQueue)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, CommandQueueDescription*, Guid*, void**, int>)(lpVtbl[8]))((ID3D12Device*)Unsafe.AsPointer(ref this), pDesc, riid, ppCommandQueue);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateCommandAllocator"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CreateCommandAllocator(CommandListType type, Guid* riid, void** ppCommandAllocator)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, CommandListType, Guid*, void**, int>)(lpVtbl[9]))((ID3D12Device*)Unsafe.AsPointer(ref this), type, riid, ppCommandAllocator);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateGraphicsPipelineState"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult CreateGraphicsPipelineState(GraphicsPipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, GraphicsPipelineStateDescription*, Guid*, void**, int>)(lpVtbl[10]))((ID3D12Device*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateComputePipelineState"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CreateComputePipelineState(ComputePipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, ComputePipelineStateDescription*, Guid*, void**, int>)(lpVtbl[11]))((ID3D12Device*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateCommandList"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CreateCommandList(uint nodeMask, CommandListType type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, Guid* riid, void** ppCommandList)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, int>)(lpVtbl[12]))((ID3D12Device*)Unsafe.AsPointer(ref this), nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CheckFeatureSupport"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult CheckFeatureSupport(Feature Feature, void* pFeatureSupportData, uint FeatureSupportDataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, Feature, void*, uint, int>)(lpVtbl[13]))((ID3D12Device*)Unsafe.AsPointer(ref this), Feature, pFeatureSupportData, FeatureSupportDataSize);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateDescriptorHeap"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult CreateDescriptorHeap(DescriptorHeapDescription* pDescriptorHeapDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, DescriptorHeapDescription*, Guid*, void**, int>)(lpVtbl[14]))((ID3D12Device*)Unsafe.AsPointer(ref this), pDescriptorHeapDesc, riid, ppvHeap);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::GetDescriptorHandleIncrementSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public uint GetDescriptorHandleIncrementSize(DescriptorHeapType DescriptorHeapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, DescriptorHeapType, uint>)(lpVtbl[15]))((ID3D12Device*)Unsafe.AsPointer(ref this), DescriptorHeapType);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateRootSignature"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult CreateRootSignature(uint nodeMask, void* pBlobWithRootSignature, nuint blobLengthInBytes, Guid* riid, void** ppvRootSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, void*, nuint, Guid*, void**, int>)(lpVtbl[16]))((ID3D12Device*)Unsafe.AsPointer(ref this), nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateConstantBufferView"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public void CreateConstantBufferView(ConstantBufferViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device*, ConstantBufferViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[17]))((ID3D12Device*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateShaderResourceView"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public void CreateShaderResourceView(ID3D12Resource* pResource, ShaderResourceViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ShaderResourceViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[18]))((ID3D12Device*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateUnorderedAccessView"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public void CreateUnorderedAccessView(ID3D12Resource* pResource, ID3D12Resource* pCounterResource, UnorderedAccessViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, UnorderedAccessViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[19]))((ID3D12Device*)Unsafe.AsPointer(ref this), pResource, pCounterResource, pDesc, DestDescriptor);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateRenderTargetView"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public void CreateRenderTargetView(ID3D12Resource* pResource, RenderTargetViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, RenderTargetViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[20]))((ID3D12Device*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateDepthStencilView"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public void CreateDepthStencilView(ID3D12Resource* pResource, DepthStencilViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, DepthStencilViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[21]))((ID3D12Device*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateSampler"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public void CreateSampler(SamplerDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device*, SamplerDescription*, CpuDescriptorHandle*, void>)(lpVtbl[22]))((ID3D12Device*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CopyDescriptors"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public void CopyDescriptors(uint NumDestDescriptorRanges, CpuDescriptorHandle* pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint NumSrcDescriptorRanges, CpuDescriptorHandle* pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, CpuDescriptorHandle*, uint*, uint, CpuDescriptorHandle*, uint*, DescriptorHeapType, void>)(lpVtbl[23]))((ID3D12Device*)Unsafe.AsPointer(ref this), NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CopyDescriptorsSimple"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public void CopyDescriptorsSimple(uint NumDescriptors, CpuDescriptorHandle* DestDescriptorRangeStart, CpuDescriptorHandle* SrcDescriptorRangeStart, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, CpuDescriptorHandle*, CpuDescriptorHandle*, DescriptorHeapType, void>)(lpVtbl[24]))((ID3D12Device*)Unsafe.AsPointer(ref this), NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::GetResourceAllocationInfo"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo(uint visibleMask, uint numResourceDescs, ResourceDescription* pResourceDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, uint, ResourceDescription*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[25]))((ID3D12Device*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::GetCustomHeapProperties"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public Graphics.Direct3D12.HeapProperties GetCustomHeapProperties(uint nodeMask, HeapType heapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, HeapType, Graphics.Direct3D12.HeapProperties>)(lpVtbl[26]))((ID3D12Device*)Unsafe.AsPointer(ref this), nodeMask, heapType);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateCommittedResource"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult CreateCommittedResource(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, HeapProperties*, HeapFlags, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[27]))((ID3D12Device*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateHeap"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult CreateHeap(HeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, HeapDescription*, Guid*, void**, int>)(lpVtbl[28]))((ID3D12Device*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreatePlacedResource"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong HeapOffset, ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[29]))((ID3D12Device*)Unsafe.AsPointer(ref this), pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateReservedResource"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult CreateReservedResource(ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[30]))((ID3D12Device*)Unsafe.AsPointer(ref this), pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateSharedHandle"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult CreateSharedHandle(ID3D12DeviceChild* pObject, Security.SECURITY_ATTRIBUTES* pAttributes, uint Access, char** Name, IntPtr* pHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, Security.SECURITY_ATTRIBUTES*, uint, char**, IntPtr*, int>)(lpVtbl[31]))((ID3D12Device*)Unsafe.AsPointer(ref this), pObject, pAttributes, Access, Name, pHandle);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::OpenSharedHandle"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult OpenSharedHandle(IntPtr NTHandle, Guid* riid, void** ppvObj)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, IntPtr, Guid*, void**, int>)(lpVtbl[32]))((ID3D12Device*)Unsafe.AsPointer(ref this), NTHandle, riid, ppvObj);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::OpenSharedHandleByName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult OpenSharedHandleByName(char** Name, uint Access, IntPtr* pNTHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, char**, uint, IntPtr*, int>)(lpVtbl[33]))((ID3D12Device*)Unsafe.AsPointer(ref this), Name, Access, pNTHandle);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::MakeResident"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult MakeResident(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, ID3D12Pageable*, int>)(lpVtbl[34]))((ID3D12Device*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::Evict"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult Evict(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, ID3D12Pageable*, int>)(lpVtbl[35]))((ID3D12Device*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateFence"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult CreateFence(ulong InitialValue, FenceFlags Flags, Guid* riid, void** ppFence)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, ulong, FenceFlags, Guid*, void**, int>)(lpVtbl[36]))((ID3D12Device*)Unsafe.AsPointer(ref this), InitialValue, Flags, riid, ppFence);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::GetDeviceRemovedReason"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult GetDeviceRemovedReason()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, int>)(lpVtbl[37]))((ID3D12Device*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::GetCopyableFootprints"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public void GetCopyableFootprints(ResourceDescription* pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device*, ResourceDescription*, uint, uint, ulong, PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(lpVtbl[38]))((ID3D12Device*)Unsafe.AsPointer(ref this), pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateQueryHeap"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult CreateQueryHeap(QueryHeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, QueryHeapDescription*, Guid*, void**, int>)(lpVtbl[39]))((ID3D12Device*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::SetStablePowerState"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult SetStablePowerState(Bool32 Enable)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, Bool32, int>)(lpVtbl[40]))((ID3D12Device*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::CreateCommandSignature"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult CreateCommandSignature(CommandSignatureDescription* pDesc, ID3D12RootSignature* pRootSignature, Guid* riid, void** ppvCommandSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, CommandSignatureDescription*, ID3D12RootSignature*, Guid*, void**, int>)(lpVtbl[41]))((ID3D12Device*)Unsafe.AsPointer(ref this), pDesc, pRootSignature, riid, ppvCommandSignature);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::GetResourceTiling"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipInfo* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, PackedMipInfo*, TileShape*, uint*, uint, SubresourceTiling*, void>)(lpVtbl[42]))((ID3D12Device*)Unsafe.AsPointer(ref this), pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device::GetAdapterLuid"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public Luid GetAdapterLuid()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device*, Luid>)(lpVtbl[43]))((ID3D12Device*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12PipelineLibrary"]/*' />
/// <unmanaged>ID3D12PipelineLibrary</unmanaged>
[Guid("c64226a8-9201-46af-b4cc-53fb9ff7414f")]
[NativeTypeName("struct ID3D12PipelineLibrary : ID3D12DeviceChild")]
[NativeInheritance("ID3D12DeviceChild")]
public unsafe partial struct ID3D12PipelineLibrary
{
	public static ref readonly Guid IID_ID3D12PipelineLibrary
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA8, 0x26, 0x42, 0xC6,
				0x01, 0x92,
				0xAF, 0x46,
				0xB4,
				0xCC,
				0x53,
				0xFB,
				0x9F,
				0xF7,
				0x41,
				0x4F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12PipelineLibrary));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char**, int>)(lpVtbl[7]))((ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12PipelineLibrary::StorePipeline"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult StorePipeline(char** pName, ID3D12PipelineState* pPipeline)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char**, ID3D12PipelineState*, int>)(lpVtbl[8]))((ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this), pName, pPipeline);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12PipelineLibrary::LoadGraphicsPipeline"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult LoadGraphicsPipeline(char** pName, GraphicsPipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char**, GraphicsPipelineStateDescription*, Guid*, void**, int>)(lpVtbl[9]))((ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this), pName, pDesc, riid, ppPipelineState);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12PipelineLibrary::LoadComputePipeline"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult LoadComputePipeline(char** pName, ComputePipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char**, ComputePipelineStateDescription*, Guid*, void**, int>)(lpVtbl[10]))((ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this), pName, pDesc, riid, ppPipelineState);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12PipelineLibrary::GetSerializedSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public nuint GetSerializedSize()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, nuint>)(lpVtbl[11]))((ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12PipelineLibrary::Serialize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult Serialize(void* pData, nuint DataSizeInBytes)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, void*, nuint, int>)(lpVtbl[12]))((ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this), pData, DataSizeInBytes);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12PipelineLibrary1"]/*' />
/// <unmanaged>ID3D12PipelineLibrary1</unmanaged>
[Guid("80eabf42-2568-4e5e-bd82-c37f86961dc3")]
[NativeTypeName("struct ID3D12PipelineLibrary1 : ID3D12PipelineLibrary")]
[NativeInheritance("ID3D12PipelineLibrary")]
public unsafe partial struct ID3D12PipelineLibrary1
{
	public static ref readonly Guid IID_ID3D12PipelineLibrary1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x42, 0xBF, 0xEA, 0x80,
				0x68, 0x25,
				0x5E, 0x4E,
				0xBD,
				0x82,
				0xC3,
				0x7F,
				0x86,
				0x96,
				0x1D,
				0xC3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12PipelineLibrary1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12PipelineLibrary.StorePipeline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult StorePipeline(char** pName, ID3D12PipelineState* pPipeline)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary1*, char**, ID3D12PipelineState*, int>)(lpVtbl[3]))((ID3D12PipelineLibrary1*)Unsafe.AsPointer(ref this), pName, pPipeline);
	}

	/// <inheritdoc cref="ID3D12PipelineLibrary.LoadGraphicsPipeline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult LoadGraphicsPipeline(char** pName, GraphicsPipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary1*, char**, GraphicsPipelineStateDescription*, Guid*, void**, int>)(lpVtbl[4]))((ID3D12PipelineLibrary1*)Unsafe.AsPointer(ref this), pName, pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12PipelineLibrary.LoadComputePipeline" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult LoadComputePipeline(char** pName, ComputePipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary1*, char**, ComputePipelineStateDescription*, Guid*, void**, int>)(lpVtbl[5]))((ID3D12PipelineLibrary1*)Unsafe.AsPointer(ref this), pName, pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12PipelineLibrary.GetSerializedSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public nuint GetSerializedSize()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary1*, nuint>)(lpVtbl[6]))((ID3D12PipelineLibrary1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12PipelineLibrary.Serialize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult Serialize(void* pData, nuint DataSizeInBytes)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary1*, void*, nuint, int>)(lpVtbl[7]))((ID3D12PipelineLibrary1*)Unsafe.AsPointer(ref this), pData, DataSizeInBytes);
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary1*, Guid*, void**, int>)(lpVtbl[8]))((ID3D12PipelineLibrary1*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary1*, Guid*, uint*, void*, int>)(lpVtbl[9]))((ID3D12PipelineLibrary1*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary1*, Guid*, uint, void*, int>)(lpVtbl[10]))((ID3D12PipelineLibrary1*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary1*, Guid*, IUnknown*, int>)(lpVtbl[11]))((ID3D12PipelineLibrary1*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary1*, char**, int>)(lpVtbl[12]))((ID3D12PipelineLibrary1*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12PipelineLibrary1::LoadPipeline"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult LoadPipeline(char** pName, PipelineStateStreamDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary1*, char**, PipelineStateStreamDescription*, Guid*, void**, int>)(lpVtbl[13]))((ID3D12PipelineLibrary1*)Unsafe.AsPointer(ref this), pName, pDesc, riid, ppPipelineState);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device1"]/*' />
/// <unmanaged>ID3D12Device1</unmanaged>
[Guid("77acce80-638e-4e65-8895-c1f23386863e")]
[NativeTypeName("struct ID3D12Device1 : ID3D12Device")]
[NativeInheritance("ID3D12Device")]
public unsafe partial struct ID3D12Device1
{
	public static ref readonly Guid IID_ID3D12Device1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x80, 0xCE, 0xAC, 0x77,
				0x8E, 0x63,
				0x65, 0x4E,
				0x88,
				0x95,
				0xC1,
				0xF2,
				0x33,
				0x86,
				0x86,
				0x3E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Device1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.GetNodeCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public uint GetNodeCount()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, uint>)(lpVtbl[3]))((ID3D12Device1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandQueue" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateCommandQueue(CommandQueueDescription* pDesc, Guid* riid, void** ppCommandQueue)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, CommandQueueDescription*, Guid*, void**, int>)(lpVtbl[4]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pDesc, riid, ppCommandQueue);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandAllocator" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult CreateCommandAllocator(CommandListType type, Guid* riid, void** ppCommandAllocator)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, CommandListType, Guid*, void**, int>)(lpVtbl[5]))((ID3D12Device1*)Unsafe.AsPointer(ref this), type, riid, ppCommandAllocator);
	}

	/// <inheritdoc cref="ID3D12Device.CreateGraphicsPipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CreateGraphicsPipelineState(GraphicsPipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, GraphicsPipelineStateDescription*, Guid*, void**, int>)(lpVtbl[6]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateComputePipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CreateComputePipelineState(ComputePipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, ComputePipelineStateDescription*, Guid*, void**, int>)(lpVtbl[7]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandList" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult CreateCommandList(uint nodeMask, CommandListType type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, Guid* riid, void** ppCommandList)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, uint, CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, int>)(lpVtbl[8]))((ID3D12Device1*)Unsafe.AsPointer(ref this), nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
	}

	/// <inheritdoc cref="ID3D12Device.CheckFeatureSupport" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CheckFeatureSupport(Feature Feature, void* pFeatureSupportData, uint FeatureSupportDataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, Feature, void*, uint, int>)(lpVtbl[9]))((ID3D12Device1*)Unsafe.AsPointer(ref this), Feature, pFeatureSupportData, FeatureSupportDataSize);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDescriptorHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult CreateDescriptorHeap(DescriptorHeapDescription* pDescriptorHeapDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, DescriptorHeapDescription*, Guid*, void**, int>)(lpVtbl[10]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pDescriptorHeapDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.GetDescriptorHandleIncrementSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public uint GetDescriptorHandleIncrementSize(DescriptorHeapType DescriptorHeapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, DescriptorHeapType, uint>)(lpVtbl[11]))((ID3D12Device1*)Unsafe.AsPointer(ref this), DescriptorHeapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CreateRootSignature(uint nodeMask, void* pBlobWithRootSignature, nuint blobLengthInBytes, Guid* riid, void** ppvRootSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, uint, void*, nuint, Guid*, void**, int>)(lpVtbl[12]))((ID3D12Device1*)Unsafe.AsPointer(ref this), nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
	}

	/// <inheritdoc cref="ID3D12Device.CreateConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public void CreateConstantBufferView(ConstantBufferViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device1*, ConstantBufferViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[13]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public void CreateShaderResourceView(ID3D12Resource* pResource, ShaderResourceViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device1*, ID3D12Resource*, ShaderResourceViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[14]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public void CreateUnorderedAccessView(ID3D12Resource* pResource, ID3D12Resource* pCounterResource, UnorderedAccessViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device1*, ID3D12Resource*, ID3D12Resource*, UnorderedAccessViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[15]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pResource, pCounterResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRenderTargetView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public void CreateRenderTargetView(ID3D12Resource* pResource, RenderTargetViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device1*, ID3D12Resource*, RenderTargetViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[16]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDepthStencilView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public void CreateDepthStencilView(ID3D12Resource* pResource, DepthStencilViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device1*, ID3D12Resource*, DepthStencilViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[17]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSampler" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public void CreateSampler(SamplerDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device1*, SamplerDescription*, CpuDescriptorHandle*, void>)(lpVtbl[18]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptors" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public void CopyDescriptors(uint NumDestDescriptorRanges, CpuDescriptorHandle* pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint NumSrcDescriptorRanges, CpuDescriptorHandle* pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device1*, uint, CpuDescriptorHandle*, uint*, uint, CpuDescriptorHandle*, uint*, DescriptorHeapType, void>)(lpVtbl[19]))((ID3D12Device1*)Unsafe.AsPointer(ref this), NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptorsSimple" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public void CopyDescriptorsSimple(uint NumDescriptors, CpuDescriptorHandle* DestDescriptorRangeStart, CpuDescriptorHandle* SrcDescriptorRangeStart, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device1*, uint, CpuDescriptorHandle*, CpuDescriptorHandle*, DescriptorHeapType, void>)(lpVtbl[20]))((ID3D12Device1*)Unsafe.AsPointer(ref this), NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceAllocationInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo(uint visibleMask, uint numResourceDescs, ResourceDescription* pResourceDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, uint, uint, ResourceDescription*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[21]))((ID3D12Device1*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs);
	}

	/// <inheritdoc cref="ID3D12Device.GetCustomHeapProperties" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public Graphics.Direct3D12.HeapProperties GetCustomHeapProperties(uint nodeMask, HeapType heapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, uint, HeapType, Graphics.Direct3D12.HeapProperties>)(lpVtbl[22]))((ID3D12Device1*)Unsafe.AsPointer(ref this), nodeMask, heapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommittedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult CreateCommittedResource(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, HeapProperties*, HeapFlags, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[23]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult CreateHeap(HeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, HeapDescription*, Guid*, void**, int>)(lpVtbl[24]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.CreatePlacedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong HeapOffset, ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, ID3D12Heap*, ulong, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[25]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateReservedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult CreateReservedResource(ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[26]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult CreateSharedHandle(ID3D12DeviceChild* pObject, Security.SECURITY_ATTRIBUTES* pAttributes, uint Access, char** Name, IntPtr* pHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, ID3D12DeviceChild*, Security.SECURITY_ATTRIBUTES*, uint, char**, IntPtr*, int>)(lpVtbl[27]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pObject, pAttributes, Access, Name, pHandle);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult OpenSharedHandle(IntPtr NTHandle, Guid* riid, void** ppvObj)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, IntPtr, Guid*, void**, int>)(lpVtbl[28]))((ID3D12Device1*)Unsafe.AsPointer(ref this), NTHandle, riid, ppvObj);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandleByName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult OpenSharedHandleByName(char** Name, uint Access, IntPtr* pNTHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, char**, uint, IntPtr*, int>)(lpVtbl[29]))((ID3D12Device1*)Unsafe.AsPointer(ref this), Name, Access, pNTHandle);
	}

	/// <inheritdoc cref="ID3D12Device.MakeResident" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult MakeResident(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, uint, ID3D12Pageable*, int>)(lpVtbl[30]))((ID3D12Device1*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.Evict" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult Evict(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, uint, ID3D12Pageable*, int>)(lpVtbl[31]))((ID3D12Device1*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.CreateFence" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult CreateFence(ulong InitialValue, FenceFlags Flags, Guid* riid, void** ppFence)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, ulong, FenceFlags, Guid*, void**, int>)(lpVtbl[32]))((ID3D12Device1*)Unsafe.AsPointer(ref this), InitialValue, Flags, riid, ppFence);
	}

	/// <inheritdoc cref="ID3D12Device.GetDeviceRemovedReason" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult GetDeviceRemovedReason()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, int>)(lpVtbl[33]))((ID3D12Device1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.GetCopyableFootprints" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public void GetCopyableFootprints(ResourceDescription* pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device1*, ResourceDescription*, uint, uint, ulong, PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(lpVtbl[34]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
	}

	/// <inheritdoc cref="ID3D12Device.CreateQueryHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult CreateQueryHeap(QueryHeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, QueryHeapDescription*, Guid*, void**, int>)(lpVtbl[35]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.SetStablePowerState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult SetStablePowerState(Bool32 Enable)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, Bool32, int>)(lpVtbl[36]))((ID3D12Device1*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult CreateCommandSignature(CommandSignatureDescription* pDesc, ID3D12RootSignature* pRootSignature, Guid* riid, void** ppvCommandSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, CommandSignatureDescription*, ID3D12RootSignature*, Guid*, void**, int>)(lpVtbl[37]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pDesc, pRootSignature, riid, ppvCommandSignature);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceTiling" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipInfo* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device1*, ID3D12Resource*, uint*, PackedMipInfo*, TileShape*, uint*, uint, SubresourceTiling*, void>)(lpVtbl[38]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
	}

	/// <inheritdoc cref="ID3D12Device.GetAdapterLuid" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public Luid GetAdapterLuid()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, Luid>)(lpVtbl[39]))((ID3D12Device1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, Guid*, uint*, void*, int>)(lpVtbl[40]))((ID3D12Device1*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, Guid*, uint, void*, int>)(lpVtbl[41]))((ID3D12Device1*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, Guid*, IUnknown*, int>)(lpVtbl[42]))((ID3D12Device1*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, char**, int>)(lpVtbl[43]))((ID3D12Device1*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device1::CreatePipelineLibrary"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public HResult CreatePipelineLibrary(void* pLibraryBlob, nuint BlobLength, Guid* riid, void** ppPipelineLibrary)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, void*, nuint, Guid*, void**, int>)(lpVtbl[44]))((ID3D12Device1*)Unsafe.AsPointer(ref this), pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device1::SetEventOnMultipleFenceCompletion"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public HResult SetEventOnMultipleFenceCompletion(ID3D12Fence* ppFences, ulong* pFenceValues, uint NumFences, MultipleFenceWaitFlags Flags, IntPtr hEvent)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, ID3D12Fence*, ulong*, uint, MultipleFenceWaitFlags, IntPtr, int>)(lpVtbl[45]))((ID3D12Device1*)Unsafe.AsPointer(ref this), ppFences, pFenceValues, NumFences, Flags, hEvent);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device1::SetResidencyPriority"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public HResult SetResidencyPriority(uint NumObjects, ID3D12Pageable* ppObjects, ResidencyPriority* pPriorities)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device1*, uint, ID3D12Pageable*, ResidencyPriority*, int>)(lpVtbl[46]))((ID3D12Device1*)Unsafe.AsPointer(ref this), NumObjects, ppObjects, pPriorities);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device2"]/*' />
/// <unmanaged>ID3D12Device2</unmanaged>
[Guid("30baa41e-b15b-475c-a0bb-1af5c5b64328")]
[NativeTypeName("struct ID3D12Device2 : ID3D12Device1")]
[NativeInheritance("ID3D12Device1")]
public unsafe partial struct ID3D12Device2
{
	public static ref readonly Guid IID_ID3D12Device2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1E, 0xA4, 0xBA, 0x30,
				0x5B, 0xB1,
				0x5C, 0x47,
				0xA0,
				0xBB,
				0x1A,
				0xF5,
				0xC5,
				0xB6,
				0x43,
				0x28
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Device2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device1.CreatePipelineLibrary" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreatePipelineLibrary(void* pLibraryBlob, nuint BlobLength, Guid* riid, void** ppPipelineLibrary)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, void*, nuint, Guid*, void**, int>)(lpVtbl[3]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
	}

	/// <inheritdoc cref="ID3D12Device1.SetEventOnMultipleFenceCompletion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetEventOnMultipleFenceCompletion(ID3D12Fence* ppFences, ulong* pFenceValues, uint NumFences, MultipleFenceWaitFlags Flags, IntPtr hEvent)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, ID3D12Fence*, ulong*, uint, MultipleFenceWaitFlags, IntPtr, int>)(lpVtbl[4]))((ID3D12Device2*)Unsafe.AsPointer(ref this), ppFences, pFenceValues, NumFences, Flags, hEvent);
	}

	/// <inheritdoc cref="ID3D12Device1.SetResidencyPriority" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetResidencyPriority(uint NumObjects, ID3D12Pageable* ppObjects, ResidencyPriority* pPriorities)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, uint, ID3D12Pageable*, ResidencyPriority*, int>)(lpVtbl[5]))((ID3D12Device2*)Unsafe.AsPointer(ref this), NumObjects, ppObjects, pPriorities);
	}

	/// <inheritdoc cref="ID3D12Device.GetNodeCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public uint GetNodeCount()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, uint>)(lpVtbl[6]))((ID3D12Device2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandQueue" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CreateCommandQueue(CommandQueueDescription* pDesc, Guid* riid, void** ppCommandQueue)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, CommandQueueDescription*, Guid*, void**, int>)(lpVtbl[7]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pDesc, riid, ppCommandQueue);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandAllocator" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult CreateCommandAllocator(CommandListType type, Guid* riid, void** ppCommandAllocator)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, CommandListType, Guid*, void**, int>)(lpVtbl[8]))((ID3D12Device2*)Unsafe.AsPointer(ref this), type, riid, ppCommandAllocator);
	}

	/// <inheritdoc cref="ID3D12Device.CreateGraphicsPipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CreateGraphicsPipelineState(GraphicsPipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, GraphicsPipelineStateDescription*, Guid*, void**, int>)(lpVtbl[9]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateComputePipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult CreateComputePipelineState(ComputePipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, ComputePipelineStateDescription*, Guid*, void**, int>)(lpVtbl[10]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandList" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CreateCommandList(uint nodeMask, CommandListType type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, Guid* riid, void** ppCommandList)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, uint, CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, int>)(lpVtbl[11]))((ID3D12Device2*)Unsafe.AsPointer(ref this), nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
	}

	/// <inheritdoc cref="ID3D12Device.CheckFeatureSupport" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CheckFeatureSupport(Feature Feature, void* pFeatureSupportData, uint FeatureSupportDataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, Feature, void*, uint, int>)(lpVtbl[12]))((ID3D12Device2*)Unsafe.AsPointer(ref this), Feature, pFeatureSupportData, FeatureSupportDataSize);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDescriptorHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult CreateDescriptorHeap(DescriptorHeapDescription* pDescriptorHeapDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, DescriptorHeapDescription*, Guid*, void**, int>)(lpVtbl[13]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pDescriptorHeapDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.GetDescriptorHandleIncrementSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public uint GetDescriptorHandleIncrementSize(DescriptorHeapType DescriptorHeapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, DescriptorHeapType, uint>)(lpVtbl[14]))((ID3D12Device2*)Unsafe.AsPointer(ref this), DescriptorHeapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult CreateRootSignature(uint nodeMask, void* pBlobWithRootSignature, nuint blobLengthInBytes, Guid* riid, void** ppvRootSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, uint, void*, nuint, Guid*, void**, int>)(lpVtbl[15]))((ID3D12Device2*)Unsafe.AsPointer(ref this), nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
	}

	/// <inheritdoc cref="ID3D12Device.CreateConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public void CreateConstantBufferView(ConstantBufferViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device2*, ConstantBufferViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[16]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public void CreateShaderResourceView(ID3D12Resource* pResource, ShaderResourceViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device2*, ID3D12Resource*, ShaderResourceViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[17]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public void CreateUnorderedAccessView(ID3D12Resource* pResource, ID3D12Resource* pCounterResource, UnorderedAccessViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device2*, ID3D12Resource*, ID3D12Resource*, UnorderedAccessViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[18]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pResource, pCounterResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRenderTargetView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public void CreateRenderTargetView(ID3D12Resource* pResource, RenderTargetViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device2*, ID3D12Resource*, RenderTargetViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[19]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDepthStencilView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public void CreateDepthStencilView(ID3D12Resource* pResource, DepthStencilViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device2*, ID3D12Resource*, DepthStencilViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[20]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSampler" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public void CreateSampler(SamplerDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device2*, SamplerDescription*, CpuDescriptorHandle*, void>)(lpVtbl[21]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptors" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public void CopyDescriptors(uint NumDestDescriptorRanges, CpuDescriptorHandle* pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint NumSrcDescriptorRanges, CpuDescriptorHandle* pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device2*, uint, CpuDescriptorHandle*, uint*, uint, CpuDescriptorHandle*, uint*, DescriptorHeapType, void>)(lpVtbl[22]))((ID3D12Device2*)Unsafe.AsPointer(ref this), NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptorsSimple" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public void CopyDescriptorsSimple(uint NumDescriptors, CpuDescriptorHandle* DestDescriptorRangeStart, CpuDescriptorHandle* SrcDescriptorRangeStart, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device2*, uint, CpuDescriptorHandle*, CpuDescriptorHandle*, DescriptorHeapType, void>)(lpVtbl[23]))((ID3D12Device2*)Unsafe.AsPointer(ref this), NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceAllocationInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo(uint visibleMask, uint numResourceDescs, ResourceDescription* pResourceDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, uint, uint, ResourceDescription*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[24]))((ID3D12Device2*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs);
	}

	/// <inheritdoc cref="ID3D12Device.GetCustomHeapProperties" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public Graphics.Direct3D12.HeapProperties GetCustomHeapProperties(uint nodeMask, HeapType heapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, uint, HeapType, Graphics.Direct3D12.HeapProperties>)(lpVtbl[25]))((ID3D12Device2*)Unsafe.AsPointer(ref this), nodeMask, heapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommittedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult CreateCommittedResource(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, HeapProperties*, HeapFlags, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[26]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult CreateHeap(HeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, HeapDescription*, Guid*, void**, int>)(lpVtbl[27]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.CreatePlacedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong HeapOffset, ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, ID3D12Heap*, ulong, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[28]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateReservedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult CreateReservedResource(ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[29]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult CreateSharedHandle(ID3D12DeviceChild* pObject, Security.SECURITY_ATTRIBUTES* pAttributes, uint Access, char** Name, IntPtr* pHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, ID3D12DeviceChild*, Security.SECURITY_ATTRIBUTES*, uint, char**, IntPtr*, int>)(lpVtbl[30]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pObject, pAttributes, Access, Name, pHandle);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult OpenSharedHandle(IntPtr NTHandle, Guid* riid, void** ppvObj)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, IntPtr, Guid*, void**, int>)(lpVtbl[31]))((ID3D12Device2*)Unsafe.AsPointer(ref this), NTHandle, riid, ppvObj);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandleByName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult OpenSharedHandleByName(char** Name, uint Access, IntPtr* pNTHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, char**, uint, IntPtr*, int>)(lpVtbl[32]))((ID3D12Device2*)Unsafe.AsPointer(ref this), Name, Access, pNTHandle);
	}

	/// <inheritdoc cref="ID3D12Device.MakeResident" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult MakeResident(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, uint, ID3D12Pageable*, int>)(lpVtbl[33]))((ID3D12Device2*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.Evict" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult Evict(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, uint, ID3D12Pageable*, int>)(lpVtbl[34]))((ID3D12Device2*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.CreateFence" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult CreateFence(ulong InitialValue, FenceFlags Flags, Guid* riid, void** ppFence)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, ulong, FenceFlags, Guid*, void**, int>)(lpVtbl[35]))((ID3D12Device2*)Unsafe.AsPointer(ref this), InitialValue, Flags, riid, ppFence);
	}

	/// <inheritdoc cref="ID3D12Device.GetDeviceRemovedReason" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult GetDeviceRemovedReason()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, int>)(lpVtbl[36]))((ID3D12Device2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.GetCopyableFootprints" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public void GetCopyableFootprints(ResourceDescription* pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device2*, ResourceDescription*, uint, uint, ulong, PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(lpVtbl[37]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
	}

	/// <inheritdoc cref="ID3D12Device.CreateQueryHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult CreateQueryHeap(QueryHeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, QueryHeapDescription*, Guid*, void**, int>)(lpVtbl[38]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.SetStablePowerState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult SetStablePowerState(Bool32 Enable)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, Bool32, int>)(lpVtbl[39]))((ID3D12Device2*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult CreateCommandSignature(CommandSignatureDescription* pDesc, ID3D12RootSignature* pRootSignature, Guid* riid, void** ppvCommandSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, CommandSignatureDescription*, ID3D12RootSignature*, Guid*, void**, int>)(lpVtbl[40]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pDesc, pRootSignature, riid, ppvCommandSignature);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceTiling" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipInfo* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device2*, ID3D12Resource*, uint*, PackedMipInfo*, TileShape*, uint*, uint, SubresourceTiling*, void>)(lpVtbl[41]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
	}

	/// <inheritdoc cref="ID3D12Device.GetAdapterLuid" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public Luid GetAdapterLuid()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, Luid>)(lpVtbl[42]))((ID3D12Device2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, Guid*, uint*, void*, int>)(lpVtbl[43]))((ID3D12Device2*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, Guid*, uint, void*, int>)(lpVtbl[44]))((ID3D12Device2*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, Guid*, IUnknown*, int>)(lpVtbl[45]))((ID3D12Device2*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, char**, int>)(lpVtbl[46]))((ID3D12Device2*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device2::CreatePipelineState"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult CreatePipelineState(PipelineStateStreamDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device2*, PipelineStateStreamDescription*, Guid*, void**, int>)(lpVtbl[47]))((ID3D12Device2*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device3"]/*' />
/// <unmanaged>ID3D12Device3</unmanaged>
[Guid("81dadc15-2bad-4392-93c5-101345c4aa98")]
[NativeTypeName("struct ID3D12Device3 : ID3D12Device2")]
[NativeInheritance("ID3D12Device2")]
public unsafe partial struct ID3D12Device3
{
	public static ref readonly Guid IID_ID3D12Device3
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x15, 0xDC, 0xDA, 0x81,
				0xAD, 0x2B,
				0x92, 0x43,
				0x93,
				0xC5,
				0x10,
				0x13,
				0x45,
				0xC4,
				0xAA,
				0x98
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Device3));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device2.CreatePipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreatePipelineState(PipelineStateStreamDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, PipelineStateStreamDescription*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device1.CreatePipelineLibrary" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreatePipelineLibrary(void* pLibraryBlob, nuint BlobLength, Guid* riid, void** ppPipelineLibrary)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, void*, nuint, Guid*, void**, int>)(lpVtbl[4]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
	}

	/// <inheritdoc cref="ID3D12Device1.SetEventOnMultipleFenceCompletion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetEventOnMultipleFenceCompletion(ID3D12Fence* ppFences, ulong* pFenceValues, uint NumFences, MultipleFenceWaitFlags Flags, IntPtr hEvent)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, ID3D12Fence*, ulong*, uint, MultipleFenceWaitFlags, IntPtr, int>)(lpVtbl[5]))((ID3D12Device3*)Unsafe.AsPointer(ref this), ppFences, pFenceValues, NumFences, Flags, hEvent);
	}

	/// <inheritdoc cref="ID3D12Device1.SetResidencyPriority" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetResidencyPriority(uint NumObjects, ID3D12Pageable* ppObjects, ResidencyPriority* pPriorities)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, uint, ID3D12Pageable*, ResidencyPriority*, int>)(lpVtbl[6]))((ID3D12Device3*)Unsafe.AsPointer(ref this), NumObjects, ppObjects, pPriorities);
	}

	/// <inheritdoc cref="ID3D12Device.GetNodeCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public uint GetNodeCount()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, uint>)(lpVtbl[7]))((ID3D12Device3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandQueue" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult CreateCommandQueue(CommandQueueDescription* pDesc, Guid* riid, void** ppCommandQueue)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, CommandQueueDescription*, Guid*, void**, int>)(lpVtbl[8]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pDesc, riid, ppCommandQueue);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandAllocator" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CreateCommandAllocator(CommandListType type, Guid* riid, void** ppCommandAllocator)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, CommandListType, Guid*, void**, int>)(lpVtbl[9]))((ID3D12Device3*)Unsafe.AsPointer(ref this), type, riid, ppCommandAllocator);
	}

	/// <inheritdoc cref="ID3D12Device.CreateGraphicsPipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult CreateGraphicsPipelineState(GraphicsPipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, GraphicsPipelineStateDescription*, Guid*, void**, int>)(lpVtbl[10]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateComputePipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CreateComputePipelineState(ComputePipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, ComputePipelineStateDescription*, Guid*, void**, int>)(lpVtbl[11]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandList" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CreateCommandList(uint nodeMask, CommandListType type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, Guid* riid, void** ppCommandList)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, uint, CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, int>)(lpVtbl[12]))((ID3D12Device3*)Unsafe.AsPointer(ref this), nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
	}

	/// <inheritdoc cref="ID3D12Device.CheckFeatureSupport" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult CheckFeatureSupport(Feature Feature, void* pFeatureSupportData, uint FeatureSupportDataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, Feature, void*, uint, int>)(lpVtbl[13]))((ID3D12Device3*)Unsafe.AsPointer(ref this), Feature, pFeatureSupportData, FeatureSupportDataSize);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDescriptorHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult CreateDescriptorHeap(DescriptorHeapDescription* pDescriptorHeapDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, DescriptorHeapDescription*, Guid*, void**, int>)(lpVtbl[14]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pDescriptorHeapDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.GetDescriptorHandleIncrementSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public uint GetDescriptorHandleIncrementSize(DescriptorHeapType DescriptorHeapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, DescriptorHeapType, uint>)(lpVtbl[15]))((ID3D12Device3*)Unsafe.AsPointer(ref this), DescriptorHeapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult CreateRootSignature(uint nodeMask, void* pBlobWithRootSignature, nuint blobLengthInBytes, Guid* riid, void** ppvRootSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, uint, void*, nuint, Guid*, void**, int>)(lpVtbl[16]))((ID3D12Device3*)Unsafe.AsPointer(ref this), nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
	}

	/// <inheritdoc cref="ID3D12Device.CreateConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public void CreateConstantBufferView(ConstantBufferViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device3*, ConstantBufferViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[17]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public void CreateShaderResourceView(ID3D12Resource* pResource, ShaderResourceViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device3*, ID3D12Resource*, ShaderResourceViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[18]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public void CreateUnorderedAccessView(ID3D12Resource* pResource, ID3D12Resource* pCounterResource, UnorderedAccessViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device3*, ID3D12Resource*, ID3D12Resource*, UnorderedAccessViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[19]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pResource, pCounterResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRenderTargetView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public void CreateRenderTargetView(ID3D12Resource* pResource, RenderTargetViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device3*, ID3D12Resource*, RenderTargetViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[20]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDepthStencilView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public void CreateDepthStencilView(ID3D12Resource* pResource, DepthStencilViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device3*, ID3D12Resource*, DepthStencilViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[21]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSampler" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public void CreateSampler(SamplerDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device3*, SamplerDescription*, CpuDescriptorHandle*, void>)(lpVtbl[22]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptors" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public void CopyDescriptors(uint NumDestDescriptorRanges, CpuDescriptorHandle* pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint NumSrcDescriptorRanges, CpuDescriptorHandle* pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device3*, uint, CpuDescriptorHandle*, uint*, uint, CpuDescriptorHandle*, uint*, DescriptorHeapType, void>)(lpVtbl[23]))((ID3D12Device3*)Unsafe.AsPointer(ref this), NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptorsSimple" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public void CopyDescriptorsSimple(uint NumDescriptors, CpuDescriptorHandle* DestDescriptorRangeStart, CpuDescriptorHandle* SrcDescriptorRangeStart, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device3*, uint, CpuDescriptorHandle*, CpuDescriptorHandle*, DescriptorHeapType, void>)(lpVtbl[24]))((ID3D12Device3*)Unsafe.AsPointer(ref this), NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceAllocationInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo(uint visibleMask, uint numResourceDescs, ResourceDescription* pResourceDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, uint, uint, ResourceDescription*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[25]))((ID3D12Device3*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs);
	}

	/// <inheritdoc cref="ID3D12Device.GetCustomHeapProperties" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public Graphics.Direct3D12.HeapProperties GetCustomHeapProperties(uint nodeMask, HeapType heapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, uint, HeapType, Graphics.Direct3D12.HeapProperties>)(lpVtbl[26]))((ID3D12Device3*)Unsafe.AsPointer(ref this), nodeMask, heapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommittedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult CreateCommittedResource(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, HeapProperties*, HeapFlags, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[27]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult CreateHeap(HeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, HeapDescription*, Guid*, void**, int>)(lpVtbl[28]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.CreatePlacedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong HeapOffset, ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, ID3D12Heap*, ulong, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[29]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateReservedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult CreateReservedResource(ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[30]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult CreateSharedHandle(ID3D12DeviceChild* pObject, Security.SECURITY_ATTRIBUTES* pAttributes, uint Access, char** Name, IntPtr* pHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, ID3D12DeviceChild*, Security.SECURITY_ATTRIBUTES*, uint, char**, IntPtr*, int>)(lpVtbl[31]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pObject, pAttributes, Access, Name, pHandle);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult OpenSharedHandle(IntPtr NTHandle, Guid* riid, void** ppvObj)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, IntPtr, Guid*, void**, int>)(lpVtbl[32]))((ID3D12Device3*)Unsafe.AsPointer(ref this), NTHandle, riid, ppvObj);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandleByName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult OpenSharedHandleByName(char** Name, uint Access, IntPtr* pNTHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, char**, uint, IntPtr*, int>)(lpVtbl[33]))((ID3D12Device3*)Unsafe.AsPointer(ref this), Name, Access, pNTHandle);
	}

	/// <inheritdoc cref="ID3D12Device.MakeResident" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult MakeResident(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, uint, ID3D12Pageable*, int>)(lpVtbl[34]))((ID3D12Device3*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.Evict" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult Evict(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, uint, ID3D12Pageable*, int>)(lpVtbl[35]))((ID3D12Device3*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.CreateFence" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult CreateFence(ulong InitialValue, FenceFlags Flags, Guid* riid, void** ppFence)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, ulong, FenceFlags, Guid*, void**, int>)(lpVtbl[36]))((ID3D12Device3*)Unsafe.AsPointer(ref this), InitialValue, Flags, riid, ppFence);
	}

	/// <inheritdoc cref="ID3D12Device.GetDeviceRemovedReason" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult GetDeviceRemovedReason()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, int>)(lpVtbl[37]))((ID3D12Device3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.GetCopyableFootprints" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public void GetCopyableFootprints(ResourceDescription* pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device3*, ResourceDescription*, uint, uint, ulong, PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(lpVtbl[38]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
	}

	/// <inheritdoc cref="ID3D12Device.CreateQueryHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult CreateQueryHeap(QueryHeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, QueryHeapDescription*, Guid*, void**, int>)(lpVtbl[39]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.SetStablePowerState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult SetStablePowerState(Bool32 Enable)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, Bool32, int>)(lpVtbl[40]))((ID3D12Device3*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult CreateCommandSignature(CommandSignatureDescription* pDesc, ID3D12RootSignature* pRootSignature, Guid* riid, void** ppvCommandSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, CommandSignatureDescription*, ID3D12RootSignature*, Guid*, void**, int>)(lpVtbl[41]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pDesc, pRootSignature, riid, ppvCommandSignature);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceTiling" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipInfo* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device3*, ID3D12Resource*, uint*, PackedMipInfo*, TileShape*, uint*, uint, SubresourceTiling*, void>)(lpVtbl[42]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
	}

	/// <inheritdoc cref="ID3D12Device.GetAdapterLuid" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public Luid GetAdapterLuid()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, Luid>)(lpVtbl[43]))((ID3D12Device3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, Guid*, uint*, void*, int>)(lpVtbl[44]))((ID3D12Device3*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, Guid*, uint, void*, int>)(lpVtbl[45]))((ID3D12Device3*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, Guid*, IUnknown*, int>)(lpVtbl[46]))((ID3D12Device3*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, char**, int>)(lpVtbl[47]))((ID3D12Device3*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device3::OpenExistingHeapFromAddress"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public HResult OpenExistingHeapFromAddress(void* pAddress, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, void*, Guid*, void**, int>)(lpVtbl[48]))((ID3D12Device3*)Unsafe.AsPointer(ref this), pAddress, riid, ppvHeap);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device3::OpenExistingHeapFromFileMapping"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public HResult OpenExistingHeapFromFileMapping(IntPtr hFileMapping, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, IntPtr, Guid*, void**, int>)(lpVtbl[49]))((ID3D12Device3*)Unsafe.AsPointer(ref this), hFileMapping, riid, ppvHeap);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device3::EnqueueMakeResident"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public HResult EnqueueMakeResident(ResidencyFlags Flags, uint NumObjects, ID3D12Pageable* ppObjects, ID3D12Fence* pFenceToSignal, ulong FenceValueToSignal)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device3*, ResidencyFlags, uint, ID3D12Pageable*, ID3D12Fence*, ulong, int>)(lpVtbl[50]))((ID3D12Device3*)Unsafe.AsPointer(ref this), Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ProtectedSession"]/*' />
/// <unmanaged>ID3D12ProtectedSession</unmanaged>
[Guid("a1533d18-0ac1-4084-85b9-89a96116806b")]
[NativeTypeName("struct ID3D12ProtectedSession : ID3D12DeviceChild")]
[NativeInheritance("ID3D12DeviceChild")]
public unsafe partial struct ID3D12ProtectedSession
{
	public static ref readonly Guid IID_ID3D12ProtectedSession
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x18, 0x3D, 0x53, 0xA1,
				0xC1, 0x0A,
				0x84, 0x40,
				0x85,
				0xB9,
				0x89,
				0xA9,
				0x61,
				0x16,
				0x80,
				0x6B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12ProtectedSession));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedSession*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12ProtectedSession*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedSession*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12ProtectedSession*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedSession*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12ProtectedSession*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedSession*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12ProtectedSession*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedSession*, char**, int>)(lpVtbl[7]))((ID3D12ProtectedSession*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ProtectedSession::GetStatusFence"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetStatusFence(Guid* riid, void** ppFence)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedSession*, Guid*, void**, int>)(lpVtbl[8]))((ID3D12ProtectedSession*)Unsafe.AsPointer(ref this), riid, ppFence);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ProtectedSession::GetSessionStatus"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public Graphics.Direct3D12.ProtectedSessionStatus GetSessionStatus()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedSession*, Graphics.Direct3D12.ProtectedSessionStatus>)(lpVtbl[9]))((ID3D12ProtectedSession*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ProtectedResourceSession"]/*' />
/// <unmanaged>ID3D12ProtectedResourceSession</unmanaged>
[Guid("6cd696f4-f289-40cc-8091-5a6c0a099c3d")]
[NativeTypeName("struct ID3D12ProtectedResourceSession : ID3D12ProtectedSession")]
[NativeInheritance("ID3D12ProtectedSession")]
public unsafe partial struct ID3D12ProtectedResourceSession
{
	public static ref readonly Guid IID_ID3D12ProtectedResourceSession
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF4, 0x96, 0xD6, 0x6C,
				0x89, 0xF2,
				0xCC, 0x40,
				0x80,
				0x91,
				0x5A,
				0x6C,
				0x0A,
				0x09,
				0x9C,
				0x3D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12ProtectedResourceSession));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12ProtectedSession.GetStatusFence" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetStatusFence(Guid* riid, void** ppFence)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12ProtectedResourceSession*)Unsafe.AsPointer(ref this), riid, ppFence);
	}

	/// <inheritdoc cref="ID3D12ProtectedSession.GetSessionStatus" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public Graphics.Direct3D12.ProtectedSessionStatus GetSessionStatus()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession*, Graphics.Direct3D12.ProtectedSessionStatus>)(lpVtbl[4]))((ID3D12ProtectedResourceSession*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[5]))((ID3D12ProtectedResourceSession*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession*, Guid*, uint*, void*, int>)(lpVtbl[6]))((ID3D12ProtectedResourceSession*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession*, Guid*, uint, void*, int>)(lpVtbl[7]))((ID3D12ProtectedResourceSession*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession*, Guid*, IUnknown*, int>)(lpVtbl[8]))((ID3D12ProtectedResourceSession*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession*, char**, int>)(lpVtbl[9]))((ID3D12ProtectedResourceSession*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ProtectedResourceSession::GetDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public Graphics.Direct3D12.ProtectedResourceSessionDescription GetDesc()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession*, Graphics.Direct3D12.ProtectedResourceSessionDescription>)(lpVtbl[10]))((ID3D12ProtectedResourceSession*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device4"]/*' />
/// <unmanaged>ID3D12Device4</unmanaged>
[Guid("e865df17-a9ee-46f9-a463-3098315aa2e5")]
[NativeTypeName("struct ID3D12Device4 : ID3D12Device3")]
[NativeInheritance("ID3D12Device3")]
public unsafe partial struct ID3D12Device4
{
	public static ref readonly Guid IID_ID3D12Device4
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x17, 0xDF, 0x65, 0xE8,
				0xEE, 0xA9,
				0xF9, 0x46,
				0xA4,
				0x63,
				0x30,
				0x98,
				0x31,
				0x5A,
				0xA2,
				0xE5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Device4));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device3.OpenExistingHeapFromAddress" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult OpenExistingHeapFromAddress(void* pAddress, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, void*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pAddress, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device3.OpenExistingHeapFromFileMapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult OpenExistingHeapFromFileMapping(IntPtr hFileMapping, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, IntPtr, Guid*, void**, int>)(lpVtbl[4]))((ID3D12Device4*)Unsafe.AsPointer(ref this), hFileMapping, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device3.EnqueueMakeResident" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult EnqueueMakeResident(ResidencyFlags Flags, uint NumObjects, ID3D12Pageable* ppObjects, ID3D12Fence* pFenceToSignal, ulong FenceValueToSignal)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, ResidencyFlags, uint, ID3D12Pageable*, ID3D12Fence*, ulong, int>)(lpVtbl[5]))((ID3D12Device4*)Unsafe.AsPointer(ref this), Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal);
	}

	/// <inheritdoc cref="ID3D12Device2.CreatePipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CreatePipelineState(PipelineStateStreamDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, PipelineStateStreamDescription*, Guid*, void**, int>)(lpVtbl[6]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device1.CreatePipelineLibrary" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CreatePipelineLibrary(void* pLibraryBlob, nuint BlobLength, Guid* riid, void** ppPipelineLibrary)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, void*, nuint, Guid*, void**, int>)(lpVtbl[7]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
	}

	/// <inheritdoc cref="ID3D12Device1.SetEventOnMultipleFenceCompletion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetEventOnMultipleFenceCompletion(ID3D12Fence* ppFences, ulong* pFenceValues, uint NumFences, MultipleFenceWaitFlags Flags, IntPtr hEvent)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, ID3D12Fence*, ulong*, uint, MultipleFenceWaitFlags, IntPtr, int>)(lpVtbl[8]))((ID3D12Device4*)Unsafe.AsPointer(ref this), ppFences, pFenceValues, NumFences, Flags, hEvent);
	}

	/// <inheritdoc cref="ID3D12Device1.SetResidencyPriority" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetResidencyPriority(uint NumObjects, ID3D12Pageable* ppObjects, ResidencyPriority* pPriorities)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, ID3D12Pageable*, ResidencyPriority*, int>)(lpVtbl[9]))((ID3D12Device4*)Unsafe.AsPointer(ref this), NumObjects, ppObjects, pPriorities);
	}

	/// <inheritdoc cref="ID3D12Device.GetNodeCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public uint GetNodeCount()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint>)(lpVtbl[10]))((ID3D12Device4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandQueue" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CreateCommandQueue(CommandQueueDescription* pDesc, Guid* riid, void** ppCommandQueue)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, CommandQueueDescription*, Guid*, void**, int>)(lpVtbl[11]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pDesc, riid, ppCommandQueue);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandAllocator" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CreateCommandAllocator(CommandListType type, Guid* riid, void** ppCommandAllocator)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, CommandListType, Guid*, void**, int>)(lpVtbl[12]))((ID3D12Device4*)Unsafe.AsPointer(ref this), type, riid, ppCommandAllocator);
	}

	/// <inheritdoc cref="ID3D12Device.CreateGraphicsPipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult CreateGraphicsPipelineState(GraphicsPipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, GraphicsPipelineStateDescription*, Guid*, void**, int>)(lpVtbl[13]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateComputePipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult CreateComputePipelineState(ComputePipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, ComputePipelineStateDescription*, Guid*, void**, int>)(lpVtbl[14]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandList" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult CreateCommandList(uint nodeMask, CommandListType type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, Guid* riid, void** ppCommandList)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, int>)(lpVtbl[15]))((ID3D12Device4*)Unsafe.AsPointer(ref this), nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
	}

	/// <inheritdoc cref="ID3D12Device.CheckFeatureSupport" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult CheckFeatureSupport(Feature Feature, void* pFeatureSupportData, uint FeatureSupportDataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, Feature, void*, uint, int>)(lpVtbl[16]))((ID3D12Device4*)Unsafe.AsPointer(ref this), Feature, pFeatureSupportData, FeatureSupportDataSize);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDescriptorHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult CreateDescriptorHeap(DescriptorHeapDescription* pDescriptorHeapDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, DescriptorHeapDescription*, Guid*, void**, int>)(lpVtbl[17]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pDescriptorHeapDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.GetDescriptorHandleIncrementSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public uint GetDescriptorHandleIncrementSize(DescriptorHeapType DescriptorHeapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, DescriptorHeapType, uint>)(lpVtbl[18]))((ID3D12Device4*)Unsafe.AsPointer(ref this), DescriptorHeapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult CreateRootSignature(uint nodeMask, void* pBlobWithRootSignature, nuint blobLengthInBytes, Guid* riid, void** ppvRootSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, void*, nuint, Guid*, void**, int>)(lpVtbl[19]))((ID3D12Device4*)Unsafe.AsPointer(ref this), nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
	}

	/// <inheritdoc cref="ID3D12Device.CreateConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public void CreateConstantBufferView(ConstantBufferViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device4*, ConstantBufferViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[20]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public void CreateShaderResourceView(ID3D12Resource* pResource, ShaderResourceViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device4*, ID3D12Resource*, ShaderResourceViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[21]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public void CreateUnorderedAccessView(ID3D12Resource* pResource, ID3D12Resource* pCounterResource, UnorderedAccessViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device4*, ID3D12Resource*, ID3D12Resource*, UnorderedAccessViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[22]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pResource, pCounterResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRenderTargetView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public void CreateRenderTargetView(ID3D12Resource* pResource, RenderTargetViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device4*, ID3D12Resource*, RenderTargetViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[23]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDepthStencilView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public void CreateDepthStencilView(ID3D12Resource* pResource, DepthStencilViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device4*, ID3D12Resource*, DepthStencilViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[24]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSampler" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public void CreateSampler(SamplerDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device4*, SamplerDescription*, CpuDescriptorHandle*, void>)(lpVtbl[25]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptors" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public void CopyDescriptors(uint NumDestDescriptorRanges, CpuDescriptorHandle* pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint NumSrcDescriptorRanges, CpuDescriptorHandle* pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, CpuDescriptorHandle*, uint*, uint, CpuDescriptorHandle*, uint*, DescriptorHeapType, void>)(lpVtbl[26]))((ID3D12Device4*)Unsafe.AsPointer(ref this), NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptorsSimple" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public void CopyDescriptorsSimple(uint NumDescriptors, CpuDescriptorHandle* DestDescriptorRangeStart, CpuDescriptorHandle* SrcDescriptorRangeStart, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, CpuDescriptorHandle*, CpuDescriptorHandle*, DescriptorHeapType, void>)(lpVtbl[27]))((ID3D12Device4*)Unsafe.AsPointer(ref this), NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceAllocationInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo(uint visibleMask, uint numResourceDescs, ResourceDescription* pResourceDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, uint, ResourceDescription*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[28]))((ID3D12Device4*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs);
	}

	/// <inheritdoc cref="ID3D12Device.GetCustomHeapProperties" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public Graphics.Direct3D12.HeapProperties GetCustomHeapProperties(uint nodeMask, HeapType heapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, HeapType, Graphics.Direct3D12.HeapProperties>)(lpVtbl[29]))((ID3D12Device4*)Unsafe.AsPointer(ref this), nodeMask, heapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommittedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult CreateCommittedResource(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, HeapProperties*, HeapFlags, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[30]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult CreateHeap(HeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, HeapDescription*, Guid*, void**, int>)(lpVtbl[31]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.CreatePlacedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong HeapOffset, ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, ID3D12Heap*, ulong, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[32]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateReservedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult CreateReservedResource(ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[33]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult CreateSharedHandle(ID3D12DeviceChild* pObject, Security.SECURITY_ATTRIBUTES* pAttributes, uint Access, char** Name, IntPtr* pHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, ID3D12DeviceChild*, Security.SECURITY_ATTRIBUTES*, uint, char**, IntPtr*, int>)(lpVtbl[34]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pObject, pAttributes, Access, Name, pHandle);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult OpenSharedHandle(IntPtr NTHandle, Guid* riid, void** ppvObj)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, IntPtr, Guid*, void**, int>)(lpVtbl[35]))((ID3D12Device4*)Unsafe.AsPointer(ref this), NTHandle, riid, ppvObj);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandleByName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult OpenSharedHandleByName(char** Name, uint Access, IntPtr* pNTHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, char**, uint, IntPtr*, int>)(lpVtbl[36]))((ID3D12Device4*)Unsafe.AsPointer(ref this), Name, Access, pNTHandle);
	}

	/// <inheritdoc cref="ID3D12Device.MakeResident" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult MakeResident(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, ID3D12Pageable*, int>)(lpVtbl[37]))((ID3D12Device4*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.Evict" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult Evict(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, ID3D12Pageable*, int>)(lpVtbl[38]))((ID3D12Device4*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.CreateFence" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult CreateFence(ulong InitialValue, FenceFlags Flags, Guid* riid, void** ppFence)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, ulong, FenceFlags, Guid*, void**, int>)(lpVtbl[39]))((ID3D12Device4*)Unsafe.AsPointer(ref this), InitialValue, Flags, riid, ppFence);
	}

	/// <inheritdoc cref="ID3D12Device.GetDeviceRemovedReason" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult GetDeviceRemovedReason()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, int>)(lpVtbl[40]))((ID3D12Device4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.GetCopyableFootprints" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public void GetCopyableFootprints(ResourceDescription* pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device4*, ResourceDescription*, uint, uint, ulong, PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(lpVtbl[41]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
	}

	/// <inheritdoc cref="ID3D12Device.CreateQueryHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public HResult CreateQueryHeap(QueryHeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, QueryHeapDescription*, Guid*, void**, int>)(lpVtbl[42]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.SetStablePowerState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public HResult SetStablePowerState(Bool32 Enable)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, Bool32, int>)(lpVtbl[43]))((ID3D12Device4*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public HResult CreateCommandSignature(CommandSignatureDescription* pDesc, ID3D12RootSignature* pRootSignature, Guid* riid, void** ppvCommandSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, CommandSignatureDescription*, ID3D12RootSignature*, Guid*, void**, int>)(lpVtbl[44]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pDesc, pRootSignature, riid, ppvCommandSignature);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceTiling" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipInfo* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device4*, ID3D12Resource*, uint*, PackedMipInfo*, TileShape*, uint*, uint, SubresourceTiling*, void>)(lpVtbl[45]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
	}

	/// <inheritdoc cref="ID3D12Device.GetAdapterLuid" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public Luid GetAdapterLuid()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, Luid>)(lpVtbl[46]))((ID3D12Device4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, Guid*, uint*, void*, int>)(lpVtbl[47]))((ID3D12Device4*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, Guid*, uint, void*, int>)(lpVtbl[48]))((ID3D12Device4*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, Guid*, IUnknown*, int>)(lpVtbl[49]))((ID3D12Device4*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, char**, int>)(lpVtbl[50]))((ID3D12Device4*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device4::CreateCommandList1"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public HResult CreateCommandList1(uint nodeMask, CommandListType type, CommandListFlags flags, Guid* riid, void** ppCommandList)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, CommandListType, CommandListFlags, Guid*, void**, int>)(lpVtbl[51]))((ID3D12Device4*)Unsafe.AsPointer(ref this), nodeMask, type, flags, riid, ppCommandList);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device4::CreateProtectedResourceSession"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public HResult CreateProtectedResourceSession(ProtectedResourceSessionDescription* pDesc, Guid* riid, void** ppSession)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, ProtectedResourceSessionDescription*, Guid*, void**, int>)(lpVtbl[52]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pDesc, riid, ppSession);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device4::CreateCommittedResource1"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public HResult CreateCommittedResource1(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, HeapProperties*, HeapFlags, ResourceDescription*, ResourceStates, ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[53]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device4::CreateHeap1"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public HResult CreateHeap1(HeapDescription* pDesc, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, HeapDescription*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[54]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pDesc, pProtectedSession, riid, ppvHeap);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device4::CreateReservedResource1"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public HResult CreateReservedResource1(ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, ResourceDescription*, ResourceStates, ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[55]))((ID3D12Device4*)Unsafe.AsPointer(ref this), pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device4::GetResourceAllocationInfo1"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo1(uint visibleMask, uint numResourceDescs, ResourceDescription* pResourceDescs, ResourceAllocationInfo1* pResourceAllocationInfo1)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, uint, ResourceDescription*, ResourceAllocationInfo1*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[56]))((ID3D12Device4*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12LifetimeOwner"]/*' />
/// <unmanaged>ID3D12LifetimeOwner</unmanaged>
[Guid("e667af9f-cd56-4f46-83ce-032e595d70a8")]
[NativeTypeName("struct ID3D12LifetimeOwner : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12LifetimeOwner
{
	public static ref readonly Guid IID_ID3D12LifetimeOwner
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x9F, 0xAF, 0x67, 0xE6,
				0x56, 0xCD,
				0x46, 0x4F,
				0x83,
				0xCE,
				0x03,
				0x2E,
				0x59,
				0x5D,
				0x70,
				0xA8
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12LifetimeOwner));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12LifetimeOwner::LifetimeStateUpdated"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void LifetimeStateUpdated(LifetimeState NewState)
	{
		((delegate* unmanaged[Stdcall]<ID3D12LifetimeOwner*, LifetimeState, void>)(lpVtbl[3]))((ID3D12LifetimeOwner*)Unsafe.AsPointer(ref this), NewState);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12SwapChainAssistant"]/*' />
/// <unmanaged>ID3D12SwapChainAssistant</unmanaged>
[Guid("f1df64b6-57fd-49cd-8807-c0eb88b45c8f")]
[NativeTypeName("struct ID3D12SwapChainAssistant : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12SwapChainAssistant
{
	public static ref readonly Guid IID_ID3D12SwapChainAssistant
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB6, 0x64, 0xDF, 0xF1,
				0xFD, 0x57,
				0xCD, 0x49,
				0x88,
				0x07,
				0xC0,
				0xEB,
				0x88,
				0xB4,
				0x5C,
				0x8F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12SwapChainAssistant));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12SwapChainAssistant::GetLUID"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public Luid GetLUID()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12SwapChainAssistant*, Luid>)(lpVtbl[3]))((ID3D12SwapChainAssistant*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12SwapChainAssistant::GetSwapChainObject"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetSwapChainObject(Guid* riid, void** ppv)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12SwapChainAssistant*, Guid*, void**, int>)(lpVtbl[4]))((ID3D12SwapChainAssistant*)Unsafe.AsPointer(ref this), riid, ppv);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12SwapChainAssistant::GetCurrentResourceAndCommandQueue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetCurrentResourceAndCommandQueue(Guid* riidResource, void** ppvResource, Guid* riidQueue, void** ppvQueue)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12SwapChainAssistant*, Guid*, void**, Guid*, void**, int>)(lpVtbl[5]))((ID3D12SwapChainAssistant*)Unsafe.AsPointer(ref this), riidResource, ppvResource, riidQueue, ppvQueue);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12SwapChainAssistant::InsertImplicitSync"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult InsertImplicitSync()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12SwapChainAssistant*, int>)(lpVtbl[6]))((ID3D12SwapChainAssistant*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12LifetimeTracker"]/*' />
/// <unmanaged>ID3D12LifetimeTracker</unmanaged>
[Guid("3fd03d36-4eb1-424a-a582-494ecb8ba813")]
[NativeTypeName("struct ID3D12LifetimeTracker : ID3D12DeviceChild")]
[NativeInheritance("ID3D12DeviceChild")]
public unsafe partial struct ID3D12LifetimeTracker
{
	public static ref readonly Guid IID_ID3D12LifetimeTracker
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x36, 0x3D, 0xD0, 0x3F,
				0xB1, 0x4E,
				0x4A, 0x42,
				0xA5,
				0x82,
				0x49,
				0x4E,
				0xCB,
				0x8B,
				0xA8,
				0x13
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12LifetimeTracker));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12LifetimeTracker*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12LifetimeTracker*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12LifetimeTracker*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12LifetimeTracker*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12LifetimeTracker*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12LifetimeTracker*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12LifetimeTracker*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12LifetimeTracker*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12LifetimeTracker*, char**, int>)(lpVtbl[7]))((ID3D12LifetimeTracker*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12LifetimeTracker::DestroyOwnedObject"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult DestroyOwnedObject(ID3D12DeviceChild* pObject)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12LifetimeTracker*, ID3D12DeviceChild*, int>)(lpVtbl[8]))((ID3D12LifetimeTracker*)Unsafe.AsPointer(ref this), pObject);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12StateObject"]/*' />
/// <unmanaged>ID3D12StateObject</unmanaged>
[Guid("47016943-fca8-4594-93ea-af258b55346d")]
[NativeTypeName("struct ID3D12StateObject : ID3D12Pageable")]
[NativeInheritance("ID3D12Pageable")]
public unsafe partial struct ID3D12StateObject
{
	public static ref readonly Guid IID_ID3D12StateObject
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x43, 0x69, 0x01, 0x47,
				0xA8, 0xFC,
				0x94, 0x45,
				0x93,
				0xEA,
				0xAF,
				0x25,
				0x8B,
				0x55,
				0x34,
				0x6D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12StateObject));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12StateObject*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12StateObject*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12StateObject*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12StateObject*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12StateObject*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12StateObject*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12StateObject*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12StateObject*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12StateObject*, char**, int>)(lpVtbl[7]))((ID3D12StateObject*)Unsafe.AsPointer(ref this), Name);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12StateObjectProperties"]/*' />
/// <unmanaged>ID3D12StateObjectProperties</unmanaged>
[Guid("de5fa827-9bf9-4f26-89ff-d7f56fde3860")]
[NativeTypeName("struct ID3D12StateObjectProperties : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12StateObjectProperties
{
	public static ref readonly Guid IID_ID3D12StateObjectProperties
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x27, 0xA8, 0x5F, 0xDE,
				0xF9, 0x9B,
				0x26, 0x4F,
				0x89,
				0xFF,
				0xD7,
				0xF5,
				0x6F,
				0xDE,
				0x38,
				0x60
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12StateObjectProperties));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12StateObjectProperties::GetShaderIdentifier"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void* GetShaderIdentifier(char** pExportName)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12StateObjectProperties*, char**, void*>)(lpVtbl[3]))((ID3D12StateObjectProperties*)Unsafe.AsPointer(ref this), pExportName);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12StateObjectProperties::GetShaderStackSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public ulong GetShaderStackSize(char** pExportName)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12StateObjectProperties*, char**, ulong>)(lpVtbl[4]))((ID3D12StateObjectProperties*)Unsafe.AsPointer(ref this), pExportName);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12StateObjectProperties::GetPipelineStackSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public ulong GetPipelineStackSize()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12StateObjectProperties*, ulong>)(lpVtbl[5]))((ID3D12StateObjectProperties*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12StateObjectProperties::SetPipelineStackSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public void SetPipelineStackSize(ulong PipelineStackSizeInBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12StateObjectProperties*, ulong, void>)(lpVtbl[6]))((ID3D12StateObjectProperties*)Unsafe.AsPointer(ref this), PipelineStackSizeInBytes);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device5"]/*' />
/// <unmanaged>ID3D12Device5</unmanaged>
[Guid("8b4f173b-2fea-4b80-8f58-4307191ab95d")]
[NativeTypeName("struct ID3D12Device5 : ID3D12Device4")]
[NativeInheritance("ID3D12Device4")]
public unsafe partial struct ID3D12Device5
{
	public static ref readonly Guid IID_ID3D12Device5
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3B, 0x17, 0x4F, 0x8B,
				0xEA, 0x2F,
				0x80, 0x4B,
				0x8F,
				0x58,
				0x43,
				0x07,
				0x19,
				0x1A,
				0xB9,
				0x5D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Device5));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device4.CreateCommandList1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreateCommandList1(uint nodeMask, CommandListType type, CommandListFlags flags, Guid* riid, void** ppCommandList)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint, CommandListType, CommandListFlags, Guid*, void**, int>)(lpVtbl[3]))((ID3D12Device5*)Unsafe.AsPointer(ref this), nodeMask, type, flags, riid, ppCommandList);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateProtectedResourceSession" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateProtectedResourceSession(ProtectedResourceSessionDescription* pDesc, Guid* riid, void** ppSession)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, ProtectedResourceSessionDescription*, Guid*, void**, int>)(lpVtbl[4]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pDesc, riid, ppSession);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateCommittedResource1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult CreateCommittedResource1(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, HeapProperties*, HeapFlags, ResourceDescription*, ResourceStates, ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[5]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateHeap1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CreateHeap1(HeapDescription* pDesc, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, HeapDescription*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[6]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pDesc, pProtectedSession, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateReservedResource1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CreateReservedResource1(ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, ResourceDescription*, ResourceStates, ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[7]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device4.GetResourceAllocationInfo1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo1(uint visibleMask, uint numResourceDescs, ResourceDescription* pResourceDescs, ResourceAllocationInfo1* pResourceAllocationInfo1)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint, uint, ResourceDescription*, ResourceAllocationInfo1*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[8]))((ID3D12Device5*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
	}

	/// <inheritdoc cref="ID3D12Device3.OpenExistingHeapFromAddress" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult OpenExistingHeapFromAddress(void* pAddress, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, void*, Guid*, void**, int>)(lpVtbl[9]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pAddress, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device3.OpenExistingHeapFromFileMapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult OpenExistingHeapFromFileMapping(IntPtr hFileMapping, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, IntPtr, Guid*, void**, int>)(lpVtbl[10]))((ID3D12Device5*)Unsafe.AsPointer(ref this), hFileMapping, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device3.EnqueueMakeResident" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult EnqueueMakeResident(ResidencyFlags Flags, uint NumObjects, ID3D12Pageable* ppObjects, ID3D12Fence* pFenceToSignal, ulong FenceValueToSignal)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, ResidencyFlags, uint, ID3D12Pageable*, ID3D12Fence*, ulong, int>)(lpVtbl[11]))((ID3D12Device5*)Unsafe.AsPointer(ref this), Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal);
	}

	/// <inheritdoc cref="ID3D12Device2.CreatePipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CreatePipelineState(PipelineStateStreamDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, PipelineStateStreamDescription*, Guid*, void**, int>)(lpVtbl[12]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device1.CreatePipelineLibrary" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult CreatePipelineLibrary(void* pLibraryBlob, nuint BlobLength, Guid* riid, void** ppPipelineLibrary)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, void*, nuint, Guid*, void**, int>)(lpVtbl[13]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
	}

	/// <inheritdoc cref="ID3D12Device1.SetEventOnMultipleFenceCompletion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult SetEventOnMultipleFenceCompletion(ID3D12Fence* ppFences, ulong* pFenceValues, uint NumFences, MultipleFenceWaitFlags Flags, IntPtr hEvent)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, ID3D12Fence*, ulong*, uint, MultipleFenceWaitFlags, IntPtr, int>)(lpVtbl[14]))((ID3D12Device5*)Unsafe.AsPointer(ref this), ppFences, pFenceValues, NumFences, Flags, hEvent);
	}

	/// <inheritdoc cref="ID3D12Device1.SetResidencyPriority" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult SetResidencyPriority(uint NumObjects, ID3D12Pageable* ppObjects, ResidencyPriority* pPriorities)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint, ID3D12Pageable*, ResidencyPriority*, int>)(lpVtbl[15]))((ID3D12Device5*)Unsafe.AsPointer(ref this), NumObjects, ppObjects, pPriorities);
	}

	/// <inheritdoc cref="ID3D12Device.GetNodeCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public uint GetNodeCount()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint>)(lpVtbl[16]))((ID3D12Device5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandQueue" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult CreateCommandQueue(CommandQueueDescription* pDesc, Guid* riid, void** ppCommandQueue)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, CommandQueueDescription*, Guid*, void**, int>)(lpVtbl[17]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pDesc, riid, ppCommandQueue);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandAllocator" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult CreateCommandAllocator(CommandListType type, Guid* riid, void** ppCommandAllocator)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, CommandListType, Guid*, void**, int>)(lpVtbl[18]))((ID3D12Device5*)Unsafe.AsPointer(ref this), type, riid, ppCommandAllocator);
	}

	/// <inheritdoc cref="ID3D12Device.CreateGraphicsPipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult CreateGraphicsPipelineState(GraphicsPipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, GraphicsPipelineStateDescription*, Guid*, void**, int>)(lpVtbl[19]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateComputePipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult CreateComputePipelineState(ComputePipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, ComputePipelineStateDescription*, Guid*, void**, int>)(lpVtbl[20]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandList" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult CreateCommandList(uint nodeMask, CommandListType type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, Guid* riid, void** ppCommandList)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint, CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, int>)(lpVtbl[21]))((ID3D12Device5*)Unsafe.AsPointer(ref this), nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
	}

	/// <inheritdoc cref="ID3D12Device.CheckFeatureSupport" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult CheckFeatureSupport(Feature Feature, void* pFeatureSupportData, uint FeatureSupportDataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Feature, void*, uint, int>)(lpVtbl[22]))((ID3D12Device5*)Unsafe.AsPointer(ref this), Feature, pFeatureSupportData, FeatureSupportDataSize);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDescriptorHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult CreateDescriptorHeap(DescriptorHeapDescription* pDescriptorHeapDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, DescriptorHeapDescription*, Guid*, void**, int>)(lpVtbl[23]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pDescriptorHeapDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.GetDescriptorHandleIncrementSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public uint GetDescriptorHandleIncrementSize(DescriptorHeapType DescriptorHeapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, DescriptorHeapType, uint>)(lpVtbl[24]))((ID3D12Device5*)Unsafe.AsPointer(ref this), DescriptorHeapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult CreateRootSignature(uint nodeMask, void* pBlobWithRootSignature, nuint blobLengthInBytes, Guid* riid, void** ppvRootSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint, void*, nuint, Guid*, void**, int>)(lpVtbl[25]))((ID3D12Device5*)Unsafe.AsPointer(ref this), nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
	}

	/// <inheritdoc cref="ID3D12Device.CreateConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public void CreateConstantBufferView(ConstantBufferViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device5*, ConstantBufferViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[26]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public void CreateShaderResourceView(ID3D12Resource* pResource, ShaderResourceViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device5*, ID3D12Resource*, ShaderResourceViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[27]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public void CreateUnorderedAccessView(ID3D12Resource* pResource, ID3D12Resource* pCounterResource, UnorderedAccessViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device5*, ID3D12Resource*, ID3D12Resource*, UnorderedAccessViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[28]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pResource, pCounterResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRenderTargetView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public void CreateRenderTargetView(ID3D12Resource* pResource, RenderTargetViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device5*, ID3D12Resource*, RenderTargetViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[29]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDepthStencilView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public void CreateDepthStencilView(ID3D12Resource* pResource, DepthStencilViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device5*, ID3D12Resource*, DepthStencilViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[30]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSampler" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public void CreateSampler(SamplerDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device5*, SamplerDescription*, CpuDescriptorHandle*, void>)(lpVtbl[31]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptors" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public void CopyDescriptors(uint NumDestDescriptorRanges, CpuDescriptorHandle* pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint NumSrcDescriptorRanges, CpuDescriptorHandle* pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint, CpuDescriptorHandle*, uint*, uint, CpuDescriptorHandle*, uint*, DescriptorHeapType, void>)(lpVtbl[32]))((ID3D12Device5*)Unsafe.AsPointer(ref this), NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptorsSimple" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public void CopyDescriptorsSimple(uint NumDescriptors, CpuDescriptorHandle* DestDescriptorRangeStart, CpuDescriptorHandle* SrcDescriptorRangeStart, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint, CpuDescriptorHandle*, CpuDescriptorHandle*, DescriptorHeapType, void>)(lpVtbl[33]))((ID3D12Device5*)Unsafe.AsPointer(ref this), NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceAllocationInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo(uint visibleMask, uint numResourceDescs, ResourceDescription* pResourceDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint, uint, ResourceDescription*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[34]))((ID3D12Device5*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs);
	}

	/// <inheritdoc cref="ID3D12Device.GetCustomHeapProperties" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public Graphics.Direct3D12.HeapProperties GetCustomHeapProperties(uint nodeMask, HeapType heapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint, HeapType, Graphics.Direct3D12.HeapProperties>)(lpVtbl[35]))((ID3D12Device5*)Unsafe.AsPointer(ref this), nodeMask, heapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommittedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult CreateCommittedResource(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, HeapProperties*, HeapFlags, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[36]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult CreateHeap(HeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, HeapDescription*, Guid*, void**, int>)(lpVtbl[37]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.CreatePlacedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong HeapOffset, ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, ID3D12Heap*, ulong, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[38]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateReservedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult CreateReservedResource(ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[39]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public HResult CreateSharedHandle(ID3D12DeviceChild* pObject, Security.SECURITY_ATTRIBUTES* pAttributes, uint Access, char** Name, IntPtr* pHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, ID3D12DeviceChild*, Security.SECURITY_ATTRIBUTES*, uint, char**, IntPtr*, int>)(lpVtbl[40]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pObject, pAttributes, Access, Name, pHandle);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult OpenSharedHandle(IntPtr NTHandle, Guid* riid, void** ppvObj)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, IntPtr, Guid*, void**, int>)(lpVtbl[41]))((ID3D12Device5*)Unsafe.AsPointer(ref this), NTHandle, riid, ppvObj);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandleByName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public HResult OpenSharedHandleByName(char** Name, uint Access, IntPtr* pNTHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, char**, uint, IntPtr*, int>)(lpVtbl[42]))((ID3D12Device5*)Unsafe.AsPointer(ref this), Name, Access, pNTHandle);
	}

	/// <inheritdoc cref="ID3D12Device.MakeResident" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public HResult MakeResident(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint, ID3D12Pageable*, int>)(lpVtbl[43]))((ID3D12Device5*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.Evict" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public HResult Evict(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint, ID3D12Pageable*, int>)(lpVtbl[44]))((ID3D12Device5*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.CreateFence" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public HResult CreateFence(ulong InitialValue, FenceFlags Flags, Guid* riid, void** ppFence)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, ulong, FenceFlags, Guid*, void**, int>)(lpVtbl[45]))((ID3D12Device5*)Unsafe.AsPointer(ref this), InitialValue, Flags, riid, ppFence);
	}

	/// <inheritdoc cref="ID3D12Device.GetDeviceRemovedReason" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public HResult GetDeviceRemovedReason()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, int>)(lpVtbl[46]))((ID3D12Device5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.GetCopyableFootprints" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public void GetCopyableFootprints(ResourceDescription* pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device5*, ResourceDescription*, uint, uint, ulong, PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(lpVtbl[47]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
	}

	/// <inheritdoc cref="ID3D12Device.CreateQueryHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public HResult CreateQueryHeap(QueryHeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, QueryHeapDescription*, Guid*, void**, int>)(lpVtbl[48]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.SetStablePowerState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public HResult SetStablePowerState(Bool32 Enable)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Bool32, int>)(lpVtbl[49]))((ID3D12Device5*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public HResult CreateCommandSignature(CommandSignatureDescription* pDesc, ID3D12RootSignature* pRootSignature, Guid* riid, void** ppvCommandSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, CommandSignatureDescription*, ID3D12RootSignature*, Guid*, void**, int>)(lpVtbl[50]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pDesc, pRootSignature, riid, ppvCommandSignature);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceTiling" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipInfo* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device5*, ID3D12Resource*, uint*, PackedMipInfo*, TileShape*, uint*, uint, SubresourceTiling*, void>)(lpVtbl[51]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
	}

	/// <inheritdoc cref="ID3D12Device.GetAdapterLuid" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public Luid GetAdapterLuid()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Luid>)(lpVtbl[52]))((ID3D12Device5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, uint*, void*, int>)(lpVtbl[53]))((ID3D12Device5*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, uint, void*, int>)(lpVtbl[54]))((ID3D12Device5*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, IUnknown*, int>)(lpVtbl[55]))((ID3D12Device5*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, char**, int>)(lpVtbl[56]))((ID3D12Device5*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device5::CreateLifetimeTracker"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public HResult CreateLifetimeTracker(ID3D12LifetimeOwner* pOwner, Guid* riid, void** ppvTracker)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, ID3D12LifetimeOwner*, Guid*, void**, int>)(lpVtbl[57]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pOwner, riid, ppvTracker);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device5::RemoveDevice"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public void RemoveDevice()
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device5*, void>)(lpVtbl[58]))((ID3D12Device5*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device5::EnumerateMetaCommands"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public HResult EnumerateMetaCommands(uint* pNumMetaCommands, MetaCommandDescription* pDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint*, MetaCommandDescription*, int>)(lpVtbl[59]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pNumMetaCommands, pDescs);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device5::EnumerateMetaCommandParameters"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(60)]
	public HResult EnumerateMetaCommandParameters(Guid* CommandId, MetaCommandParameterStage Stage, uint* pTotalStructureSizeInBytes, uint* pParameterCount, MetaCommandParameterDescription* pParameterDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, MetaCommandParameterStage, uint*, uint*, MetaCommandParameterDescription*, int>)(lpVtbl[60]))((ID3D12Device5*)Unsafe.AsPointer(ref this), CommandId, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device5::CreateMetaCommand"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(61)]
	public HResult CreateMetaCommand(Guid* CommandId, uint NodeMask, void* pCreationParametersData, nuint CreationParametersDataSizeInBytes, Guid* riid, void** ppMetaCommand)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, uint, void*, nuint, Guid*, void**, int>)(lpVtbl[61]))((ID3D12Device5*)Unsafe.AsPointer(ref this), CommandId, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device5::CreateStateObject"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(62)]
	public HResult CreateStateObject(StateObjectDescription* pDesc, Guid* riid, void** ppStateObject)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, StateObjectDescription*, Guid*, void**, int>)(lpVtbl[62]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pDesc, riid, ppStateObject);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device5::GetRaytracingAccelerationStructurePrebuildInfo"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(63)]
	public void GetRaytracingAccelerationStructurePrebuildInfo(BuildRaytracingAccelerationStructureInputs* pDesc, RaytracingAccelerationStructurePrebuildInfo* pInfo)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device5*, BuildRaytracingAccelerationStructureInputs*, RaytracingAccelerationStructurePrebuildInfo*, void>)(lpVtbl[63]))((ID3D12Device5*)Unsafe.AsPointer(ref this), pDesc, pInfo);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device5::CheckDriverMatchingIdentifier"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(64)]
	public Graphics.Direct3D12.DriverMatchingIdentifierStatus CheckDriverMatchingIdentifier(SerializedDataType SerializedDataType, SerializedDataDriverMatchingIdentifier* pIdentifierToCheck)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device5*, SerializedDataType, SerializedDataDriverMatchingIdentifier*, Graphics.Direct3D12.DriverMatchingIdentifierStatus>)(lpVtbl[64]))((ID3D12Device5*)Unsafe.AsPointer(ref this), SerializedDataType, pIdentifierToCheck);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceRemovedExtendedDataSettings"]/*' />
/// <unmanaged>ID3D12DeviceRemovedExtendedDataSettings</unmanaged>
[Guid("82bc481c-6b9b-4030-aedb-7ee3d1df1e63")]
[NativeTypeName("struct ID3D12DeviceRemovedExtendedDataSettings : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12DeviceRemovedExtendedDataSettings
{
	public static ref readonly Guid IID_ID3D12DeviceRemovedExtendedDataSettings
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1C, 0x48, 0xBC, 0x82,
				0x9B, 0x6B,
				0x30, 0x40,
				0xAE,
				0xDB,
				0x7E,
				0xE3,
				0xD1,
				0xDF,
				0x1E,
				0x63
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12DeviceRemovedExtendedDataSettings));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceRemovedExtendedDataSettings::SetAutoBreadcrumbsEnablement"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void SetAutoBreadcrumbsEnablement(DredEnablement Enablement)
	{
		((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedDataSettings*, DredEnablement, void>)(lpVtbl[3]))((ID3D12DeviceRemovedExtendedDataSettings*)Unsafe.AsPointer(ref this), Enablement);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceRemovedExtendedDataSettings::SetPageFaultEnablement"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void SetPageFaultEnablement(DredEnablement Enablement)
	{
		((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedDataSettings*, DredEnablement, void>)(lpVtbl[4]))((ID3D12DeviceRemovedExtendedDataSettings*)Unsafe.AsPointer(ref this), Enablement);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceRemovedExtendedDataSettings::SetWatsonDumpEnablement"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void SetWatsonDumpEnablement(DredEnablement Enablement)
	{
		((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedDataSettings*, DredEnablement, void>)(lpVtbl[5]))((ID3D12DeviceRemovedExtendedDataSettings*)Unsafe.AsPointer(ref this), Enablement);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceRemovedExtendedDataSettings1"]/*' />
/// <unmanaged>ID3D12DeviceRemovedExtendedDataSettings1</unmanaged>
[Guid("dbd5ae51-3317-4f0a-adf9-1d7cedcaae0b")]
[NativeTypeName("struct ID3D12DeviceRemovedExtendedDataSettings1 : ID3D12DeviceRemovedExtendedDataSettings")]
[NativeInheritance("ID3D12DeviceRemovedExtendedDataSettings")]
public unsafe partial struct ID3D12DeviceRemovedExtendedDataSettings1
{
	public static ref readonly Guid IID_ID3D12DeviceRemovedExtendedDataSettings1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x51, 0xAE, 0xD5, 0xDB,
				0x17, 0x33,
				0x0A, 0x4F,
				0xAD,
				0xF9,
				0x1D,
				0x7C,
				0xED,
				0xCA,
				0xAE,
				0x0B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12DeviceRemovedExtendedDataSettings1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceRemovedExtendedDataSettings.SetAutoBreadcrumbsEnablement" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void SetAutoBreadcrumbsEnablement(DredEnablement Enablement)
	{
		((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedDataSettings1*, DredEnablement, void>)(lpVtbl[3]))((ID3D12DeviceRemovedExtendedDataSettings1*)Unsafe.AsPointer(ref this), Enablement);
	}

	/// <inheritdoc cref="ID3D12DeviceRemovedExtendedDataSettings.SetPageFaultEnablement" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void SetPageFaultEnablement(DredEnablement Enablement)
	{
		((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedDataSettings1*, DredEnablement, void>)(lpVtbl[4]))((ID3D12DeviceRemovedExtendedDataSettings1*)Unsafe.AsPointer(ref this), Enablement);
	}

	/// <inheritdoc cref="ID3D12DeviceRemovedExtendedDataSettings.SetWatsonDumpEnablement" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void SetWatsonDumpEnablement(DredEnablement Enablement)
	{
		((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedDataSettings1*, DredEnablement, void>)(lpVtbl[5]))((ID3D12DeviceRemovedExtendedDataSettings1*)Unsafe.AsPointer(ref this), Enablement);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceRemovedExtendedDataSettings1::SetBreadcrumbContextEnablement"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public void SetBreadcrumbContextEnablement(DredEnablement Enablement)
	{
		((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedDataSettings1*, DredEnablement, void>)(lpVtbl[6]))((ID3D12DeviceRemovedExtendedDataSettings1*)Unsafe.AsPointer(ref this), Enablement);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceRemovedExtendedData"]/*' />
/// <unmanaged>ID3D12DeviceRemovedExtendedData</unmanaged>
[Guid("98931d33-5ae8-4791-aa3c-1a73a2934e71")]
[NativeTypeName("struct ID3D12DeviceRemovedExtendedData : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12DeviceRemovedExtendedData
{
	public static ref readonly Guid IID_ID3D12DeviceRemovedExtendedData
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x33, 0x1D, 0x93, 0x98,
				0xE8, 0x5A,
				0x91, 0x47,
				0xAA,
				0x3C,
				0x1A,
				0x73,
				0xA2,
				0x93,
				0x4E,
				0x71
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12DeviceRemovedExtendedData));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceRemovedExtendedData::GetAutoBreadcrumbsOutput"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetAutoBreadcrumbsOutput(DredAutoBreadcrumbsOutput* pOutput)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData*, DredAutoBreadcrumbsOutput*, int>)(lpVtbl[3]))((ID3D12DeviceRemovedExtendedData*)Unsafe.AsPointer(ref this), pOutput);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceRemovedExtendedData::GetPageFaultAllocationOutput"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPageFaultAllocationOutput(DredPageFaultOutput* pOutput)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData*, DredPageFaultOutput*, int>)(lpVtbl[4]))((ID3D12DeviceRemovedExtendedData*)Unsafe.AsPointer(ref this), pOutput);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceRemovedExtendedData1"]/*' />
/// <unmanaged>ID3D12DeviceRemovedExtendedData1</unmanaged>
[Guid("9727a022-cf1d-4dda-9eba-effa653fc506")]
[NativeTypeName("struct ID3D12DeviceRemovedExtendedData1 : ID3D12DeviceRemovedExtendedData")]
[NativeInheritance("ID3D12DeviceRemovedExtendedData")]
public unsafe partial struct ID3D12DeviceRemovedExtendedData1
{
	public static ref readonly Guid IID_ID3D12DeviceRemovedExtendedData1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x22, 0xA0, 0x27, 0x97,
				0x1D, 0xCF,
				0xDA, 0x4D,
				0x9E,
				0xBA,
				0xEF,
				0xFA,
				0x65,
				0x3F,
				0xC5,
				0x06
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12DeviceRemovedExtendedData1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceRemovedExtendedData.GetAutoBreadcrumbsOutput" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetAutoBreadcrumbsOutput(DredAutoBreadcrumbsOutput* pOutput)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData1*, DredAutoBreadcrumbsOutput*, int>)(lpVtbl[3]))((ID3D12DeviceRemovedExtendedData1*)Unsafe.AsPointer(ref this), pOutput);
	}

	/// <inheritdoc cref="ID3D12DeviceRemovedExtendedData.GetPageFaultAllocationOutput" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPageFaultAllocationOutput(DredPageFaultOutput* pOutput)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData1*, DredPageFaultOutput*, int>)(lpVtbl[4]))((ID3D12DeviceRemovedExtendedData1*)Unsafe.AsPointer(ref this), pOutput);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceRemovedExtendedData1::GetAutoBreadcrumbsOutput1"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetAutoBreadcrumbsOutput1(DredAutoBreadcrumbsOutput1* pOutput)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData1*, DredAutoBreadcrumbsOutput1*, int>)(lpVtbl[5]))((ID3D12DeviceRemovedExtendedData1*)Unsafe.AsPointer(ref this), pOutput);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceRemovedExtendedData1::GetPageFaultAllocationOutput1"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetPageFaultAllocationOutput1(DredPageFaultOutput1* pOutput)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData1*, DredPageFaultOutput1*, int>)(lpVtbl[6]))((ID3D12DeviceRemovedExtendedData1*)Unsafe.AsPointer(ref this), pOutput);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceRemovedExtendedData2"]/*' />
/// <unmanaged>ID3D12DeviceRemovedExtendedData2</unmanaged>
[Guid("67fc5816-e4ca-4915-bf18-42541272da54")]
[NativeTypeName("struct ID3D12DeviceRemovedExtendedData2 : ID3D12DeviceRemovedExtendedData1")]
[NativeInheritance("ID3D12DeviceRemovedExtendedData1")]
public unsafe partial struct ID3D12DeviceRemovedExtendedData2
{
	public static ref readonly Guid IID_ID3D12DeviceRemovedExtendedData2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x16, 0x58, 0xFC, 0x67,
				0xCA, 0xE4,
				0x15, 0x49,
				0xBF,
				0x18,
				0x42,
				0x54,
				0x12,
				0x72,
				0xDA,
				0x54
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12DeviceRemovedExtendedData2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceRemovedExtendedData1.GetAutoBreadcrumbsOutput1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetAutoBreadcrumbsOutput1(DredAutoBreadcrumbsOutput1* pOutput)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData2*, DredAutoBreadcrumbsOutput1*, int>)(lpVtbl[3]))((ID3D12DeviceRemovedExtendedData2*)Unsafe.AsPointer(ref this), pOutput);
	}

	/// <inheritdoc cref="ID3D12DeviceRemovedExtendedData1.GetPageFaultAllocationOutput1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPageFaultAllocationOutput1(DredPageFaultOutput1* pOutput)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData2*, DredPageFaultOutput1*, int>)(lpVtbl[4]))((ID3D12DeviceRemovedExtendedData2*)Unsafe.AsPointer(ref this), pOutput);
	}

	/// <inheritdoc cref="ID3D12DeviceRemovedExtendedData.GetAutoBreadcrumbsOutput" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetAutoBreadcrumbsOutput(DredAutoBreadcrumbsOutput* pOutput)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData2*, DredAutoBreadcrumbsOutput*, int>)(lpVtbl[5]))((ID3D12DeviceRemovedExtendedData2*)Unsafe.AsPointer(ref this), pOutput);
	}

	/// <inheritdoc cref="ID3D12DeviceRemovedExtendedData.GetPageFaultAllocationOutput" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetPageFaultAllocationOutput(DredPageFaultOutput* pOutput)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData2*, DredPageFaultOutput*, int>)(lpVtbl[6]))((ID3D12DeviceRemovedExtendedData2*)Unsafe.AsPointer(ref this), pOutput);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceRemovedExtendedData2::GetPageFaultAllocationOutput2"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetPageFaultAllocationOutput2(DredPageFaultOutput2* pOutput)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData2*, DredPageFaultOutput2*, int>)(lpVtbl[7]))((ID3D12DeviceRemovedExtendedData2*)Unsafe.AsPointer(ref this), pOutput);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DeviceRemovedExtendedData2::GetDeviceState"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public Graphics.Direct3D12.DredDeviceState GetDeviceState()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData2*, Graphics.Direct3D12.DredDeviceState>)(lpVtbl[8]))((ID3D12DeviceRemovedExtendedData2*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device6"]/*' />
/// <unmanaged>ID3D12Device6</unmanaged>
[Guid("c70b221b-40e4-4a17-89af-025a0727a6dc")]
[NativeTypeName("struct ID3D12Device6 : ID3D12Device5")]
[NativeInheritance("ID3D12Device5")]
public unsafe partial struct ID3D12Device6
{
	public static ref readonly Guid IID_ID3D12Device6
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1B, 0x22, 0x0B, 0xC7,
				0xE4, 0x40,
				0x17, 0x4A,
				0x89,
				0xAF,
				0x02,
				0x5A,
				0x07,
				0x27,
				0xA6,
				0xDC
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Device6));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device5.CreateLifetimeTracker" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult CreateLifetimeTracker(ID3D12LifetimeOwner* pOwner, Guid* riid, void** ppvTracker)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, ID3D12LifetimeOwner*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pOwner, riid, ppvTracker);
	}

	/// <inheritdoc cref="ID3D12Device5.RemoveDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void RemoveDevice()
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device6*, void>)(lpVtbl[4]))((ID3D12Device6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device5.EnumerateMetaCommands" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult EnumerateMetaCommands(uint* pNumMetaCommands, MetaCommandDescription* pDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, uint*, MetaCommandDescription*, int>)(lpVtbl[5]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pNumMetaCommands, pDescs);
	}

	/// <inheritdoc cref="ID3D12Device5.EnumerateMetaCommandParameters" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult EnumerateMetaCommandParameters(Guid* CommandId, MetaCommandParameterStage Stage, uint* pTotalStructureSizeInBytes, uint* pParameterCount, MetaCommandParameterDescription* pParameterDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, Guid*, MetaCommandParameterStage, uint*, uint*, MetaCommandParameterDescription*, int>)(lpVtbl[6]))((ID3D12Device6*)Unsafe.AsPointer(ref this), CommandId, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs);
	}

	/// <inheritdoc cref="ID3D12Device5.CreateMetaCommand" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult CreateMetaCommand(Guid* CommandId, uint NodeMask, void* pCreationParametersData, nuint CreationParametersDataSizeInBytes, Guid* riid, void** ppMetaCommand)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, Guid*, uint, void*, nuint, Guid*, void**, int>)(lpVtbl[7]))((ID3D12Device6*)Unsafe.AsPointer(ref this), CommandId, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand);
	}

	/// <inheritdoc cref="ID3D12Device5.CreateStateObject" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult CreateStateObject(StateObjectDescription* pDesc, Guid* riid, void** ppStateObject)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, StateObjectDescription*, Guid*, void**, int>)(lpVtbl[8]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pDesc, riid, ppStateObject);
	}

	/// <inheritdoc cref="ID3D12Device5.GetRaytracingAccelerationStructurePrebuildInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public void GetRaytracingAccelerationStructurePrebuildInfo(BuildRaytracingAccelerationStructureInputs* pDesc, RaytracingAccelerationStructurePrebuildInfo* pInfo)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device6*, BuildRaytracingAccelerationStructureInputs*, RaytracingAccelerationStructurePrebuildInfo*, void>)(lpVtbl[9]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pDesc, pInfo);
	}

	/// <inheritdoc cref="ID3D12Device5.CheckDriverMatchingIdentifier" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public Graphics.Direct3D12.DriverMatchingIdentifierStatus CheckDriverMatchingIdentifier(SerializedDataType SerializedDataType, SerializedDataDriverMatchingIdentifier* pIdentifierToCheck)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, SerializedDataType, SerializedDataDriverMatchingIdentifier*, Graphics.Direct3D12.DriverMatchingIdentifierStatus>)(lpVtbl[10]))((ID3D12Device6*)Unsafe.AsPointer(ref this), SerializedDataType, pIdentifierToCheck);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateCommandList1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CreateCommandList1(uint nodeMask, CommandListType type, CommandListFlags flags, Guid* riid, void** ppCommandList)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, uint, CommandListType, CommandListFlags, Guid*, void**, int>)(lpVtbl[11]))((ID3D12Device6*)Unsafe.AsPointer(ref this), nodeMask, type, flags, riid, ppCommandList);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateProtectedResourceSession" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CreateProtectedResourceSession(ProtectedResourceSessionDescription* pDesc, Guid* riid, void** ppSession)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, ProtectedResourceSessionDescription*, Guid*, void**, int>)(lpVtbl[12]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pDesc, riid, ppSession);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateCommittedResource1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult CreateCommittedResource1(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, HeapProperties*, HeapFlags, ResourceDescription*, ResourceStates, ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[13]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateHeap1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult CreateHeap1(HeapDescription* pDesc, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, HeapDescription*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[14]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pDesc, pProtectedSession, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateReservedResource1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult CreateReservedResource1(ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, ResourceDescription*, ResourceStates, ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[15]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device4.GetResourceAllocationInfo1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo1(uint visibleMask, uint numResourceDescs, ResourceDescription* pResourceDescs, ResourceAllocationInfo1* pResourceAllocationInfo1)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, uint, uint, ResourceDescription*, ResourceAllocationInfo1*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[16]))((ID3D12Device6*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
	}

	/// <inheritdoc cref="ID3D12Device3.OpenExistingHeapFromAddress" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult OpenExistingHeapFromAddress(void* pAddress, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, void*, Guid*, void**, int>)(lpVtbl[17]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pAddress, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device3.OpenExistingHeapFromFileMapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult OpenExistingHeapFromFileMapping(IntPtr hFileMapping, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, IntPtr, Guid*, void**, int>)(lpVtbl[18]))((ID3D12Device6*)Unsafe.AsPointer(ref this), hFileMapping, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device3.EnqueueMakeResident" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult EnqueueMakeResident(ResidencyFlags Flags, uint NumObjects, ID3D12Pageable* ppObjects, ID3D12Fence* pFenceToSignal, ulong FenceValueToSignal)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, ResidencyFlags, uint, ID3D12Pageable*, ID3D12Fence*, ulong, int>)(lpVtbl[19]))((ID3D12Device6*)Unsafe.AsPointer(ref this), Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal);
	}

	/// <inheritdoc cref="ID3D12Device2.CreatePipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult CreatePipelineState(PipelineStateStreamDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, PipelineStateStreamDescription*, Guid*, void**, int>)(lpVtbl[20]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device1.CreatePipelineLibrary" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult CreatePipelineLibrary(void* pLibraryBlob, nuint BlobLength, Guid* riid, void** ppPipelineLibrary)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, void*, nuint, Guid*, void**, int>)(lpVtbl[21]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
	}

	/// <inheritdoc cref="ID3D12Device1.SetEventOnMultipleFenceCompletion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult SetEventOnMultipleFenceCompletion(ID3D12Fence* ppFences, ulong* pFenceValues, uint NumFences, MultipleFenceWaitFlags Flags, IntPtr hEvent)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, ID3D12Fence*, ulong*, uint, MultipleFenceWaitFlags, IntPtr, int>)(lpVtbl[22]))((ID3D12Device6*)Unsafe.AsPointer(ref this), ppFences, pFenceValues, NumFences, Flags, hEvent);
	}

	/// <inheritdoc cref="ID3D12Device1.SetResidencyPriority" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult SetResidencyPriority(uint NumObjects, ID3D12Pageable* ppObjects, ResidencyPriority* pPriorities)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, uint, ID3D12Pageable*, ResidencyPriority*, int>)(lpVtbl[23]))((ID3D12Device6*)Unsafe.AsPointer(ref this), NumObjects, ppObjects, pPriorities);
	}

	/// <inheritdoc cref="ID3D12Device.GetNodeCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public uint GetNodeCount()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, uint>)(lpVtbl[24]))((ID3D12Device6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandQueue" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult CreateCommandQueue(CommandQueueDescription* pDesc, Guid* riid, void** ppCommandQueue)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, CommandQueueDescription*, Guid*, void**, int>)(lpVtbl[25]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pDesc, riid, ppCommandQueue);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandAllocator" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult CreateCommandAllocator(CommandListType type, Guid* riid, void** ppCommandAllocator)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, CommandListType, Guid*, void**, int>)(lpVtbl[26]))((ID3D12Device6*)Unsafe.AsPointer(ref this), type, riid, ppCommandAllocator);
	}

	/// <inheritdoc cref="ID3D12Device.CreateGraphicsPipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult CreateGraphicsPipelineState(GraphicsPipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, GraphicsPipelineStateDescription*, Guid*, void**, int>)(lpVtbl[27]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateComputePipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult CreateComputePipelineState(ComputePipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, ComputePipelineStateDescription*, Guid*, void**, int>)(lpVtbl[28]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandList" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult CreateCommandList(uint nodeMask, CommandListType type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, Guid* riid, void** ppCommandList)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, uint, CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, int>)(lpVtbl[29]))((ID3D12Device6*)Unsafe.AsPointer(ref this), nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
	}

	/// <inheritdoc cref="ID3D12Device.CheckFeatureSupport" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult CheckFeatureSupport(Feature Feature, void* pFeatureSupportData, uint FeatureSupportDataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, Feature, void*, uint, int>)(lpVtbl[30]))((ID3D12Device6*)Unsafe.AsPointer(ref this), Feature, pFeatureSupportData, FeatureSupportDataSize);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDescriptorHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult CreateDescriptorHeap(DescriptorHeapDescription* pDescriptorHeapDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, DescriptorHeapDescription*, Guid*, void**, int>)(lpVtbl[31]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pDescriptorHeapDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.GetDescriptorHandleIncrementSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public uint GetDescriptorHandleIncrementSize(DescriptorHeapType DescriptorHeapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, DescriptorHeapType, uint>)(lpVtbl[32]))((ID3D12Device6*)Unsafe.AsPointer(ref this), DescriptorHeapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult CreateRootSignature(uint nodeMask, void* pBlobWithRootSignature, nuint blobLengthInBytes, Guid* riid, void** ppvRootSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, uint, void*, nuint, Guid*, void**, int>)(lpVtbl[33]))((ID3D12Device6*)Unsafe.AsPointer(ref this), nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
	}

	/// <inheritdoc cref="ID3D12Device.CreateConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public void CreateConstantBufferView(ConstantBufferViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device6*, ConstantBufferViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[34]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public void CreateShaderResourceView(ID3D12Resource* pResource, ShaderResourceViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device6*, ID3D12Resource*, ShaderResourceViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[35]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public void CreateUnorderedAccessView(ID3D12Resource* pResource, ID3D12Resource* pCounterResource, UnorderedAccessViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device6*, ID3D12Resource*, ID3D12Resource*, UnorderedAccessViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[36]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pResource, pCounterResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRenderTargetView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public void CreateRenderTargetView(ID3D12Resource* pResource, RenderTargetViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device6*, ID3D12Resource*, RenderTargetViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[37]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDepthStencilView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public void CreateDepthStencilView(ID3D12Resource* pResource, DepthStencilViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device6*, ID3D12Resource*, DepthStencilViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[38]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSampler" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public void CreateSampler(SamplerDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device6*, SamplerDescription*, CpuDescriptorHandle*, void>)(lpVtbl[39]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptors" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public void CopyDescriptors(uint NumDestDescriptorRanges, CpuDescriptorHandle* pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint NumSrcDescriptorRanges, CpuDescriptorHandle* pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device6*, uint, CpuDescriptorHandle*, uint*, uint, CpuDescriptorHandle*, uint*, DescriptorHeapType, void>)(lpVtbl[40]))((ID3D12Device6*)Unsafe.AsPointer(ref this), NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptorsSimple" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public void CopyDescriptorsSimple(uint NumDescriptors, CpuDescriptorHandle* DestDescriptorRangeStart, CpuDescriptorHandle* SrcDescriptorRangeStart, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device6*, uint, CpuDescriptorHandle*, CpuDescriptorHandle*, DescriptorHeapType, void>)(lpVtbl[41]))((ID3D12Device6*)Unsafe.AsPointer(ref this), NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceAllocationInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo(uint visibleMask, uint numResourceDescs, ResourceDescription* pResourceDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, uint, uint, ResourceDescription*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[42]))((ID3D12Device6*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs);
	}

	/// <inheritdoc cref="ID3D12Device.GetCustomHeapProperties" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public Graphics.Direct3D12.HeapProperties GetCustomHeapProperties(uint nodeMask, HeapType heapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, uint, HeapType, Graphics.Direct3D12.HeapProperties>)(lpVtbl[43]))((ID3D12Device6*)Unsafe.AsPointer(ref this), nodeMask, heapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommittedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public HResult CreateCommittedResource(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, HeapProperties*, HeapFlags, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[44]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public HResult CreateHeap(HeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, HeapDescription*, Guid*, void**, int>)(lpVtbl[45]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.CreatePlacedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong HeapOffset, ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, ID3D12Heap*, ulong, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[46]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateReservedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult CreateReservedResource(ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[47]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public HResult CreateSharedHandle(ID3D12DeviceChild* pObject, Security.SECURITY_ATTRIBUTES* pAttributes, uint Access, char** Name, IntPtr* pHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, ID3D12DeviceChild*, Security.SECURITY_ATTRIBUTES*, uint, char**, IntPtr*, int>)(lpVtbl[48]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pObject, pAttributes, Access, Name, pHandle);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public HResult OpenSharedHandle(IntPtr NTHandle, Guid* riid, void** ppvObj)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, IntPtr, Guid*, void**, int>)(lpVtbl[49]))((ID3D12Device6*)Unsafe.AsPointer(ref this), NTHandle, riid, ppvObj);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandleByName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public HResult OpenSharedHandleByName(char** Name, uint Access, IntPtr* pNTHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, char**, uint, IntPtr*, int>)(lpVtbl[50]))((ID3D12Device6*)Unsafe.AsPointer(ref this), Name, Access, pNTHandle);
	}

	/// <inheritdoc cref="ID3D12Device.MakeResident" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public HResult MakeResident(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, uint, ID3D12Pageable*, int>)(lpVtbl[51]))((ID3D12Device6*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.Evict" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public HResult Evict(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, uint, ID3D12Pageable*, int>)(lpVtbl[52]))((ID3D12Device6*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.CreateFence" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public HResult CreateFence(ulong InitialValue, FenceFlags Flags, Guid* riid, void** ppFence)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, ulong, FenceFlags, Guid*, void**, int>)(lpVtbl[53]))((ID3D12Device6*)Unsafe.AsPointer(ref this), InitialValue, Flags, riid, ppFence);
	}

	/// <inheritdoc cref="ID3D12Device.GetDeviceRemovedReason" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public HResult GetDeviceRemovedReason()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, int>)(lpVtbl[54]))((ID3D12Device6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.GetCopyableFootprints" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public void GetCopyableFootprints(ResourceDescription* pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device6*, ResourceDescription*, uint, uint, ulong, PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(lpVtbl[55]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
	}

	/// <inheritdoc cref="ID3D12Device.CreateQueryHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public HResult CreateQueryHeap(QueryHeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, QueryHeapDescription*, Guid*, void**, int>)(lpVtbl[56]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.SetStablePowerState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public HResult SetStablePowerState(Bool32 Enable)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, Bool32, int>)(lpVtbl[57]))((ID3D12Device6*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public HResult CreateCommandSignature(CommandSignatureDescription* pDesc, ID3D12RootSignature* pRootSignature, Guid* riid, void** ppvCommandSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, CommandSignatureDescription*, ID3D12RootSignature*, Guid*, void**, int>)(lpVtbl[58]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pDesc, pRootSignature, riid, ppvCommandSignature);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceTiling" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipInfo* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device6*, ID3D12Resource*, uint*, PackedMipInfo*, TileShape*, uint*, uint, SubresourceTiling*, void>)(lpVtbl[59]))((ID3D12Device6*)Unsafe.AsPointer(ref this), pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
	}

	/// <inheritdoc cref="ID3D12Device.GetAdapterLuid" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(60)]
	public Luid GetAdapterLuid()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, Luid>)(lpVtbl[60]))((ID3D12Device6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(61)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, Guid*, uint*, void*, int>)(lpVtbl[61]))((ID3D12Device6*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(62)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, Guid*, uint, void*, int>)(lpVtbl[62]))((ID3D12Device6*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(63)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, Guid*, IUnknown*, int>)(lpVtbl[63]))((ID3D12Device6*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(64)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, char**, int>)(lpVtbl[64]))((ID3D12Device6*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device6::SetBackgroundProcessingMode"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(65)]
	public HResult SetBackgroundProcessingMode(BackgroundProcessingMode Mode, MeasurementsAction MeasurementsAction, IntPtr hEventToSignalUponCompletion, Bool32* pbFurtherMeasurementsDesired)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device6*, BackgroundProcessingMode, MeasurementsAction, IntPtr, Bool32*, int>)(lpVtbl[65]))((ID3D12Device6*)Unsafe.AsPointer(ref this), Mode, MeasurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementsDesired);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ProtectedResourceSession1"]/*' />
/// <unmanaged>ID3D12ProtectedResourceSession1</unmanaged>
[Guid("d6f12dd6-76fb-406e-8961-4296eefc0409")]
[NativeTypeName("struct ID3D12ProtectedResourceSession1 : ID3D12ProtectedResourceSession")]
[NativeInheritance("ID3D12ProtectedResourceSession")]
public unsafe partial struct ID3D12ProtectedResourceSession1
{
	public static ref readonly Guid IID_ID3D12ProtectedResourceSession1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xD6, 0x2D, 0xF1, 0xD6,
				0xFB, 0x76,
				0x6E, 0x40,
				0x89,
				0x61,
				0x42,
				0x96,
				0xEE,
				0xFC,
				0x04,
				0x09
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12ProtectedResourceSession1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12ProtectedResourceSession.GetDesc" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public Graphics.Direct3D12.ProtectedResourceSessionDescription GetDesc()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession1*, Graphics.Direct3D12.ProtectedResourceSessionDescription>)(lpVtbl[3]))((ID3D12ProtectedResourceSession1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12ProtectedSession.GetStatusFence" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetStatusFence(Guid* riid, void** ppFence)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession1*, Guid*, void**, int>)(lpVtbl[4]))((ID3D12ProtectedResourceSession1*)Unsafe.AsPointer(ref this), riid, ppFence);
	}

	/// <inheritdoc cref="ID3D12ProtectedSession.GetSessionStatus" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Graphics.Direct3D12.ProtectedSessionStatus GetSessionStatus()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession1*, Graphics.Direct3D12.ProtectedSessionStatus>)(lpVtbl[5]))((ID3D12ProtectedResourceSession1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession1*, Guid*, void**, int>)(lpVtbl[6]))((ID3D12ProtectedResourceSession1*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession1*, Guid*, uint*, void*, int>)(lpVtbl[7]))((ID3D12ProtectedResourceSession1*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession1*, Guid*, uint, void*, int>)(lpVtbl[8]))((ID3D12ProtectedResourceSession1*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession1*, Guid*, IUnknown*, int>)(lpVtbl[9]))((ID3D12ProtectedResourceSession1*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession1*, char**, int>)(lpVtbl[10]))((ID3D12ProtectedResourceSession1*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ProtectedResourceSession1::GetDesc1"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public Graphics.Direct3D12.ProtectedResourceSessionDescription1 GetDesc1()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession1*, Graphics.Direct3D12.ProtectedResourceSessionDescription1>)(lpVtbl[11]))((ID3D12ProtectedResourceSession1*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device7"]/*' />
/// <unmanaged>ID3D12Device7</unmanaged>
[Guid("5c014b53-68a1-4b9b-8bd1-dd6046b9358b")]
[NativeTypeName("struct ID3D12Device7 : ID3D12Device6")]
[NativeInheritance("ID3D12Device6")]
public unsafe partial struct ID3D12Device7
{
	public static ref readonly Guid IID_ID3D12Device7
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x53, 0x4B, 0x01, 0x5C,
				0xA1, 0x68,
				0x9B, 0x4B,
				0x8B,
				0xD1,
				0xDD,
				0x60,
				0x46,
				0xB9,
				0x35,
				0x8B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Device7));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device6.SetBackgroundProcessingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetBackgroundProcessingMode(BackgroundProcessingMode Mode, MeasurementsAction MeasurementsAction, IntPtr hEventToSignalUponCompletion, Bool32* pbFurtherMeasurementsDesired)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, BackgroundProcessingMode, MeasurementsAction, IntPtr, Bool32*, int>)(lpVtbl[3]))((ID3D12Device7*)Unsafe.AsPointer(ref this), Mode, MeasurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementsDesired);
	}

	/// <inheritdoc cref="ID3D12Device5.CreateLifetimeTracker" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateLifetimeTracker(ID3D12LifetimeOwner* pOwner, Guid* riid, void** ppvTracker)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, ID3D12LifetimeOwner*, Guid*, void**, int>)(lpVtbl[4]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pOwner, riid, ppvTracker);
	}

	/// <inheritdoc cref="ID3D12Device5.RemoveDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void RemoveDevice()
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device7*, void>)(lpVtbl[5]))((ID3D12Device7*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device5.EnumerateMetaCommands" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult EnumerateMetaCommands(uint* pNumMetaCommands, MetaCommandDescription* pDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, uint*, MetaCommandDescription*, int>)(lpVtbl[6]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pNumMetaCommands, pDescs);
	}

	/// <inheritdoc cref="ID3D12Device5.EnumerateMetaCommandParameters" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult EnumerateMetaCommandParameters(Guid* CommandId, MetaCommandParameterStage Stage, uint* pTotalStructureSizeInBytes, uint* pParameterCount, MetaCommandParameterDescription* pParameterDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, Guid*, MetaCommandParameterStage, uint*, uint*, MetaCommandParameterDescription*, int>)(lpVtbl[7]))((ID3D12Device7*)Unsafe.AsPointer(ref this), CommandId, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs);
	}

	/// <inheritdoc cref="ID3D12Device5.CreateMetaCommand" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult CreateMetaCommand(Guid* CommandId, uint NodeMask, void* pCreationParametersData, nuint CreationParametersDataSizeInBytes, Guid* riid, void** ppMetaCommand)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, Guid*, uint, void*, nuint, Guid*, void**, int>)(lpVtbl[8]))((ID3D12Device7*)Unsafe.AsPointer(ref this), CommandId, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand);
	}

	/// <inheritdoc cref="ID3D12Device5.CreateStateObject" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CreateStateObject(StateObjectDescription* pDesc, Guid* riid, void** ppStateObject)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, StateObjectDescription*, Guid*, void**, int>)(lpVtbl[9]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDesc, riid, ppStateObject);
	}

	/// <inheritdoc cref="ID3D12Device5.GetRaytracingAccelerationStructurePrebuildInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public void GetRaytracingAccelerationStructurePrebuildInfo(BuildRaytracingAccelerationStructureInputs* pDesc, RaytracingAccelerationStructurePrebuildInfo* pInfo)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device7*, BuildRaytracingAccelerationStructureInputs*, RaytracingAccelerationStructurePrebuildInfo*, void>)(lpVtbl[10]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDesc, pInfo);
	}

	/// <inheritdoc cref="ID3D12Device5.CheckDriverMatchingIdentifier" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public Graphics.Direct3D12.DriverMatchingIdentifierStatus CheckDriverMatchingIdentifier(SerializedDataType SerializedDataType, SerializedDataDriverMatchingIdentifier* pIdentifierToCheck)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, SerializedDataType, SerializedDataDriverMatchingIdentifier*, Graphics.Direct3D12.DriverMatchingIdentifierStatus>)(lpVtbl[11]))((ID3D12Device7*)Unsafe.AsPointer(ref this), SerializedDataType, pIdentifierToCheck);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateCommandList1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult CreateCommandList1(uint nodeMask, CommandListType type, CommandListFlags flags, Guid* riid, void** ppCommandList)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, uint, CommandListType, CommandListFlags, Guid*, void**, int>)(lpVtbl[12]))((ID3D12Device7*)Unsafe.AsPointer(ref this), nodeMask, type, flags, riid, ppCommandList);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateProtectedResourceSession" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult CreateProtectedResourceSession(ProtectedResourceSessionDescription* pDesc, Guid* riid, void** ppSession)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, ProtectedResourceSessionDescription*, Guid*, void**, int>)(lpVtbl[13]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDesc, riid, ppSession);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateCommittedResource1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult CreateCommittedResource1(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, HeapProperties*, HeapFlags, ResourceDescription*, ResourceStates, ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[14]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateHeap1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult CreateHeap1(HeapDescription* pDesc, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, HeapDescription*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[15]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDesc, pProtectedSession, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateReservedResource1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult CreateReservedResource1(ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, ResourceDescription*, ResourceStates, ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[16]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device4.GetResourceAllocationInfo1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo1(uint visibleMask, uint numResourceDescs, ResourceDescription* pResourceDescs, ResourceAllocationInfo1* pResourceAllocationInfo1)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, uint, uint, ResourceDescription*, ResourceAllocationInfo1*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[17]))((ID3D12Device7*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
	}

	/// <inheritdoc cref="ID3D12Device3.OpenExistingHeapFromAddress" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult OpenExistingHeapFromAddress(void* pAddress, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, void*, Guid*, void**, int>)(lpVtbl[18]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pAddress, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device3.OpenExistingHeapFromFileMapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult OpenExistingHeapFromFileMapping(IntPtr hFileMapping, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, IntPtr, Guid*, void**, int>)(lpVtbl[19]))((ID3D12Device7*)Unsafe.AsPointer(ref this), hFileMapping, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device3.EnqueueMakeResident" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult EnqueueMakeResident(ResidencyFlags Flags, uint NumObjects, ID3D12Pageable* ppObjects, ID3D12Fence* pFenceToSignal, ulong FenceValueToSignal)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, ResidencyFlags, uint, ID3D12Pageable*, ID3D12Fence*, ulong, int>)(lpVtbl[20]))((ID3D12Device7*)Unsafe.AsPointer(ref this), Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal);
	}

	/// <inheritdoc cref="ID3D12Device2.CreatePipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult CreatePipelineState(PipelineStateStreamDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, PipelineStateStreamDescription*, Guid*, void**, int>)(lpVtbl[21]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device1.CreatePipelineLibrary" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult CreatePipelineLibrary(void* pLibraryBlob, nuint BlobLength, Guid* riid, void** ppPipelineLibrary)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, void*, nuint, Guid*, void**, int>)(lpVtbl[22]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
	}

	/// <inheritdoc cref="ID3D12Device1.SetEventOnMultipleFenceCompletion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult SetEventOnMultipleFenceCompletion(ID3D12Fence* ppFences, ulong* pFenceValues, uint NumFences, MultipleFenceWaitFlags Flags, IntPtr hEvent)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, ID3D12Fence*, ulong*, uint, MultipleFenceWaitFlags, IntPtr, int>)(lpVtbl[23]))((ID3D12Device7*)Unsafe.AsPointer(ref this), ppFences, pFenceValues, NumFences, Flags, hEvent);
	}

	/// <inheritdoc cref="ID3D12Device1.SetResidencyPriority" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult SetResidencyPriority(uint NumObjects, ID3D12Pageable* ppObjects, ResidencyPriority* pPriorities)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, uint, ID3D12Pageable*, ResidencyPriority*, int>)(lpVtbl[24]))((ID3D12Device7*)Unsafe.AsPointer(ref this), NumObjects, ppObjects, pPriorities);
	}

	/// <inheritdoc cref="ID3D12Device.GetNodeCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public uint GetNodeCount()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, uint>)(lpVtbl[25]))((ID3D12Device7*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandQueue" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult CreateCommandQueue(CommandQueueDescription* pDesc, Guid* riid, void** ppCommandQueue)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, CommandQueueDescription*, Guid*, void**, int>)(lpVtbl[26]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDesc, riid, ppCommandQueue);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandAllocator" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult CreateCommandAllocator(CommandListType type, Guid* riid, void** ppCommandAllocator)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, CommandListType, Guid*, void**, int>)(lpVtbl[27]))((ID3D12Device7*)Unsafe.AsPointer(ref this), type, riid, ppCommandAllocator);
	}

	/// <inheritdoc cref="ID3D12Device.CreateGraphicsPipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult CreateGraphicsPipelineState(GraphicsPipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, GraphicsPipelineStateDescription*, Guid*, void**, int>)(lpVtbl[28]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateComputePipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult CreateComputePipelineState(ComputePipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, ComputePipelineStateDescription*, Guid*, void**, int>)(lpVtbl[29]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandList" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult CreateCommandList(uint nodeMask, CommandListType type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, Guid* riid, void** ppCommandList)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, uint, CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, int>)(lpVtbl[30]))((ID3D12Device7*)Unsafe.AsPointer(ref this), nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
	}

	/// <inheritdoc cref="ID3D12Device.CheckFeatureSupport" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult CheckFeatureSupport(Feature Feature, void* pFeatureSupportData, uint FeatureSupportDataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, Feature, void*, uint, int>)(lpVtbl[31]))((ID3D12Device7*)Unsafe.AsPointer(ref this), Feature, pFeatureSupportData, FeatureSupportDataSize);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDescriptorHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult CreateDescriptorHeap(DescriptorHeapDescription* pDescriptorHeapDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, DescriptorHeapDescription*, Guid*, void**, int>)(lpVtbl[32]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDescriptorHeapDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.GetDescriptorHandleIncrementSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public uint GetDescriptorHandleIncrementSize(DescriptorHeapType DescriptorHeapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, DescriptorHeapType, uint>)(lpVtbl[33]))((ID3D12Device7*)Unsafe.AsPointer(ref this), DescriptorHeapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult CreateRootSignature(uint nodeMask, void* pBlobWithRootSignature, nuint blobLengthInBytes, Guid* riid, void** ppvRootSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, uint, void*, nuint, Guid*, void**, int>)(lpVtbl[34]))((ID3D12Device7*)Unsafe.AsPointer(ref this), nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
	}

	/// <inheritdoc cref="ID3D12Device.CreateConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public void CreateConstantBufferView(ConstantBufferViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device7*, ConstantBufferViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[35]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public void CreateShaderResourceView(ID3D12Resource* pResource, ShaderResourceViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device7*, ID3D12Resource*, ShaderResourceViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[36]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public void CreateUnorderedAccessView(ID3D12Resource* pResource, ID3D12Resource* pCounterResource, UnorderedAccessViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device7*, ID3D12Resource*, ID3D12Resource*, UnorderedAccessViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[37]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pResource, pCounterResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRenderTargetView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public void CreateRenderTargetView(ID3D12Resource* pResource, RenderTargetViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device7*, ID3D12Resource*, RenderTargetViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[38]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDepthStencilView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public void CreateDepthStencilView(ID3D12Resource* pResource, DepthStencilViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device7*, ID3D12Resource*, DepthStencilViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[39]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSampler" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public void CreateSampler(SamplerDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device7*, SamplerDescription*, CpuDescriptorHandle*, void>)(lpVtbl[40]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptors" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public void CopyDescriptors(uint NumDestDescriptorRanges, CpuDescriptorHandle* pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint NumSrcDescriptorRanges, CpuDescriptorHandle* pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device7*, uint, CpuDescriptorHandle*, uint*, uint, CpuDescriptorHandle*, uint*, DescriptorHeapType, void>)(lpVtbl[41]))((ID3D12Device7*)Unsafe.AsPointer(ref this), NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptorsSimple" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public void CopyDescriptorsSimple(uint NumDescriptors, CpuDescriptorHandle* DestDescriptorRangeStart, CpuDescriptorHandle* SrcDescriptorRangeStart, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device7*, uint, CpuDescriptorHandle*, CpuDescriptorHandle*, DescriptorHeapType, void>)(lpVtbl[42]))((ID3D12Device7*)Unsafe.AsPointer(ref this), NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceAllocationInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo(uint visibleMask, uint numResourceDescs, ResourceDescription* pResourceDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, uint, uint, ResourceDescription*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[43]))((ID3D12Device7*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs);
	}

	/// <inheritdoc cref="ID3D12Device.GetCustomHeapProperties" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public Graphics.Direct3D12.HeapProperties GetCustomHeapProperties(uint nodeMask, HeapType heapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, uint, HeapType, Graphics.Direct3D12.HeapProperties>)(lpVtbl[44]))((ID3D12Device7*)Unsafe.AsPointer(ref this), nodeMask, heapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommittedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public HResult CreateCommittedResource(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, HeapProperties*, HeapFlags, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[45]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public HResult CreateHeap(HeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, HeapDescription*, Guid*, void**, int>)(lpVtbl[46]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.CreatePlacedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong HeapOffset, ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, ID3D12Heap*, ulong, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[47]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateReservedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public HResult CreateReservedResource(ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[48]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public HResult CreateSharedHandle(ID3D12DeviceChild* pObject, Security.SECURITY_ATTRIBUTES* pAttributes, uint Access, char** Name, IntPtr* pHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, ID3D12DeviceChild*, Security.SECURITY_ATTRIBUTES*, uint, char**, IntPtr*, int>)(lpVtbl[49]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pObject, pAttributes, Access, Name, pHandle);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public HResult OpenSharedHandle(IntPtr NTHandle, Guid* riid, void** ppvObj)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, IntPtr, Guid*, void**, int>)(lpVtbl[50]))((ID3D12Device7*)Unsafe.AsPointer(ref this), NTHandle, riid, ppvObj);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandleByName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public HResult OpenSharedHandleByName(char** Name, uint Access, IntPtr* pNTHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, char**, uint, IntPtr*, int>)(lpVtbl[51]))((ID3D12Device7*)Unsafe.AsPointer(ref this), Name, Access, pNTHandle);
	}

	/// <inheritdoc cref="ID3D12Device.MakeResident" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public HResult MakeResident(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, uint, ID3D12Pageable*, int>)(lpVtbl[52]))((ID3D12Device7*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.Evict" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public HResult Evict(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, uint, ID3D12Pageable*, int>)(lpVtbl[53]))((ID3D12Device7*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.CreateFence" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public HResult CreateFence(ulong InitialValue, FenceFlags Flags, Guid* riid, void** ppFence)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, ulong, FenceFlags, Guid*, void**, int>)(lpVtbl[54]))((ID3D12Device7*)Unsafe.AsPointer(ref this), InitialValue, Flags, riid, ppFence);
	}

	/// <inheritdoc cref="ID3D12Device.GetDeviceRemovedReason" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public HResult GetDeviceRemovedReason()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, int>)(lpVtbl[55]))((ID3D12Device7*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.GetCopyableFootprints" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public void GetCopyableFootprints(ResourceDescription* pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device7*, ResourceDescription*, uint, uint, ulong, PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(lpVtbl[56]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
	}

	/// <inheritdoc cref="ID3D12Device.CreateQueryHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public HResult CreateQueryHeap(QueryHeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, QueryHeapDescription*, Guid*, void**, int>)(lpVtbl[57]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.SetStablePowerState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public HResult SetStablePowerState(Bool32 Enable)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, Bool32, int>)(lpVtbl[58]))((ID3D12Device7*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public HResult CreateCommandSignature(CommandSignatureDescription* pDesc, ID3D12RootSignature* pRootSignature, Guid* riid, void** ppvCommandSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, CommandSignatureDescription*, ID3D12RootSignature*, Guid*, void**, int>)(lpVtbl[59]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDesc, pRootSignature, riid, ppvCommandSignature);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceTiling" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(60)]
	public void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipInfo* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device7*, ID3D12Resource*, uint*, PackedMipInfo*, TileShape*, uint*, uint, SubresourceTiling*, void>)(lpVtbl[60]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
	}

	/// <inheritdoc cref="ID3D12Device.GetAdapterLuid" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(61)]
	public Luid GetAdapterLuid()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, Luid>)(lpVtbl[61]))((ID3D12Device7*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(62)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, Guid*, uint*, void*, int>)(lpVtbl[62]))((ID3D12Device7*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(63)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, Guid*, uint, void*, int>)(lpVtbl[63]))((ID3D12Device7*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(64)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, Guid*, IUnknown*, int>)(lpVtbl[64]))((ID3D12Device7*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(65)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, char**, int>)(lpVtbl[65]))((ID3D12Device7*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device7::AddToStateObject"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(66)]
	public HResult AddToStateObject(StateObjectDescription* pAddition, ID3D12StateObject* pStateObjectToGrowFrom, Guid* riid, void** ppNewStateObject)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, StateObjectDescription*, ID3D12StateObject*, Guid*, void**, int>)(lpVtbl[66]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pAddition, pStateObjectToGrowFrom, riid, ppNewStateObject);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device7::CreateProtectedResourceSession1"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(67)]
	public HResult CreateProtectedResourceSession1(ProtectedResourceSessionDescription1* pDesc, Guid* riid, void** ppSession)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device7*, ProtectedResourceSessionDescription1*, Guid*, void**, int>)(lpVtbl[67]))((ID3D12Device7*)Unsafe.AsPointer(ref this), pDesc, riid, ppSession);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device8"]/*' />
/// <unmanaged>ID3D12Device8</unmanaged>
[Guid("9218e6bb-f944-4f7e-a75c-b1b2c7b701f3")]
[NativeTypeName("struct ID3D12Device8 : ID3D12Device7")]
[NativeInheritance("ID3D12Device7")]
public unsafe partial struct ID3D12Device8
{
	public static ref readonly Guid IID_ID3D12Device8
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xBB, 0xE6, 0x18, 0x92,
				0x44, 0xF9,
				0x7E, 0x4F,
				0xA7,
				0x5C,
				0xB1,
				0xB2,
				0xC7,
				0xB7,
				0x01,
				0xF3
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Device8));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device7.AddToStateObject" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult AddToStateObject(StateObjectDescription* pAddition, ID3D12StateObject* pStateObjectToGrowFrom, Guid* riid, void** ppNewStateObject)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, StateObjectDescription*, ID3D12StateObject*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pAddition, pStateObjectToGrowFrom, riid, ppNewStateObject);
	}

	/// <inheritdoc cref="ID3D12Device7.CreateProtectedResourceSession1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateProtectedResourceSession1(ProtectedResourceSessionDescription1* pDesc, Guid* riid, void** ppSession)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ProtectedResourceSessionDescription1*, Guid*, void**, int>)(lpVtbl[4]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDesc, riid, ppSession);
	}

	/// <inheritdoc cref="ID3D12Device6.SetBackgroundProcessingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetBackgroundProcessingMode(BackgroundProcessingMode Mode, MeasurementsAction MeasurementsAction, IntPtr hEventToSignalUponCompletion, Bool32* pbFurtherMeasurementsDesired)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, BackgroundProcessingMode, MeasurementsAction, IntPtr, Bool32*, int>)(lpVtbl[5]))((ID3D12Device8*)Unsafe.AsPointer(ref this), Mode, MeasurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementsDesired);
	}

	/// <inheritdoc cref="ID3D12Device5.CreateLifetimeTracker" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult CreateLifetimeTracker(ID3D12LifetimeOwner* pOwner, Guid* riid, void** ppvTracker)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12LifetimeOwner*, Guid*, void**, int>)(lpVtbl[6]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pOwner, riid, ppvTracker);
	}

	/// <inheritdoc cref="ID3D12Device5.RemoveDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public void RemoveDevice()
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device8*, void>)(lpVtbl[7]))((ID3D12Device8*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device5.EnumerateMetaCommands" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult EnumerateMetaCommands(uint* pNumMetaCommands, MetaCommandDescription* pDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint*, MetaCommandDescription*, int>)(lpVtbl[8]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pNumMetaCommands, pDescs);
	}

	/// <inheritdoc cref="ID3D12Device5.EnumerateMetaCommandParameters" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult EnumerateMetaCommandParameters(Guid* CommandId, MetaCommandParameterStage Stage, uint* pTotalStructureSizeInBytes, uint* pParameterCount, MetaCommandParameterDescription* pParameterDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, Guid*, MetaCommandParameterStage, uint*, uint*, MetaCommandParameterDescription*, int>)(lpVtbl[9]))((ID3D12Device8*)Unsafe.AsPointer(ref this), CommandId, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs);
	}

	/// <inheritdoc cref="ID3D12Device5.CreateMetaCommand" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult CreateMetaCommand(Guid* CommandId, uint NodeMask, void* pCreationParametersData, nuint CreationParametersDataSizeInBytes, Guid* riid, void** ppMetaCommand)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, Guid*, uint, void*, nuint, Guid*, void**, int>)(lpVtbl[10]))((ID3D12Device8*)Unsafe.AsPointer(ref this), CommandId, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand);
	}

	/// <inheritdoc cref="ID3D12Device5.CreateStateObject" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CreateStateObject(StateObjectDescription* pDesc, Guid* riid, void** ppStateObject)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, StateObjectDescription*, Guid*, void**, int>)(lpVtbl[11]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDesc, riid, ppStateObject);
	}

	/// <inheritdoc cref="ID3D12Device5.GetRaytracingAccelerationStructurePrebuildInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public void GetRaytracingAccelerationStructurePrebuildInfo(BuildRaytracingAccelerationStructureInputs* pDesc, RaytracingAccelerationStructurePrebuildInfo* pInfo)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device8*, BuildRaytracingAccelerationStructureInputs*, RaytracingAccelerationStructurePrebuildInfo*, void>)(lpVtbl[12]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDesc, pInfo);
	}

	/// <inheritdoc cref="ID3D12Device5.CheckDriverMatchingIdentifier" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public Graphics.Direct3D12.DriverMatchingIdentifierStatus CheckDriverMatchingIdentifier(SerializedDataType SerializedDataType, SerializedDataDriverMatchingIdentifier* pIdentifierToCheck)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, SerializedDataType, SerializedDataDriverMatchingIdentifier*, Graphics.Direct3D12.DriverMatchingIdentifierStatus>)(lpVtbl[13]))((ID3D12Device8*)Unsafe.AsPointer(ref this), SerializedDataType, pIdentifierToCheck);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateCommandList1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult CreateCommandList1(uint nodeMask, CommandListType type, CommandListFlags flags, Guid* riid, void** ppCommandList)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint, CommandListType, CommandListFlags, Guid*, void**, int>)(lpVtbl[14]))((ID3D12Device8*)Unsafe.AsPointer(ref this), nodeMask, type, flags, riid, ppCommandList);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateProtectedResourceSession" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult CreateProtectedResourceSession(ProtectedResourceSessionDescription* pDesc, Guid* riid, void** ppSession)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ProtectedResourceSessionDescription*, Guid*, void**, int>)(lpVtbl[15]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDesc, riid, ppSession);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateCommittedResource1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult CreateCommittedResource1(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, HeapProperties*, HeapFlags, ResourceDescription*, ResourceStates, ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[16]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateHeap1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult CreateHeap1(HeapDescription* pDesc, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, HeapDescription*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[17]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDesc, pProtectedSession, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateReservedResource1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult CreateReservedResource1(ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ResourceDescription*, ResourceStates, ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[18]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device4.GetResourceAllocationInfo1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo1(uint visibleMask, uint numResourceDescs, ResourceDescription* pResourceDescs, ResourceAllocationInfo1* pResourceAllocationInfo1)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint, uint, ResourceDescription*, ResourceAllocationInfo1*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[19]))((ID3D12Device8*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
	}

	/// <inheritdoc cref="ID3D12Device3.OpenExistingHeapFromAddress" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult OpenExistingHeapFromAddress(void* pAddress, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, void*, Guid*, void**, int>)(lpVtbl[20]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pAddress, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device3.OpenExistingHeapFromFileMapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult OpenExistingHeapFromFileMapping(IntPtr hFileMapping, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, IntPtr, Guid*, void**, int>)(lpVtbl[21]))((ID3D12Device8*)Unsafe.AsPointer(ref this), hFileMapping, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device3.EnqueueMakeResident" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult EnqueueMakeResident(ResidencyFlags Flags, uint NumObjects, ID3D12Pageable* ppObjects, ID3D12Fence* pFenceToSignal, ulong FenceValueToSignal)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ResidencyFlags, uint, ID3D12Pageable*, ID3D12Fence*, ulong, int>)(lpVtbl[22]))((ID3D12Device8*)Unsafe.AsPointer(ref this), Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal);
	}

	/// <inheritdoc cref="ID3D12Device2.CreatePipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult CreatePipelineState(PipelineStateStreamDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, PipelineStateStreamDescription*, Guid*, void**, int>)(lpVtbl[23]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device1.CreatePipelineLibrary" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult CreatePipelineLibrary(void* pLibraryBlob, nuint BlobLength, Guid* riid, void** ppPipelineLibrary)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, void*, nuint, Guid*, void**, int>)(lpVtbl[24]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
	}

	/// <inheritdoc cref="ID3D12Device1.SetEventOnMultipleFenceCompletion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult SetEventOnMultipleFenceCompletion(ID3D12Fence* ppFences, ulong* pFenceValues, uint NumFences, MultipleFenceWaitFlags Flags, IntPtr hEvent)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Fence*, ulong*, uint, MultipleFenceWaitFlags, IntPtr, int>)(lpVtbl[25]))((ID3D12Device8*)Unsafe.AsPointer(ref this), ppFences, pFenceValues, NumFences, Flags, hEvent);
	}

	/// <inheritdoc cref="ID3D12Device1.SetResidencyPriority" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult SetResidencyPriority(uint NumObjects, ID3D12Pageable* ppObjects, ResidencyPriority* pPriorities)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint, ID3D12Pageable*, ResidencyPriority*, int>)(lpVtbl[26]))((ID3D12Device8*)Unsafe.AsPointer(ref this), NumObjects, ppObjects, pPriorities);
	}

	/// <inheritdoc cref="ID3D12Device.GetNodeCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public uint GetNodeCount()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint>)(lpVtbl[27]))((ID3D12Device8*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandQueue" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult CreateCommandQueue(CommandQueueDescription* pDesc, Guid* riid, void** ppCommandQueue)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, CommandQueueDescription*, Guid*, void**, int>)(lpVtbl[28]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDesc, riid, ppCommandQueue);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandAllocator" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult CreateCommandAllocator(CommandListType type, Guid* riid, void** ppCommandAllocator)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, CommandListType, Guid*, void**, int>)(lpVtbl[29]))((ID3D12Device8*)Unsafe.AsPointer(ref this), type, riid, ppCommandAllocator);
	}

	/// <inheritdoc cref="ID3D12Device.CreateGraphicsPipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult CreateGraphicsPipelineState(GraphicsPipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, GraphicsPipelineStateDescription*, Guid*, void**, int>)(lpVtbl[30]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateComputePipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult CreateComputePipelineState(ComputePipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ComputePipelineStateDescription*, Guid*, void**, int>)(lpVtbl[31]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandList" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult CreateCommandList(uint nodeMask, CommandListType type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, Guid* riid, void** ppCommandList)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint, CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, int>)(lpVtbl[32]))((ID3D12Device8*)Unsafe.AsPointer(ref this), nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
	}

	/// <inheritdoc cref="ID3D12Device.CheckFeatureSupport" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult CheckFeatureSupport(Feature Feature, void* pFeatureSupportData, uint FeatureSupportDataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, Feature, void*, uint, int>)(lpVtbl[33]))((ID3D12Device8*)Unsafe.AsPointer(ref this), Feature, pFeatureSupportData, FeatureSupportDataSize);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDescriptorHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult CreateDescriptorHeap(DescriptorHeapDescription* pDescriptorHeapDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, DescriptorHeapDescription*, Guid*, void**, int>)(lpVtbl[34]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDescriptorHeapDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.GetDescriptorHandleIncrementSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public uint GetDescriptorHandleIncrementSize(DescriptorHeapType DescriptorHeapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, DescriptorHeapType, uint>)(lpVtbl[35]))((ID3D12Device8*)Unsafe.AsPointer(ref this), DescriptorHeapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult CreateRootSignature(uint nodeMask, void* pBlobWithRootSignature, nuint blobLengthInBytes, Guid* riid, void** ppvRootSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint, void*, nuint, Guid*, void**, int>)(lpVtbl[36]))((ID3D12Device8*)Unsafe.AsPointer(ref this), nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
	}

	/// <inheritdoc cref="ID3D12Device.CreateConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public void CreateConstantBufferView(ConstantBufferViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device8*, ConstantBufferViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[37]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public void CreateShaderResourceView(ID3D12Resource* pResource, ShaderResourceViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Resource*, ShaderResourceViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[38]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public void CreateUnorderedAccessView(ID3D12Resource* pResource, ID3D12Resource* pCounterResource, UnorderedAccessViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Resource*, ID3D12Resource*, UnorderedAccessViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[39]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pResource, pCounterResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRenderTargetView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public void CreateRenderTargetView(ID3D12Resource* pResource, RenderTargetViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Resource*, RenderTargetViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[40]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDepthStencilView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public void CreateDepthStencilView(ID3D12Resource* pResource, DepthStencilViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Resource*, DepthStencilViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[41]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSampler" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public void CreateSampler(SamplerDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device8*, SamplerDescription*, CpuDescriptorHandle*, void>)(lpVtbl[42]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptors" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public void CopyDescriptors(uint NumDestDescriptorRanges, CpuDescriptorHandle* pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint NumSrcDescriptorRanges, CpuDescriptorHandle* pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint, CpuDescriptorHandle*, uint*, uint, CpuDescriptorHandle*, uint*, DescriptorHeapType, void>)(lpVtbl[43]))((ID3D12Device8*)Unsafe.AsPointer(ref this), NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptorsSimple" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public void CopyDescriptorsSimple(uint NumDescriptors, CpuDescriptorHandle* DestDescriptorRangeStart, CpuDescriptorHandle* SrcDescriptorRangeStart, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint, CpuDescriptorHandle*, CpuDescriptorHandle*, DescriptorHeapType, void>)(lpVtbl[44]))((ID3D12Device8*)Unsafe.AsPointer(ref this), NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceAllocationInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo(uint visibleMask, uint numResourceDescs, ResourceDescription* pResourceDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint, uint, ResourceDescription*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[45]))((ID3D12Device8*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs);
	}

	/// <inheritdoc cref="ID3D12Device.GetCustomHeapProperties" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public Graphics.Direct3D12.HeapProperties GetCustomHeapProperties(uint nodeMask, HeapType heapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint, HeapType, Graphics.Direct3D12.HeapProperties>)(lpVtbl[46]))((ID3D12Device8*)Unsafe.AsPointer(ref this), nodeMask, heapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommittedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public HResult CreateCommittedResource(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, HeapProperties*, HeapFlags, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[47]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public HResult CreateHeap(HeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, HeapDescription*, Guid*, void**, int>)(lpVtbl[48]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.CreatePlacedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong HeapOffset, ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[49]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateReservedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public HResult CreateReservedResource(ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[50]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public HResult CreateSharedHandle(ID3D12DeviceChild* pObject, Security.SECURITY_ATTRIBUTES* pAttributes, uint Access, char** Name, IntPtr* pHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12DeviceChild*, Security.SECURITY_ATTRIBUTES*, uint, char**, IntPtr*, int>)(lpVtbl[51]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pObject, pAttributes, Access, Name, pHandle);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public HResult OpenSharedHandle(IntPtr NTHandle, Guid* riid, void** ppvObj)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, IntPtr, Guid*, void**, int>)(lpVtbl[52]))((ID3D12Device8*)Unsafe.AsPointer(ref this), NTHandle, riid, ppvObj);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandleByName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public HResult OpenSharedHandleByName(char** Name, uint Access, IntPtr* pNTHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, char**, uint, IntPtr*, int>)(lpVtbl[53]))((ID3D12Device8*)Unsafe.AsPointer(ref this), Name, Access, pNTHandle);
	}

	/// <inheritdoc cref="ID3D12Device.MakeResident" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public HResult MakeResident(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint, ID3D12Pageable*, int>)(lpVtbl[54]))((ID3D12Device8*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.Evict" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public HResult Evict(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint, ID3D12Pageable*, int>)(lpVtbl[55]))((ID3D12Device8*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.CreateFence" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public HResult CreateFence(ulong InitialValue, FenceFlags Flags, Guid* riid, void** ppFence)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ulong, FenceFlags, Guid*, void**, int>)(lpVtbl[56]))((ID3D12Device8*)Unsafe.AsPointer(ref this), InitialValue, Flags, riid, ppFence);
	}

	/// <inheritdoc cref="ID3D12Device.GetDeviceRemovedReason" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public HResult GetDeviceRemovedReason()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, int>)(lpVtbl[57]))((ID3D12Device8*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.GetCopyableFootprints" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public void GetCopyableFootprints(ResourceDescription* pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device8*, ResourceDescription*, uint, uint, ulong, PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(lpVtbl[58]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
	}

	/// <inheritdoc cref="ID3D12Device.CreateQueryHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public HResult CreateQueryHeap(QueryHeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, QueryHeapDescription*, Guid*, void**, int>)(lpVtbl[59]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.SetStablePowerState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(60)]
	public HResult SetStablePowerState(Bool32 Enable)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, Bool32, int>)(lpVtbl[60]))((ID3D12Device8*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(61)]
	public HResult CreateCommandSignature(CommandSignatureDescription* pDesc, ID3D12RootSignature* pRootSignature, Guid* riid, void** ppvCommandSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, CommandSignatureDescription*, ID3D12RootSignature*, Guid*, void**, int>)(lpVtbl[61]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pDesc, pRootSignature, riid, ppvCommandSignature);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceTiling" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(62)]
	public void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipInfo* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Resource*, uint*, PackedMipInfo*, TileShape*, uint*, uint, SubresourceTiling*, void>)(lpVtbl[62]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
	}

	/// <inheritdoc cref="ID3D12Device.GetAdapterLuid" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(63)]
	public Luid GetAdapterLuid()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, Luid>)(lpVtbl[63]))((ID3D12Device8*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(64)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, Guid*, uint*, void*, int>)(lpVtbl[64]))((ID3D12Device8*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(65)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, Guid*, uint, void*, int>)(lpVtbl[65]))((ID3D12Device8*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(66)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, Guid*, IUnknown*, int>)(lpVtbl[66]))((ID3D12Device8*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(67)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, char**, int>)(lpVtbl[67]))((ID3D12Device8*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device8::GetResourceAllocationInfo2"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(68)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo2(uint visibleMask, uint numResourceDescs, ResourceDescription1* pResourceDescs, ResourceAllocationInfo1* pResourceAllocationInfo1)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint, uint, ResourceDescription1*, ResourceAllocationInfo1*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[68]))((ID3D12Device8*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device8::CreateCommittedResource2"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(69)]
	public HResult CreateCommittedResource2(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription1* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, HeapProperties*, HeapFlags, ResourceDescription1*, ResourceStates, ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[69]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device8::CreatePlacedResource1"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(70)]
	public HResult CreatePlacedResource1(ID3D12Heap* pHeap, ulong HeapOffset, ResourceDescription1* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, ResourceDescription1*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[70]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device8::CreateSamplerFeedbackUnorderedAccessView"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(71)]
	public void CreateSamplerFeedbackUnorderedAccessView(ID3D12Resource* pTargetedResource, ID3D12Resource* pFeedbackResource, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Resource*, ID3D12Resource*, CpuDescriptorHandle*, void>)(lpVtbl[71]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pTargetedResource, pFeedbackResource, DestDescriptor);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device8::GetCopyableFootprints1"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(72)]
	public void GetCopyableFootprints1(ResourceDescription1* pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device8*, ResourceDescription1*, uint, uint, ulong, PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(lpVtbl[72]))((ID3D12Device8*)Unsafe.AsPointer(ref this), pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Resource1"]/*' />
/// <unmanaged>ID3D12Resource1</unmanaged>
[Guid("9d5e227a-4430-4161-88b3-3eca6bb16e19")]
[NativeTypeName("struct ID3D12Resource1 : ID3D12Resource")]
[NativeInheritance("ID3D12Resource")]
public unsafe partial struct ID3D12Resource1
{
	public static ref readonly Guid IID_ID3D12Resource1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7A, 0x22, 0x5E, 0x9D,
				0x30, 0x44,
				0x61, 0x41,
				0x88,
				0xB3,
				0x3E,
				0xCA,
				0x6B,
				0xB1,
				0x6E,
				0x19
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Resource1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Resource.Map" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult Map(uint Subresource, Range* pReadRange, void** ppData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource1*, uint, Range*, void**, int>)(lpVtbl[3]))((ID3D12Resource1*)Unsafe.AsPointer(ref this), Subresource, pReadRange, ppData);
	}

	/// <inheritdoc cref="ID3D12Resource.Unmap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void Unmap(uint Subresource, Range* pWrittenRange)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Resource1*, uint, Range*, void>)(lpVtbl[4]))((ID3D12Resource1*)Unsafe.AsPointer(ref this), Subresource, pWrittenRange);
	}

	/// <inheritdoc cref="ID3D12Resource.GetDesc" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Graphics.Direct3D12.ResourceDescription GetDesc()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource1*, Graphics.Direct3D12.ResourceDescription>)(lpVtbl[5]))((ID3D12Resource1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Resource.GetGPUVirtualAddress" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public ulong GetGPUVirtualAddress()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource1*, ulong>)(lpVtbl[6]))((ID3D12Resource1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Resource.WriteToSubresource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult WriteToSubresource(uint DstSubresource, Box* pDstBox, void* pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource1*, uint, Box*, void*, uint, uint, int>)(lpVtbl[7]))((ID3D12Resource1*)Unsafe.AsPointer(ref this), DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
	}

	/// <inheritdoc cref="ID3D12Resource.ReadFromSubresource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult ReadFromSubresource(void* pDstData, uint DstRowPitch, uint DstDepthPitch, uint SrcSubresource, Box* pSrcBox)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource1*, void*, uint, uint, uint, Box*, int>)(lpVtbl[8]))((ID3D12Resource1*)Unsafe.AsPointer(ref this), pDstData, DstRowPitch, DstDepthPitch, SrcSubresource, pSrcBox);
	}

	/// <inheritdoc cref="ID3D12Resource.GetHeapProperties" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetHeapProperties(HeapProperties* pHeapProperties, HeapFlags* pHeapFlags)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource1*, HeapProperties*, HeapFlags*, int>)(lpVtbl[9]))((ID3D12Resource1*)Unsafe.AsPointer(ref this), pHeapProperties, pHeapFlags);
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource1*, Guid*, void**, int>)(lpVtbl[10]))((ID3D12Resource1*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource1*, Guid*, uint*, void*, int>)(lpVtbl[11]))((ID3D12Resource1*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource1*, Guid*, uint, void*, int>)(lpVtbl[12]))((ID3D12Resource1*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource1*, Guid*, IUnknown*, int>)(lpVtbl[13]))((ID3D12Resource1*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource1*, char**, int>)(lpVtbl[14]))((ID3D12Resource1*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Resource1::GetProtectedResourceSession"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult GetProtectedResourceSession(Guid* riid, void** ppProtectedSession)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource1*, Guid*, void**, int>)(lpVtbl[15]))((ID3D12Resource1*)Unsafe.AsPointer(ref this), riid, ppProtectedSession);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Resource2"]/*' />
/// <unmanaged>ID3D12Resource2</unmanaged>
[Guid("be36ec3b-ea85-4aeb-a45a-e9d76404a495")]
[NativeTypeName("struct ID3D12Resource2 : ID3D12Resource1")]
[NativeInheritance("ID3D12Resource1")]
public unsafe partial struct ID3D12Resource2
{
	public static ref readonly Guid IID_ID3D12Resource2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x3B, 0xEC, 0x36, 0xBE,
				0x85, 0xEA,
				0xEB, 0x4A,
				0xA4,
				0x5A,
				0xE9,
				0xD7,
				0x64,
				0x04,
				0xA4,
				0x95
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Resource2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Resource1.GetProtectedResourceSession" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetProtectedResourceSession(Guid* riid, void** ppProtectedSession)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource2*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12Resource2*)Unsafe.AsPointer(ref this), riid, ppProtectedSession);
	}

	/// <inheritdoc cref="ID3D12Resource.Map" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult Map(uint Subresource, Range* pReadRange, void** ppData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource2*, uint, Range*, void**, int>)(lpVtbl[4]))((ID3D12Resource2*)Unsafe.AsPointer(ref this), Subresource, pReadRange, ppData);
	}

	/// <inheritdoc cref="ID3D12Resource.Unmap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void Unmap(uint Subresource, Range* pWrittenRange)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Resource2*, uint, Range*, void>)(lpVtbl[5]))((ID3D12Resource2*)Unsafe.AsPointer(ref this), Subresource, pWrittenRange);
	}

	/// <inheritdoc cref="ID3D12Resource.GetDesc" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public Graphics.Direct3D12.ResourceDescription GetDesc()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource2*, Graphics.Direct3D12.ResourceDescription>)(lpVtbl[6]))((ID3D12Resource2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Resource.GetGPUVirtualAddress" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public ulong GetGPUVirtualAddress()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource2*, ulong>)(lpVtbl[7]))((ID3D12Resource2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Resource.WriteToSubresource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult WriteToSubresource(uint DstSubresource, Box* pDstBox, void* pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource2*, uint, Box*, void*, uint, uint, int>)(lpVtbl[8]))((ID3D12Resource2*)Unsafe.AsPointer(ref this), DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
	}

	/// <inheritdoc cref="ID3D12Resource.ReadFromSubresource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult ReadFromSubresource(void* pDstData, uint DstRowPitch, uint DstDepthPitch, uint SrcSubresource, Box* pSrcBox)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource2*, void*, uint, uint, uint, Box*, int>)(lpVtbl[9]))((ID3D12Resource2*)Unsafe.AsPointer(ref this), pDstData, DstRowPitch, DstDepthPitch, SrcSubresource, pSrcBox);
	}

	/// <inheritdoc cref="ID3D12Resource.GetHeapProperties" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult GetHeapProperties(HeapProperties* pHeapProperties, HeapFlags* pHeapFlags)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource2*, HeapProperties*, HeapFlags*, int>)(lpVtbl[10]))((ID3D12Resource2*)Unsafe.AsPointer(ref this), pHeapProperties, pHeapFlags);
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource2*, Guid*, void**, int>)(lpVtbl[11]))((ID3D12Resource2*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource2*, Guid*, uint*, void*, int>)(lpVtbl[12]))((ID3D12Resource2*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource2*, Guid*, uint, void*, int>)(lpVtbl[13]))((ID3D12Resource2*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource2*, Guid*, IUnknown*, int>)(lpVtbl[14]))((ID3D12Resource2*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource2*, char**, int>)(lpVtbl[15]))((ID3D12Resource2*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Resource2::GetDesc1"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public Graphics.Direct3D12.ResourceDescription1 GetDesc1()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Resource2*, Graphics.Direct3D12.ResourceDescription1>)(lpVtbl[16]))((ID3D12Resource2*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Heap1"]/*' />
/// <unmanaged>ID3D12Heap1</unmanaged>
[Guid("572f7389-2168-49e3-9693-d6df5871bf6d")]
[NativeTypeName("struct ID3D12Heap1 : ID3D12Heap")]
[NativeInheritance("ID3D12Heap")]
public unsafe partial struct ID3D12Heap1
{
	public static ref readonly Guid IID_ID3D12Heap1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x89, 0x73, 0x2F, 0x57,
				0x68, 0x21,
				0xE3, 0x49,
				0x96,
				0x93,
				0xD6,
				0xDF,
				0x58,
				0x71,
				0xBF,
				0x6D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Heap1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Heap.GetDesc" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public Graphics.Direct3D12.HeapDescription GetDesc()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Heap1*, Graphics.Direct3D12.HeapDescription>)(lpVtbl[3]))((ID3D12Heap1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Heap1*, Guid*, void**, int>)(lpVtbl[4]))((ID3D12Heap1*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Heap1*, Guid*, uint*, void*, int>)(lpVtbl[5]))((ID3D12Heap1*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Heap1*, Guid*, uint, void*, int>)(lpVtbl[6]))((ID3D12Heap1*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Heap1*, Guid*, IUnknown*, int>)(lpVtbl[7]))((ID3D12Heap1*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Heap1*, char**, int>)(lpVtbl[8]))((ID3D12Heap1*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Heap1::GetProtectedResourceSession"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetProtectedResourceSession(Guid* riid, void** ppProtectedSession)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Heap1*, Guid*, void**, int>)(lpVtbl[9]))((ID3D12Heap1*)Unsafe.AsPointer(ref this), riid, ppProtectedSession);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList3"]/*' />
/// <unmanaged>ID3D12GraphicsCommandList3</unmanaged>
[Guid("6fda83a7-b84c-4e38-9ac8-c7bd22016b3d")]
[NativeTypeName("struct ID3D12GraphicsCommandList3 : ID3D12GraphicsCommandList2")]
[NativeInheritance("ID3D12GraphicsCommandList2")]
public unsafe partial struct ID3D12GraphicsCommandList3
{
	public static ref readonly Guid IID_ID3D12GraphicsCommandList3
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA7, 0x83, 0xDA, 0x6F,
				0x4C, 0xB8,
				0x38, 0x4E,
				0x9A,
				0xC8,
				0xC7,
				0xBD,
				0x22,
				0x01,
				0x6B,
				0x3D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12GraphicsCommandList3));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList2.WriteBufferImmediate" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void WriteBufferImmediate(uint Count, WritebufferimmediateParameter* pParams, WritebufferimmediateMode* pModes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, WritebufferimmediateParameter*, WritebufferimmediateMode*, void>)(lpVtbl[3]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), Count, pParams, pModes);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.AtomicCopyBufferUINT" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void AtomicCopyBufferUINT(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, uint Dependencies, ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource*, SubresourceRangeUint64*, void>)(lpVtbl[4]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.AtomicCopyBufferUINT64" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void AtomicCopyBufferUINT64(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, uint Dependencies, ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource*, SubresourceRangeUint64*, void>)(lpVtbl[5]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.OMSetDepthBounds" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public void OMSetDepthBounds(float Min, float Max)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, float, float, void>)(lpVtbl[6]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), Min, Max);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.SetSamplePositions" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public void SetSamplePositions(uint NumSamplesPerPixel, uint NumPixels, SamplePosition* pSamplePositions)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, uint, SamplePosition*, void>)(lpVtbl[7]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), NumSamplesPerPixel, NumPixels, pSamplePositions);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.ResolveSubresourceRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public void ResolveSubresourceRegion(ID3D12Resource* pDstResource, uint DstSubresource, uint DstX, uint DstY, ID3D12Resource* pSrcResource, uint SrcSubresource, RawRect* pSrcRect, Graphics.Dxgi.Common.Format Format, ResolveMode ResolveMode)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, RawRect*, Graphics.Dxgi.Common.Format, ResolveMode, void>)(lpVtbl[8]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pDstResource, DstSubresource, DstX, DstY, pSrcResource, SrcSubresource, pSrcRect, Format, ResolveMode);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.SetViewInstanceMask" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public void SetViewInstanceMask(uint Mask)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, void>)(lpVtbl[9]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), Mask);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Close" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult Close()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, int>)(lpVtbl[10]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Reset" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult Reset(ID3D12CommandAllocator* pAllocator, ID3D12PipelineState* pInitialState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12CommandAllocator*, ID3D12PipelineState*, int>)(lpVtbl[11]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pAllocator, pInitialState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public void ClearState(ID3D12PipelineState* pPipelineState)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12PipelineState*, void>)(lpVtbl[12]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pPipelineState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DrawInstanced" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, uint, uint, uint, void>)(lpVtbl[13]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DrawIndexedInstanced" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, uint, uint, int, uint, void>)(lpVtbl[14]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Dispatch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, uint, uint, void>)(lpVtbl[15]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyBufferRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public void CopyBufferRegion(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, ulong NumBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, ulong, void>)(lpVtbl[16]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyTextureRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public void CopyTextureRegion(TextureCopyLocation* pDst, uint DstX, uint DstY, uint DstZ, TextureCopyLocation* pSrc, Box* pSrcBox)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, TextureCopyLocation*, uint, uint, uint, TextureCopyLocation*, Box*, void>)(lpVtbl[17]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public void CopyResource(ID3D12Resource* pDstResource, ID3D12Resource* pSrcResource)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12Resource*, ID3D12Resource*, void>)(lpVtbl[18]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pDstResource, pSrcResource);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyTiles" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public void CopyTiles(ID3D12Resource* pTiledResource, TiledResourceCoordinate* pTileRegionStartCoordinate, TileRegionSize* pTileRegionSize, ID3D12Resource* pBuffer, ulong BufferStartOffsetInBytes, TileCopyFlags Flags)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, ID3D12Resource*, ulong, TileCopyFlags, void>)(lpVtbl[19]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResolveSubresource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public void ResolveSubresource(ID3D12Resource* pDstResource, uint DstSubresource, ID3D12Resource* pSrcResource, uint SrcSubresource, Graphics.Dxgi.Common.Format Format)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12Resource*, uint, ID3D12Resource*, uint, Graphics.Dxgi.Common.Format, void>)(lpVtbl[20]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetPrimitiveTopology" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public void IASetPrimitiveTopology(Graphics.Direct3D.PrimitiveTopology PrimitiveTopology)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, Graphics.Direct3D.PrimitiveTopology, void>)(lpVtbl[21]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), PrimitiveTopology);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.RSSetViewports" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public void RSSetViewports(uint NumViewports, Viewport* pViewports)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, Viewport*, void>)(lpVtbl[22]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), NumViewports, pViewports);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.RSSetScissorRects" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public void RSSetScissorRects(uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, RawRect*, void>)(lpVtbl[23]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetBlendFactor" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public void OMSetBlendFactor(float* BlendFactor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, float*, void>)(lpVtbl[24]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), BlendFactor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetStencilRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public void OMSetStencilRef(uint StencilRef)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, void>)(lpVtbl[25]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), StencilRef);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetPipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public void SetPipelineState(ID3D12PipelineState* pPipelineState)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12PipelineState*, void>)(lpVtbl[26]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pPipelineState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResourceBarrier" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public void ResourceBarrier(uint NumBarriers, ResourceBarrier* pBarriers)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, ResourceBarrier*, void>)(lpVtbl[27]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), NumBarriers, pBarriers);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ExecuteBundle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public void ExecuteBundle(ID3D12GraphicsCommandList* pCommandList)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12GraphicsCommandList*, void>)(lpVtbl[28]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pCommandList);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetDescriptorHeaps" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public void SetDescriptorHeaps(uint NumDescriptorHeaps, ID3D12DescriptorHeap* ppDescriptorHeaps)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, ID3D12DescriptorHeap*, void>)(lpVtbl[29]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), NumDescriptorHeaps, ppDescriptorHeaps);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public void SetComputeRootSignature(ID3D12RootSignature* pRootSignature)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12RootSignature*, void>)(lpVtbl[30]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pRootSignature);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public void SetGraphicsRootSignature(ID3D12RootSignature* pRootSignature)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12RootSignature*, void>)(lpVtbl[31]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pRootSignature);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootDescriptorTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public void SetComputeRootDescriptorTable(uint RootParameterIndex, GpuDescriptorHandle* BaseDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, GpuDescriptorHandle*, void>)(lpVtbl[32]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), RootParameterIndex, BaseDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootDescriptorTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public void SetGraphicsRootDescriptorTable(uint RootParameterIndex, GpuDescriptorHandle* BaseDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, GpuDescriptorHandle*, void>)(lpVtbl[33]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), RootParameterIndex, BaseDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRoot32BitConstant" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public void SetComputeRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, uint, uint, void>)(lpVtbl[34]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), RootParameterIndex, SrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRoot32BitConstant" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public void SetGraphicsRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, uint, uint, void>)(lpVtbl[35]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), RootParameterIndex, SrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRoot32BitConstants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public void SetComputeRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void* pSrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, uint, void*, uint, void>)(lpVtbl[36]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRoot32BitConstants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public void SetGraphicsRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void* pSrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, uint, void*, uint, void>)(lpVtbl[37]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public void SetComputeRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, ulong, void>)(lpVtbl[38]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public void SetGraphicsRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, ulong, void>)(lpVtbl[39]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public void SetComputeRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, ulong, void>)(lpVtbl[40]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public void SetGraphicsRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, ulong, void>)(lpVtbl[41]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public void SetComputeRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, ulong, void>)(lpVtbl[42]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public void SetGraphicsRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, ulong, void>)(lpVtbl[43]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetIndexBuffer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public void IASetIndexBuffer(IndexBufferView* pView)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, IndexBufferView*, void>)(lpVtbl[44]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pView);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetVertexBuffers" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public void IASetVertexBuffers(uint StartSlot, uint NumViews, VertexBufferView* pViews)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, uint, VertexBufferView*, void>)(lpVtbl[45]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), StartSlot, NumViews, pViews);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SOSetTargets" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public void SOSetTargets(uint StartSlot, uint NumViews, StreamOutputBufferView* pViews)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, uint, StreamOutputBufferView*, void>)(lpVtbl[46]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), StartSlot, NumViews, pViews);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetRenderTargets" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public void OMSetRenderTargets(uint NumRenderTargetDescriptors, CpuDescriptorHandle* pRenderTargetDescriptors, Bool32 RTsSingleHandleToDescriptorRange, CpuDescriptorHandle* pDepthStencilDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, CpuDescriptorHandle*, Bool32, CpuDescriptorHandle*, void>)(lpVtbl[47]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearDepthStencilView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public void ClearDepthStencilView(CpuDescriptorHandle* DepthStencilView, ClearFlags ClearFlags, float Depth, byte Stencil, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, CpuDescriptorHandle*, ClearFlags, float, byte, uint, RawRect*, void>)(lpVtbl[48]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearRenderTargetView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public void ClearRenderTargetView(CpuDescriptorHandle* RenderTargetView, float* ColorRGBA, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, CpuDescriptorHandle*, float*, uint, RawRect*, void>)(lpVtbl[49]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), RenderTargetView, ColorRGBA, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearUnorderedAccessViewUint" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public void ClearUnorderedAccessViewUint(GpuDescriptorHandle* ViewGPUHandleInCurrentHeap, CpuDescriptorHandle* ViewCPUHandle, ID3D12Resource* pResource, uint* Values, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, GpuDescriptorHandle*, CpuDescriptorHandle*, ID3D12Resource*, uint*, uint, RawRect*, void>)(lpVtbl[50]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearUnorderedAccessViewFloat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public void ClearUnorderedAccessViewFloat(GpuDescriptorHandle* ViewGPUHandleInCurrentHeap, CpuDescriptorHandle* ViewCPUHandle, ID3D12Resource* pResource, float* Values, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, GpuDescriptorHandle*, CpuDescriptorHandle*, ID3D12Resource*, float*, uint, RawRect*, void>)(lpVtbl[51]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DiscardResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public void DiscardResource(ID3D12Resource* pResource, DiscardRegion* pRegion)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12Resource*, DiscardRegion*, void>)(lpVtbl[52]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pResource, pRegion);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.BeginQuery" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public void BeginQuery(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint Index)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12QueryHeap*, QueryType, uint, void>)(lpVtbl[53]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pQueryHeap, Type, Index);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.EndQuery" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public void EndQuery(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint Index)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12QueryHeap*, QueryType, uint, void>)(lpVtbl[54]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pQueryHeap, Type, Index);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResolveQueryData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public void ResolveQueryData(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint StartIndex, uint NumQueries, ID3D12Resource* pDestinationBuffer, ulong AlignedDestinationBufferOffset)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12QueryHeap*, QueryType, uint, uint, ID3D12Resource*, ulong, void>)(lpVtbl[55]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetPredication" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public void SetPredication(ID3D12Resource* pBuffer, ulong AlignedBufferOffset, PredicationOp Operation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12Resource*, ulong, PredicationOp, void>)(lpVtbl[56]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pBuffer, AlignedBufferOffset, Operation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetMarker" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public void SetMarker(uint Metadata, void* pData, uint Size)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, void*, uint, void>)(lpVtbl[57]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), Metadata, pData, Size);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.BeginEvent" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public void BeginEvent(uint Metadata, void* pData, uint Size)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, uint, void*, uint, void>)(lpVtbl[58]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), Metadata, pData, Size);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.EndEvent" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public void EndEvent()
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, void>)(lpVtbl[59]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ExecuteIndirect" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(60)]
	public void ExecuteIndirect(ID3D12CommandSignature* pCommandSignature, uint MaxCommandCount, ID3D12Resource* pArgumentBuffer, ulong ArgumentBufferOffset, ID3D12Resource* pCountBuffer, ulong CountBufferOffset)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(lpVtbl[60]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
	}

	/// <inheritdoc cref="ID3D12CommandList.GetType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(61)]
	public new Graphics.Direct3D12.CommandListType GetType()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, Graphics.Direct3D12.CommandListType>)(lpVtbl[61]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(62)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, Guid*, void**, int>)(lpVtbl[62]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(63)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, Guid*, uint*, void*, int>)(lpVtbl[63]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(64)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, Guid*, uint, void*, int>)(lpVtbl[64]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(65)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, Guid*, IUnknown*, int>)(lpVtbl[65]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(66)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, char**, int>)(lpVtbl[66]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList3::SetProtectedResourceSession"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(67)]
	public void SetProtectedResourceSession(ID3D12ProtectedResourceSession* pProtectedResourceSession)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12ProtectedResourceSession*, void>)(lpVtbl[67]))((ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref this), pProtectedResourceSession);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12MetaCommand"]/*' />
/// <unmanaged>ID3D12MetaCommand</unmanaged>
[Guid("dbb84c27-36ce-4fc9-b801-f048c46ac570")]
[NativeTypeName("struct ID3D12MetaCommand : ID3D12Pageable")]
[NativeInheritance("ID3D12Pageable")]
public unsafe partial struct ID3D12MetaCommand
{
	public static ref readonly Guid IID_ID3D12MetaCommand
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x27, 0x4C, 0xB8, 0xDB,
				0xCE, 0x36,
				0xC9, 0x4F,
				0xB8,
				0x01,
				0xF0,
				0x48,
				0xC4,
				0x6A,
				0xC5,
				0x70
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12MetaCommand));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12MetaCommand*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12MetaCommand*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12MetaCommand*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12MetaCommand*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12MetaCommand*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12MetaCommand*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12MetaCommand*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12MetaCommand*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12MetaCommand*, char**, int>)(lpVtbl[7]))((ID3D12MetaCommand*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12MetaCommand::GetRequiredParameterResourceSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public ulong GetRequiredParameterResourceSize(MetaCommandParameterStage Stage, uint ParameterIndex)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12MetaCommand*, MetaCommandParameterStage, uint, ulong>)(lpVtbl[8]))((ID3D12MetaCommand*)Unsafe.AsPointer(ref this), Stage, ParameterIndex);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList4"]/*' />
/// <unmanaged>ID3D12GraphicsCommandList4</unmanaged>
[Guid("8754318e-d3a9-4541-98cf-645b50dc4874")]
[NativeTypeName("struct ID3D12GraphicsCommandList4 : ID3D12GraphicsCommandList3")]
[NativeInheritance("ID3D12GraphicsCommandList3")]
public unsafe partial struct ID3D12GraphicsCommandList4
{
	public static ref readonly Guid IID_ID3D12GraphicsCommandList4
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8E, 0x31, 0x54, 0x87,
				0xA9, 0xD3,
				0x41, 0x45,
				0x98,
				0xCF,
				0x64,
				0x5B,
				0x50,
				0xDC,
				0x48,
				0x74
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12GraphicsCommandList4));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList3.SetProtectedResourceSession" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void SetProtectedResourceSession(ID3D12ProtectedResourceSession* pProtectedResourceSession)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12ProtectedResourceSession*, void>)(lpVtbl[3]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pProtectedResourceSession);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList2.WriteBufferImmediate" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void WriteBufferImmediate(uint Count, WritebufferimmediateParameter* pParams, WritebufferimmediateMode* pModes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, WritebufferimmediateParameter*, WritebufferimmediateMode*, void>)(lpVtbl[4]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), Count, pParams, pModes);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.AtomicCopyBufferUINT" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void AtomicCopyBufferUINT(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, uint Dependencies, ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource*, SubresourceRangeUint64*, void>)(lpVtbl[5]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.AtomicCopyBufferUINT64" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public void AtomicCopyBufferUINT64(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, uint Dependencies, ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource*, SubresourceRangeUint64*, void>)(lpVtbl[6]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.OMSetDepthBounds" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public void OMSetDepthBounds(float Min, float Max)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, float, float, void>)(lpVtbl[7]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), Min, Max);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.SetSamplePositions" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public void SetSamplePositions(uint NumSamplesPerPixel, uint NumPixels, SamplePosition* pSamplePositions)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, uint, SamplePosition*, void>)(lpVtbl[8]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), NumSamplesPerPixel, NumPixels, pSamplePositions);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.ResolveSubresourceRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public void ResolveSubresourceRegion(ID3D12Resource* pDstResource, uint DstSubresource, uint DstX, uint DstY, ID3D12Resource* pSrcResource, uint SrcSubresource, RawRect* pSrcRect, Graphics.Dxgi.Common.Format Format, ResolveMode ResolveMode)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, RawRect*, Graphics.Dxgi.Common.Format, ResolveMode, void>)(lpVtbl[9]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pDstResource, DstSubresource, DstX, DstY, pSrcResource, SrcSubresource, pSrcRect, Format, ResolveMode);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.SetViewInstanceMask" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public void SetViewInstanceMask(uint Mask)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, void>)(lpVtbl[10]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), Mask);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Close" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult Close()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, int>)(lpVtbl[11]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Reset" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult Reset(ID3D12CommandAllocator* pAllocator, ID3D12PipelineState* pInitialState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12CommandAllocator*, ID3D12PipelineState*, int>)(lpVtbl[12]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pAllocator, pInitialState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public void ClearState(ID3D12PipelineState* pPipelineState)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12PipelineState*, void>)(lpVtbl[13]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pPipelineState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DrawInstanced" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, uint, uint, uint, void>)(lpVtbl[14]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DrawIndexedInstanced" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, uint, uint, int, uint, void>)(lpVtbl[15]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Dispatch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, uint, uint, void>)(lpVtbl[16]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyBufferRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public void CopyBufferRegion(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, ulong NumBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, ulong, void>)(lpVtbl[17]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyTextureRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public void CopyTextureRegion(TextureCopyLocation* pDst, uint DstX, uint DstY, uint DstZ, TextureCopyLocation* pSrc, Box* pSrcBox)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, TextureCopyLocation*, uint, uint, uint, TextureCopyLocation*, Box*, void>)(lpVtbl[18]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public void CopyResource(ID3D12Resource* pDstResource, ID3D12Resource* pSrcResource)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12Resource*, ID3D12Resource*, void>)(lpVtbl[19]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pDstResource, pSrcResource);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyTiles" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public void CopyTiles(ID3D12Resource* pTiledResource, TiledResourceCoordinate* pTileRegionStartCoordinate, TileRegionSize* pTileRegionSize, ID3D12Resource* pBuffer, ulong BufferStartOffsetInBytes, TileCopyFlags Flags)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, ID3D12Resource*, ulong, TileCopyFlags, void>)(lpVtbl[20]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResolveSubresource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public void ResolveSubresource(ID3D12Resource* pDstResource, uint DstSubresource, ID3D12Resource* pSrcResource, uint SrcSubresource, Graphics.Dxgi.Common.Format Format)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12Resource*, uint, ID3D12Resource*, uint, Graphics.Dxgi.Common.Format, void>)(lpVtbl[21]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetPrimitiveTopology" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public void IASetPrimitiveTopology(Graphics.Direct3D.PrimitiveTopology PrimitiveTopology)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, Graphics.Direct3D.PrimitiveTopology, void>)(lpVtbl[22]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), PrimitiveTopology);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.RSSetViewports" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public void RSSetViewports(uint NumViewports, Viewport* pViewports)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, Viewport*, void>)(lpVtbl[23]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), NumViewports, pViewports);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.RSSetScissorRects" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public void RSSetScissorRects(uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, RawRect*, void>)(lpVtbl[24]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetBlendFactor" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public void OMSetBlendFactor(float* BlendFactor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, float*, void>)(lpVtbl[25]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), BlendFactor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetStencilRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public void OMSetStencilRef(uint StencilRef)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, void>)(lpVtbl[26]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), StencilRef);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetPipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public void SetPipelineState(ID3D12PipelineState* pPipelineState)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12PipelineState*, void>)(lpVtbl[27]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pPipelineState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResourceBarrier" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public void ResourceBarrier(uint NumBarriers, ResourceBarrier* pBarriers)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, ResourceBarrier*, void>)(lpVtbl[28]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), NumBarriers, pBarriers);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ExecuteBundle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public void ExecuteBundle(ID3D12GraphicsCommandList* pCommandList)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12GraphicsCommandList*, void>)(lpVtbl[29]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pCommandList);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetDescriptorHeaps" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public void SetDescriptorHeaps(uint NumDescriptorHeaps, ID3D12DescriptorHeap* ppDescriptorHeaps)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, ID3D12DescriptorHeap*, void>)(lpVtbl[30]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), NumDescriptorHeaps, ppDescriptorHeaps);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public void SetComputeRootSignature(ID3D12RootSignature* pRootSignature)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12RootSignature*, void>)(lpVtbl[31]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pRootSignature);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public void SetGraphicsRootSignature(ID3D12RootSignature* pRootSignature)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12RootSignature*, void>)(lpVtbl[32]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pRootSignature);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootDescriptorTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public void SetComputeRootDescriptorTable(uint RootParameterIndex, GpuDescriptorHandle* BaseDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, GpuDescriptorHandle*, void>)(lpVtbl[33]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), RootParameterIndex, BaseDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootDescriptorTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public void SetGraphicsRootDescriptorTable(uint RootParameterIndex, GpuDescriptorHandle* BaseDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, GpuDescriptorHandle*, void>)(lpVtbl[34]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), RootParameterIndex, BaseDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRoot32BitConstant" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public void SetComputeRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, uint, uint, void>)(lpVtbl[35]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), RootParameterIndex, SrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRoot32BitConstant" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public void SetGraphicsRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, uint, uint, void>)(lpVtbl[36]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), RootParameterIndex, SrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRoot32BitConstants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public void SetComputeRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void* pSrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, uint, void*, uint, void>)(lpVtbl[37]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRoot32BitConstants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public void SetGraphicsRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void* pSrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, uint, void*, uint, void>)(lpVtbl[38]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public void SetComputeRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, ulong, void>)(lpVtbl[39]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public void SetGraphicsRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, ulong, void>)(lpVtbl[40]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public void SetComputeRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, ulong, void>)(lpVtbl[41]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public void SetGraphicsRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, ulong, void>)(lpVtbl[42]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public void SetComputeRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, ulong, void>)(lpVtbl[43]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public void SetGraphicsRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, ulong, void>)(lpVtbl[44]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetIndexBuffer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public void IASetIndexBuffer(IndexBufferView* pView)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, IndexBufferView*, void>)(lpVtbl[45]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pView);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetVertexBuffers" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public void IASetVertexBuffers(uint StartSlot, uint NumViews, VertexBufferView* pViews)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, uint, VertexBufferView*, void>)(lpVtbl[46]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), StartSlot, NumViews, pViews);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SOSetTargets" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public void SOSetTargets(uint StartSlot, uint NumViews, StreamOutputBufferView* pViews)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, uint, StreamOutputBufferView*, void>)(lpVtbl[47]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), StartSlot, NumViews, pViews);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetRenderTargets" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public void OMSetRenderTargets(uint NumRenderTargetDescriptors, CpuDescriptorHandle* pRenderTargetDescriptors, Bool32 RTsSingleHandleToDescriptorRange, CpuDescriptorHandle* pDepthStencilDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, CpuDescriptorHandle*, Bool32, CpuDescriptorHandle*, void>)(lpVtbl[48]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearDepthStencilView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public void ClearDepthStencilView(CpuDescriptorHandle* DepthStencilView, ClearFlags ClearFlags, float Depth, byte Stencil, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, CpuDescriptorHandle*, ClearFlags, float, byte, uint, RawRect*, void>)(lpVtbl[49]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearRenderTargetView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public void ClearRenderTargetView(CpuDescriptorHandle* RenderTargetView, float* ColorRGBA, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, CpuDescriptorHandle*, float*, uint, RawRect*, void>)(lpVtbl[50]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), RenderTargetView, ColorRGBA, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearUnorderedAccessViewUint" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public void ClearUnorderedAccessViewUint(GpuDescriptorHandle* ViewGPUHandleInCurrentHeap, CpuDescriptorHandle* ViewCPUHandle, ID3D12Resource* pResource, uint* Values, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, GpuDescriptorHandle*, CpuDescriptorHandle*, ID3D12Resource*, uint*, uint, RawRect*, void>)(lpVtbl[51]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearUnorderedAccessViewFloat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public void ClearUnorderedAccessViewFloat(GpuDescriptorHandle* ViewGPUHandleInCurrentHeap, CpuDescriptorHandle* ViewCPUHandle, ID3D12Resource* pResource, float* Values, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, GpuDescriptorHandle*, CpuDescriptorHandle*, ID3D12Resource*, float*, uint, RawRect*, void>)(lpVtbl[52]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DiscardResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public void DiscardResource(ID3D12Resource* pResource, DiscardRegion* pRegion)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12Resource*, DiscardRegion*, void>)(lpVtbl[53]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pResource, pRegion);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.BeginQuery" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public void BeginQuery(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint Index)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12QueryHeap*, QueryType, uint, void>)(lpVtbl[54]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pQueryHeap, Type, Index);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.EndQuery" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public void EndQuery(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint Index)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12QueryHeap*, QueryType, uint, void>)(lpVtbl[55]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pQueryHeap, Type, Index);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResolveQueryData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public void ResolveQueryData(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint StartIndex, uint NumQueries, ID3D12Resource* pDestinationBuffer, ulong AlignedDestinationBufferOffset)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12QueryHeap*, QueryType, uint, uint, ID3D12Resource*, ulong, void>)(lpVtbl[56]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetPredication" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public void SetPredication(ID3D12Resource* pBuffer, ulong AlignedBufferOffset, PredicationOp Operation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12Resource*, ulong, PredicationOp, void>)(lpVtbl[57]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pBuffer, AlignedBufferOffset, Operation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetMarker" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public void SetMarker(uint Metadata, void* pData, uint Size)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, void*, uint, void>)(lpVtbl[58]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), Metadata, pData, Size);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.BeginEvent" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public void BeginEvent(uint Metadata, void* pData, uint Size)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, void*, uint, void>)(lpVtbl[59]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), Metadata, pData, Size);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.EndEvent" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(60)]
	public void EndEvent()
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, void>)(lpVtbl[60]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ExecuteIndirect" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(61)]
	public void ExecuteIndirect(ID3D12CommandSignature* pCommandSignature, uint MaxCommandCount, ID3D12Resource* pArgumentBuffer, ulong ArgumentBufferOffset, ID3D12Resource* pCountBuffer, ulong CountBufferOffset)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(lpVtbl[61]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
	}

	/// <inheritdoc cref="ID3D12CommandList.GetType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(62)]
	public new Graphics.Direct3D12.CommandListType GetType()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, Graphics.Direct3D12.CommandListType>)(lpVtbl[62]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(63)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, Guid*, void**, int>)(lpVtbl[63]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(64)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, Guid*, uint*, void*, int>)(lpVtbl[64]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(65)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, Guid*, uint, void*, int>)(lpVtbl[65]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(66)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, Guid*, IUnknown*, int>)(lpVtbl[66]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(67)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, char**, int>)(lpVtbl[67]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList4::BeginRenderPass"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(68)]
	public void BeginRenderPass(uint NumRenderTargets, RenderPassRenderTargetDescription* pRenderTargets, RenderPassDepthStencilDescription* pDepthStencil, RenderPassFlags Flags)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, RenderPassRenderTargetDescription*, RenderPassDepthStencilDescription*, RenderPassFlags, void>)(lpVtbl[68]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), NumRenderTargets, pRenderTargets, pDepthStencil, Flags);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList4::EndRenderPass"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(69)]
	public void EndRenderPass()
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, void>)(lpVtbl[69]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList4::InitializeMetaCommand"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(70)]
	public void InitializeMetaCommand(ID3D12MetaCommand* pMetaCommand, void* pInitializationParametersData, nuint InitializationParametersDataSizeInBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12MetaCommand*, void*, nuint, void>)(lpVtbl[70]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pMetaCommand, pInitializationParametersData, InitializationParametersDataSizeInBytes);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList4::ExecuteMetaCommand"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(71)]
	public void ExecuteMetaCommand(ID3D12MetaCommand* pMetaCommand, void* pExecutionParametersData, nuint ExecutionParametersDataSizeInBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12MetaCommand*, void*, nuint, void>)(lpVtbl[71]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pMetaCommand, pExecutionParametersData, ExecutionParametersDataSizeInBytes);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList4::BuildRaytracingAccelerationStructure"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(72)]
	public void BuildRaytracingAccelerationStructure(BuildRaytracingAccelerationStructureDescription* pDesc, uint NumPostbuildInfoDescs, RaytracingAccelerationStructurePostbuildInfoDescription* pPostbuildInfoDescs)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, BuildRaytracingAccelerationStructureDescription*, uint, RaytracingAccelerationStructurePostbuildInfoDescription*, void>)(lpVtbl[72]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pDesc, NumPostbuildInfoDescs, pPostbuildInfoDescs);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList4::EmitRaytracingAccelerationStructurePostbuildInfo"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(73)]
	public void EmitRaytracingAccelerationStructurePostbuildInfo(RaytracingAccelerationStructurePostbuildInfoDescription* pDesc, uint NumSourceAccelerationStructures, ulong* pSourceAccelerationStructureData)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, RaytracingAccelerationStructurePostbuildInfoDescription*, uint, ulong*, void>)(lpVtbl[73]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pDesc, NumSourceAccelerationStructures, pSourceAccelerationStructureData);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList4::CopyRaytracingAccelerationStructure"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(74)]
	public void CopyRaytracingAccelerationStructure(ulong DestAccelerationStructureData, ulong SourceAccelerationStructureData, RaytracingAccelerationStructureCopyMode Mode)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ulong, ulong, RaytracingAccelerationStructureCopyMode, void>)(lpVtbl[74]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), DestAccelerationStructureData, SourceAccelerationStructureData, Mode);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList4::SetPipelineState1"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(75)]
	public void SetPipelineState1(ID3D12StateObject* pStateObject)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12StateObject*, void>)(lpVtbl[75]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pStateObject);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList4::DispatchRays"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(76)]
	public void DispatchRays(DispatchRaysDescription* pDesc)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, DispatchRaysDescription*, void>)(lpVtbl[76]))((ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref this), pDesc);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderCacheSession"]/*' />
/// <unmanaged>ID3D12ShaderCacheSession</unmanaged>
[Guid("28e2495d-0f64-4ae4-a6ec-129255dc49a8")]
[NativeTypeName("struct ID3D12ShaderCacheSession : ID3D12DeviceChild")]
[NativeInheritance("ID3D12DeviceChild")]
public unsafe partial struct ID3D12ShaderCacheSession
{
	public static ref readonly Guid IID_ID3D12ShaderCacheSession
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5D, 0x49, 0xE2, 0x28,
				0x64, 0x0F,
				0xE4, 0x4A,
				0xA6,
				0xEC,
				0x12,
				0x92,
				0x55,
				0xDC,
				0x49,
				0xA8
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12ShaderCacheSession));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderCacheSession*, Guid*, void**, int>)(lpVtbl[3]))((ID3D12ShaderCacheSession*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderCacheSession*, Guid*, uint*, void*, int>)(lpVtbl[4]))((ID3D12ShaderCacheSession*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderCacheSession*, Guid*, uint, void*, int>)(lpVtbl[5]))((ID3D12ShaderCacheSession*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderCacheSession*, Guid*, IUnknown*, int>)(lpVtbl[6]))((ID3D12ShaderCacheSession*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderCacheSession*, char**, int>)(lpVtbl[7]))((ID3D12ShaderCacheSession*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderCacheSession::FindValue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult FindValue(void* pKey, uint KeySize, void* pValue, uint* pValueSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderCacheSession*, void*, uint, void*, uint*, int>)(lpVtbl[8]))((ID3D12ShaderCacheSession*)Unsafe.AsPointer(ref this), pKey, KeySize, pValue, pValueSize);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderCacheSession::StoreValue"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult StoreValue(void* pKey, uint KeySize, void* pValue, uint ValueSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderCacheSession*, void*, uint, void*, uint, int>)(lpVtbl[9]))((ID3D12ShaderCacheSession*)Unsafe.AsPointer(ref this), pKey, KeySize, pValue, ValueSize);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderCacheSession::SetDeleteOnDestroy"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public void SetDeleteOnDestroy()
	{
		((delegate* unmanaged[Stdcall]<ID3D12ShaderCacheSession*, void>)(lpVtbl[10]))((ID3D12ShaderCacheSession*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderCacheSession::GetDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public Graphics.Direct3D12.ShaderCacheSessionDescription GetDesc()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderCacheSession*, Graphics.Direct3D12.ShaderCacheSessionDescription>)(lpVtbl[11]))((ID3D12ShaderCacheSession*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device9"]/*' />
/// <unmanaged>ID3D12Device9</unmanaged>
[Guid("4c80e962-f032-4f60-bc9e-ebc2cfa1d83c")]
[NativeTypeName("struct ID3D12Device9 : ID3D12Device8")]
[NativeInheritance("ID3D12Device8")]
public unsafe partial struct ID3D12Device9
{
	public static ref readonly Guid IID_ID3D12Device9
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x62, 0xE9, 0x80, 0x4C,
				0x32, 0xF0,
				0x60, 0x4F,
				0xBC,
				0x9E,
				0xEB,
				0xC2,
				0xCF,
				0xA1,
				0xD8,
				0x3C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Device9));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device8.GetResourceAllocationInfo2" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo2(uint visibleMask, uint numResourceDescs, ResourceDescription1* pResourceDescs, ResourceAllocationInfo1* pResourceAllocationInfo1)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, uint, uint, ResourceDescription1*, ResourceAllocationInfo1*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[3]))((ID3D12Device9*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
	}

	/// <inheritdoc cref="ID3D12Device8.CreateCommittedResource2" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult CreateCommittedResource2(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription1* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, HeapProperties*, HeapFlags, ResourceDescription1*, ResourceStates, ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[4]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device8.CreatePlacedResource1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult CreatePlacedResource1(ID3D12Heap* pHeap, ulong HeapOffset, ResourceDescription1* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, ID3D12Heap*, ulong, ResourceDescription1*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[5]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device8.CreateSamplerFeedbackUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public void CreateSamplerFeedbackUnorderedAccessView(ID3D12Resource* pTargetedResource, ID3D12Resource* pFeedbackResource, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device9*, ID3D12Resource*, ID3D12Resource*, CpuDescriptorHandle*, void>)(lpVtbl[6]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pTargetedResource, pFeedbackResource, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device8.GetCopyableFootprints1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public void GetCopyableFootprints1(ResourceDescription1* pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device9*, ResourceDescription1*, uint, uint, ulong, PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(lpVtbl[7]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
	}

	/// <inheritdoc cref="ID3D12Device7.AddToStateObject" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult AddToStateObject(StateObjectDescription* pAddition, ID3D12StateObject* pStateObjectToGrowFrom, Guid* riid, void** ppNewStateObject)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, StateObjectDescription*, ID3D12StateObject*, Guid*, void**, int>)(lpVtbl[8]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pAddition, pStateObjectToGrowFrom, riid, ppNewStateObject);
	}

	/// <inheritdoc cref="ID3D12Device7.CreateProtectedResourceSession1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult CreateProtectedResourceSession1(ProtectedResourceSessionDescription1* pDesc, Guid* riid, void** ppSession)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, ProtectedResourceSessionDescription1*, Guid*, void**, int>)(lpVtbl[9]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, riid, ppSession);
	}

	/// <inheritdoc cref="ID3D12Device6.SetBackgroundProcessingMode" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetBackgroundProcessingMode(BackgroundProcessingMode Mode, MeasurementsAction MeasurementsAction, IntPtr hEventToSignalUponCompletion, Bool32* pbFurtherMeasurementsDesired)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, BackgroundProcessingMode, MeasurementsAction, IntPtr, Bool32*, int>)(lpVtbl[10]))((ID3D12Device9*)Unsafe.AsPointer(ref this), Mode, MeasurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementsDesired);
	}

	/// <inheritdoc cref="ID3D12Device5.CreateLifetimeTracker" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult CreateLifetimeTracker(ID3D12LifetimeOwner* pOwner, Guid* riid, void** ppvTracker)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, ID3D12LifetimeOwner*, Guid*, void**, int>)(lpVtbl[11]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pOwner, riid, ppvTracker);
	}

	/// <inheritdoc cref="ID3D12Device5.RemoveDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public void RemoveDevice()
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device9*, void>)(lpVtbl[12]))((ID3D12Device9*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device5.EnumerateMetaCommands" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult EnumerateMetaCommands(uint* pNumMetaCommands, MetaCommandDescription* pDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, uint*, MetaCommandDescription*, int>)(lpVtbl[13]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pNumMetaCommands, pDescs);
	}

	/// <inheritdoc cref="ID3D12Device5.EnumerateMetaCommandParameters" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public HResult EnumerateMetaCommandParameters(Guid* CommandId, MetaCommandParameterStage Stage, uint* pTotalStructureSizeInBytes, uint* pParameterCount, MetaCommandParameterDescription* pParameterDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, Guid*, MetaCommandParameterStage, uint*, uint*, MetaCommandParameterDescription*, int>)(lpVtbl[14]))((ID3D12Device9*)Unsafe.AsPointer(ref this), CommandId, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs);
	}

	/// <inheritdoc cref="ID3D12Device5.CreateMetaCommand" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult CreateMetaCommand(Guid* CommandId, uint NodeMask, void* pCreationParametersData, nuint CreationParametersDataSizeInBytes, Guid* riid, void** ppMetaCommand)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, Guid*, uint, void*, nuint, Guid*, void**, int>)(lpVtbl[15]))((ID3D12Device9*)Unsafe.AsPointer(ref this), CommandId, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand);
	}

	/// <inheritdoc cref="ID3D12Device5.CreateStateObject" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult CreateStateObject(StateObjectDescription* pDesc, Guid* riid, void** ppStateObject)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, StateObjectDescription*, Guid*, void**, int>)(lpVtbl[16]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, riid, ppStateObject);
	}

	/// <inheritdoc cref="ID3D12Device5.GetRaytracingAccelerationStructurePrebuildInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public void GetRaytracingAccelerationStructurePrebuildInfo(BuildRaytracingAccelerationStructureInputs* pDesc, RaytracingAccelerationStructurePrebuildInfo* pInfo)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device9*, BuildRaytracingAccelerationStructureInputs*, RaytracingAccelerationStructurePrebuildInfo*, void>)(lpVtbl[17]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, pInfo);
	}

	/// <inheritdoc cref="ID3D12Device5.CheckDriverMatchingIdentifier" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public Graphics.Direct3D12.DriverMatchingIdentifierStatus CheckDriverMatchingIdentifier(SerializedDataType SerializedDataType, SerializedDataDriverMatchingIdentifier* pIdentifierToCheck)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, SerializedDataType, SerializedDataDriverMatchingIdentifier*, Graphics.Direct3D12.DriverMatchingIdentifierStatus>)(lpVtbl[18]))((ID3D12Device9*)Unsafe.AsPointer(ref this), SerializedDataType, pIdentifierToCheck);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateCommandList1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult CreateCommandList1(uint nodeMask, CommandListType type, CommandListFlags flags, Guid* riid, void** ppCommandList)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, uint, CommandListType, CommandListFlags, Guid*, void**, int>)(lpVtbl[19]))((ID3D12Device9*)Unsafe.AsPointer(ref this), nodeMask, type, flags, riid, ppCommandList);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateProtectedResourceSession" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult CreateProtectedResourceSession(ProtectedResourceSessionDescription* pDesc, Guid* riid, void** ppSession)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, ProtectedResourceSessionDescription*, Guid*, void**, int>)(lpVtbl[20]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, riid, ppSession);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateCommittedResource1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult CreateCommittedResource1(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, HeapProperties*, HeapFlags, ResourceDescription*, ResourceStates, ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[21]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateHeap1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult CreateHeap1(HeapDescription* pDesc, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, HeapDescription*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[22]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, pProtectedSession, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device4.CreateReservedResource1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult CreateReservedResource1(ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, ResourceDescription*, ResourceStates, ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, int>)(lpVtbl[23]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device4.GetResourceAllocationInfo1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo1(uint visibleMask, uint numResourceDescs, ResourceDescription* pResourceDescs, ResourceAllocationInfo1* pResourceAllocationInfo1)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, uint, uint, ResourceDescription*, ResourceAllocationInfo1*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[24]))((ID3D12Device9*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
	}

	/// <inheritdoc cref="ID3D12Device3.OpenExistingHeapFromAddress" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult OpenExistingHeapFromAddress(void* pAddress, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, void*, Guid*, void**, int>)(lpVtbl[25]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pAddress, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device3.OpenExistingHeapFromFileMapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public HResult OpenExistingHeapFromFileMapping(IntPtr hFileMapping, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, IntPtr, Guid*, void**, int>)(lpVtbl[26]))((ID3D12Device9*)Unsafe.AsPointer(ref this), hFileMapping, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device3.EnqueueMakeResident" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult EnqueueMakeResident(ResidencyFlags Flags, uint NumObjects, ID3D12Pageable* ppObjects, ID3D12Fence* pFenceToSignal, ulong FenceValueToSignal)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, ResidencyFlags, uint, ID3D12Pageable*, ID3D12Fence*, ulong, int>)(lpVtbl[27]))((ID3D12Device9*)Unsafe.AsPointer(ref this), Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal);
	}

	/// <inheritdoc cref="ID3D12Device2.CreatePipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult CreatePipelineState(PipelineStateStreamDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, PipelineStateStreamDescription*, Guid*, void**, int>)(lpVtbl[28]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device1.CreatePipelineLibrary" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult CreatePipelineLibrary(void* pLibraryBlob, nuint BlobLength, Guid* riid, void** ppPipelineLibrary)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, void*, nuint, Guid*, void**, int>)(lpVtbl[29]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
	}

	/// <inheritdoc cref="ID3D12Device1.SetEventOnMultipleFenceCompletion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult SetEventOnMultipleFenceCompletion(ID3D12Fence* ppFences, ulong* pFenceValues, uint NumFences, MultipleFenceWaitFlags Flags, IntPtr hEvent)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, ID3D12Fence*, ulong*, uint, MultipleFenceWaitFlags, IntPtr, int>)(lpVtbl[30]))((ID3D12Device9*)Unsafe.AsPointer(ref this), ppFences, pFenceValues, NumFences, Flags, hEvent);
	}

	/// <inheritdoc cref="ID3D12Device1.SetResidencyPriority" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult SetResidencyPriority(uint NumObjects, ID3D12Pageable* ppObjects, ResidencyPriority* pPriorities)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, uint, ID3D12Pageable*, ResidencyPriority*, int>)(lpVtbl[31]))((ID3D12Device9*)Unsafe.AsPointer(ref this), NumObjects, ppObjects, pPriorities);
	}

	/// <inheritdoc cref="ID3D12Device.GetNodeCount" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public uint GetNodeCount()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, uint>)(lpVtbl[32]))((ID3D12Device9*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandQueue" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public HResult CreateCommandQueue(CommandQueueDescription* pDesc, Guid* riid, void** ppCommandQueue)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, CommandQueueDescription*, Guid*, void**, int>)(lpVtbl[33]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, riid, ppCommandQueue);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandAllocator" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult CreateCommandAllocator(CommandListType type, Guid* riid, void** ppCommandAllocator)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, CommandListType, Guid*, void**, int>)(lpVtbl[34]))((ID3D12Device9*)Unsafe.AsPointer(ref this), type, riid, ppCommandAllocator);
	}

	/// <inheritdoc cref="ID3D12Device.CreateGraphicsPipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult CreateGraphicsPipelineState(GraphicsPipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, GraphicsPipelineStateDescription*, Guid*, void**, int>)(lpVtbl[35]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateComputePipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult CreateComputePipelineState(ComputePipelineStateDescription* pDesc, Guid* riid, void** ppPipelineState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, ComputePipelineStateDescription*, Guid*, void**, int>)(lpVtbl[36]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, riid, ppPipelineState);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandList" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult CreateCommandList(uint nodeMask, CommandListType type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, Guid* riid, void** ppCommandList)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, uint, CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, int>)(lpVtbl[37]))((ID3D12Device9*)Unsafe.AsPointer(ref this), nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
	}

	/// <inheritdoc cref="ID3D12Device.CheckFeatureSupport" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult CheckFeatureSupport(Feature Feature, void* pFeatureSupportData, uint FeatureSupportDataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, Feature, void*, uint, int>)(lpVtbl[38]))((ID3D12Device9*)Unsafe.AsPointer(ref this), Feature, pFeatureSupportData, FeatureSupportDataSize);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDescriptorHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult CreateDescriptorHeap(DescriptorHeapDescription* pDescriptorHeapDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, DescriptorHeapDescription*, Guid*, void**, int>)(lpVtbl[39]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDescriptorHeapDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.GetDescriptorHandleIncrementSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public uint GetDescriptorHandleIncrementSize(DescriptorHeapType DescriptorHeapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, DescriptorHeapType, uint>)(lpVtbl[40]))((ID3D12Device9*)Unsafe.AsPointer(ref this), DescriptorHeapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public HResult CreateRootSignature(uint nodeMask, void* pBlobWithRootSignature, nuint blobLengthInBytes, Guid* riid, void** ppvRootSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, uint, void*, nuint, Guid*, void**, int>)(lpVtbl[41]))((ID3D12Device9*)Unsafe.AsPointer(ref this), nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
	}

	/// <inheritdoc cref="ID3D12Device.CreateConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public void CreateConstantBufferView(ConstantBufferViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device9*, ConstantBufferViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[42]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public void CreateShaderResourceView(ID3D12Resource* pResource, ShaderResourceViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device9*, ID3D12Resource*, ShaderResourceViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[43]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public void CreateUnorderedAccessView(ID3D12Resource* pResource, ID3D12Resource* pCounterResource, UnorderedAccessViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device9*, ID3D12Resource*, ID3D12Resource*, UnorderedAccessViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[44]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pResource, pCounterResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateRenderTargetView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public void CreateRenderTargetView(ID3D12Resource* pResource, RenderTargetViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device9*, ID3D12Resource*, RenderTargetViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[45]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateDepthStencilView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public void CreateDepthStencilView(ID3D12Resource* pResource, DepthStencilViewDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device9*, ID3D12Resource*, DepthStencilViewDescription*, CpuDescriptorHandle*, void>)(lpVtbl[46]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pResource, pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSampler" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public void CreateSampler(SamplerDescription* pDesc, CpuDescriptorHandle* DestDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device9*, SamplerDescription*, CpuDescriptorHandle*, void>)(lpVtbl[47]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, DestDescriptor);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptors" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public void CopyDescriptors(uint NumDestDescriptorRanges, CpuDescriptorHandle* pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint NumSrcDescriptorRanges, CpuDescriptorHandle* pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device9*, uint, CpuDescriptorHandle*, uint*, uint, CpuDescriptorHandle*, uint*, DescriptorHeapType, void>)(lpVtbl[48]))((ID3D12Device9*)Unsafe.AsPointer(ref this), NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.CopyDescriptorsSimple" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public void CopyDescriptorsSimple(uint NumDescriptors, CpuDescriptorHandle* DestDescriptorRangeStart, CpuDescriptorHandle* SrcDescriptorRangeStart, DescriptorHeapType DescriptorHeapsType)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device9*, uint, CpuDescriptorHandle*, CpuDescriptorHandle*, DescriptorHeapType, void>)(lpVtbl[49]))((ID3D12Device9*)Unsafe.AsPointer(ref this), NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceAllocationInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public Graphics.Direct3D12.ResourceAllocationInfo GetResourceAllocationInfo(uint visibleMask, uint numResourceDescs, ResourceDescription* pResourceDescs)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, uint, uint, ResourceDescription*, Graphics.Direct3D12.ResourceAllocationInfo>)(lpVtbl[50]))((ID3D12Device9*)Unsafe.AsPointer(ref this), visibleMask, numResourceDescs, pResourceDescs);
	}

	/// <inheritdoc cref="ID3D12Device.GetCustomHeapProperties" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public Graphics.Direct3D12.HeapProperties GetCustomHeapProperties(uint nodeMask, HeapType heapType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, uint, HeapType, Graphics.Direct3D12.HeapProperties>)(lpVtbl[51]))((ID3D12Device9*)Unsafe.AsPointer(ref this), nodeMask, heapType);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommittedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public HResult CreateCommittedResource(HeapProperties* pHeapProperties, HeapFlags HeapFlags, ResourceDescription* pDesc, ResourceStates InitialResourceState, ClearValue* pOptimizedClearValue, Guid* riidResource, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, HeapProperties*, HeapFlags, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[52]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public HResult CreateHeap(HeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, HeapDescription*, Guid*, void**, int>)(lpVtbl[53]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.CreatePlacedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong HeapOffset, ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, ID3D12Heap*, ulong, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[54]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateReservedResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public HResult CreateReservedResource(ResourceDescription* pDesc, ResourceStates InitialState, ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, ResourceDescription*, ResourceStates, ClearValue*, Guid*, void**, int>)(lpVtbl[55]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
	}

	/// <inheritdoc cref="ID3D12Device.CreateSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public HResult CreateSharedHandle(ID3D12DeviceChild* pObject, Security.SECURITY_ATTRIBUTES* pAttributes, uint Access, char** Name, IntPtr* pHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, ID3D12DeviceChild*, Security.SECURITY_ATTRIBUTES*, uint, char**, IntPtr*, int>)(lpVtbl[56]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pObject, pAttributes, Access, Name, pHandle);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public HResult OpenSharedHandle(IntPtr NTHandle, Guid* riid, void** ppvObj)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, IntPtr, Guid*, void**, int>)(lpVtbl[57]))((ID3D12Device9*)Unsafe.AsPointer(ref this), NTHandle, riid, ppvObj);
	}

	/// <inheritdoc cref="ID3D12Device.OpenSharedHandleByName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public HResult OpenSharedHandleByName(char** Name, uint Access, IntPtr* pNTHandle)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, char**, uint, IntPtr*, int>)(lpVtbl[58]))((ID3D12Device9*)Unsafe.AsPointer(ref this), Name, Access, pNTHandle);
	}

	/// <inheritdoc cref="ID3D12Device.MakeResident" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public HResult MakeResident(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, uint, ID3D12Pageable*, int>)(lpVtbl[59]))((ID3D12Device9*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.Evict" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(60)]
	public HResult Evict(uint NumObjects, ID3D12Pageable* ppObjects)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, uint, ID3D12Pageable*, int>)(lpVtbl[60]))((ID3D12Device9*)Unsafe.AsPointer(ref this), NumObjects, ppObjects);
	}

	/// <inheritdoc cref="ID3D12Device.CreateFence" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(61)]
	public HResult CreateFence(ulong InitialValue, FenceFlags Flags, Guid* riid, void** ppFence)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, ulong, FenceFlags, Guid*, void**, int>)(lpVtbl[61]))((ID3D12Device9*)Unsafe.AsPointer(ref this), InitialValue, Flags, riid, ppFence);
	}

	/// <inheritdoc cref="ID3D12Device.GetDeviceRemovedReason" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(62)]
	public HResult GetDeviceRemovedReason()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, int>)(lpVtbl[62]))((ID3D12Device9*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Device.GetCopyableFootprints" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(63)]
	public void GetCopyableFootprints(ResourceDescription* pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device9*, ResourceDescription*, uint, uint, ulong, PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(lpVtbl[63]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
	}

	/// <inheritdoc cref="ID3D12Device.CreateQueryHeap" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(64)]
	public HResult CreateQueryHeap(QueryHeapDescription* pDesc, Guid* riid, void** ppvHeap)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, QueryHeapDescription*, Guid*, void**, int>)(lpVtbl[64]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, riid, ppvHeap);
	}

	/// <inheritdoc cref="ID3D12Device.SetStablePowerState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(65)]
	public HResult SetStablePowerState(Bool32 Enable)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, Bool32, int>)(lpVtbl[65]))((ID3D12Device9*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <inheritdoc cref="ID3D12Device.CreateCommandSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(66)]
	public HResult CreateCommandSignature(CommandSignatureDescription* pDesc, ID3D12RootSignature* pRootSignature, Guid* riid, void** ppvCommandSignature)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, CommandSignatureDescription*, ID3D12RootSignature*, Guid*, void**, int>)(lpVtbl[66]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, pRootSignature, riid, ppvCommandSignature);
	}

	/// <inheritdoc cref="ID3D12Device.GetResourceTiling" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(67)]
	public void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipInfo* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Device9*, ID3D12Resource*, uint*, PackedMipInfo*, TileShape*, uint*, uint, SubresourceTiling*, void>)(lpVtbl[67]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
	}

	/// <inheritdoc cref="ID3D12Device.GetAdapterLuid" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(68)]
	public Luid GetAdapterLuid()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, Luid>)(lpVtbl[68]))((ID3D12Device9*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(69)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, Guid*, uint*, void*, int>)(lpVtbl[69]))((ID3D12Device9*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(70)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, Guid*, uint, void*, int>)(lpVtbl[70]))((ID3D12Device9*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(71)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, Guid*, IUnknown*, int>)(lpVtbl[71]))((ID3D12Device9*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(72)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, char**, int>)(lpVtbl[72]))((ID3D12Device9*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device9::CreateShaderCacheSession"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(73)]
	public HResult CreateShaderCacheSession(ShaderCacheSessionDescription* pDesc, Guid* riid, void** ppvSession)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, ShaderCacheSessionDescription*, Guid*, void**, int>)(lpVtbl[73]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, riid, ppvSession);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device9::ShaderCacheControl"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(74)]
	public HResult ShaderCacheControl(ShaderCacheKindFlags Kinds, ShaderCacheControlFlags Control)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, ShaderCacheKindFlags, ShaderCacheControlFlags, int>)(lpVtbl[74]))((ID3D12Device9*)Unsafe.AsPointer(ref this), Kinds, Control);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Device9::CreateCommandQueue1"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(75)]
	public HResult CreateCommandQueue1(CommandQueueDescription* pDesc, Guid* CreatorID, Guid* riid, void** ppCommandQueue)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Device9*, CommandQueueDescription*, Guid*, Guid*, void**, int>)(lpVtbl[75]))((ID3D12Device9*)Unsafe.AsPointer(ref this), pDesc, CreatorID, riid, ppCommandQueue);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Tools"]/*' />
/// <unmanaged>ID3D12Tools</unmanaged>
[Guid("7071e1f0-e84b-4b33-974f-12fa49de65c5")]
[NativeTypeName("struct ID3D12Tools : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12Tools
{
	public static ref readonly Guid IID_ID3D12Tools
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF0, 0xE1, 0x71, 0x70,
				0x4B, 0xE8,
				0x33, 0x4B,
				0x97,
				0x4F,
				0x12,
				0xFA,
				0x49,
				0xDE,
				0x65,
				0xC5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Tools));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Tools::EnableShaderInstrumentation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void EnableShaderInstrumentation(Bool32 bEnable)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Tools*, Bool32, void>)(lpVtbl[3]))((ID3D12Tools*)Unsafe.AsPointer(ref this), bEnable);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Tools::ShaderInstrumentationEnabled"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public Bool32 ShaderInstrumentationEnabled()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12Tools*, Bool32>)(lpVtbl[4]))((ID3D12Tools*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Debug"]/*' />
/// <unmanaged>ID3D12Debug</unmanaged>
[Guid("344488b7-6846-474b-b989-f027448245e0")]
[NativeTypeName("struct ID3D12Debug : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12Debug
{
	public static ref readonly Guid IID_ID3D12Debug
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB7, 0x88, 0x44, 0x34,
				0x46, 0x68,
				0x4B, 0x47,
				0xB9,
				0x89,
				0xF0,
				0x27,
				0x44,
				0x82,
				0x45,
				0xE0
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Debug));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Debug::EnableDebugLayer"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void EnableDebugLayer()
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug*, void>)(lpVtbl[3]))((ID3D12Debug*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Debug1"]/*' />
/// <unmanaged>ID3D12Debug1</unmanaged>
[Guid("affaa4ca-63fe-4d8e-b8ad-159000af4304")]
[NativeTypeName("struct ID3D12Debug1 : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12Debug1
{
	public static ref readonly Guid IID_ID3D12Debug1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCA, 0xA4, 0xFA, 0xAF,
				0xFE, 0x63,
				0x8E, 0x4D,
				0xB8,
				0xAD,
				0x15,
				0x90,
				0x00,
				0xAF,
				0x43,
				0x04
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Debug1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Debug1::EnableDebugLayer"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void EnableDebugLayer()
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug1*, void>)(lpVtbl[3]))((ID3D12Debug1*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Debug1::SetEnableGPUBasedValidation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void SetEnableGPUBasedValidation(Bool32 Enable)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug1*, Bool32, void>)(lpVtbl[4]))((ID3D12Debug1*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Debug1::SetEnableSynchronizedCommandQueueValidation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void SetEnableSynchronizedCommandQueueValidation(Bool32 Enable)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug1*, Bool32, void>)(lpVtbl[5]))((ID3D12Debug1*)Unsafe.AsPointer(ref this), Enable);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Debug2"]/*' />
/// <unmanaged>ID3D12Debug2</unmanaged>
[Guid("93a665c4-a3b2-4e5d-b692-a26ae14e3374")]
[NativeTypeName("struct ID3D12Debug2 : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12Debug2
{
	public static ref readonly Guid IID_ID3D12Debug2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC4, 0x65, 0xA6, 0x93,
				0xB2, 0xA3,
				0x5D, 0x4E,
				0xB6,
				0x92,
				0xA2,
				0x6A,
				0xE1,
				0x4E,
				0x33,
				0x74
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Debug2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Debug2::SetGPUBasedValidationFlags"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void SetGPUBasedValidationFlags(GpuBasedValidationFlags Flags)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug2*, GpuBasedValidationFlags, void>)(lpVtbl[3]))((ID3D12Debug2*)Unsafe.AsPointer(ref this), Flags);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Debug3"]/*' />
/// <unmanaged>ID3D12Debug3</unmanaged>
[Guid("5cf4e58f-f671-4ff1-a542-3686e3d153d1")]
[NativeTypeName("struct ID3D12Debug3 : ID3D12Debug")]
[NativeInheritance("ID3D12Debug")]
public unsafe partial struct ID3D12Debug3
{
	public static ref readonly Guid IID_ID3D12Debug3
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8F, 0xE5, 0xF4, 0x5C,
				0x71, 0xF6,
				0xF1, 0x4F,
				0xA5,
				0x42,
				0x36,
				0x86,
				0xE3,
				0xD1,
				0x53,
				0xD1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Debug3));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Debug.EnableDebugLayer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void EnableDebugLayer()
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug3*, void>)(lpVtbl[3]))((ID3D12Debug3*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Debug3::SetEnableGPUBasedValidation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void SetEnableGPUBasedValidation(Bool32 Enable)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug3*, Bool32, void>)(lpVtbl[4]))((ID3D12Debug3*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Debug3::SetEnableSynchronizedCommandQueueValidation"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void SetEnableSynchronizedCommandQueueValidation(Bool32 Enable)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug3*, Bool32, void>)(lpVtbl[5]))((ID3D12Debug3*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Debug3::SetGPUBasedValidationFlags"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public void SetGPUBasedValidationFlags(GpuBasedValidationFlags Flags)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug3*, GpuBasedValidationFlags, void>)(lpVtbl[6]))((ID3D12Debug3*)Unsafe.AsPointer(ref this), Flags);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Debug4"]/*' />
/// <unmanaged>ID3D12Debug4</unmanaged>
[Guid("014b816e-9ec5-4a2f-a845-ffbe441ce13a")]
[NativeTypeName("struct ID3D12Debug4 : ID3D12Debug3")]
[NativeInheritance("ID3D12Debug3")]
public unsafe partial struct ID3D12Debug4
{
	public static ref readonly Guid IID_ID3D12Debug4
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x6E, 0x81, 0x4B, 0x01,
				0xC5, 0x9E,
				0x2F, 0x4A,
				0xA8,
				0x45,
				0xFF,
				0xBE,
				0x44,
				0x1C,
				0xE1,
				0x3A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Debug4));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Debug3.SetEnableGPUBasedValidation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void SetEnableGPUBasedValidation(Bool32 Enable)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug4*, Bool32, void>)(lpVtbl[3]))((ID3D12Debug4*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <inheritdoc cref="ID3D12Debug3.SetEnableSynchronizedCommandQueueValidation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void SetEnableSynchronizedCommandQueueValidation(Bool32 Enable)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug4*, Bool32, void>)(lpVtbl[4]))((ID3D12Debug4*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <inheritdoc cref="ID3D12Debug3.SetGPUBasedValidationFlags" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void SetGPUBasedValidationFlags(GpuBasedValidationFlags Flags)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug4*, GpuBasedValidationFlags, void>)(lpVtbl[5]))((ID3D12Debug4*)Unsafe.AsPointer(ref this), Flags);
	}

	/// <inheritdoc cref="ID3D12Debug.EnableDebugLayer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public void EnableDebugLayer()
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug4*, void>)(lpVtbl[6]))((ID3D12Debug4*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Debug4::DisableDebugLayer"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public void DisableDebugLayer()
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug4*, void>)(lpVtbl[7]))((ID3D12Debug4*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Debug5"]/*' />
/// <unmanaged>ID3D12Debug5</unmanaged>
[Guid("548d6b12-09fa-40e0-9069-5dcd589a52c9")]
[NativeTypeName("struct ID3D12Debug5 : ID3D12Debug4")]
[NativeInheritance("ID3D12Debug4")]
public unsafe partial struct ID3D12Debug5
{
	public static ref readonly Guid IID_ID3D12Debug5
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x12, 0x6B, 0x8D, 0x54,
				0xFA, 0x09,
				0xE0, 0x40,
				0x90,
				0x69,
				0x5D,
				0xCD,
				0x58,
				0x9A,
				0x52,
				0xC9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12Debug5));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Debug4.DisableDebugLayer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void DisableDebugLayer()
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug5*, void>)(lpVtbl[3]))((ID3D12Debug5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12Debug3.SetEnableGPUBasedValidation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void SetEnableGPUBasedValidation(Bool32 Enable)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug5*, Bool32, void>)(lpVtbl[4]))((ID3D12Debug5*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <inheritdoc cref="ID3D12Debug3.SetEnableSynchronizedCommandQueueValidation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void SetEnableSynchronizedCommandQueueValidation(Bool32 Enable)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug5*, Bool32, void>)(lpVtbl[5]))((ID3D12Debug5*)Unsafe.AsPointer(ref this), Enable);
	}

	/// <inheritdoc cref="ID3D12Debug3.SetGPUBasedValidationFlags" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public void SetGPUBasedValidationFlags(GpuBasedValidationFlags Flags)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug5*, GpuBasedValidationFlags, void>)(lpVtbl[6]))((ID3D12Debug5*)Unsafe.AsPointer(ref this), Flags);
	}

	/// <inheritdoc cref="ID3D12Debug.EnableDebugLayer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public void EnableDebugLayer()
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug5*, void>)(lpVtbl[7]))((ID3D12Debug5*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12Debug5::SetEnableAutoName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public void SetEnableAutoName(Bool32 Enable)
	{
		((delegate* unmanaged[Stdcall]<ID3D12Debug5*, Bool32, void>)(lpVtbl[8]))((ID3D12Debug5*)Unsafe.AsPointer(ref this), Enable);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugDevice1"]/*' />
/// <unmanaged>ID3D12DebugDevice1</unmanaged>
[Guid("a9b71770-d099-4a65-a698-3dee10020f88")]
[NativeTypeName("struct ID3D12DebugDevice1 : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12DebugDevice1
{
	public static ref readonly Guid IID_ID3D12DebugDevice1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x70, 0x17, 0xB7, 0xA9,
				0x99, 0xD0,
				0x65, 0x4A,
				0xA6,
				0x98,
				0x3D,
				0xEE,
				0x10,
				0x02,
				0x0F,
				0x88
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12DebugDevice1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugDevice1::SetDebugParameter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetDebugParameter(DebugDeviceParameterType Type, void* pData, uint DataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice1*, DebugDeviceParameterType, void*, uint, int>)(lpVtbl[3]))((ID3D12DebugDevice1*)Unsafe.AsPointer(ref this), Type, pData, DataSize);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugDevice1::GetDebugParameter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult GetDebugParameter(DebugDeviceParameterType Type, void* pData, uint DataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice1*, DebugDeviceParameterType, void*, uint, int>)(lpVtbl[4]))((ID3D12DebugDevice1*)Unsafe.AsPointer(ref this), Type, pData, DataSize);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugDevice1::ReportLiveDeviceObjects"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult ReportLiveDeviceObjects(RldoFlags Flags)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice1*, RldoFlags, int>)(lpVtbl[5]))((ID3D12DebugDevice1*)Unsafe.AsPointer(ref this), Flags);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugDevice"]/*' />
/// <unmanaged>ID3D12DebugDevice</unmanaged>
[Guid("3febd6dd-4973-4787-8194-e45f9e28923e")]
[NativeTypeName("struct ID3D12DebugDevice : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12DebugDevice
{
	public static ref readonly Guid IID_ID3D12DebugDevice
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDD, 0xD6, 0xEB, 0x3F,
				0x73, 0x49,
				0x87, 0x47,
				0x81,
				0x94,
				0xE4,
				0x5F,
				0x9E,
				0x28,
				0x92,
				0x3E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12DebugDevice));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugDevice::SetFeatureMask"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetFeatureMask(DebugFeature Mask)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice*, DebugFeature, int>)(lpVtbl[3]))((ID3D12DebugDevice*)Unsafe.AsPointer(ref this), Mask);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugDevice::GetFeatureMask"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public Graphics.Direct3D12.DebugFeature GetFeatureMask()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice*, Graphics.Direct3D12.DebugFeature>)(lpVtbl[4]))((ID3D12DebugDevice*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugDevice::ReportLiveDeviceObjects"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult ReportLiveDeviceObjects(RldoFlags Flags)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice*, RldoFlags, int>)(lpVtbl[5]))((ID3D12DebugDevice*)Unsafe.AsPointer(ref this), Flags);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugDevice2"]/*' />
/// <unmanaged>ID3D12DebugDevice2</unmanaged>
[Guid("60eccbc1-378d-4df1-894c-f8ac5ce4d7dd")]
[NativeTypeName("struct ID3D12DebugDevice2 : ID3D12DebugDevice")]
[NativeInheritance("ID3D12DebugDevice")]
public unsafe partial struct ID3D12DebugDevice2
{
	public static ref readonly Guid IID_ID3D12DebugDevice2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC1, 0xCB, 0xEC, 0x60,
				0x8D, 0x37,
				0xF1, 0x4D,
				0x89,
				0x4C,
				0xF8,
				0xAC,
				0x5C,
				0xE4,
				0xD7,
				0xDD
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12DebugDevice2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DebugDevice.SetFeatureMask" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetFeatureMask(DebugFeature Mask)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, DebugFeature, int>)(lpVtbl[3]))((ID3D12DebugDevice2*)Unsafe.AsPointer(ref this), Mask);
	}

	/// <inheritdoc cref="ID3D12DebugDevice.GetFeatureMask" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public Graphics.Direct3D12.DebugFeature GetFeatureMask()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, Graphics.Direct3D12.DebugFeature>)(lpVtbl[4]))((ID3D12DebugDevice2*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DebugDevice.ReportLiveDeviceObjects" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult ReportLiveDeviceObjects(RldoFlags Flags)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, RldoFlags, int>)(lpVtbl[5]))((ID3D12DebugDevice2*)Unsafe.AsPointer(ref this), Flags);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugDevice2::SetDebugParameter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetDebugParameter(DebugDeviceParameterType Type, void* pData, uint DataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, DebugDeviceParameterType, void*, uint, int>)(lpVtbl[6]))((ID3D12DebugDevice2*)Unsafe.AsPointer(ref this), Type, pData, DataSize);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugDevice2::GetDebugParameter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetDebugParameter(DebugDeviceParameterType Type, void* pData, uint DataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice2*, DebugDeviceParameterType, void*, uint, int>)(lpVtbl[7]))((ID3D12DebugDevice2*)Unsafe.AsPointer(ref this), Type, pData, DataSize);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugCommandQueue"]/*' />
/// <unmanaged>ID3D12DebugCommandQueue</unmanaged>
[Guid("09e0bf36-54ac-484f-8847-4baeeab6053a")]
[NativeTypeName("struct ID3D12DebugCommandQueue : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12DebugCommandQueue
{
	public static ref readonly Guid IID_ID3D12DebugCommandQueue
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x36, 0xBF, 0xE0, 0x09,
				0xAC, 0x54,
				0x4F, 0x48,
				0x88,
				0x47,
				0x4B,
				0xAE,
				0xEA,
				0xB6,
				0x05,
				0x3A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12DebugCommandQueue));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugCommandQueue::AssertResourceState"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public Bool32 AssertResourceState(ID3D12Resource* pResource, uint Subresource, uint State)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandQueue*, ID3D12Resource*, uint, uint, Bool32>)(lpVtbl[3]))((ID3D12DebugCommandQueue*)Unsafe.AsPointer(ref this), pResource, Subresource, State);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugCommandList1"]/*' />
/// <unmanaged>ID3D12DebugCommandList1</unmanaged>
[Guid("102ca951-311b-4b01-b11f-ecb83e061b37")]
[NativeTypeName("struct ID3D12DebugCommandList1 : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12DebugCommandList1
{
	public static ref readonly Guid IID_ID3D12DebugCommandList1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x51, 0xA9, 0x2C, 0x10,
				0x1B, 0x31,
				0x01, 0x4B,
				0xB1,
				0x1F,
				0xEC,
				0xB8,
				0x3E,
				0x06,
				0x1B,
				0x37
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12DebugCommandList1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugCommandList1::AssertResourceState"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public Bool32 AssertResourceState(ID3D12Resource* pResource, uint Subresource, uint State)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, ID3D12Resource*, uint, uint, Bool32>)(lpVtbl[3]))((ID3D12DebugCommandList1*)Unsafe.AsPointer(ref this), pResource, Subresource, State);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugCommandList1::SetDebugParameter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetDebugParameter(DebugCommandListParameterType Type, void* pData, uint DataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, DebugCommandListParameterType, void*, uint, int>)(lpVtbl[4]))((ID3D12DebugCommandList1*)Unsafe.AsPointer(ref this), Type, pData, DataSize);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugCommandList1::GetDebugParameter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetDebugParameter(DebugCommandListParameterType Type, void* pData, uint DataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, DebugCommandListParameterType, void*, uint, int>)(lpVtbl[5]))((ID3D12DebugCommandList1*)Unsafe.AsPointer(ref this), Type, pData, DataSize);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugCommandList"]/*' />
/// <unmanaged>ID3D12DebugCommandList</unmanaged>
[Guid("09e0bf36-54ac-484f-8847-4baeeab6053f")]
[NativeTypeName("struct ID3D12DebugCommandList : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12DebugCommandList
{
	public static ref readonly Guid IID_ID3D12DebugCommandList
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x36, 0xBF, 0xE0, 0x09,
				0xAC, 0x54,
				0x4F, 0x48,
				0x88,
				0x47,
				0x4B,
				0xAE,
				0xEA,
				0xB6,
				0x05,
				0x3F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12DebugCommandList));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugCommandList::AssertResourceState"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public Bool32 AssertResourceState(ID3D12Resource* pResource, uint Subresource, uint State)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList*, ID3D12Resource*, uint, uint, Bool32>)(lpVtbl[3]))((ID3D12DebugCommandList*)Unsafe.AsPointer(ref this), pResource, Subresource, State);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugCommandList::SetFeatureMask"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetFeatureMask(DebugFeature Mask)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList*, DebugFeature, int>)(lpVtbl[4]))((ID3D12DebugCommandList*)Unsafe.AsPointer(ref this), Mask);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugCommandList::GetFeatureMask"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Graphics.Direct3D12.DebugFeature GetFeatureMask()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList*, Graphics.Direct3D12.DebugFeature>)(lpVtbl[5]))((ID3D12DebugCommandList*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugCommandList2"]/*' />
/// <unmanaged>ID3D12DebugCommandList2</unmanaged>
[Guid("aeb575cf-4e06-48be-ba3b-c450fc96652e")]
[NativeTypeName("struct ID3D12DebugCommandList2 : ID3D12DebugCommandList")]
[NativeInheritance("ID3D12DebugCommandList")]
public unsafe partial struct ID3D12DebugCommandList2
{
	public static ref readonly Guid IID_ID3D12DebugCommandList2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCF, 0x75, 0xB5, 0xAE,
				0x06, 0x4E,
				0xBE, 0x48,
				0xBA,
				0x3B,
				0xC4,
				0x50,
				0xFC,
				0x96,
				0x65,
				0x2E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12DebugCommandList2));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DebugCommandList.AssertResourceState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public Bool32 AssertResourceState(ID3D12Resource* pResource, uint Subresource, uint State)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, ID3D12Resource*, uint, uint, Bool32>)(lpVtbl[3]))((ID3D12DebugCommandList2*)Unsafe.AsPointer(ref this), pResource, Subresource, State);
	}

	/// <inheritdoc cref="ID3D12DebugCommandList.SetFeatureMask" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetFeatureMask(DebugFeature Mask)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, DebugFeature, int>)(lpVtbl[4]))((ID3D12DebugCommandList2*)Unsafe.AsPointer(ref this), Mask);
	}

	/// <inheritdoc cref="ID3D12DebugCommandList.GetFeatureMask" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Graphics.Direct3D12.DebugFeature GetFeatureMask()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, Graphics.Direct3D12.DebugFeature>)(lpVtbl[5]))((ID3D12DebugCommandList2*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugCommandList2::SetDebugParameter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetDebugParameter(DebugCommandListParameterType Type, void* pData, uint DataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, DebugCommandListParameterType, void*, uint, int>)(lpVtbl[6]))((ID3D12DebugCommandList2*)Unsafe.AsPointer(ref this), Type, pData, DataSize);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12DebugCommandList2::GetDebugParameter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetDebugParameter(DebugCommandListParameterType Type, void* pData, uint DataSize)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList2*, DebugCommandListParameterType, void*, uint, int>)(lpVtbl[7]))((ID3D12DebugCommandList2*)Unsafe.AsPointer(ref this), Type, pData, DataSize);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12SharingContract"]/*' />
/// <unmanaged>ID3D12SharingContract</unmanaged>
[Guid("0adf7d52-929c-4e61-addb-ffed30de66ef")]
[NativeTypeName("struct ID3D12SharingContract : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12SharingContract
{
	public static ref readonly Guid IID_ID3D12SharingContract
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x52, 0x7D, 0xDF, 0x0A,
				0x9C, 0x92,
				0x61, 0x4E,
				0xAD,
				0xDB,
				0xFF,
				0xED,
				0x30,
				0xDE,
				0x66,
				0xEF
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12SharingContract));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12SharingContract::Present"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void Present(ID3D12Resource* pResource, uint Subresource, IntPtr window)
	{
		((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, ID3D12Resource*, uint, IntPtr, void>)(lpVtbl[3]))((ID3D12SharingContract*)Unsafe.AsPointer(ref this), pResource, Subresource, window);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12SharingContract::SharedFenceSignal"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void SharedFenceSignal(ID3D12Fence* pFence, ulong FenceValue)
	{
		((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, ID3D12Fence*, ulong, void>)(lpVtbl[4]))((ID3D12SharingContract*)Unsafe.AsPointer(ref this), pFence, FenceValue);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12SharingContract::BeginCapturableWork"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void BeginCapturableWork(Guid* guid)
	{
		((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, Guid*, void>)(lpVtbl[5]))((ID3D12SharingContract*)Unsafe.AsPointer(ref this), guid);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12SharingContract::EndCapturableWork"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public void EndCapturableWork(Guid* guid)
	{
		((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, Guid*, void>)(lpVtbl[6]))((ID3D12SharingContract*)Unsafe.AsPointer(ref this), guid);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue"]/*' />
/// <unmanaged>ID3D12InfoQueue</unmanaged>
[Guid("0742a90b-c387-483f-b946-30a7e4e61458")]
[NativeTypeName("struct ID3D12InfoQueue : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12InfoQueue
{
	public static ref readonly Guid IID_ID3D12InfoQueue
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0B, 0xA9, 0x42, 0x07,
				0x87, 0xC3,
				0x3F, 0x48,
				0xB9,
				0x46,
				0x30,
				0xA7,
				0xE4,
				0xE6,
				0x14,
				0x58
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12InfoQueue));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::SetMessageCountLimit"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetMessageCountLimit(ulong MessageCountLimit)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong, int>)(lpVtbl[3]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), MessageCountLimit);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::ClearStoredMessages"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void ClearStoredMessages()
	{
		((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, void>)(lpVtbl[4]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::GetMessage"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetMessage(ulong MessageIndex, Message* pMessage, nuint* pMessageByteLength)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong, Message*, nuint*, int>)(lpVtbl[5]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), MessageIndex, pMessage, pMessageByteLength);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::GetNumMessagesAllowedByStorageFilter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public ulong GetNumMessagesAllowedByStorageFilter()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(lpVtbl[6]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::GetNumMessagesDeniedByStorageFilter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public ulong GetNumMessagesDeniedByStorageFilter()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(lpVtbl[7]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::GetNumStoredMessages"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public ulong GetNumStoredMessages()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(lpVtbl[8]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::GetNumStoredMessagesAllowedByRetrievalFilter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public ulong GetNumStoredMessagesAllowedByRetrievalFilter()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(lpVtbl[9]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::GetNumMessagesDiscardedByMessageCountLimit"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public ulong GetNumMessagesDiscardedByMessageCountLimit()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(lpVtbl[10]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::GetMessageCountLimit"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public ulong GetMessageCountLimit()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(lpVtbl[11]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::AddStorageFilterEntries"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult AddStorageFilterEntries(InfoQueueFilter* pFilter)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, int>)(lpVtbl[12]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), pFilter);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::GetStorageFilter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetStorageFilter(InfoQueueFilter* pFilter, nuint* pFilterByteLength)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, nuint*, int>)(lpVtbl[13]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), pFilter, pFilterByteLength);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::ClearStorageFilter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public void ClearStorageFilter()
	{
		((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, void>)(lpVtbl[14]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::PushEmptyStorageFilter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult PushEmptyStorageFilter()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, int>)(lpVtbl[15]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::PushCopyOfStorageFilter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult PushCopyOfStorageFilter()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, int>)(lpVtbl[16]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::PushStorageFilter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult PushStorageFilter(InfoQueueFilter* pFilter)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, int>)(lpVtbl[17]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), pFilter);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::PopStorageFilter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public void PopStorageFilter()
	{
		((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, void>)(lpVtbl[18]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::GetStorageFilterStackSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public uint GetStorageFilterStackSize()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, uint>)(lpVtbl[19]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::AddRetrievalFilterEntries"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult AddRetrievalFilterEntries(InfoQueueFilter* pFilter)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, int>)(lpVtbl[20]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), pFilter);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::GetRetrievalFilter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetRetrievalFilter(InfoQueueFilter* pFilter, nuint* pFilterByteLength)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, nuint*, int>)(lpVtbl[21]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), pFilter, pFilterByteLength);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::ClearRetrievalFilter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public void ClearRetrievalFilter()
	{
		((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, void>)(lpVtbl[22]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::PushEmptyRetrievalFilter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult PushEmptyRetrievalFilter()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, int>)(lpVtbl[23]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::PushCopyOfRetrievalFilter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult PushCopyOfRetrievalFilter()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, int>)(lpVtbl[24]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::PushRetrievalFilter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult PushRetrievalFilter(InfoQueueFilter* pFilter)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, InfoQueueFilter*, int>)(lpVtbl[25]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), pFilter);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::PopRetrievalFilter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public void PopRetrievalFilter()
	{
		((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, void>)(lpVtbl[26]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::GetRetrievalFilterStackSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public uint GetRetrievalFilterStackSize()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, uint>)(lpVtbl[27]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::AddMessage"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult AddMessage(MessageCategory Category, MessageSeverity Severity, MessageId ID, byte** pDescription)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageCategory, MessageSeverity, MessageId, byte**, int>)(lpVtbl[28]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), Category, Severity, ID, pDescription);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::AddApplicationMessage"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult AddApplicationMessage(MessageSeverity Severity, byte** pDescription)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageSeverity, byte**, int>)(lpVtbl[29]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), Severity, pDescription);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::SetBreakOnCategory"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult SetBreakOnCategory(MessageCategory Category, Bool32 bEnable)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageCategory, Bool32, int>)(lpVtbl[30]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), Category, bEnable);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::SetBreakOnSeverity"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult SetBreakOnSeverity(MessageSeverity Severity, Bool32 bEnable)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageSeverity, Bool32, int>)(lpVtbl[31]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), Severity, bEnable);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::SetBreakOnID"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult SetBreakOnID(MessageId ID, Bool32 bEnable)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageId, Bool32, int>)(lpVtbl[32]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), ID, bEnable);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::GetBreakOnCategory"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public Bool32 GetBreakOnCategory(MessageCategory Category)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageCategory, Bool32>)(lpVtbl[33]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), Category);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::GetBreakOnSeverity"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public Bool32 GetBreakOnSeverity(MessageSeverity Severity)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageSeverity, Bool32>)(lpVtbl[34]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), Severity);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::GetBreakOnID"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public Bool32 GetBreakOnID(MessageId ID)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, MessageId, Bool32>)(lpVtbl[35]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), ID);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::SetMuteDebugOutput"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public void SetMuteDebugOutput(Bool32 bMute)
	{
		((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, Bool32, void>)(lpVtbl[36]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this), bMute);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue::GetMuteDebugOutput"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public Bool32 GetMuteDebugOutput()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, Bool32>)(lpVtbl[37]))((ID3D12InfoQueue*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue1"]/*' />
/// <unmanaged>ID3D12InfoQueue1</unmanaged>
[Guid("2852dd88-b484-4c0c-b6b1-67168500e600")]
[NativeTypeName("struct ID3D12InfoQueue1 : ID3D12InfoQueue")]
[NativeInheritance("ID3D12InfoQueue")]
public unsafe partial struct ID3D12InfoQueue1
{
	public static ref readonly Guid IID_ID3D12InfoQueue1
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x88, 0xDD, 0x52, 0x28,
				0x84, 0xB4,
				0x0C, 0x4C,
				0xB6,
				0xB1,
				0x67,
				0x16,
				0x85,
				0x00,
				0xE6,
				0x00
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12InfoQueue1));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.SetMessageCountLimit" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetMessageCountLimit(ulong MessageCountLimit)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong, int>)(lpVtbl[3]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), MessageCountLimit);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.ClearStoredMessages" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void ClearStoredMessages()
	{
		((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, void>)(lpVtbl[4]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.GetMessage" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetMessage(ulong MessageIndex, Message* pMessage, nuint* pMessageByteLength)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong, Message*, nuint*, int>)(lpVtbl[5]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), MessageIndex, pMessage, pMessageByteLength);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.GetNumMessagesAllowedByStorageFilter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public ulong GetNumMessagesAllowedByStorageFilter()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(lpVtbl[6]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.GetNumMessagesDeniedByStorageFilter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public ulong GetNumMessagesDeniedByStorageFilter()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(lpVtbl[7]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.GetNumStoredMessages" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public ulong GetNumStoredMessages()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(lpVtbl[8]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.GetNumStoredMessagesAllowedByRetrievalFilter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public ulong GetNumStoredMessagesAllowedByRetrievalFilter()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(lpVtbl[9]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.GetNumMessagesDiscardedByMessageCountLimit" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public ulong GetNumMessagesDiscardedByMessageCountLimit()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(lpVtbl[10]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.GetMessageCountLimit" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public ulong GetMessageCountLimit()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, ulong>)(lpVtbl[11]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.AddStorageFilterEntries" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public HResult AddStorageFilterEntries(InfoQueueFilter* pFilter)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, int>)(lpVtbl[12]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), pFilter);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.GetStorageFilter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public HResult GetStorageFilter(InfoQueueFilter* pFilter, nuint* pFilterByteLength)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, int>)(lpVtbl[13]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), pFilter, pFilterByteLength);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.ClearStorageFilter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public void ClearStorageFilter()
	{
		((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, void>)(lpVtbl[14]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.PushEmptyStorageFilter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public HResult PushEmptyStorageFilter()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, int>)(lpVtbl[15]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.PushCopyOfStorageFilter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public HResult PushCopyOfStorageFilter()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, int>)(lpVtbl[16]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.PushStorageFilter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult PushStorageFilter(InfoQueueFilter* pFilter)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, int>)(lpVtbl[17]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), pFilter);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.PopStorageFilter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public void PopStorageFilter()
	{
		((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, void>)(lpVtbl[18]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.GetStorageFilterStackSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public uint GetStorageFilterStackSize()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, uint>)(lpVtbl[19]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.AddRetrievalFilterEntries" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult AddRetrievalFilterEntries(InfoQueueFilter* pFilter)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, int>)(lpVtbl[20]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), pFilter);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.GetRetrievalFilter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetRetrievalFilter(InfoQueueFilter* pFilter, nuint* pFilterByteLength)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, nuint*, int>)(lpVtbl[21]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), pFilter, pFilterByteLength);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.ClearRetrievalFilter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public void ClearRetrievalFilter()
	{
		((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, void>)(lpVtbl[22]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.PushEmptyRetrievalFilter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult PushEmptyRetrievalFilter()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, int>)(lpVtbl[23]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.PushCopyOfRetrievalFilter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public HResult PushCopyOfRetrievalFilter()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, int>)(lpVtbl[24]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.PushRetrievalFilter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public HResult PushRetrievalFilter(InfoQueueFilter* pFilter)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, InfoQueueFilter*, int>)(lpVtbl[25]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), pFilter);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.PopRetrievalFilter" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public void PopRetrievalFilter()
	{
		((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, void>)(lpVtbl[26]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.GetRetrievalFilterStackSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public uint GetRetrievalFilterStackSize()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, uint>)(lpVtbl[27]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12InfoQueue.AddMessage" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult AddMessage(MessageCategory Category, MessageSeverity Severity, MessageId ID, byte** pDescription)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageCategory, MessageSeverity, MessageId, byte**, int>)(lpVtbl[28]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), Category, Severity, ID, pDescription);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.AddApplicationMessage" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public HResult AddApplicationMessage(MessageSeverity Severity, byte** pDescription)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageSeverity, byte**, int>)(lpVtbl[29]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), Severity, pDescription);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.SetBreakOnCategory" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult SetBreakOnCategory(MessageCategory Category, Bool32 bEnable)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageCategory, Bool32, int>)(lpVtbl[30]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), Category, bEnable);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.SetBreakOnSeverity" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public HResult SetBreakOnSeverity(MessageSeverity Severity, Bool32 bEnable)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageSeverity, Bool32, int>)(lpVtbl[31]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), Severity, bEnable);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.SetBreakOnID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult SetBreakOnID(MessageId ID, Bool32 bEnable)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageId, Bool32, int>)(lpVtbl[32]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), ID, bEnable);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.GetBreakOnCategory" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public Bool32 GetBreakOnCategory(MessageCategory Category)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageCategory, Bool32>)(lpVtbl[33]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), Category);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.GetBreakOnSeverity" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public Bool32 GetBreakOnSeverity(MessageSeverity Severity)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageSeverity, Bool32>)(lpVtbl[34]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), Severity);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.GetBreakOnID" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public Bool32 GetBreakOnID(MessageId ID)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, MessageId, Bool32>)(lpVtbl[35]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), ID);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.SetMuteDebugOutput" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public void SetMuteDebugOutput(Bool32 bMute)
	{
		((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, Bool32, void>)(lpVtbl[36]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), bMute);
	}

	/// <inheritdoc cref="ID3D12InfoQueue.GetMuteDebugOutput" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public Bool32 GetMuteDebugOutput()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, Bool32>)(lpVtbl[37]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue1::RegisterMessageCallback"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public HResult RegisterMessageCallback(delegate* unmanaged[Stdcall]<void*, void> CallbackFunc, MessageCallbackFlags CallbackFilterFlags, void* pContext, uint* pCallbackCookie)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, delegate* unmanaged[Stdcall]<void*, void>, MessageCallbackFlags, void*, uint*, int>)(lpVtbl[38]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), CallbackFunc, CallbackFilterFlags, pContext, pCallbackCookie);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12InfoQueue1::UnregisterMessageCallback"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public HResult UnregisterMessageCallback(uint CallbackCookie)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, uint, int>)(lpVtbl[39]))((ID3D12InfoQueue1*)Unsafe.AsPointer(ref this), CallbackCookie);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12SDKConfiguration"]/*' />
/// <unmanaged>ID3D12SDKConfiguration</unmanaged>
[Guid("e9eb5314-33aa-42b2-a718-d77f58b1f1c7")]
[NativeTypeName("struct ID3D12SDKConfiguration : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12SDKConfiguration
{
	public static ref readonly Guid IID_ID3D12SDKConfiguration
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x14, 0x53, 0xEB, 0xE9,
				0xAA, 0x33,
				0xB2, 0x42,
				0xA7,
				0x18,
				0xD7,
				0x7F,
				0x58,
				0xB1,
				0xF1,
				0xC7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12SDKConfiguration));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12SDKConfiguration::SetSDKVersion"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetSDKVersion(uint SDKVersion, byte** SDKPath)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12SDKConfiguration*, uint, byte**, int>)(lpVtbl[3]))((ID3D12SDKConfiguration*)Unsafe.AsPointer(ref this), SDKVersion, SDKPath);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList5"]/*' />
/// <unmanaged>ID3D12GraphicsCommandList5</unmanaged>
[Guid("55050859-4024-474c-87f5-6472eaee44ea")]
[NativeTypeName("struct ID3D12GraphicsCommandList5 : ID3D12GraphicsCommandList4")]
[NativeInheritance("ID3D12GraphicsCommandList4")]
public unsafe partial struct ID3D12GraphicsCommandList5
{
	public static ref readonly Guid IID_ID3D12GraphicsCommandList5
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x59, 0x08, 0x05, 0x55,
				0x24, 0x40,
				0x4C, 0x47,
				0x87,
				0xF5,
				0x64,
				0x72,
				0xEA,
				0xEE,
				0x44,
				0xEA
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12GraphicsCommandList5));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.BeginRenderPass" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void BeginRenderPass(uint NumRenderTargets, RenderPassRenderTargetDescription* pRenderTargets, RenderPassDepthStencilDescription* pDepthStencil, RenderPassFlags Flags)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, RenderPassRenderTargetDescription*, RenderPassDepthStencilDescription*, RenderPassFlags, void>)(lpVtbl[3]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), NumRenderTargets, pRenderTargets, pDepthStencil, Flags);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.EndRenderPass" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void EndRenderPass()
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, void>)(lpVtbl[4]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.InitializeMetaCommand" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void InitializeMetaCommand(ID3D12MetaCommand* pMetaCommand, void* pInitializationParametersData, nuint InitializationParametersDataSizeInBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12MetaCommand*, void*, nuint, void>)(lpVtbl[5]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pMetaCommand, pInitializationParametersData, InitializationParametersDataSizeInBytes);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.ExecuteMetaCommand" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public void ExecuteMetaCommand(ID3D12MetaCommand* pMetaCommand, void* pExecutionParametersData, nuint ExecutionParametersDataSizeInBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12MetaCommand*, void*, nuint, void>)(lpVtbl[6]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pMetaCommand, pExecutionParametersData, ExecutionParametersDataSizeInBytes);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.BuildRaytracingAccelerationStructure" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public void BuildRaytracingAccelerationStructure(BuildRaytracingAccelerationStructureDescription* pDesc, uint NumPostbuildInfoDescs, RaytracingAccelerationStructurePostbuildInfoDescription* pPostbuildInfoDescs)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, BuildRaytracingAccelerationStructureDescription*, uint, RaytracingAccelerationStructurePostbuildInfoDescription*, void>)(lpVtbl[7]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pDesc, NumPostbuildInfoDescs, pPostbuildInfoDescs);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.EmitRaytracingAccelerationStructurePostbuildInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public void EmitRaytracingAccelerationStructurePostbuildInfo(RaytracingAccelerationStructurePostbuildInfoDescription* pDesc, uint NumSourceAccelerationStructures, ulong* pSourceAccelerationStructureData)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, RaytracingAccelerationStructurePostbuildInfoDescription*, uint, ulong*, void>)(lpVtbl[8]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pDesc, NumSourceAccelerationStructures, pSourceAccelerationStructureData);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.CopyRaytracingAccelerationStructure" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public void CopyRaytracingAccelerationStructure(ulong DestAccelerationStructureData, ulong SourceAccelerationStructureData, RaytracingAccelerationStructureCopyMode Mode)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ulong, ulong, RaytracingAccelerationStructureCopyMode, void>)(lpVtbl[9]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), DestAccelerationStructureData, SourceAccelerationStructureData, Mode);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.SetPipelineState1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public void SetPipelineState1(ID3D12StateObject* pStateObject)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12StateObject*, void>)(lpVtbl[10]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pStateObject);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.DispatchRays" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public void DispatchRays(DispatchRaysDescription* pDesc)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, DispatchRaysDescription*, void>)(lpVtbl[11]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pDesc);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList3.SetProtectedResourceSession" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public void SetProtectedResourceSession(ID3D12ProtectedResourceSession* pProtectedResourceSession)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12ProtectedResourceSession*, void>)(lpVtbl[12]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pProtectedResourceSession);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList2.WriteBufferImmediate" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public void WriteBufferImmediate(uint Count, WritebufferimmediateParameter* pParams, WritebufferimmediateMode* pModes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, WritebufferimmediateParameter*, WritebufferimmediateMode*, void>)(lpVtbl[13]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), Count, pParams, pModes);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.AtomicCopyBufferUINT" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public void AtomicCopyBufferUINT(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, uint Dependencies, ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource*, SubresourceRangeUint64*, void>)(lpVtbl[14]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.AtomicCopyBufferUINT64" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public void AtomicCopyBufferUINT64(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, uint Dependencies, ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource*, SubresourceRangeUint64*, void>)(lpVtbl[15]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.OMSetDepthBounds" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public void OMSetDepthBounds(float Min, float Max)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, float, float, void>)(lpVtbl[16]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), Min, Max);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.SetSamplePositions" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public void SetSamplePositions(uint NumSamplesPerPixel, uint NumPixels, SamplePosition* pSamplePositions)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, uint, SamplePosition*, void>)(lpVtbl[17]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), NumSamplesPerPixel, NumPixels, pSamplePositions);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.ResolveSubresourceRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public void ResolveSubresourceRegion(ID3D12Resource* pDstResource, uint DstSubresource, uint DstX, uint DstY, ID3D12Resource* pSrcResource, uint SrcSubresource, RawRect* pSrcRect, Graphics.Dxgi.Common.Format Format, ResolveMode ResolveMode)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, RawRect*, Graphics.Dxgi.Common.Format, ResolveMode, void>)(lpVtbl[18]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pDstResource, DstSubresource, DstX, DstY, pSrcResource, SrcSubresource, pSrcRect, Format, ResolveMode);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.SetViewInstanceMask" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public void SetViewInstanceMask(uint Mask)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, void>)(lpVtbl[19]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), Mask);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Close" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public HResult Close()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, int>)(lpVtbl[20]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Reset" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult Reset(ID3D12CommandAllocator* pAllocator, ID3D12PipelineState* pInitialState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12CommandAllocator*, ID3D12PipelineState*, int>)(lpVtbl[21]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pAllocator, pInitialState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public void ClearState(ID3D12PipelineState* pPipelineState)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12PipelineState*, void>)(lpVtbl[22]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pPipelineState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DrawInstanced" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, uint, uint, uint, void>)(lpVtbl[23]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DrawIndexedInstanced" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, uint, uint, int, uint, void>)(lpVtbl[24]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Dispatch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, uint, uint, void>)(lpVtbl[25]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyBufferRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public void CopyBufferRegion(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, ulong NumBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, ulong, void>)(lpVtbl[26]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyTextureRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public void CopyTextureRegion(TextureCopyLocation* pDst, uint DstX, uint DstY, uint DstZ, TextureCopyLocation* pSrc, Box* pSrcBox)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, TextureCopyLocation*, uint, uint, uint, TextureCopyLocation*, Box*, void>)(lpVtbl[27]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public void CopyResource(ID3D12Resource* pDstResource, ID3D12Resource* pSrcResource)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12Resource*, ID3D12Resource*, void>)(lpVtbl[28]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pDstResource, pSrcResource);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyTiles" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public void CopyTiles(ID3D12Resource* pTiledResource, TiledResourceCoordinate* pTileRegionStartCoordinate, TileRegionSize* pTileRegionSize, ID3D12Resource* pBuffer, ulong BufferStartOffsetInBytes, TileCopyFlags Flags)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, ID3D12Resource*, ulong, TileCopyFlags, void>)(lpVtbl[29]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResolveSubresource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public void ResolveSubresource(ID3D12Resource* pDstResource, uint DstSubresource, ID3D12Resource* pSrcResource, uint SrcSubresource, Graphics.Dxgi.Common.Format Format)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12Resource*, uint, ID3D12Resource*, uint, Graphics.Dxgi.Common.Format, void>)(lpVtbl[30]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetPrimitiveTopology" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public void IASetPrimitiveTopology(Graphics.Direct3D.PrimitiveTopology PrimitiveTopology)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, Graphics.Direct3D.PrimitiveTopology, void>)(lpVtbl[31]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), PrimitiveTopology);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.RSSetViewports" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public void RSSetViewports(uint NumViewports, Viewport* pViewports)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, Viewport*, void>)(lpVtbl[32]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), NumViewports, pViewports);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.RSSetScissorRects" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public void RSSetScissorRects(uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, RawRect*, void>)(lpVtbl[33]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetBlendFactor" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public void OMSetBlendFactor(float* BlendFactor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, float*, void>)(lpVtbl[34]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), BlendFactor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetStencilRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public void OMSetStencilRef(uint StencilRef)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, void>)(lpVtbl[35]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), StencilRef);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetPipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public void SetPipelineState(ID3D12PipelineState* pPipelineState)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12PipelineState*, void>)(lpVtbl[36]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pPipelineState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResourceBarrier" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public void ResourceBarrier(uint NumBarriers, ResourceBarrier* pBarriers)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, ResourceBarrier*, void>)(lpVtbl[37]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), NumBarriers, pBarriers);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ExecuteBundle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public void ExecuteBundle(ID3D12GraphicsCommandList* pCommandList)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12GraphicsCommandList*, void>)(lpVtbl[38]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pCommandList);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetDescriptorHeaps" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public void SetDescriptorHeaps(uint NumDescriptorHeaps, ID3D12DescriptorHeap* ppDescriptorHeaps)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, ID3D12DescriptorHeap*, void>)(lpVtbl[39]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), NumDescriptorHeaps, ppDescriptorHeaps);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public void SetComputeRootSignature(ID3D12RootSignature* pRootSignature)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12RootSignature*, void>)(lpVtbl[40]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pRootSignature);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public void SetGraphicsRootSignature(ID3D12RootSignature* pRootSignature)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12RootSignature*, void>)(lpVtbl[41]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pRootSignature);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootDescriptorTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public void SetComputeRootDescriptorTable(uint RootParameterIndex, GpuDescriptorHandle* BaseDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, GpuDescriptorHandle*, void>)(lpVtbl[42]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), RootParameterIndex, BaseDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootDescriptorTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public void SetGraphicsRootDescriptorTable(uint RootParameterIndex, GpuDescriptorHandle* BaseDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, GpuDescriptorHandle*, void>)(lpVtbl[43]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), RootParameterIndex, BaseDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRoot32BitConstant" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public void SetComputeRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, uint, uint, void>)(lpVtbl[44]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), RootParameterIndex, SrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRoot32BitConstant" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public void SetGraphicsRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, uint, uint, void>)(lpVtbl[45]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), RootParameterIndex, SrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRoot32BitConstants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public void SetComputeRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void* pSrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, uint, void*, uint, void>)(lpVtbl[46]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRoot32BitConstants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public void SetGraphicsRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void* pSrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, uint, void*, uint, void>)(lpVtbl[47]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public void SetComputeRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, ulong, void>)(lpVtbl[48]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public void SetGraphicsRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, ulong, void>)(lpVtbl[49]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public void SetComputeRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, ulong, void>)(lpVtbl[50]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public void SetGraphicsRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, ulong, void>)(lpVtbl[51]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public void SetComputeRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, ulong, void>)(lpVtbl[52]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public void SetGraphicsRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, ulong, void>)(lpVtbl[53]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetIndexBuffer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public void IASetIndexBuffer(IndexBufferView* pView)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, IndexBufferView*, void>)(lpVtbl[54]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pView);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetVertexBuffers" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public void IASetVertexBuffers(uint StartSlot, uint NumViews, VertexBufferView* pViews)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, uint, VertexBufferView*, void>)(lpVtbl[55]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), StartSlot, NumViews, pViews);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SOSetTargets" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public void SOSetTargets(uint StartSlot, uint NumViews, StreamOutputBufferView* pViews)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, uint, StreamOutputBufferView*, void>)(lpVtbl[56]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), StartSlot, NumViews, pViews);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetRenderTargets" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public void OMSetRenderTargets(uint NumRenderTargetDescriptors, CpuDescriptorHandle* pRenderTargetDescriptors, Bool32 RTsSingleHandleToDescriptorRange, CpuDescriptorHandle* pDepthStencilDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, CpuDescriptorHandle*, Bool32, CpuDescriptorHandle*, void>)(lpVtbl[57]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearDepthStencilView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public void ClearDepthStencilView(CpuDescriptorHandle* DepthStencilView, ClearFlags ClearFlags, float Depth, byte Stencil, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, CpuDescriptorHandle*, ClearFlags, float, byte, uint, RawRect*, void>)(lpVtbl[58]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearRenderTargetView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public void ClearRenderTargetView(CpuDescriptorHandle* RenderTargetView, float* ColorRGBA, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, CpuDescriptorHandle*, float*, uint, RawRect*, void>)(lpVtbl[59]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), RenderTargetView, ColorRGBA, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearUnorderedAccessViewUint" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(60)]
	public void ClearUnorderedAccessViewUint(GpuDescriptorHandle* ViewGPUHandleInCurrentHeap, CpuDescriptorHandle* ViewCPUHandle, ID3D12Resource* pResource, uint* Values, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, GpuDescriptorHandle*, CpuDescriptorHandle*, ID3D12Resource*, uint*, uint, RawRect*, void>)(lpVtbl[60]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearUnorderedAccessViewFloat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(61)]
	public void ClearUnorderedAccessViewFloat(GpuDescriptorHandle* ViewGPUHandleInCurrentHeap, CpuDescriptorHandle* ViewCPUHandle, ID3D12Resource* pResource, float* Values, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, GpuDescriptorHandle*, CpuDescriptorHandle*, ID3D12Resource*, float*, uint, RawRect*, void>)(lpVtbl[61]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DiscardResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(62)]
	public void DiscardResource(ID3D12Resource* pResource, DiscardRegion* pRegion)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12Resource*, DiscardRegion*, void>)(lpVtbl[62]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pResource, pRegion);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.BeginQuery" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(63)]
	public void BeginQuery(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint Index)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12QueryHeap*, QueryType, uint, void>)(lpVtbl[63]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pQueryHeap, Type, Index);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.EndQuery" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(64)]
	public void EndQuery(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint Index)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12QueryHeap*, QueryType, uint, void>)(lpVtbl[64]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pQueryHeap, Type, Index);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResolveQueryData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(65)]
	public void ResolveQueryData(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint StartIndex, uint NumQueries, ID3D12Resource* pDestinationBuffer, ulong AlignedDestinationBufferOffset)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12QueryHeap*, QueryType, uint, uint, ID3D12Resource*, ulong, void>)(lpVtbl[65]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetPredication" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(66)]
	public void SetPredication(ID3D12Resource* pBuffer, ulong AlignedBufferOffset, PredicationOp Operation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12Resource*, ulong, PredicationOp, void>)(lpVtbl[66]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pBuffer, AlignedBufferOffset, Operation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetMarker" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(67)]
	public void SetMarker(uint Metadata, void* pData, uint Size)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, void*, uint, void>)(lpVtbl[67]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), Metadata, pData, Size);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.BeginEvent" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(68)]
	public void BeginEvent(uint Metadata, void* pData, uint Size)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, uint, void*, uint, void>)(lpVtbl[68]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), Metadata, pData, Size);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.EndEvent" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(69)]
	public void EndEvent()
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, void>)(lpVtbl[69]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ExecuteIndirect" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(70)]
	public void ExecuteIndirect(ID3D12CommandSignature* pCommandSignature, uint MaxCommandCount, ID3D12Resource* pArgumentBuffer, ulong ArgumentBufferOffset, ID3D12Resource* pCountBuffer, ulong CountBufferOffset)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(lpVtbl[70]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
	}

	/// <inheritdoc cref="ID3D12CommandList.GetType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(71)]
	public new Graphics.Direct3D12.CommandListType GetType()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, Graphics.Direct3D12.CommandListType>)(lpVtbl[71]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(72)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, Guid*, void**, int>)(lpVtbl[72]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(73)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, Guid*, uint*, void*, int>)(lpVtbl[73]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(74)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, Guid*, uint, void*, int>)(lpVtbl[74]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(75)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, Guid*, IUnknown*, int>)(lpVtbl[75]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(76)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, char**, int>)(lpVtbl[76]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList5::RSSetShadingRate"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(77)]
	public void RSSetShadingRate(ShadingRate baseShadingRate, ShadingRateCombiner* combiners)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ShadingRate, ShadingRateCombiner*, void>)(lpVtbl[77]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), baseShadingRate, combiners);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList5::RSSetShadingRateImage"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(78)]
	public void RSSetShadingRateImage(ID3D12Resource* shadingRateImage)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12Resource*, void>)(lpVtbl[78]))((ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref this), shadingRateImage);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList6"]/*' />
/// <unmanaged>ID3D12GraphicsCommandList6</unmanaged>
[Guid("c3827890-e548-4cfa-96cf-5689a9370f80")]
[NativeTypeName("struct ID3D12GraphicsCommandList6 : ID3D12GraphicsCommandList5")]
[NativeInheritance("ID3D12GraphicsCommandList5")]
public unsafe partial struct ID3D12GraphicsCommandList6
{
	public static ref readonly Guid IID_ID3D12GraphicsCommandList6
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x90, 0x78, 0x82, 0xC3,
				0x48, 0xE5,
				0xFA, 0x4C,
				0x96,
				0xCF,
				0x56,
				0x89,
				0xA9,
				0x37,
				0x0F,
				0x80
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12GraphicsCommandList6));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList5.RSSetShadingRate" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void RSSetShadingRate(ShadingRate baseShadingRate, ShadingRateCombiner* combiners)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ShadingRate, ShadingRateCombiner*, void>)(lpVtbl[3]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), baseShadingRate, combiners);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList5.RSSetShadingRateImage" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void RSSetShadingRateImage(ID3D12Resource* shadingRateImage)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12Resource*, void>)(lpVtbl[4]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), shadingRateImage);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.BeginRenderPass" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void BeginRenderPass(uint NumRenderTargets, RenderPassRenderTargetDescription* pRenderTargets, RenderPassDepthStencilDescription* pDepthStencil, RenderPassFlags Flags)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, RenderPassRenderTargetDescription*, RenderPassDepthStencilDescription*, RenderPassFlags, void>)(lpVtbl[5]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), NumRenderTargets, pRenderTargets, pDepthStencil, Flags);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.EndRenderPass" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public void EndRenderPass()
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, void>)(lpVtbl[6]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.InitializeMetaCommand" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public void InitializeMetaCommand(ID3D12MetaCommand* pMetaCommand, void* pInitializationParametersData, nuint InitializationParametersDataSizeInBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12MetaCommand*, void*, nuint, void>)(lpVtbl[7]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pMetaCommand, pInitializationParametersData, InitializationParametersDataSizeInBytes);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.ExecuteMetaCommand" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public void ExecuteMetaCommand(ID3D12MetaCommand* pMetaCommand, void* pExecutionParametersData, nuint ExecutionParametersDataSizeInBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12MetaCommand*, void*, nuint, void>)(lpVtbl[8]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pMetaCommand, pExecutionParametersData, ExecutionParametersDataSizeInBytes);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.BuildRaytracingAccelerationStructure" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public void BuildRaytracingAccelerationStructure(BuildRaytracingAccelerationStructureDescription* pDesc, uint NumPostbuildInfoDescs, RaytracingAccelerationStructurePostbuildInfoDescription* pPostbuildInfoDescs)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, BuildRaytracingAccelerationStructureDescription*, uint, RaytracingAccelerationStructurePostbuildInfoDescription*, void>)(lpVtbl[9]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pDesc, NumPostbuildInfoDescs, pPostbuildInfoDescs);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.EmitRaytracingAccelerationStructurePostbuildInfo" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public void EmitRaytracingAccelerationStructurePostbuildInfo(RaytracingAccelerationStructurePostbuildInfoDescription* pDesc, uint NumSourceAccelerationStructures, ulong* pSourceAccelerationStructureData)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, RaytracingAccelerationStructurePostbuildInfoDescription*, uint, ulong*, void>)(lpVtbl[10]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pDesc, NumSourceAccelerationStructures, pSourceAccelerationStructureData);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.CopyRaytracingAccelerationStructure" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public void CopyRaytracingAccelerationStructure(ulong DestAccelerationStructureData, ulong SourceAccelerationStructureData, RaytracingAccelerationStructureCopyMode Mode)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ulong, ulong, RaytracingAccelerationStructureCopyMode, void>)(lpVtbl[11]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), DestAccelerationStructureData, SourceAccelerationStructureData, Mode);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.SetPipelineState1" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public void SetPipelineState1(ID3D12StateObject* pStateObject)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12StateObject*, void>)(lpVtbl[12]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pStateObject);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList4.DispatchRays" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public void DispatchRays(DispatchRaysDescription* pDesc)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, DispatchRaysDescription*, void>)(lpVtbl[13]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pDesc);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList3.SetProtectedResourceSession" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public void SetProtectedResourceSession(ID3D12ProtectedResourceSession* pProtectedResourceSession)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12ProtectedResourceSession*, void>)(lpVtbl[14]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pProtectedResourceSession);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList2.WriteBufferImmediate" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public void WriteBufferImmediate(uint Count, WritebufferimmediateParameter* pParams, WritebufferimmediateMode* pModes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, WritebufferimmediateParameter*, WritebufferimmediateMode*, void>)(lpVtbl[15]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), Count, pParams, pModes);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.AtomicCopyBufferUINT" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public void AtomicCopyBufferUINT(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, uint Dependencies, ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource*, SubresourceRangeUint64*, void>)(lpVtbl[16]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.AtomicCopyBufferUINT64" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public void AtomicCopyBufferUINT64(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, uint Dependencies, ID3D12Resource* ppDependentResources, SubresourceRangeUint64* pDependentSubresourceRanges)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource*, SubresourceRangeUint64*, void>)(lpVtbl[17]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.OMSetDepthBounds" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public void OMSetDepthBounds(float Min, float Max)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, float, float, void>)(lpVtbl[18]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), Min, Max);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.SetSamplePositions" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public void SetSamplePositions(uint NumSamplesPerPixel, uint NumPixels, SamplePosition* pSamplePositions)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, SamplePosition*, void>)(lpVtbl[19]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), NumSamplesPerPixel, NumPixels, pSamplePositions);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.ResolveSubresourceRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public void ResolveSubresourceRegion(ID3D12Resource* pDstResource, uint DstSubresource, uint DstX, uint DstY, ID3D12Resource* pSrcResource, uint SrcSubresource, RawRect* pSrcRect, Graphics.Dxgi.Common.Format Format, ResolveMode ResolveMode)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, RawRect*, Graphics.Dxgi.Common.Format, ResolveMode, void>)(lpVtbl[20]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pDstResource, DstSubresource, DstX, DstY, pSrcResource, SrcSubresource, pSrcRect, Format, ResolveMode);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList1.SetViewInstanceMask" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public void SetViewInstanceMask(uint Mask)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, void>)(lpVtbl[21]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), Mask);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Close" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public HResult Close()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, int>)(lpVtbl[22]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Reset" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public HResult Reset(ID3D12CommandAllocator* pAllocator, ID3D12PipelineState* pInitialState)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12CommandAllocator*, ID3D12PipelineState*, int>)(lpVtbl[23]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pAllocator, pInitialState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public void ClearState(ID3D12PipelineState* pPipelineState)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12PipelineState*, void>)(lpVtbl[24]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pPipelineState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DrawInstanced" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, uint, uint, void>)(lpVtbl[25]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DrawIndexedInstanced" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, uint, int, uint, void>)(lpVtbl[26]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.Dispatch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, uint, void>)(lpVtbl[27]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyBufferRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public void CopyBufferRegion(ID3D12Resource* pDstBuffer, ulong DstOffset, ID3D12Resource* pSrcBuffer, ulong SrcOffset, ulong NumBytes)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, ulong, void>)(lpVtbl[28]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyTextureRegion" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public void CopyTextureRegion(TextureCopyLocation* pDst, uint DstX, uint DstY, uint DstZ, TextureCopyLocation* pSrc, Box* pSrcBox)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, TextureCopyLocation*, uint, uint, uint, TextureCopyLocation*, Box*, void>)(lpVtbl[29]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public void CopyResource(ID3D12Resource* pDstResource, ID3D12Resource* pSrcResource)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12Resource*, ID3D12Resource*, void>)(lpVtbl[30]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pDstResource, pSrcResource);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.CopyTiles" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public void CopyTiles(ID3D12Resource* pTiledResource, TiledResourceCoordinate* pTileRegionStartCoordinate, TileRegionSize* pTileRegionSize, ID3D12Resource* pBuffer, ulong BufferStartOffsetInBytes, TileCopyFlags Flags)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12Resource*, TiledResourceCoordinate*, TileRegionSize*, ID3D12Resource*, ulong, TileCopyFlags, void>)(lpVtbl[31]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResolveSubresource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public void ResolveSubresource(ID3D12Resource* pDstResource, uint DstSubresource, ID3D12Resource* pSrcResource, uint SrcSubresource, Graphics.Dxgi.Common.Format Format)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12Resource*, uint, ID3D12Resource*, uint, Graphics.Dxgi.Common.Format, void>)(lpVtbl[32]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetPrimitiveTopology" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public void IASetPrimitiveTopology(Graphics.Direct3D.PrimitiveTopology PrimitiveTopology)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, Graphics.Direct3D.PrimitiveTopology, void>)(lpVtbl[33]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), PrimitiveTopology);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.RSSetViewports" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public void RSSetViewports(uint NumViewports, Viewport* pViewports)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, Viewport*, void>)(lpVtbl[34]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), NumViewports, pViewports);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.RSSetScissorRects" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public void RSSetScissorRects(uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, RawRect*, void>)(lpVtbl[35]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetBlendFactor" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public void OMSetBlendFactor(float* BlendFactor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, float*, void>)(lpVtbl[36]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), BlendFactor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetStencilRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public void OMSetStencilRef(uint StencilRef)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, void>)(lpVtbl[37]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), StencilRef);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetPipelineState" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(38)]
	public void SetPipelineState(ID3D12PipelineState* pPipelineState)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12PipelineState*, void>)(lpVtbl[38]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pPipelineState);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResourceBarrier" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(39)]
	public void ResourceBarrier(uint NumBarriers, ResourceBarrier* pBarriers)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, ResourceBarrier*, void>)(lpVtbl[39]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), NumBarriers, pBarriers);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ExecuteBundle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(40)]
	public void ExecuteBundle(ID3D12GraphicsCommandList* pCommandList)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12GraphicsCommandList*, void>)(lpVtbl[40]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pCommandList);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetDescriptorHeaps" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(41)]
	public void SetDescriptorHeaps(uint NumDescriptorHeaps, ID3D12DescriptorHeap* ppDescriptorHeaps)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, ID3D12DescriptorHeap*, void>)(lpVtbl[41]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), NumDescriptorHeaps, ppDescriptorHeaps);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(42)]
	public void SetComputeRootSignature(ID3D12RootSignature* pRootSignature)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12RootSignature*, void>)(lpVtbl[42]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pRootSignature);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootSignature" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(43)]
	public void SetGraphicsRootSignature(ID3D12RootSignature* pRootSignature)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12RootSignature*, void>)(lpVtbl[43]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pRootSignature);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootDescriptorTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(44)]
	public void SetComputeRootDescriptorTable(uint RootParameterIndex, GpuDescriptorHandle* BaseDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, GpuDescriptorHandle*, void>)(lpVtbl[44]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), RootParameterIndex, BaseDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootDescriptorTable" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(45)]
	public void SetGraphicsRootDescriptorTable(uint RootParameterIndex, GpuDescriptorHandle* BaseDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, GpuDescriptorHandle*, void>)(lpVtbl[45]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), RootParameterIndex, BaseDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRoot32BitConstant" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(46)]
	public void SetComputeRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, uint, void>)(lpVtbl[46]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), RootParameterIndex, SrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRoot32BitConstant" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(47)]
	public void SetGraphicsRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, uint, void>)(lpVtbl[47]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), RootParameterIndex, SrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRoot32BitConstants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(48)]
	public void SetComputeRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void* pSrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, void*, uint, void>)(lpVtbl[48]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRoot32BitConstants" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(49)]
	public void SetGraphicsRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void* pSrcData, uint DestOffsetIn32BitValues)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, void*, uint, void>)(lpVtbl[49]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(50)]
	public void SetComputeRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, ulong, void>)(lpVtbl[50]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootConstantBufferView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(51)]
	public void SetGraphicsRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, ulong, void>)(lpVtbl[51]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(52)]
	public void SetComputeRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, ulong, void>)(lpVtbl[52]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootShaderResourceView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(53)]
	public void SetGraphicsRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, ulong, void>)(lpVtbl[53]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetComputeRootUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(54)]
	public void SetComputeRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, ulong, void>)(lpVtbl[54]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetGraphicsRootUnorderedAccessView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(55)]
	public void SetGraphicsRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, ulong, void>)(lpVtbl[55]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), RootParameterIndex, BufferLocation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetIndexBuffer" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(56)]
	public void IASetIndexBuffer(IndexBufferView* pView)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, IndexBufferView*, void>)(lpVtbl[56]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pView);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.IASetVertexBuffers" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(57)]
	public void IASetVertexBuffers(uint StartSlot, uint NumViews, VertexBufferView* pViews)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, VertexBufferView*, void>)(lpVtbl[57]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), StartSlot, NumViews, pViews);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SOSetTargets" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(58)]
	public void SOSetTargets(uint StartSlot, uint NumViews, StreamOutputBufferView* pViews)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, StreamOutputBufferView*, void>)(lpVtbl[58]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), StartSlot, NumViews, pViews);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.OMSetRenderTargets" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(59)]
	public void OMSetRenderTargets(uint NumRenderTargetDescriptors, CpuDescriptorHandle* pRenderTargetDescriptors, Bool32 RTsSingleHandleToDescriptorRange, CpuDescriptorHandle* pDepthStencilDescriptor)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, CpuDescriptorHandle*, Bool32, CpuDescriptorHandle*, void>)(lpVtbl[59]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearDepthStencilView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(60)]
	public void ClearDepthStencilView(CpuDescriptorHandle* DepthStencilView, ClearFlags ClearFlags, float Depth, byte Stencil, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, CpuDescriptorHandle*, ClearFlags, float, byte, uint, RawRect*, void>)(lpVtbl[60]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearRenderTargetView" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(61)]
	public void ClearRenderTargetView(CpuDescriptorHandle* RenderTargetView, float* ColorRGBA, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, CpuDescriptorHandle*, float*, uint, RawRect*, void>)(lpVtbl[61]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), RenderTargetView, ColorRGBA, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearUnorderedAccessViewUint" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(62)]
	public void ClearUnorderedAccessViewUint(GpuDescriptorHandle* ViewGPUHandleInCurrentHeap, CpuDescriptorHandle* ViewCPUHandle, ID3D12Resource* pResource, uint* Values, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, GpuDescriptorHandle*, CpuDescriptorHandle*, ID3D12Resource*, uint*, uint, RawRect*, void>)(lpVtbl[62]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ClearUnorderedAccessViewFloat" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(63)]
	public void ClearUnorderedAccessViewFloat(GpuDescriptorHandle* ViewGPUHandleInCurrentHeap, CpuDescriptorHandle* ViewCPUHandle, ID3D12Resource* pResource, float* Values, uint NumRects, RawRect* pRects)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, GpuDescriptorHandle*, CpuDescriptorHandle*, ID3D12Resource*, float*, uint, RawRect*, void>)(lpVtbl[63]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.DiscardResource" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(64)]
	public void DiscardResource(ID3D12Resource* pResource, DiscardRegion* pRegion)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12Resource*, DiscardRegion*, void>)(lpVtbl[64]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pResource, pRegion);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.BeginQuery" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(65)]
	public void BeginQuery(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint Index)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12QueryHeap*, QueryType, uint, void>)(lpVtbl[65]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pQueryHeap, Type, Index);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.EndQuery" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(66)]
	public void EndQuery(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint Index)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12QueryHeap*, QueryType, uint, void>)(lpVtbl[66]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pQueryHeap, Type, Index);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ResolveQueryData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(67)]
	public void ResolveQueryData(ID3D12QueryHeap* pQueryHeap, QueryType Type, uint StartIndex, uint NumQueries, ID3D12Resource* pDestinationBuffer, ulong AlignedDestinationBufferOffset)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12QueryHeap*, QueryType, uint, uint, ID3D12Resource*, ulong, void>)(lpVtbl[67]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetPredication" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(68)]
	public void SetPredication(ID3D12Resource* pBuffer, ulong AlignedBufferOffset, PredicationOp Operation)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12Resource*, ulong, PredicationOp, void>)(lpVtbl[68]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pBuffer, AlignedBufferOffset, Operation);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.SetMarker" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(69)]
	public void SetMarker(uint Metadata, void* pData, uint Size)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, void*, uint, void>)(lpVtbl[69]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), Metadata, pData, Size);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.BeginEvent" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(70)]
	public void BeginEvent(uint Metadata, void* pData, uint Size)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, void*, uint, void>)(lpVtbl[70]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), Metadata, pData, Size);
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.EndEvent" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(71)]
	public void EndEvent()
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, void>)(lpVtbl[71]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12GraphicsCommandList.ExecuteIndirect" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(72)]
	public void ExecuteIndirect(ID3D12CommandSignature* pCommandSignature, uint MaxCommandCount, ID3D12Resource* pArgumentBuffer, ulong ArgumentBufferOffset, ID3D12Resource* pCountBuffer, ulong CountBufferOffset)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(lpVtbl[72]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
	}

	/// <inheritdoc cref="ID3D12CommandList.GetType" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(73)]
	public new Graphics.Direct3D12.CommandListType GetType()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, Graphics.Direct3D12.CommandListType>)(lpVtbl[73]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="ID3D12DeviceChild.GetDevice" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(74)]
	public HResult GetDevice(Guid* riid, void** ppvDevice)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, Guid*, void**, int>)(lpVtbl[74]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), riid, ppvDevice);
	}

	/// <inheritdoc cref="ID3D12Object.GetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(75)]
	public HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, Guid*, uint*, void*, int>)(lpVtbl[75]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), guid, pDataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateData" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(76)]
	public HResult SetPrivateData(Guid* guid, uint DataSize, void* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, Guid*, uint, void*, int>)(lpVtbl[76]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), guid, DataSize, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetPrivateDataInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(77)]
	public HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, Guid*, IUnknown*, int>)(lpVtbl[77]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), guid, pData);
	}

	/// <inheritdoc cref="ID3D12Object.SetName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(78)]
	public HResult SetName(char** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, char**, int>)(lpVtbl[78]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12GraphicsCommandList6::DispatchMesh"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(79)]
	public void DispatchMesh(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ)
	{
		((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, uint, void>)(lpVtbl[79]))((ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref this), ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionType"]/*' />
/// <unmanaged>ID3D12ShaderReflectionType</unmanaged>
[Guid("e913c351-783d-48ca-a1d1-4f306284ad56")]
public unsafe partial struct ID3D12ShaderReflectionType
{
	public static ref readonly Guid IID_ID3D12ShaderReflectionType
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x51, 0xC3, 0x13, 0xE9,
				0x3D, 0x78,
				0xCA, 0x48,
				0xA1,
				0xD1,
				0x4F,
				0x30,
				0x62,
				0x84,
				0xAD,
				0x56
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12ShaderReflectionType));

	public void** lpVtbl;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionType::GetDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult GetDesc(ShaderTypeDescription* pDesc)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, ShaderTypeDescription*, int>)(lpVtbl[0]))((ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref this), pDesc);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionType::GetMemberTypeByIndex"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	public Graphics.Direct3D12.ID3D12ShaderReflectionType GetMemberTypeByIndex(uint Index)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, uint, Graphics.Direct3D12.ID3D12ShaderReflectionType>)(lpVtbl[1]))((ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref this), Index);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionType::GetMemberTypeByName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	public Graphics.Direct3D12.ID3D12ShaderReflectionType GetMemberTypeByName(byte** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, byte**, Graphics.Direct3D12.ID3D12ShaderReflectionType>)(lpVtbl[2]))((ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionType::GetMemberTypeName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public byte* GetMemberTypeName(uint Index)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, uint, byte*>)(lpVtbl[3]))((ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref this), Index);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionType::IsEqual"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult IsEqual(ID3D12ShaderReflectionType* pType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, ID3D12ShaderReflectionType*, int>)(lpVtbl[4]))((ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref this), pType);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionType::GetSubType"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Graphics.Direct3D12.ID3D12ShaderReflectionType GetSubType()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, Graphics.Direct3D12.ID3D12ShaderReflectionType>)(lpVtbl[5]))((ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionType::GetBaseClass"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public Graphics.Direct3D12.ID3D12ShaderReflectionType GetBaseClass()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, Graphics.Direct3D12.ID3D12ShaderReflectionType>)(lpVtbl[6]))((ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionType::GetNumInterfaces"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public uint GetNumInterfaces()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, uint>)(lpVtbl[7]))((ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionType::GetInterfaceByIndex"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public Graphics.Direct3D12.ID3D12ShaderReflectionType GetInterfaceByIndex(uint uIndex)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, uint, Graphics.Direct3D12.ID3D12ShaderReflectionType>)(lpVtbl[8]))((ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref this), uIndex);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionType::IsOfType"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult IsOfType(ID3D12ShaderReflectionType* pType)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, ID3D12ShaderReflectionType*, int>)(lpVtbl[9]))((ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref this), pType);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionType::ImplementsInterface"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult ImplementsInterface(ID3D12ShaderReflectionType* pBase)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, ID3D12ShaderReflectionType*, int>)(lpVtbl[10]))((ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref this), pBase);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionVariable"]/*' />
/// <unmanaged>ID3D12ShaderReflectionVariable</unmanaged>
[Guid("8337a8a6-a216-444a-b2f4-314733a73aea")]
public unsafe partial struct ID3D12ShaderReflectionVariable
{
	public static ref readonly Guid IID_ID3D12ShaderReflectionVariable
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA6, 0xA8, 0x37, 0x83,
				0x16, 0xA2,
				0x4A, 0x44,
				0xB2,
				0xF4,
				0x31,
				0x47,
				0x33,
				0xA7,
				0x3A,
				0xEA
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12ShaderReflectionVariable));

	public void** lpVtbl;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionVariable::GetDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult GetDesc(ShaderVariableDescription* pDesc)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionVariable*, ShaderVariableDescription*, int>)(lpVtbl[0]))((ID3D12ShaderReflectionVariable*)Unsafe.AsPointer(ref this), pDesc);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionVariable::GetType"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	public new Graphics.Direct3D12.ID3D12ShaderReflectionType GetType()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionVariable*, Graphics.Direct3D12.ID3D12ShaderReflectionType>)(lpVtbl[1]))((ID3D12ShaderReflectionVariable*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionVariable::GetBuffer"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	public Graphics.Direct3D12.ID3D12ShaderReflectionConstantBuffer GetBuffer()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionVariable*, Graphics.Direct3D12.ID3D12ShaderReflectionConstantBuffer>)(lpVtbl[2]))((ID3D12ShaderReflectionVariable*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionVariable::GetInterfaceSlot"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public uint GetInterfaceSlot(uint uArrayIndex)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionVariable*, uint, uint>)(lpVtbl[3]))((ID3D12ShaderReflectionVariable*)Unsafe.AsPointer(ref this), uArrayIndex);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionConstantBuffer"]/*' />
/// <unmanaged>ID3D12ShaderReflectionConstantBuffer</unmanaged>
[Guid("c59598b4-48b3-4869-b9b1-b1618b14a8b7")]
public unsafe partial struct ID3D12ShaderReflectionConstantBuffer
{
	public static ref readonly Guid IID_ID3D12ShaderReflectionConstantBuffer
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB4, 0x98, 0x95, 0xC5,
				0xB3, 0x48,
				0x69, 0x48,
				0xB9,
				0xB1,
				0xB1,
				0x61,
				0x8B,
				0x14,
				0xA8,
				0xB7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12ShaderReflectionConstantBuffer));

	public void** lpVtbl;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionConstantBuffer::GetDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult GetDesc(ShaderBufferDescription* pDesc)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionConstantBuffer*, ShaderBufferDescription*, int>)(lpVtbl[0]))((ID3D12ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref this), pDesc);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionConstantBuffer::GetVariableByIndex"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	public Graphics.Direct3D12.ID3D12ShaderReflectionVariable GetVariableByIndex(uint Index)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionConstantBuffer*, uint, Graphics.Direct3D12.ID3D12ShaderReflectionVariable>)(lpVtbl[1]))((ID3D12ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref this), Index);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflectionConstantBuffer::GetVariableByName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	public Graphics.Direct3D12.ID3D12ShaderReflectionVariable GetVariableByName(byte** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionConstantBuffer*, byte**, Graphics.Direct3D12.ID3D12ShaderReflectionVariable>)(lpVtbl[2]))((ID3D12ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref this), Name);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection"]/*' />
/// <unmanaged>ID3D12ShaderReflection</unmanaged>
[Guid("5a58797d-a72c-478d-8ba2-efc6b0efe88e")]
[NativeTypeName("struct ID3D12ShaderReflection : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12ShaderReflection
{
	public static ref readonly Guid IID_ID3D12ShaderReflection
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7D, 0x79, 0x58, 0x5A,
				0x2C, 0xA7,
				0x8D, 0x47,
				0x8B,
				0xA2,
				0xEF,
				0xC6,
				0xB0,
				0xEF,
				0xE8,
				0x8E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12ShaderReflection));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDesc(ShaderDescription* pDesc)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, ShaderDescription*, int>)(lpVtbl[3]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this), pDesc);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetConstantBufferByIndex"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public Graphics.Direct3D12.ID3D12ShaderReflectionConstantBuffer GetConstantBufferByIndex(uint Index)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, Graphics.Direct3D12.ID3D12ShaderReflectionConstantBuffer>)(lpVtbl[4]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this), Index);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetConstantBufferByName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public Graphics.Direct3D12.ID3D12ShaderReflectionConstantBuffer GetConstantBufferByName(byte** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, byte**, Graphics.Direct3D12.ID3D12ShaderReflectionConstantBuffer>)(lpVtbl[5]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetResourceBindingDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult GetResourceBindingDesc(uint ResourceIndex, ShaderInputBindDescription* pDesc)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, ShaderInputBindDescription*, int>)(lpVtbl[6]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this), ResourceIndex, pDesc);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetInputParameterDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult GetInputParameterDesc(uint ParameterIndex, SignatureParameterDescription* pDesc)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, SignatureParameterDescription*, int>)(lpVtbl[7]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this), ParameterIndex, pDesc);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetOutputParameterDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult GetOutputParameterDesc(uint ParameterIndex, SignatureParameterDescription* pDesc)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, SignatureParameterDescription*, int>)(lpVtbl[8]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this), ParameterIndex, pDesc);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetPatchConstantParameterDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult GetPatchConstantParameterDesc(uint ParameterIndex, SignatureParameterDescription* pDesc)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, SignatureParameterDescription*, int>)(lpVtbl[9]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this), ParameterIndex, pDesc);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetVariableByName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public Graphics.Direct3D12.ID3D12ShaderReflectionVariable GetVariableByName(byte** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, byte**, Graphics.Direct3D12.ID3D12ShaderReflectionVariable>)(lpVtbl[10]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetResourceBindingDescByName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public HResult GetResourceBindingDescByName(byte** Name, ShaderInputBindDescription* pDesc)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, byte**, ShaderInputBindDescription*, int>)(lpVtbl[11]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this), Name, pDesc);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetMovInstructionCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public uint GetMovInstructionCount()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>)(lpVtbl[12]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetMovcInstructionCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public uint GetMovcInstructionCount()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>)(lpVtbl[13]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetConversionInstructionCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public uint GetConversionInstructionCount()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>)(lpVtbl[14]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetBitwiseInstructionCount"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public uint GetBitwiseInstructionCount()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>)(lpVtbl[15]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetGSInputPrimitive"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public Graphics.Direct3D.Primitive GetGSInputPrimitive()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, Graphics.Direct3D.Primitive>)(lpVtbl[16]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::IsSampleFrequencyShader"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public Bool32 IsSampleFrequencyShader()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, Bool32>)(lpVtbl[17]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetNumInterfaceSlots"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public uint GetNumInterfaceSlots()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>)(lpVtbl[18]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetMinFeatureLevel"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetMinFeatureLevel(Graphics.Direct3D.FeatureLevel* pLevel)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, Graphics.Direct3D.FeatureLevel*, int>)(lpVtbl[19]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this), pLevel);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetThreadGroupSize"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public uint GetThreadGroupSize(uint* pSizeX, uint* pSizeY, uint* pSizeZ)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint*, uint*, uint*, uint>)(lpVtbl[20]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this), pSizeX, pSizeY, pSizeZ);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12ShaderReflection::GetRequiresFlags"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public ulong GetRequiresFlags()
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, ulong>)(lpVtbl[21]))((ID3D12ShaderReflection*)Unsafe.AsPointer(ref this));
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12LibraryReflection"]/*' />
/// <unmanaged>ID3D12LibraryReflection</unmanaged>
[Guid("8e349d19-54db-4a56-9dc9-119d87bdb804")]
[NativeTypeName("struct ID3D12LibraryReflection : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID3D12LibraryReflection
{
	public static ref readonly Guid IID_ID3D12LibraryReflection
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x19, 0x9D, 0x34, 0x8E,
				0xDB, 0x54,
				0x56, 0x4A,
				0x9D,
				0xC9,
				0x11,
				0x9D,
				0x87,
				0xBD,
				0xB8,
				0x04
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12LibraryReflection));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12LibraryReflection::GetDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetDesc(LibraryDescription* pDesc)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12LibraryReflection*, LibraryDescription*, int>)(lpVtbl[3]))((ID3D12LibraryReflection*)Unsafe.AsPointer(ref this), pDesc);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12LibraryReflection::GetFunctionByIndex"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public Graphics.Direct3D12.ID3D12FunctionReflection GetFunctionByIndex(int FunctionIndex)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12LibraryReflection*, int, Graphics.Direct3D12.ID3D12FunctionReflection>)(lpVtbl[4]))((ID3D12LibraryReflection*)Unsafe.AsPointer(ref this), FunctionIndex);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12FunctionReflection"]/*' />
/// <unmanaged>ID3D12FunctionReflection</unmanaged>
[Guid("1108795c-2772-4ba9-b2a8-d464dc7e2799")]
public unsafe partial struct ID3D12FunctionReflection
{
	public static ref readonly Guid IID_ID3D12FunctionReflection
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5C, 0x79, 0x08, 0x11,
				0x72, 0x27,
				0xA9, 0x4B,
				0xB2,
				0xA8,
				0xD4,
				0x64,
				0xDC,
				0x7E,
				0x27,
				0x99
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12FunctionReflection));

	public void** lpVtbl;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12FunctionReflection::GetDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult GetDesc(FunctionDescription* pDesc)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12FunctionReflection*, FunctionDescription*, int>)(lpVtbl[0]))((ID3D12FunctionReflection*)Unsafe.AsPointer(ref this), pDesc);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12FunctionReflection::GetConstantBufferByIndex"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	public Graphics.Direct3D12.ID3D12ShaderReflectionConstantBuffer GetConstantBufferByIndex(uint BufferIndex)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12FunctionReflection*, uint, Graphics.Direct3D12.ID3D12ShaderReflectionConstantBuffer>)(lpVtbl[1]))((ID3D12FunctionReflection*)Unsafe.AsPointer(ref this), BufferIndex);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12FunctionReflection::GetConstantBufferByName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	public Graphics.Direct3D12.ID3D12ShaderReflectionConstantBuffer GetConstantBufferByName(byte** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12FunctionReflection*, byte**, Graphics.Direct3D12.ID3D12ShaderReflectionConstantBuffer>)(lpVtbl[2]))((ID3D12FunctionReflection*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12FunctionReflection::GetResourceBindingDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult GetResourceBindingDesc(uint ResourceIndex, ShaderInputBindDescription* pDesc)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12FunctionReflection*, uint, ShaderInputBindDescription*, int>)(lpVtbl[3]))((ID3D12FunctionReflection*)Unsafe.AsPointer(ref this), ResourceIndex, pDesc);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12FunctionReflection::GetVariableByName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public Graphics.Direct3D12.ID3D12ShaderReflectionVariable GetVariableByName(byte** Name)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12FunctionReflection*, byte**, Graphics.Direct3D12.ID3D12ShaderReflectionVariable>)(lpVtbl[4]))((ID3D12FunctionReflection*)Unsafe.AsPointer(ref this), Name);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12FunctionReflection::GetResourceBindingDescByName"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult GetResourceBindingDescByName(byte** Name, ShaderInputBindDescription* pDesc)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12FunctionReflection*, byte**, ShaderInputBindDescription*, int>)(lpVtbl[5]))((ID3D12FunctionReflection*)Unsafe.AsPointer(ref this), Name, pDesc);
	}

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12FunctionReflection::GetFunctionParameter"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public Graphics.Direct3D12.ID3D12FunctionParameterReflection GetFunctionParameter(int ParameterIndex)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12FunctionReflection*, int, Graphics.Direct3D12.ID3D12FunctionParameterReflection>)(lpVtbl[6]))((ID3D12FunctionReflection*)Unsafe.AsPointer(ref this), ParameterIndex);
	}

}

/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12FunctionParameterReflection"]/*' />
/// <unmanaged>ID3D12FunctionParameterReflection</unmanaged>
[Guid("ec25f42d-7006-4f2b-b33e-02cc3375733f")]
public unsafe partial struct ID3D12FunctionParameterReflection
{
	public static ref readonly Guid IID_ID3D12FunctionParameterReflection
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x2D, 0xF4, 0x25, 0xEC,
				0x06, 0x70,
				0x2B, 0x4F,
				0xB3,
				0x3E,
				0x02,
				0xCC,
				0x33,
				0x75,
				0x73,
				0x3F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID3D12FunctionParameterReflection));

	public void** lpVtbl;

	/// <include file='../Direct3D12.xml' path='doc/member[@name="ID3D12FunctionParameterReflection::GetDesc"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult GetDesc(ParameterDescription* pDesc)
	{
		return ((delegate* unmanaged[Stdcall]<ID3D12FunctionParameterReflection*, ParameterDescription*, int>)(lpVtbl[0]))((ID3D12FunctionParameterReflection*)Unsafe.AsPointer(ref this), pDesc);
	}

}

#endregion Com Types

#region Functions
public static unsafe partial class Apis
{
	[DllImport("d3d12", ExactSpelling = true)]
	public static extern HResult D3D12SerializeRootSignature(RootSignatureDescription* pRootSignature, RootSignatureVersion Version, Graphics.Direct3D.ID3DBlob* ppBlob, Graphics.Direct3D.ID3DBlob* ppErrorBlob);

	[DllImport("d3d12", ExactSpelling = true)]
	public static extern HResult D3D12CreateRootSignatureDeserializer(void* pSrcData, nuint SrcDataSizeInBytes, Guid* pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);

	[DllImport("d3d12", ExactSpelling = true)]
	public static extern HResult D3D12SerializeVersionedRootSignature(VersionedRootSignatureDescription* pRootSignature, Graphics.Direct3D.ID3DBlob* ppBlob, Graphics.Direct3D.ID3DBlob* ppErrorBlob);

	[DllImport("d3d12", ExactSpelling = true)]
	public static extern HResult D3D12CreateVersionedRootSignatureDeserializer(void* pSrcData, nuint SrcDataSizeInBytes, Guid* pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);

	[DllImport("d3d12", ExactSpelling = true)]
	public static extern HResult D3D12CreateDevice(IUnknown* pAdapter, Graphics.Direct3D.FeatureLevel MinimumFeatureLevel, Guid* riid, void** ppDevice);

	[DllImport("d3d12", ExactSpelling = true)]
	public static extern HResult D3D12GetDebugInterface(Guid* riid, void** ppvDebug);

	[DllImport("d3d12", ExactSpelling = true)]
	public static extern HResult D3D12EnableExperimentalFeatures(uint NumFeatures, Guid* pIIDs, void* pConfigurationStructs, uint* pConfigurationStructSizes);

	[DllImport("d3d12", ExactSpelling = true)]
	public static extern HResult D3D12GetInterface(Guid* rclsid, Guid* riid, void** ppvDebug);

}
#endregion Functions
