// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------


#if !NET6_0_OR_GREATER
using MemoryMarshal = Win32.MemoryMarshal;
#endif

namespace Win32.Graphics.Direct2D;

public static partial class Apis
{
	public const float D2D1_DEFAULT_FLATTENING_TOLERANCE = 0.25f;
	public static ref readonly Guid CLSID_D2D12DAffineTransform
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x85, 0x74, 0xA9, 0x6A,
				0x54, 0x63,
				0xFC, 0x4C,
				0x90,
				0x8C,
				0xE4,
				0xA7,
				0x4F,
				0x62,
				0xC9,
				0x6C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D13DPerspectiveTransform
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0B, 0x4D, 0x84, 0xC2,
				0x86, 0x3D,
				0xE7, 0x46,
				0x85,
				0xBA,
				0x52,
				0x6C,
				0x92,
				0x40,
				0xF3,
				0xFB
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D13DTransform
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x04, 0x7B, 0x46, 0xE8,
				0x61, 0xEC,
				0x8A, 0x4B,
				0xB5,
				0xDE,
				0xD4,
				0xD7,
				0x3D,
				0xEB,
				0xEA,
				0x5A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1ArithmeticComposite
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x37, 0x14, 0x15, 0xFC,
				0x9A, 0x04,
				0x84, 0x47,
				0xA2,
				0x4A,
				0xF1,
				0xC4,
				0xDA,
				0xF2,
				0x09,
				0x87
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Atlas
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE4, 0x2B, 0x3E, 0x91,
				0xCF, 0xFD,
				0xE2, 0x4F,
				0xA5,
				0xF0,
				0x24,
				0x54,
				0xF1,
				0x4F,
				0xF4,
				0x08
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1BitmapSource
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x4D, 0xC2, 0xB6, 0x5F,
				0xDD, 0xC6,
				0x31, 0x42,
				0x94,
				0x04,
				0x50,
				0xF4,
				0xD5,
				0xC3,
				0x25,
				0x2D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Blend
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x7B, 0xB7, 0xC5, 0x81,
				0xF8, 0x13,
				0xDD, 0x4C,
				0xAD,
				0x20,
				0xC8,
				0x90,
				0x54,
				0x7A,
				0xC6,
				0x5D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Border
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC0, 0x49, 0x2D, 0x2A,
				0xCF, 0x4A,
				0xC7, 0x43,
				0x8C,
				0x6A,
				0x7C,
				0x4A,
				0x27,
				0x87,
				0x4D,
				0x27
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Brightness
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1E, 0x8D, 0xEA, 0x8C,
				0xB0, 0x77,
				0x86, 0x49,
				0xB3,
				0xB9,
				0x2F,
				0x0C,
				0x0E,
				0xAE,
				0x78,
				0x87
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1ColorManagement
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x4C, 0x52, 0x28, 0x1A,
				0xD6, 0xFD,
				0xA4, 0x4A,
				0xAE,
				0x8F,
				0x83,
				0x7E,
				0xB8,
				0x26,
				0x7B,
				0x37
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1ColorMatrix
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xD6, 0x03, 0x1F, 0x92,
				0x1C, 0x64,
				0xDF, 0x47,
				0x85,
				0x2D,
				0xB4,
				0xBB,
				0x61,
				0x53,
				0xAE,
				0x11
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Composite
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x51, 0x9F, 0xFC, 0x48,
				0xAC, 0xF6,
				0xF1, 0x48,
				0x8B,
				0x58,
				0x3B,
				0x28,
				0xAC,
				0x46,
				0xF7,
				0x6D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1ConvolveMatrix
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x08, 0x8C, 0x7F, 0x40,
				0x33, 0x55,
				0x31, 0x43,
				0xA3,
				0x41,
				0x23,
				0xCC,
				0x38,
				0x77,
				0x84,
				0x3E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Crop
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x10, 0x71, 0x3F, 0xE2,
				0x9A, 0x0E,
				0x24, 0x43,
				0xAF,
				0x47,
				0x6A,
				0x2C,
				0x0C,
				0x46,
				0xF3,
				0x5B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1DirectionalBlur
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA6, 0x19, 0x43, 0x17,
				0xE9, 0x58,
				0xB2, 0x49,
				0xBB,
				0x63,
				0xCA,
				0xF2,
				0xC8,
				0x11,
				0xA3,
				0xDB
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1DiscreteTransfer
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCD, 0x6F, 0x86, 0x90,
				0x8E, 0x48,
				0x4B, 0x45,
				0xAF,
				0x06,
				0xE5,
				0x04,
				0x1B,
				0x66,
				0xC3,
				0x6C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1DisplacementMap
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x64, 0x83, 0xC4, 0xED,
				0x17, 0x04,
				0x11, 0x41,
				0x94,
				0x50,
				0x43,
				0x84,
				0x5F,
				0xA9,
				0xF8,
				0x90
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1DistantDiffuse
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x62, 0xFD, 0x7E, 0x3E,
				0x2D, 0xA3,
				0xD4, 0x46,
				0xA8,
				0x3C,
				0x52,
				0x78,
				0x88,
				0x9A,
				0xC9,
				0x54
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1DistantSpecular
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE5, 0x1E, 0x8C, 0x42,
				0xB8, 0x77,
				0x50, 0x44,
				0x8A,
				0xB5,
				0x72,
				0x21,
				0x9C,
				0x21,
				0xAB,
				0xDA
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1DpiCompensation
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC7, 0xC5, 0x26, 0x6C,
				0xE0, 0x34,
				0xFC, 0x46,
				0x9C,
				0xFD,
				0xE5,
				0x82,
				0x37,
				0x06,
				0xE2,
				0x28
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Flood
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x20, 0x3C, 0xC2, 0x61,
				0x69, 0xAE,
				0x8E, 0x4D,
				0x94,
				0xCF,
				0x50,
				0x07,
				0x8D,
				0xF6,
				0x38,
				0xF2
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1GammaTransfer
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC4, 0x44, 0x94, 0x40,
				0x19, 0xC4,
				0xA0, 0x41,
				0xB0,
				0xC1,
				0x8C,
				0xD0,
				0xC0,
				0xA1,
				0x8E,
				0x42
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1GaussianBlur
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x69, 0x6D, 0xEB, 0x1F,
				0xE6, 0x2F,
				0xC9, 0x4A,
				0x8C,
				0x58,
				0x1D,
				0x7F,
				0x93,
				0xE7,
				0xA6,
				0xA5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Scale
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x69, 0x93, 0xAF, 0x9D,
				0x46, 0x38,
				0x0E, 0x4D,
				0xA4,
				0x4E,
				0x0C,
				0x60,
				0x79,
				0x34,
				0xA5,
				0xD7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Histogram
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xD0, 0xB7, 0x1D, 0x88,
				0xEE, 0xF7,
				0x4D, 0x4D,
				0xA6,
				0xD2,
				0x46,
				0x97,
				0xAC,
				0xC6,
				0x6E,
				0xE8
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1HueRotation
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xEC, 0x58, 0x44, 0x0F,
				0x32, 0x4B,
				0x1B, 0x49,
				0x9E,
				0x85,
				0xBD,
				0x73,
				0xF4,
				0x4D,
				0x3E,
				0xB6
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1LinearTransfer
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFD, 0xC8, 0x47, 0xAD,
				0xEF, 0x63,
				0xCC, 0x4A,
				0x9B,
				0x51,
				0x67,
				0x97,
				0x9C,
				0x03,
				0x6C,
				0x06
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1LuminanceToAlpha
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xB7, 0x1A, 0x25, 0x41,
				0xEB, 0x0B,
				0xF8, 0x46,
				0x9D,
				0xA7,
				0x59,
				0xE9,
				0x3F,
				0xCC,
				0xE5,
				0xDE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Morphology
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x0D, 0xC4, 0xE6, 0xEA,
				0x6A, 0x62,
				0x2D, 0x4C,
				0xBF,
				0xCB,
				0x39,
				0x10,
				0x01,
				0xAB,
				0xE2,
				0x02
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1OpacityMetadata
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x6A, 0x00, 0x53, 0x6C,
				0x50, 0x44,
				0x99, 0x41,
				0xAA,
				0x5B,
				0xAD,
				0x16,
				0x56,
				0xFE,
				0xCE,
				0x5E
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1PointDiffuse
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC3, 0x03, 0xE3, 0xB9,
				0x8C, 0xC0,
				0x91, 0x4F,
				0x8B,
				0x7B,
				0x38,
				0x65,
				0x6B,
				0xC4,
				0x8C,
				0x20
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1PointSpecular
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x26, 0xCA, 0xC3, 0x09,
				0xE2, 0x3A,
				0x09, 0x4F,
				0x9E,
				0xBC,
				0xED,
				0x38,
				0x65,
				0xD5,
				0x3F,
				0x22
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Premultiply
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x19, 0xB4, 0xEA, 0x06,
				0xED, 0xDE,
				0x18, 0x40,
				0x80,
				0xD2,
				0x3E,
				0x1D,
				0x47,
				0x1A,
				0xDE,
				0xB2
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Saturation
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCF, 0xD9, 0xB2, 0x5C,
				0x7D, 0x32,
				0x9F, 0x45,
				0xA0,
				0xCE,
				0x40,
				0xC0,
				0xB2,
				0x08,
				0x6B,
				0xF7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Shadow
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x61, 0xA3, 0x7E, 0xC6,
				0x63, 0x18,
				0x69, 0x4E,
				0x89,
				0xDB,
				0x69,
				0x5D,
				0x3E,
				0x9A,
				0x5B,
				0x6B
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1SpotDiffuse
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x05, 0x11, 0x8A, 0x81,
				0x32, 0x79,
				0xF4, 0x44,
				0xAA,
				0x86,
				0x08,
				0xAE,
				0x7B,
				0x2F,
				0x2C,
				0x93
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1SpotSpecular
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x1E, 0x42, 0xAE, 0xED,
				0x54, 0x76,
				0x37, 0x4A,
				0x9D,
				0xB8,
				0x71,
				0xAC,
				0xC1,
				0xBE,
				0xB3,
				0xC1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1TableTransfer
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC3, 0x18, 0xF8, 0x5B,
				0x43, 0x5E,
				0xCB, 0x48,
				0xB6,
				0x31,
				0x86,
				0x83,
				0x96,
				0xD6,
				0xA1,
				0xD4
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Tile
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x38, 0x41, 0x78, 0xB0,
				0x76, 0x3B,
				0xC5, 0x4B,
				0xB1,
				0x3B,
				0x0F,
				0xA2,
				0xAD,
				0x02,
				0x65,
				0x9F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Turbulence
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xAE, 0xB6, 0x2B, 0xCF,
				0x9A, 0x88,
				0xD7, 0x4A,
				0xBA,
				0x29,
				0xA2,
				0xFD,
				0x73,
				0x2C,
				0x9F,
				0xC9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1UnPremultiply
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x89, 0xC4, 0x9A, 0xFB,
				0x8D, 0xAD,
				0xED, 0x41,
				0x99,
				0x99,
				0xBB,
				0x63,
				0x47,
				0xD1,
				0x10,
				0xF7
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1YCbCr
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xC1, 0x3C, 0x50, 0x99,
				0xC7, 0x66,
				0xC9, 0x45,
				0xA8,
				0x75,
				0x8A,
				0xD8,
				0xA7,
				0x91,
				0x44,
				0x01
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Contrast
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8A, 0xA7, 0x48, 0xB6,
				0xD5, 0x0E,
				0x80, 0x4F,
				0xA9,
				0x4A,
				0x8E,
				0x82,
				0x5A,
				0xCA,
				0x6B,
				0x77
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1RgbToHue
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xEC, 0xE5, 0xF3, 0x23,
				0xE8, 0x91,
				0x3D, 0x4D,
				0xAD,
				0x0A,
				0xAF,
				0xAD,
				0xC1,
				0x00,
				0x4A,
				0xA1
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1HueToRgb
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xBD, 0xA6, 0x78, 0x7B,
				0x41, 0x01,
				0xEF, 0x4D,
				0x8A,
				0x52,
				0x63,
				0x56,
				0xEE,
				0x0C,
				0xBD,
				0xD5
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1ChromaKey
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5B, 0x1F, 0xC0, 0x74,
				0x0D, 0x2A,
				0x8C, 0x40,
				0x88,
				0xE2,
				0xC7,
				0xA3,
				0xC7,
				0x19,
				0x77,
				0x42
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Emboss
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x2B, 0xEB, 0xC5, 0xB1,
				0x48, 0x03,
				0xF0, 0x43,
				0x81,
				0x07,
				0x49,
				0x57,
				0xCA,
				0xCB,
				0xA2,
				0xAE
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Exposure
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xFA, 0x8C, 0x6C, 0xB5,
				0x34, 0xF6,
				0xEE, 0x41,
				0xBE,
				0xE0,
				0xFF,
				0xA6,
				0x17,
				0x10,
				0x60,
				0x04
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Grayscale
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xEB, 0xE0, 0xDD, 0x36,
				0x25, 0x37,
				0xE0, 0x42,
				0x83,
				0x6D,
				0x52,
				0xFB,
				0x20,
				0xAE,
				0xE6,
				0x44
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Invert
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x4D, 0x78, 0xC3, 0xE0,
				0x39, 0xCB,
				0x84, 0x4E,
				0xB6,
				0xFD,
				0x6B,
				0x72,
				0xF0,
				0x81,
				0x02,
				0x63
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Posterize
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x5E, 0x94, 0x88, 0x21,
				0xA3, 0x33,
				0x66, 0x43,
				0xB7,
				0xBC,
				0x08,
				0x6B,
				0xD0,
				0x2D,
				0x08,
				0x84
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Sepia
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x10, 0xF4, 0x1A, 0x3A,
				0x1D, 0x5F,
				0xBE, 0x4D,
				0x84,
				0xDF,
				0x91,
				0x5D,
				0xA7,
				0x9B,
				0x71,
				0x53
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Sharpen
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCB, 0x87, 0xB8, 0xC9,
				0xFF, 0xC5,
				0xC5, 0x4D,
				0x97,
				0x79,
				0x27,
				0x3D,
				0xCF,
				0x41,
				0x7C,
				0x7D
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Straighten
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x12, 0x7B, 0xA4, 0x4D,
				0xA3, 0x79,
				0xB0, 0x4F,
				0x82,
				0x37,
				0xBB,
				0xC3,
				0xB2,
				0xA4,
				0xDE,
				0x08
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1TemperatureTint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x87, 0x60, 0x17, 0x89,
				0xF9, 0x8A,
				0x08, 0x4A,
				0xAE,
				0xB1,
				0x89,
				0x5F,
				0x38,
				0xDB,
				0x17,
				0x66
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Vignette
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xBE, 0x40, 0x0C, 0xC0,
				0x67, 0x5E,
				0xA3, 0x4C,
				0x95,
				0xB4,
				0xF4,
				0xB0,
				0x2C,
				0x11,
				0x51,
				0x35
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1EdgeDetection
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xCA, 0x83, 0xF5, 0xEF,
				0x07, 0xCB,
				0xA9, 0x4A,
				0xAC,
				0x5D,
				0x2C,
				0xC4,
				0x4C,
				0x76,
				0x46,
				0x0F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1HighlightsShadows
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x84, 0x83, 0xDC, 0xCA,
				0x3F, 0x32,
				0x7E, 0x4C,
				0xA3,
				0x61,
				0x2E,
				0x2B,
				0x24,
				0xDF,
				0x6E,
				0xE4
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1LookupTable3D
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDA, 0x0E, 0x9E, 0x34,
				0x88, 0x00,
				0x79, 0x4A,
				0x9C,
				0xA3,
				0xC7,
				0xE3,
				0x00,
				0x20,
				0x20,
				0x20
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Opacity
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xA4, 0x79, 0x1D, 0x81,
				0x28, 0xDE,
				0x54, 0x44,
				0x80,
				0x94,
				0xC6,
				0x46,
				0x85,
				0xF8,
				0xBD,
				0x4C
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1AlphaMask
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xF0, 0xCF, 0x0E, 0xC8,
				0xD5, 0x3F,
				0x05, 0x4F,
				0x83,
				0x28,
				0xC5,
				0xD1,
				0x72,
				0x4B,
				0x4F,
				0x0A
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1CrossFade
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xE8, 0x75, 0xF5, 0x12,
				0xB1, 0x4D,
				0x5F, 0x48,
				0x9A,
				0x84,
				0x03,
				0xA0,
				0x7D,
				0xD3,
				0x82,
				0x9F
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1Tint
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x17, 0x2B, 0x31, 0x36,
				0xDD, 0xF7,
				0x14, 0x40,
				0x91,
				0x5D,
				0xFF,
				0xCA,
				0x76,
				0x8C,
				0xF2,
				0x11
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public const float D2D1_SCENE_REFERRED_SDR_WHITE_LEVEL = 80f;
	public static ref readonly Guid CLSID_D2D1WhiteLevelAdjustment
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDB, 0xCA, 0xA1, 0x44,
				0xDD, 0x6C,
				0x18, 0x48,
				0x8F,
				0xF4,
				0x26,
				0xC1,
				0xCF,
				0xE9,
				0x5B,
				0xDB
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static ref readonly Guid CLSID_D2D1HdrToneMap
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x8D, 0x74, 0x0B, 0x7B,
				0x10, 0x46,
				0x86, 0x44,
				0xA9,
				0x0C,
				0x99,
				0x9D,
				0x9A,
				0x2E,
				0x2B,
				0x11
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public const uint D2D1_APPEND_ALIGNED_ELEMENT = 4294967295;
	public const uint FACILITY_D2D = 2201;
}

#region Enums
/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INTERPOLATION_MODE_DEFINITION"]/*' />
/// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION</unmanaged>
public enum InterpolationModeDefinition : int
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INTERPOLATION_MODE_DEFINITION::D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INTERPOLATION_MODE_DEFINITION::D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR"]/*' />
	/// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR</unmanaged>
	Linear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INTERPOLATION_MODE_DEFINITION::D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC"]/*' />
	/// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC</unmanaged>
	Cubic = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INTERPOLATION_MODE_DEFINITION::D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR"]/*' />
	/// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR</unmanaged>
	MultiSampleLinear = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INTERPOLATION_MODE_DEFINITION::D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC"]/*' />
	/// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC</unmanaged>
	Anisotropic = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INTERPOLATION_MODE_DEFINITION::D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC"]/*' />
	/// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC</unmanaged>
	HighQualityCubic = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INTERPOLATION_MODE_DEFINITION::D2D1_INTERPOLATION_MODE_DEFINITION_FANT"]/*' />
	/// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_FANT</unmanaged>
	Fant = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INTERPOLATION_MODE_DEFINITION::D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR"]/*' />
	/// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR</unmanaged>
	MipmapLinear = 7,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMA"]/*' />
/// <unmanaged>D2D1_GAMMA</unmanaged>
public enum Gamma : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMA::D2D1_GAMMA_2_2"]/*' />
	/// <unmanaged>D2D1_GAMMA_2_2</unmanaged>
	Gamma_2_2 = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMA::D2D1_GAMMA_1_0"]/*' />
	/// <unmanaged>D2D1_GAMMA_1_0</unmanaged>
	Gamma_1_0 = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_OPACITY_MASK_CONTENT"]/*' />
/// <unmanaged>D2D1_OPACITY_MASK_CONTENT</unmanaged>
public enum OpacityMaskContent : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_OPACITY_MASK_CONTENT::D2D1_OPACITY_MASK_CONTENT_GRAPHICS"]/*' />
	/// <unmanaged>D2D1_OPACITY_MASK_CONTENT_GRAPHICS</unmanaged>
	Graphics = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_OPACITY_MASK_CONTENT::D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL"]/*' />
	/// <unmanaged>D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL</unmanaged>
	TextNatural = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_OPACITY_MASK_CONTENT::D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE"]/*' />
	/// <unmanaged>D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE</unmanaged>
	TextGDICompatible = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EXTEND_MODE"]/*' />
/// <unmanaged>D2D1_EXTEND_MODE</unmanaged>
public enum ExtendMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EXTEND_MODE::D2D1_EXTEND_MODE_CLAMP"]/*' />
	/// <unmanaged>D2D1_EXTEND_MODE_CLAMP</unmanaged>
	Clamp = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EXTEND_MODE::D2D1_EXTEND_MODE_WRAP"]/*' />
	/// <unmanaged>D2D1_EXTEND_MODE_WRAP</unmanaged>
	Wrap = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EXTEND_MODE::D2D1_EXTEND_MODE_MIRROR"]/*' />
	/// <unmanaged>D2D1_EXTEND_MODE_MIRROR</unmanaged>
	Mirror = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ANTIALIAS_MODE"]/*' />
/// <unmanaged>D2D1_ANTIALIAS_MODE</unmanaged>
public enum AntialiasMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ANTIALIAS_MODE::D2D1_ANTIALIAS_MODE_PER_PRIMITIVE"]/*' />
	/// <unmanaged>D2D1_ANTIALIAS_MODE_PER_PRIMITIVE</unmanaged>
	PerPrimitive = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ANTIALIAS_MODE::D2D1_ANTIALIAS_MODE_ALIASED"]/*' />
	/// <unmanaged>D2D1_ANTIALIAS_MODE_ALIASED</unmanaged>
	Aliased = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TEXT_ANTIALIAS_MODE"]/*' />
/// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE</unmanaged>
public enum TextAntialiasMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TEXT_ANTIALIAS_MODE::D2D1_TEXT_ANTIALIAS_MODE_DEFAULT"]/*' />
	/// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_DEFAULT</unmanaged>
	Default = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TEXT_ANTIALIAS_MODE::D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE"]/*' />
	/// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE</unmanaged>
	Cleartype = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TEXT_ANTIALIAS_MODE::D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE"]/*' />
	/// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE</unmanaged>
	Grayscale = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TEXT_ANTIALIAS_MODE::D2D1_TEXT_ANTIALIAS_MODE_ALIASED"]/*' />
	/// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_ALIASED</unmanaged>
	Aliased = 3,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_INTERPOLATION_MODE"]/*' />
/// <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE</unmanaged>
public enum BitmapInterpolationMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_INTERPOLATION_MODE::D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_INTERPOLATION_MODE::D2D1_BITMAP_INTERPOLATION_MODE_LINEAR"]/*' />
	/// <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE_LINEAR</unmanaged>
	Linear = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAW_TEXT_OPTIONS"]/*' />
/// <unmanaged>D2D1_DRAW_TEXT_OPTIONS</unmanaged>
[Flags]
public enum DrawTextOptions : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAW_TEXT_OPTIONS::D2D1_DRAW_TEXT_OPTIONS_NO_SNAP"]/*' />
	/// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_NO_SNAP</unmanaged>
	NoSnap = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAW_TEXT_OPTIONS::D2D1_DRAW_TEXT_OPTIONS_CLIP"]/*' />
	/// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_CLIP</unmanaged>
	Clip = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAW_TEXT_OPTIONS::D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT"]/*' />
	/// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT</unmanaged>
	EnableColorFont = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAW_TEXT_OPTIONS::D2D1_DRAW_TEXT_OPTIONS_DISABLE_COLOR_BITMAP_SNAPPING"]/*' />
	/// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_DISABLE_COLOR_BITMAP_SNAPPING</unmanaged>
	DisableColorBitmapSnapping = 8,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAW_TEXT_OPTIONS::D2D1_DRAW_TEXT_OPTIONS_NONE"]/*' />
	/// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_NONE</unmanaged>
	None = 0,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ARC_SIZE"]/*' />
/// <unmanaged>D2D1_ARC_SIZE</unmanaged>
public enum ArcSize : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ARC_SIZE::D2D1_ARC_SIZE_SMALL"]/*' />
	/// <unmanaged>D2D1_ARC_SIZE_SMALL</unmanaged>
	Small = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ARC_SIZE::D2D1_ARC_SIZE_LARGE"]/*' />
	/// <unmanaged>D2D1_ARC_SIZE_LARGE</unmanaged>
	Large = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CAP_STYLE"]/*' />
/// <unmanaged>D2D1_CAP_STYLE</unmanaged>
public enum CapStyle : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CAP_STYLE::D2D1_CAP_STYLE_FLAT"]/*' />
	/// <unmanaged>D2D1_CAP_STYLE_FLAT</unmanaged>
	Flat = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CAP_STYLE::D2D1_CAP_STYLE_SQUARE"]/*' />
	/// <unmanaged>D2D1_CAP_STYLE_SQUARE</unmanaged>
	Square = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CAP_STYLE::D2D1_CAP_STYLE_ROUND"]/*' />
	/// <unmanaged>D2D1_CAP_STYLE_ROUND</unmanaged>
	Round = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CAP_STYLE::D2D1_CAP_STYLE_TRIANGLE"]/*' />
	/// <unmanaged>D2D1_CAP_STYLE_TRIANGLE</unmanaged>
	Triangle = 3,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DASH_STYLE"]/*' />
/// <unmanaged>D2D1_DASH_STYLE</unmanaged>
public enum DashStyle : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DASH_STYLE::D2D1_DASH_STYLE_SOLID"]/*' />
	/// <unmanaged>D2D1_DASH_STYLE_SOLID</unmanaged>
	Solid = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DASH_STYLE::D2D1_DASH_STYLE_DASH"]/*' />
	/// <unmanaged>D2D1_DASH_STYLE_DASH</unmanaged>
	Dash = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DASH_STYLE::D2D1_DASH_STYLE_DOT"]/*' />
	/// <unmanaged>D2D1_DASH_STYLE_DOT</unmanaged>
	Dot = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DASH_STYLE::D2D1_DASH_STYLE_DASH_DOT"]/*' />
	/// <unmanaged>D2D1_DASH_STYLE_DASH_DOT</unmanaged>
	DashDot = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DASH_STYLE::D2D1_DASH_STYLE_DASH_DOT_DOT"]/*' />
	/// <unmanaged>D2D1_DASH_STYLE_DASH_DOT_DOT</unmanaged>
	DashDotDot = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DASH_STYLE::D2D1_DASH_STYLE_CUSTOM"]/*' />
	/// <unmanaged>D2D1_DASH_STYLE_CUSTOM</unmanaged>
	Custom = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINE_JOIN"]/*' />
/// <unmanaged>D2D1_LINE_JOIN</unmanaged>
public enum LineJoin : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINE_JOIN::D2D1_LINE_JOIN_MITER"]/*' />
	/// <unmanaged>D2D1_LINE_JOIN_MITER</unmanaged>
	Miter = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINE_JOIN::D2D1_LINE_JOIN_BEVEL"]/*' />
	/// <unmanaged>D2D1_LINE_JOIN_BEVEL</unmanaged>
	Bevel = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINE_JOIN::D2D1_LINE_JOIN_ROUND"]/*' />
	/// <unmanaged>D2D1_LINE_JOIN_ROUND</unmanaged>
	Round = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINE_JOIN::D2D1_LINE_JOIN_MITER_OR_BEVEL"]/*' />
	/// <unmanaged>D2D1_LINE_JOIN_MITER_OR_BEVEL</unmanaged>
	MiterOrBevel = 3,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMBINE_MODE"]/*' />
/// <unmanaged>D2D1_COMBINE_MODE</unmanaged>
public enum CombineMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMBINE_MODE::D2D1_COMBINE_MODE_UNION"]/*' />
	/// <unmanaged>D2D1_COMBINE_MODE_UNION</unmanaged>
	Union = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMBINE_MODE::D2D1_COMBINE_MODE_INTERSECT"]/*' />
	/// <unmanaged>D2D1_COMBINE_MODE_INTERSECT</unmanaged>
	Intersect = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMBINE_MODE::D2D1_COMBINE_MODE_XOR"]/*' />
	/// <unmanaged>D2D1_COMBINE_MODE_XOR</unmanaged>
	Xor = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMBINE_MODE::D2D1_COMBINE_MODE_EXCLUDE"]/*' />
	/// <unmanaged>D2D1_COMBINE_MODE_EXCLUDE</unmanaged>
	Exclude = 3,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GEOMETRY_RELATION"]/*' />
/// <unmanaged>D2D1_GEOMETRY_RELATION</unmanaged>
public enum GeometryRelation : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GEOMETRY_RELATION::D2D1_GEOMETRY_RELATION_UNKNOWN"]/*' />
	/// <unmanaged>D2D1_GEOMETRY_RELATION_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GEOMETRY_RELATION::D2D1_GEOMETRY_RELATION_DISJOINT"]/*' />
	/// <unmanaged>D2D1_GEOMETRY_RELATION_DISJOINT</unmanaged>
	Disjoint = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GEOMETRY_RELATION::D2D1_GEOMETRY_RELATION_IS_CONTAINED"]/*' />
	/// <unmanaged>D2D1_GEOMETRY_RELATION_IS_CONTAINED</unmanaged>
	IsContained = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GEOMETRY_RELATION::D2D1_GEOMETRY_RELATION_CONTAINS"]/*' />
	/// <unmanaged>D2D1_GEOMETRY_RELATION_CONTAINS</unmanaged>
	Contains = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GEOMETRY_RELATION::D2D1_GEOMETRY_RELATION_OVERLAP"]/*' />
	/// <unmanaged>D2D1_GEOMETRY_RELATION_OVERLAP</unmanaged>
	Overlap = 4,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GEOMETRY_SIMPLIFICATION_OPTION"]/*' />
/// <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION</unmanaged>
public enum GeometrySimplificationOption : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GEOMETRY_SIMPLIFICATION_OPTION::D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES"]/*' />
	/// <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES</unmanaged>
	CubicsAndLines = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GEOMETRY_SIMPLIFICATION_OPTION::D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES"]/*' />
	/// <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES</unmanaged>
	Lines = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SWEEP_DIRECTION"]/*' />
/// <unmanaged>D2D1_SWEEP_DIRECTION</unmanaged>
public enum SweepDirection : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SWEEP_DIRECTION::D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE"]/*' />
	/// <unmanaged>D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE</unmanaged>
	CounterClockwise = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SWEEP_DIRECTION::D2D1_SWEEP_DIRECTION_CLOCKWISE"]/*' />
	/// <unmanaged>D2D1_SWEEP_DIRECTION_CLOCKWISE</unmanaged>
	Clockwise = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_OPTIONS"]/*' />
/// <unmanaged>D2D1_LAYER_OPTIONS</unmanaged>
[Flags]
public enum LayerOptions : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_OPTIONS::D2D1_LAYER_OPTIONS_NONE"]/*' />
	/// <unmanaged>D2D1_LAYER_OPTIONS_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_OPTIONS::D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE"]/*' />
	/// <unmanaged>D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE</unmanaged>
	InitializeForCleartype = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_WINDOW_STATE"]/*' />
/// <unmanaged>D2D1_WINDOW_STATE</unmanaged>
[Flags]
public enum WindowState : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_WINDOW_STATE::D2D1_WINDOW_STATE_NONE"]/*' />
	/// <unmanaged>D2D1_WINDOW_STATE_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_WINDOW_STATE::D2D1_WINDOW_STATE_OCCLUDED"]/*' />
	/// <unmanaged>D2D1_WINDOW_STATE_OCCLUDED</unmanaged>
	Occluded = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDER_TARGET_TYPE"]/*' />
/// <unmanaged>D2D1_RENDER_TARGET_TYPE</unmanaged>
public enum RenderTargetType : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDER_TARGET_TYPE::D2D1_RENDER_TARGET_TYPE_DEFAULT"]/*' />
	/// <unmanaged>D2D1_RENDER_TARGET_TYPE_DEFAULT</unmanaged>
	Default = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDER_TARGET_TYPE::D2D1_RENDER_TARGET_TYPE_SOFTWARE"]/*' />
	/// <unmanaged>D2D1_RENDER_TARGET_TYPE_SOFTWARE</unmanaged>
	Software = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDER_TARGET_TYPE::D2D1_RENDER_TARGET_TYPE_HARDWARE"]/*' />
	/// <unmanaged>D2D1_RENDER_TARGET_TYPE_HARDWARE</unmanaged>
	Hardware = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FEATURE_LEVEL"]/*' />
/// <unmanaged>D2D1_FEATURE_LEVEL</unmanaged>
public enum FeatureLevel : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FEATURE_LEVEL::D2D1_FEATURE_LEVEL_DEFAULT"]/*' />
	/// <unmanaged>D2D1_FEATURE_LEVEL_DEFAULT</unmanaged>
	Default = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FEATURE_LEVEL::D2D1_FEATURE_LEVEL_9"]/*' />
	/// <unmanaged>D2D1_FEATURE_LEVEL_9</unmanaged>
	Level_9 = 37120,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FEATURE_LEVEL::D2D1_FEATURE_LEVEL_10"]/*' />
	/// <unmanaged>D2D1_FEATURE_LEVEL_10</unmanaged>
	Level_10 = 40960,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDER_TARGET_USAGE"]/*' />
/// <unmanaged>D2D1_RENDER_TARGET_USAGE</unmanaged>
[Flags]
public enum RenderTargetUsage : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDER_TARGET_USAGE::D2D1_RENDER_TARGET_USAGE_NONE"]/*' />
	/// <unmanaged>D2D1_RENDER_TARGET_USAGE_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDER_TARGET_USAGE::D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING"]/*' />
	/// <unmanaged>D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING</unmanaged>
	ForceBitmapRemoting = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDER_TARGET_USAGE::D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE"]/*' />
	/// <unmanaged>D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE</unmanaged>
	GDICompatible = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRESENT_OPTIONS"]/*' />
/// <unmanaged>D2D1_PRESENT_OPTIONS</unmanaged>
[Flags]
public enum PresentOptions : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRESENT_OPTIONS::D2D1_PRESENT_OPTIONS_NONE"]/*' />
	/// <unmanaged>D2D1_PRESENT_OPTIONS_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRESENT_OPTIONS::D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS"]/*' />
	/// <unmanaged>D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS</unmanaged>
	RetainContents = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRESENT_OPTIONS::D2D1_PRESENT_OPTIONS_IMMEDIATELY"]/*' />
	/// <unmanaged>D2D1_PRESENT_OPTIONS_IMMEDIATELY</unmanaged>
	Immediately = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS"]/*' />
/// <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS</unmanaged>
[Flags]
public enum CompatibleRenderTargetOptions : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE"]/*' />
	/// <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS::D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE"]/*' />
	/// <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE</unmanaged>
	GDICompatible = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DC_INITIALIZE_MODE"]/*' />
/// <unmanaged>D2D1_DC_INITIALIZE_MODE</unmanaged>
public enum DCInitializeMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DC_INITIALIZE_MODE::D2D1_DC_INITIALIZE_MODE_COPY"]/*' />
	/// <unmanaged>D2D1_DC_INITIALIZE_MODE_COPY</unmanaged>
	Copy = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DC_INITIALIZE_MODE::D2D1_DC_INITIALIZE_MODE_CLEAR"]/*' />
	/// <unmanaged>D2D1_DC_INITIALIZE_MODE_CLEAR</unmanaged>
	Clear = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DEBUG_LEVEL"]/*' />
/// <unmanaged>D2D1_DEBUG_LEVEL</unmanaged>
public enum DebugLevel : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DEBUG_LEVEL::D2D1_DEBUG_LEVEL_NONE"]/*' />
	/// <unmanaged>D2D1_DEBUG_LEVEL_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DEBUG_LEVEL::D2D1_DEBUG_LEVEL_ERROR"]/*' />
	/// <unmanaged>D2D1_DEBUG_LEVEL_ERROR</unmanaged>
	Error = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DEBUG_LEVEL::D2D1_DEBUG_LEVEL_WARNING"]/*' />
	/// <unmanaged>D2D1_DEBUG_LEVEL_WARNING</unmanaged>
	Warning = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DEBUG_LEVEL::D2D1_DEBUG_LEVEL_INFORMATION"]/*' />
	/// <unmanaged>D2D1_DEBUG_LEVEL_INFORMATION</unmanaged>
	Information = 3,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FACTORY_TYPE"]/*' />
/// <unmanaged>D2D1_FACTORY_TYPE</unmanaged>
public enum FactoryType : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FACTORY_TYPE::D2D1_FACTORY_TYPE_SINGLE_THREADED"]/*' />
	/// <unmanaged>D2D1_FACTORY_TYPE_SINGLE_THREADED</unmanaged>
	SingleThreaded = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FACTORY_TYPE::D2D1_FACTORY_TYPE_MULTI_THREADED"]/*' />
	/// <unmanaged>D2D1_FACTORY_TYPE_MULTI_THREADED</unmanaged>
	MultiThreaded = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHANNEL_SELECTOR"]/*' />
/// <unmanaged>D2D1_CHANNEL_SELECTOR</unmanaged>
public enum ChannelSelector : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHANNEL_SELECTOR::D2D1_CHANNEL_SELECTOR_R"]/*' />
	/// <unmanaged>D2D1_CHANNEL_SELECTOR_R</unmanaged>
	R = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHANNEL_SELECTOR::D2D1_CHANNEL_SELECTOR_G"]/*' />
	/// <unmanaged>D2D1_CHANNEL_SELECTOR_G</unmanaged>
	G = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHANNEL_SELECTOR::D2D1_CHANNEL_SELECTOR_B"]/*' />
	/// <unmanaged>D2D1_CHANNEL_SELECTOR_B</unmanaged>
	B = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHANNEL_SELECTOR::D2D1_CHANNEL_SELECTOR_A"]/*' />
	/// <unmanaged>D2D1_CHANNEL_SELECTOR_A</unmanaged>
	A = 3,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_ORIENTATION"]/*' />
/// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION</unmanaged>
public enum BitmapSourceOrientation : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_ORIENTATION::D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT</unmanaged>
	Default = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_ORIENTATION::D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL</unmanaged>
	FlipHorizontal = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_ORIENTATION::D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180</unmanaged>
	RotateClockwise180 = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_ORIENTATION::D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL</unmanaged>
	RotateClockwise180FlipHorizontal = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_ORIENTATION::D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL</unmanaged>
	RotateClockwise270FlipHorizontal = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_ORIENTATION::D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90</unmanaged>
	RotateClockwise90 = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_ORIENTATION::D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL</unmanaged>
	RotateClockwise90FlipHorizontal = 7,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_ORIENTATION::D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270</unmanaged>
	RotateClockwise270 = 8,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAUSSIANBLUR_PROP"]/*' />
/// <unmanaged>D2D1_GAUSSIANBLUR_PROP</unmanaged>
public enum GaussianBlurProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAUSSIANBLUR_PROP::D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION"]/*' />
	/// <unmanaged>D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION</unmanaged>
	StandardDeviation = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAUSSIANBLUR_PROP::D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION"]/*' />
	/// <unmanaged>D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION</unmanaged>
	Optimization = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAUSSIANBLUR_PROP::D2D1_GAUSSIANBLUR_PROP_BORDER_MODE"]/*' />
	/// <unmanaged>D2D1_GAUSSIANBLUR_PROP_BORDER_MODE</unmanaged>
	BorderMode = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAUSSIANBLUR_OPTIMIZATION"]/*' />
/// <unmanaged>D2D1_GAUSSIANBLUR_OPTIMIZATION</unmanaged>
public enum GaussianBlurOptimization : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAUSSIANBLUR_OPTIMIZATION::D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED"]/*' />
	/// <unmanaged>D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED</unmanaged>
	Speed = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAUSSIANBLUR_OPTIMIZATION::D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED"]/*' />
	/// <unmanaged>D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED</unmanaged>
	Balanced = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAUSSIANBLUR_OPTIMIZATION::D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY"]/*' />
	/// <unmanaged>D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY</unmanaged>
	Quality = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DIRECTIONALBLUR_PROP"]/*' />
/// <unmanaged>D2D1_DIRECTIONALBLUR_PROP</unmanaged>
public enum DirectionalBlurProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DIRECTIONALBLUR_PROP::D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION"]/*' />
	/// <unmanaged>D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION</unmanaged>
	StandardDeviation = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DIRECTIONALBLUR_PROP::D2D1_DIRECTIONALBLUR_PROP_ANGLE"]/*' />
	/// <unmanaged>D2D1_DIRECTIONALBLUR_PROP_ANGLE</unmanaged>
	Angle = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DIRECTIONALBLUR_PROP::D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION"]/*' />
	/// <unmanaged>D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION</unmanaged>
	Optimization = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DIRECTIONALBLUR_PROP::D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE"]/*' />
	/// <unmanaged>D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE</unmanaged>
	BorderMode = 3,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DIRECTIONALBLUR_OPTIMIZATION"]/*' />
/// <unmanaged>D2D1_DIRECTIONALBLUR_OPTIMIZATION</unmanaged>
public enum DirectionalBlurOptimization : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DIRECTIONALBLUR_OPTIMIZATION::D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED"]/*' />
	/// <unmanaged>D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED</unmanaged>
	Speed = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DIRECTIONALBLUR_OPTIMIZATION::D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED"]/*' />
	/// <unmanaged>D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED</unmanaged>
	Balanced = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DIRECTIONALBLUR_OPTIMIZATION::D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY"]/*' />
	/// <unmanaged>D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY</unmanaged>
	Quality = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SHADOW_PROP"]/*' />
/// <unmanaged>D2D1_SHADOW_PROP</unmanaged>
public enum ShadowProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SHADOW_PROP::D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION"]/*' />
	/// <unmanaged>D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION</unmanaged>
	BlurStandardDeviation = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SHADOW_PROP::D2D1_SHADOW_PROP_COLOR"]/*' />
	/// <unmanaged>D2D1_SHADOW_PROP_COLOR</unmanaged>
	Color = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SHADOW_PROP::D2D1_SHADOW_PROP_OPTIMIZATION"]/*' />
	/// <unmanaged>D2D1_SHADOW_PROP_OPTIMIZATION</unmanaged>
	Optimization = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SHADOW_OPTIMIZATION"]/*' />
/// <unmanaged>D2D1_SHADOW_OPTIMIZATION</unmanaged>
public enum ShadowOptimization : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SHADOW_OPTIMIZATION::D2D1_SHADOW_OPTIMIZATION_SPEED"]/*' />
	/// <unmanaged>D2D1_SHADOW_OPTIMIZATION_SPEED</unmanaged>
	Speed = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SHADOW_OPTIMIZATION::D2D1_SHADOW_OPTIMIZATION_BALANCED"]/*' />
	/// <unmanaged>D2D1_SHADOW_OPTIMIZATION_BALANCED</unmanaged>
	Balanced = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SHADOW_OPTIMIZATION::D2D1_SHADOW_OPTIMIZATION_QUALITY"]/*' />
	/// <unmanaged>D2D1_SHADOW_OPTIMIZATION_QUALITY</unmanaged>
	Quality = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_PROP"]/*' />
/// <unmanaged>D2D1_BLEND_PROP</unmanaged>
public enum BlendProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_PROP::D2D1_BLEND_PROP_MODE"]/*' />
	/// <unmanaged>D2D1_BLEND_PROP_MODE</unmanaged>
	Mode = 0,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SATURATION_PROP"]/*' />
/// <unmanaged>D2D1_SATURATION_PROP</unmanaged>
public enum SaturationProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SATURATION_PROP::D2D1_SATURATION_PROP_SATURATION"]/*' />
	/// <unmanaged>D2D1_SATURATION_PROP_SATURATION</unmanaged>
	Saturation = 0,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HUEROTATION_PROP"]/*' />
/// <unmanaged>D2D1_HUEROTATION_PROP</unmanaged>
public enum HueRotationProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HUEROTATION_PROP::D2D1_HUEROTATION_PROP_ANGLE"]/*' />
	/// <unmanaged>D2D1_HUEROTATION_PROP_ANGLE</unmanaged>
	Angle = 0,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMATRIX_PROP"]/*' />
/// <unmanaged>D2D1_COLORMATRIX_PROP</unmanaged>
public enum ColorMatrixProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMATRIX_PROP::D2D1_COLORMATRIX_PROP_COLOR_MATRIX"]/*' />
	/// <unmanaged>D2D1_COLORMATRIX_PROP_COLOR_MATRIX</unmanaged>
	ColorMatrix = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMATRIX_PROP::D2D1_COLORMATRIX_PROP_ALPHA_MODE"]/*' />
	/// <unmanaged>D2D1_COLORMATRIX_PROP_ALPHA_MODE</unmanaged>
	AlphaMode = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMATRIX_PROP::D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT"]/*' />
	/// <unmanaged>D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT</unmanaged>
	ClampOutput = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_PROP"]/*' />
/// <unmanaged>D2D1_BITMAPSOURCE_PROP</unmanaged>
public enum BitmapSourceProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_PROP::D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE</unmanaged>
	WicBitmapSource = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_PROP::D2D1_BITMAPSOURCE_PROP_SCALE"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_PROP_SCALE</unmanaged>
	Scale = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_PROP::D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE</unmanaged>
	InterpolationMode = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_PROP::D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION</unmanaged>
	EnableDpiCorrection = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_PROP::D2D1_BITMAPSOURCE_PROP_ALPHA_MODE"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_PROP_ALPHA_MODE</unmanaged>
	AlphaMode = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_PROP::D2D1_BITMAPSOURCE_PROP_ORIENTATION"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_PROP_ORIENTATION</unmanaged>
	Orientation = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_INTERPOLATION_MODE"]/*' />
/// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE</unmanaged>
public enum BitmapSourceInterpolationMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_INTERPOLATION_MODE::D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_INTERPOLATION_MODE::D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR</unmanaged>
	Linear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_INTERPOLATION_MODE::D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC</unmanaged>
	Cubic = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_INTERPOLATION_MODE::D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT</unmanaged>
	Fant = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_INTERPOLATION_MODE::D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR</unmanaged>
	MipmapLinear = 7,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_ALPHA_MODE"]/*' />
/// <unmanaged>D2D1_BITMAPSOURCE_ALPHA_MODE</unmanaged>
public enum BitmapSourceAlphaMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_ALPHA_MODE::D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED</unmanaged>
	Premultiplied = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAPSOURCE_ALPHA_MODE::D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT"]/*' />
	/// <unmanaged>D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT</unmanaged>
	Straight = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPOSITE_PROP"]/*' />
/// <unmanaged>D2D1_COMPOSITE_PROP</unmanaged>
public enum CompositeProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPOSITE_PROP::D2D1_COMPOSITE_PROP_MODE"]/*' />
	/// <unmanaged>D2D1_COMPOSITE_PROP_MODE</unmanaged>
	Mode = 0,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DTRANSFORM_PROP"]/*' />
/// <unmanaged>D2D1_3DTRANSFORM_PROP</unmanaged>
public enum Transform3DProperties : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DTRANSFORM_PROP::D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE"]/*' />
	/// <unmanaged>D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE</unmanaged>
	InterpolationMode = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DTRANSFORM_PROP::D2D1_3DTRANSFORM_PROP_BORDER_MODE"]/*' />
	/// <unmanaged>D2D1_3DTRANSFORM_PROP_BORDER_MODE</unmanaged>
	BorderMode = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DTRANSFORM_PROP::D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX"]/*' />
	/// <unmanaged>D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX</unmanaged>
	TransformMatrix = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DTRANSFORM_INTERPOLATION_MODE"]/*' />
/// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE</unmanaged>
public enum Transform3DInterpolationMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DTRANSFORM_INTERPOLATION_MODE::D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DTRANSFORM_INTERPOLATION_MODE::D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR"]/*' />
	/// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged>
	Linear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DTRANSFORM_INTERPOLATION_MODE::D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC"]/*' />
	/// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged>
	Cubic = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DTRANSFORM_INTERPOLATION_MODE::D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR"]/*' />
	/// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
	MultiSampleLinear = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DTRANSFORM_INTERPOLATION_MODE::D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC"]/*' />
	/// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
	Anisotropic = 4,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DPERSPECTIVETRANSFORM_PROP"]/*' />
/// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP</unmanaged>
public enum PerspectiveTransform3DProperties : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DPERSPECTIVETRANSFORM_PROP::D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE"]/*' />
	/// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE</unmanaged>
	InterpolationMode = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DPERSPECTIVETRANSFORM_PROP::D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE"]/*' />
	/// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE</unmanaged>
	BorderMode = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DPERSPECTIVETRANSFORM_PROP::D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH"]/*' />
	/// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH</unmanaged>
	Depth = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DPERSPECTIVETRANSFORM_PROP::D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN"]/*' />
	/// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN</unmanaged>
	PerspectiveOrigin = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DPERSPECTIVETRANSFORM_PROP::D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET"]/*' />
	/// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET</unmanaged>
	LocalOffset = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DPERSPECTIVETRANSFORM_PROP::D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET"]/*' />
	/// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET</unmanaged>
	GlobalOffset = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DPERSPECTIVETRANSFORM_PROP::D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN"]/*' />
	/// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN</unmanaged>
	RotationOrigin = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DPERSPECTIVETRANSFORM_PROP::D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION"]/*' />
	/// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION</unmanaged>
	Rotation = 7,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE"]/*' />
/// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE</unmanaged>
public enum PerspectiveTransform3DInteroplationMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE::D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE::D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR"]/*' />
	/// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged>
	Linear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE::D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC"]/*' />
	/// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged>
	Cubic = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE::D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR"]/*' />
	/// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
	MultiSampleLinear = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE::D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC"]/*' />
	/// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
	Anisotropic = 4,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_2DAFFINETRANSFORM_PROP"]/*' />
/// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP</unmanaged>
public enum AffineTransform2DProperties : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_2DAFFINETRANSFORM_PROP::D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE"]/*' />
	/// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE</unmanaged>
	InterpolationMode = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_2DAFFINETRANSFORM_PROP::D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE"]/*' />
	/// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE</unmanaged>
	BorderMode = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_2DAFFINETRANSFORM_PROP::D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX"]/*' />
	/// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX</unmanaged>
	TransformMatrix = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_2DAFFINETRANSFORM_PROP::D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS"]/*' />
	/// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS</unmanaged>
	Sharpness = 3,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DPICOMPENSATION_PROP"]/*' />
/// <unmanaged>D2D1_DPICOMPENSATION_PROP</unmanaged>
public enum DpiCompensationProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DPICOMPENSATION_PROP::D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE"]/*' />
	/// <unmanaged>D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE</unmanaged>
	InterpolationMode = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DPICOMPENSATION_PROP::D2D1_DPICOMPENSATION_PROP_BORDER_MODE"]/*' />
	/// <unmanaged>D2D1_DPICOMPENSATION_PROP_BORDER_MODE</unmanaged>
	BorderMode = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DPICOMPENSATION_PROP::D2D1_DPICOMPENSATION_PROP_INPUT_DPI"]/*' />
	/// <unmanaged>D2D1_DPICOMPENSATION_PROP_INPUT_DPI</unmanaged>
	InputDpi = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DPICOMPENSATION_INTERPOLATION_MODE"]/*' />
/// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE</unmanaged>
public enum DpiCompensationInterpolationMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DPICOMPENSATION_INTERPOLATION_MODE::D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DPICOMPENSATION_INTERPOLATION_MODE::D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR"]/*' />
	/// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR</unmanaged>
	Linear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DPICOMPENSATION_INTERPOLATION_MODE::D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC"]/*' />
	/// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC</unmanaged>
	Cubic = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DPICOMPENSATION_INTERPOLATION_MODE::D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR"]/*' />
	/// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
	MultiSampleLinear = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DPICOMPENSATION_INTERPOLATION_MODE::D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC"]/*' />
	/// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
	Anisotropic = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DPICOMPENSATION_INTERPOLATION_MODE::D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC"]/*' />
	/// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>
	HighQualityCubic = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SCALE_PROP"]/*' />
/// <unmanaged>D2D1_SCALE_PROP</unmanaged>
public enum ScaleProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SCALE_PROP::D2D1_SCALE_PROP_SCALE"]/*' />
	/// <unmanaged>D2D1_SCALE_PROP_SCALE</unmanaged>
	Scale = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SCALE_PROP::D2D1_SCALE_PROP_CENTER_POINT"]/*' />
	/// <unmanaged>D2D1_SCALE_PROP_CENTER_POINT</unmanaged>
	CenterPoint = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SCALE_PROP::D2D1_SCALE_PROP_INTERPOLATION_MODE"]/*' />
	/// <unmanaged>D2D1_SCALE_PROP_INTERPOLATION_MODE</unmanaged>
	InterpolationMode = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SCALE_PROP::D2D1_SCALE_PROP_BORDER_MODE"]/*' />
	/// <unmanaged>D2D1_SCALE_PROP_BORDER_MODE</unmanaged>
	BorderMode = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SCALE_PROP::D2D1_SCALE_PROP_SHARPNESS"]/*' />
	/// <unmanaged>D2D1_SCALE_PROP_SHARPNESS</unmanaged>
	Sharpness = 4,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SCALE_INTERPOLATION_MODE"]/*' />
/// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE</unmanaged>
public enum ScaleInterpolationMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SCALE_INTERPOLATION_MODE::D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SCALE_INTERPOLATION_MODE::D2D1_SCALE_INTERPOLATION_MODE_LINEAR"]/*' />
	/// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_LINEAR</unmanaged>
	Linear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SCALE_INTERPOLATION_MODE::D2D1_SCALE_INTERPOLATION_MODE_CUBIC"]/*' />
	/// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_CUBIC</unmanaged>
	Cubic = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SCALE_INTERPOLATION_MODE::D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR"]/*' />
	/// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
	MultiSampleLinear = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SCALE_INTERPOLATION_MODE::D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC"]/*' />
	/// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
	Anisotropic = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SCALE_INTERPOLATION_MODE::D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC"]/*' />
	/// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>
	HighQualityCubic = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TURBULENCE_PROP"]/*' />
/// <unmanaged>D2D1_TURBULENCE_PROP</unmanaged>
public enum TurbulenceProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TURBULENCE_PROP::D2D1_TURBULENCE_PROP_OFFSET"]/*' />
	/// <unmanaged>D2D1_TURBULENCE_PROP_OFFSET</unmanaged>
	Offset = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TURBULENCE_PROP::D2D1_TURBULENCE_PROP_SIZE"]/*' />
	/// <unmanaged>D2D1_TURBULENCE_PROP_SIZE</unmanaged>
	Size = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TURBULENCE_PROP::D2D1_TURBULENCE_PROP_BASE_FREQUENCY"]/*' />
	/// <unmanaged>D2D1_TURBULENCE_PROP_BASE_FREQUENCY</unmanaged>
	BaseFrequency = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TURBULENCE_PROP::D2D1_TURBULENCE_PROP_NUM_OCTAVES"]/*' />
	/// <unmanaged>D2D1_TURBULENCE_PROP_NUM_OCTAVES</unmanaged>
	NumOctaves = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TURBULENCE_PROP::D2D1_TURBULENCE_PROP_SEED"]/*' />
	/// <unmanaged>D2D1_TURBULENCE_PROP_SEED</unmanaged>
	Seed = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TURBULENCE_PROP::D2D1_TURBULENCE_PROP_NOISE"]/*' />
	/// <unmanaged>D2D1_TURBULENCE_PROP_NOISE</unmanaged>
	Noise = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TURBULENCE_PROP::D2D1_TURBULENCE_PROP_STITCHABLE"]/*' />
	/// <unmanaged>D2D1_TURBULENCE_PROP_STITCHABLE</unmanaged>
	Stitchable = 6,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISPLACEMENTMAP_PROP"]/*' />
/// <unmanaged>D2D1_DISPLACEMENTMAP_PROP</unmanaged>
public enum DisplacementMapProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISPLACEMENTMAP_PROP::D2D1_DISPLACEMENTMAP_PROP_SCALE"]/*' />
	/// <unmanaged>D2D1_DISPLACEMENTMAP_PROP_SCALE</unmanaged>
	Scale = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISPLACEMENTMAP_PROP::D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT"]/*' />
	/// <unmanaged>D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT</unmanaged>
	XChannelSelect = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISPLACEMENTMAP_PROP::D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT"]/*' />
	/// <unmanaged>D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT</unmanaged>
	YChannelSelect = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_PROP"]/*' />
/// <unmanaged>D2D1_COLORMANAGEMENT_PROP</unmanaged>
public enum ColorManagementProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_PROP::D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT"]/*' />
	/// <unmanaged>D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT</unmanaged>
	SourceColorContext = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_PROP::D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT"]/*' />
	/// <unmanaged>D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT</unmanaged>
	SourceRenderingIntent = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_PROP::D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT"]/*' />
	/// <unmanaged>D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT</unmanaged>
	DestinationColorContext = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_PROP::D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT"]/*' />
	/// <unmanaged>D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT</unmanaged>
	DestinationRenderingIntent = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_PROP::D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE"]/*' />
	/// <unmanaged>D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE</unmanaged>
	AlphaMode = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_PROP::D2D1_COLORMANAGEMENT_PROP_QUALITY"]/*' />
	/// <unmanaged>D2D1_COLORMANAGEMENT_PROP_QUALITY</unmanaged>
	Quality = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_ALPHA_MODE"]/*' />
/// <unmanaged>D2D1_COLORMANAGEMENT_ALPHA_MODE</unmanaged>
public enum ColorManagementAlphaMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_ALPHA_MODE::D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED"]/*' />
	/// <unmanaged>D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED</unmanaged>
	Premultiplied = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_ALPHA_MODE::D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT"]/*' />
	/// <unmanaged>D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT</unmanaged>
	Straight = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_QUALITY"]/*' />
/// <unmanaged>D2D1_COLORMANAGEMENT_QUALITY</unmanaged>
public enum ColorManagementQuality : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_QUALITY::D2D1_COLORMANAGEMENT_QUALITY_PROOF"]/*' />
	/// <unmanaged>D2D1_COLORMANAGEMENT_QUALITY_PROOF</unmanaged>
	Proof = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_QUALITY::D2D1_COLORMANAGEMENT_QUALITY_NORMAL"]/*' />
	/// <unmanaged>D2D1_COLORMANAGEMENT_QUALITY_NORMAL</unmanaged>
	Normal = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_QUALITY::D2D1_COLORMANAGEMENT_QUALITY_BEST"]/*' />
	/// <unmanaged>D2D1_COLORMANAGEMENT_QUALITY_BEST</unmanaged>
	Best = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_RENDERING_INTENT"]/*' />
/// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT</unmanaged>
public enum ColorManagementRenderingIntent : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_RENDERING_INTENT::D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL"]/*' />
	/// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL</unmanaged>
	Perceptual = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_RENDERING_INTENT::D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC"]/*' />
	/// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC</unmanaged>
	RelativeColorimetric = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_RENDERING_INTENT::D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION"]/*' />
	/// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION</unmanaged>
	Saturation = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMANAGEMENT_RENDERING_INTENT::D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC"]/*' />
	/// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC</unmanaged>
	AbsoluteColorimetric = 3,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HISTOGRAM_PROP"]/*' />
/// <unmanaged>D2D1_HISTOGRAM_PROP</unmanaged>
public enum HistogramProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HISTOGRAM_PROP::D2D1_HISTOGRAM_PROP_NUM_BINS"]/*' />
	/// <unmanaged>D2D1_HISTOGRAM_PROP_NUM_BINS</unmanaged>
	NumBins = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HISTOGRAM_PROP::D2D1_HISTOGRAM_PROP_CHANNEL_SELECT"]/*' />
	/// <unmanaged>D2D1_HISTOGRAM_PROP_CHANNEL_SELECT</unmanaged>
	ChannelSelect = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HISTOGRAM_PROP::D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT"]/*' />
	/// <unmanaged>D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT</unmanaged>
	HistogramOutput = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTSPECULAR_PROP"]/*' />
/// <unmanaged>D2D1_POINTSPECULAR_PROP</unmanaged>
public enum PointSpecularProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTSPECULAR_PROP::D2D1_POINTSPECULAR_PROP_LIGHT_POSITION"]/*' />
	/// <unmanaged>D2D1_POINTSPECULAR_PROP_LIGHT_POSITION</unmanaged>
	LightPosition = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTSPECULAR_PROP::D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT"]/*' />
	/// <unmanaged>D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged>
	SpecularExponent = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTSPECULAR_PROP::D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT"]/*' />
	/// <unmanaged>D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged>
	SpecularConstant = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTSPECULAR_PROP::D2D1_POINTSPECULAR_PROP_SURFACE_SCALE"]/*' />
	/// <unmanaged>D2D1_POINTSPECULAR_PROP_SURFACE_SCALE</unmanaged>
	SurfaceScale = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTSPECULAR_PROP::D2D1_POINTSPECULAR_PROP_COLOR"]/*' />
	/// <unmanaged>D2D1_POINTSPECULAR_PROP_COLOR</unmanaged>
	Color = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTSPECULAR_PROP::D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH"]/*' />
	/// <unmanaged>D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged>
	KernelUnitLength = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTSPECULAR_PROP::D2D1_POINTSPECULAR_PROP_SCALE_MODE"]/*' />
	/// <unmanaged>D2D1_POINTSPECULAR_PROP_SCALE_MODE</unmanaged>
	ScaleMode = 6,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTSPECULAR_SCALE_MODE"]/*' />
/// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE</unmanaged>
public enum PointSpecularScaleMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTSPECULAR_SCALE_MODE::D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTSPECULAR_SCALE_MODE::D2D1_POINTSPECULAR_SCALE_MODE_LINEAR"]/*' />
	/// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_LINEAR</unmanaged>
	Linear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTSPECULAR_SCALE_MODE::D2D1_POINTSPECULAR_SCALE_MODE_CUBIC"]/*' />
	/// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_CUBIC</unmanaged>
	Cubic = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTSPECULAR_SCALE_MODE::D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR"]/*' />
	/// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
	MultiSampleLinear = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTSPECULAR_SCALE_MODE::D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC"]/*' />
	/// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged>
	Anisotropic = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTSPECULAR_SCALE_MODE::D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC"]/*' />
	/// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
	HighQualityCubic = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_PROP"]/*' />
/// <unmanaged>D2D1_SPOTSPECULAR_PROP</unmanaged>
public enum SpotSpecularProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_PROP::D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION"]/*' />
	/// <unmanaged>D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION</unmanaged>
	LightPosition = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_PROP::D2D1_SPOTSPECULAR_PROP_POINTS_AT"]/*' />
	/// <unmanaged>D2D1_SPOTSPECULAR_PROP_POINTS_AT</unmanaged>
	PointsAt = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_PROP::D2D1_SPOTSPECULAR_PROP_FOCUS"]/*' />
	/// <unmanaged>D2D1_SPOTSPECULAR_PROP_FOCUS</unmanaged>
	Focus = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_PROP::D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE"]/*' />
	/// <unmanaged>D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE</unmanaged>
	LimitingConeAngle = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_PROP::D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT"]/*' />
	/// <unmanaged>D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged>
	SpecularExponent = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_PROP::D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT"]/*' />
	/// <unmanaged>D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged>
	SpecularConstant = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_PROP::D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE"]/*' />
	/// <unmanaged>D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE</unmanaged>
	SurfaceScale = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_PROP::D2D1_SPOTSPECULAR_PROP_COLOR"]/*' />
	/// <unmanaged>D2D1_SPOTSPECULAR_PROP_COLOR</unmanaged>
	Color = 7,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_PROP::D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH"]/*' />
	/// <unmanaged>D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged>
	KernelUnitLength = 8,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_PROP::D2D1_SPOTSPECULAR_PROP_SCALE_MODE"]/*' />
	/// <unmanaged>D2D1_SPOTSPECULAR_PROP_SCALE_MODE</unmanaged>
	ScaleMode = 9,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_SCALE_MODE"]/*' />
/// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE</unmanaged>
public enum SpotSpecularScaleMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_SCALE_MODE::D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_SCALE_MODE::D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR"]/*' />
	/// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR</unmanaged>
	Linear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_SCALE_MODE::D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC"]/*' />
	/// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC</unmanaged>
	Cubic = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_SCALE_MODE::D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR"]/*' />
	/// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
	MultiSampleLinear = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_SCALE_MODE::D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC"]/*' />
	/// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged>
	Anisotropic = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTSPECULAR_SCALE_MODE::D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC"]/*' />
	/// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
	HighQualityCubic = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTSPECULAR_PROP"]/*' />
/// <unmanaged>D2D1_DISTANTSPECULAR_PROP</unmanaged>
public enum DistantSpecularProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTSPECULAR_PROP::D2D1_DISTANTSPECULAR_PROP_AZIMUTH"]/*' />
	/// <unmanaged>D2D1_DISTANTSPECULAR_PROP_AZIMUTH</unmanaged>
	Azimuth = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTSPECULAR_PROP::D2D1_DISTANTSPECULAR_PROP_ELEVATION"]/*' />
	/// <unmanaged>D2D1_DISTANTSPECULAR_PROP_ELEVATION</unmanaged>
	Elevation = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTSPECULAR_PROP::D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT"]/*' />
	/// <unmanaged>D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged>
	SpecularExponent = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTSPECULAR_PROP::D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT"]/*' />
	/// <unmanaged>D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged>
	SpecularConstant = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTSPECULAR_PROP::D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE"]/*' />
	/// <unmanaged>D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE</unmanaged>
	SurfaceScale = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTSPECULAR_PROP::D2D1_DISTANTSPECULAR_PROP_COLOR"]/*' />
	/// <unmanaged>D2D1_DISTANTSPECULAR_PROP_COLOR</unmanaged>
	Color = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTSPECULAR_PROP::D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH"]/*' />
	/// <unmanaged>D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged>
	KernelUnitLength = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTSPECULAR_PROP::D2D1_DISTANTSPECULAR_PROP_SCALE_MODE"]/*' />
	/// <unmanaged>D2D1_DISTANTSPECULAR_PROP_SCALE_MODE</unmanaged>
	ScaleMode = 7,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTSPECULAR_SCALE_MODE"]/*' />
/// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE</unmanaged>
public enum DistantSpecularScaleMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTSPECULAR_SCALE_MODE::D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTSPECULAR_SCALE_MODE::D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR"]/*' />
	/// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR</unmanaged>
	Linear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTSPECULAR_SCALE_MODE::D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC"]/*' />
	/// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC</unmanaged>
	Cubic = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTSPECULAR_SCALE_MODE::D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR"]/*' />
	/// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
	MultiSampleLinear = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTSPECULAR_SCALE_MODE::D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC"]/*' />
	/// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged>
	Anisotropic = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTSPECULAR_SCALE_MODE::D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC"]/*' />
	/// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
	HighQualityCubic = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTDIFFUSE_PROP"]/*' />
/// <unmanaged>D2D1_POINTDIFFUSE_PROP</unmanaged>
public enum PointDiffuseProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTDIFFUSE_PROP::D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION"]/*' />
	/// <unmanaged>D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION</unmanaged>
	LightPosition = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTDIFFUSE_PROP::D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT"]/*' />
	/// <unmanaged>D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged>
	DiffuseConstant = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTDIFFUSE_PROP::D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE"]/*' />
	/// <unmanaged>D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE</unmanaged>
	SurfaceScale = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTDIFFUSE_PROP::D2D1_POINTDIFFUSE_PROP_COLOR"]/*' />
	/// <unmanaged>D2D1_POINTDIFFUSE_PROP_COLOR</unmanaged>
	Color = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTDIFFUSE_PROP::D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH"]/*' />
	/// <unmanaged>D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged>
	KernelUnitLength = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTDIFFUSE_PROP::D2D1_POINTDIFFUSE_PROP_SCALE_MODE"]/*' />
	/// <unmanaged>D2D1_POINTDIFFUSE_PROP_SCALE_MODE</unmanaged>
	ScaleMode = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTDIFFUSE_SCALE_MODE"]/*' />
/// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE</unmanaged>
public enum PointDiffuseScaleMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTDIFFUSE_SCALE_MODE::D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTDIFFUSE_SCALE_MODE::D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR"]/*' />
	/// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR</unmanaged>
	Linear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTDIFFUSE_SCALE_MODE::D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC"]/*' />
	/// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC</unmanaged>
	Cubic = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTDIFFUSE_SCALE_MODE::D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR"]/*' />
	/// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
	MultiSampleLinear = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTDIFFUSE_SCALE_MODE::D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC"]/*' />
	/// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged>
	Anisotropic = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINTDIFFUSE_SCALE_MODE::D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC"]/*' />
	/// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
	HighQualityCubic = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_PROP"]/*' />
/// <unmanaged>D2D1_SPOTDIFFUSE_PROP</unmanaged>
public enum SpotDiffuseProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_PROP::D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION"]/*' />
	/// <unmanaged>D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION</unmanaged>
	LightPosition = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_PROP::D2D1_SPOTDIFFUSE_PROP_POINTS_AT"]/*' />
	/// <unmanaged>D2D1_SPOTDIFFUSE_PROP_POINTS_AT</unmanaged>
	PointsAt = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_PROP::D2D1_SPOTDIFFUSE_PROP_FOCUS"]/*' />
	/// <unmanaged>D2D1_SPOTDIFFUSE_PROP_FOCUS</unmanaged>
	Focus = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_PROP::D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE"]/*' />
	/// <unmanaged>D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE</unmanaged>
	LimitingConeAngle = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_PROP::D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT"]/*' />
	/// <unmanaged>D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged>
	DiffuseConstant = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_PROP::D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE"]/*' />
	/// <unmanaged>D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE</unmanaged>
	SurfaceScale = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_PROP::D2D1_SPOTDIFFUSE_PROP_COLOR"]/*' />
	/// <unmanaged>D2D1_SPOTDIFFUSE_PROP_COLOR</unmanaged>
	Color = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_PROP::D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH"]/*' />
	/// <unmanaged>D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged>
	KernelUnitLength = 7,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_PROP::D2D1_SPOTDIFFUSE_PROP_SCALE_MODE"]/*' />
	/// <unmanaged>D2D1_SPOTDIFFUSE_PROP_SCALE_MODE</unmanaged>
	ScaleMode = 8,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_SCALE_MODE"]/*' />
/// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE</unmanaged>
public enum SpotDiffuseScaleMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_SCALE_MODE::D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_SCALE_MODE::D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR"]/*' />
	/// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR</unmanaged>
	Linear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_SCALE_MODE::D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC"]/*' />
	/// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC</unmanaged>
	Cubic = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_SCALE_MODE::D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR"]/*' />
	/// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
	MultiSampleLinear = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_SCALE_MODE::D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC"]/*' />
	/// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged>
	Anisotropic = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPOTDIFFUSE_SCALE_MODE::D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC"]/*' />
	/// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
	HighQualityCubic = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTDIFFUSE_PROP"]/*' />
/// <unmanaged>D2D1_DISTANTDIFFUSE_PROP</unmanaged>
public enum DistantDiffuseProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTDIFFUSE_PROP::D2D1_DISTANTDIFFUSE_PROP_AZIMUTH"]/*' />
	/// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_AZIMUTH</unmanaged>
	Azimuth = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTDIFFUSE_PROP::D2D1_DISTANTDIFFUSE_PROP_ELEVATION"]/*' />
	/// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_ELEVATION</unmanaged>
	Elevation = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTDIFFUSE_PROP::D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT"]/*' />
	/// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged>
	DiffuseConstant = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTDIFFUSE_PROP::D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE"]/*' />
	/// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE</unmanaged>
	SurfaceScale = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTDIFFUSE_PROP::D2D1_DISTANTDIFFUSE_PROP_COLOR"]/*' />
	/// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_COLOR</unmanaged>
	Color = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTDIFFUSE_PROP::D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH"]/*' />
	/// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged>
	KernelUnitLength = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTDIFFUSE_PROP::D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE"]/*' />
	/// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE</unmanaged>
	ScaleMode = 6,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTDIFFUSE_SCALE_MODE"]/*' />
/// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE</unmanaged>
public enum DistantDiffuseScaleMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTDIFFUSE_SCALE_MODE::D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTDIFFUSE_SCALE_MODE::D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR"]/*' />
	/// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR</unmanaged>
	Linear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTDIFFUSE_SCALE_MODE::D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC"]/*' />
	/// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC</unmanaged>
	Cubic = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTDIFFUSE_SCALE_MODE::D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR"]/*' />
	/// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
	MultiSampleLinear = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTDIFFUSE_SCALE_MODE::D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC"]/*' />
	/// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged>
	Anisotropic = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISTANTDIFFUSE_SCALE_MODE::D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC"]/*' />
	/// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
	HighQualityCubic = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FLOOD_PROP"]/*' />
/// <unmanaged>D2D1_FLOOD_PROP</unmanaged>
public enum FloodProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FLOOD_PROP::D2D1_FLOOD_PROP_COLOR"]/*' />
	/// <unmanaged>D2D1_FLOOD_PROP_COLOR</unmanaged>
	Color = 0,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEARTRANSFER_PROP"]/*' />
/// <unmanaged>D2D1_LINEARTRANSFER_PROP</unmanaged>
public enum LinearTransferProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEARTRANSFER_PROP::D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT"]/*' />
	/// <unmanaged>D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT</unmanaged>
	RedYIntercept = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEARTRANSFER_PROP::D2D1_LINEARTRANSFER_PROP_RED_SLOPE"]/*' />
	/// <unmanaged>D2D1_LINEARTRANSFER_PROP_RED_SLOPE</unmanaged>
	RedSlope = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEARTRANSFER_PROP::D2D1_LINEARTRANSFER_PROP_RED_DISABLE"]/*' />
	/// <unmanaged>D2D1_LINEARTRANSFER_PROP_RED_DISABLE</unmanaged>
	RedDisable = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEARTRANSFER_PROP::D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT"]/*' />
	/// <unmanaged>D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT</unmanaged>
	GreenYIntercept = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEARTRANSFER_PROP::D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE"]/*' />
	/// <unmanaged>D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE</unmanaged>
	GreenSlope = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEARTRANSFER_PROP::D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE"]/*' />
	/// <unmanaged>D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE</unmanaged>
	GreenDisable = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEARTRANSFER_PROP::D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT"]/*' />
	/// <unmanaged>D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT</unmanaged>
	BlueYIntercept = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEARTRANSFER_PROP::D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE"]/*' />
	/// <unmanaged>D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE</unmanaged>
	BlueSlope = 7,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEARTRANSFER_PROP::D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE"]/*' />
	/// <unmanaged>D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE</unmanaged>
	BlueDisable = 8,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEARTRANSFER_PROP::D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT"]/*' />
	/// <unmanaged>D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT</unmanaged>
	AlphaYIntercept = 9,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEARTRANSFER_PROP::D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE"]/*' />
	/// <unmanaged>D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE</unmanaged>
	AlphaSlope = 10,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEARTRANSFER_PROP::D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE"]/*' />
	/// <unmanaged>D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE</unmanaged>
	AlphaDisable = 11,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEARTRANSFER_PROP::D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT"]/*' />
	/// <unmanaged>D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT</unmanaged>
	ClampOutput = 12,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP"]/*' />
/// <unmanaged>D2D1_GAMMATRANSFER_PROP</unmanaged>
public enum GammaTransferProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE</unmanaged>
	RedAmplitude = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_RED_EXPONENT"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_RED_EXPONENT</unmanaged>
	RedExponent = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_RED_OFFSET"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_RED_OFFSET</unmanaged>
	RedOffset = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_RED_DISABLE"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_RED_DISABLE</unmanaged>
	RedDisable = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE</unmanaged>
	GreenAmplitude = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT</unmanaged>
	GreenExponent = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET</unmanaged>
	GreenOffset = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE</unmanaged>
	GreenDisable = 7,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE</unmanaged>
	BlueAmplitude = 8,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT</unmanaged>
	BlueExponent = 9,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET</unmanaged>
	BlueOffset = 10,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE</unmanaged>
	BlueDisable = 11,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE</unmanaged>
	AlphaAmplitude = 12,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT</unmanaged>
	AlphaExponent = 13,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET</unmanaged>
	AlphaOffset = 14,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE</unmanaged>
	AlphaDisable = 15,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMATRANSFER_PROP::D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT"]/*' />
	/// <unmanaged>D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT</unmanaged>
	ClampOutput = 16,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TABLETRANSFER_PROP"]/*' />
/// <unmanaged>D2D1_TABLETRANSFER_PROP</unmanaged>
public enum TableTransferProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TABLETRANSFER_PROP::D2D1_TABLETRANSFER_PROP_RED_TABLE"]/*' />
	/// <unmanaged>D2D1_TABLETRANSFER_PROP_RED_TABLE</unmanaged>
	RedTable = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TABLETRANSFER_PROP::D2D1_TABLETRANSFER_PROP_RED_DISABLE"]/*' />
	/// <unmanaged>D2D1_TABLETRANSFER_PROP_RED_DISABLE</unmanaged>
	RedDisable = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TABLETRANSFER_PROP::D2D1_TABLETRANSFER_PROP_GREEN_TABLE"]/*' />
	/// <unmanaged>D2D1_TABLETRANSFER_PROP_GREEN_TABLE</unmanaged>
	GreenTable = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TABLETRANSFER_PROP::D2D1_TABLETRANSFER_PROP_GREEN_DISABLE"]/*' />
	/// <unmanaged>D2D1_TABLETRANSFER_PROP_GREEN_DISABLE</unmanaged>
	GreenDisable = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TABLETRANSFER_PROP::D2D1_TABLETRANSFER_PROP_BLUE_TABLE"]/*' />
	/// <unmanaged>D2D1_TABLETRANSFER_PROP_BLUE_TABLE</unmanaged>
	BlueTable = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TABLETRANSFER_PROP::D2D1_TABLETRANSFER_PROP_BLUE_DISABLE"]/*' />
	/// <unmanaged>D2D1_TABLETRANSFER_PROP_BLUE_DISABLE</unmanaged>
	BlueDisable = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TABLETRANSFER_PROP::D2D1_TABLETRANSFER_PROP_ALPHA_TABLE"]/*' />
	/// <unmanaged>D2D1_TABLETRANSFER_PROP_ALPHA_TABLE</unmanaged>
	AlphaTable = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TABLETRANSFER_PROP::D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE"]/*' />
	/// <unmanaged>D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE</unmanaged>
	AlphaDisable = 7,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TABLETRANSFER_PROP::D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT"]/*' />
	/// <unmanaged>D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT</unmanaged>
	ClampOutput = 8,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISCRETETRANSFER_PROP"]/*' />
/// <unmanaged>D2D1_DISCRETETRANSFER_PROP</unmanaged>
public enum DiscreteTransferProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISCRETETRANSFER_PROP::D2D1_DISCRETETRANSFER_PROP_RED_TABLE"]/*' />
	/// <unmanaged>D2D1_DISCRETETRANSFER_PROP_RED_TABLE</unmanaged>
	RedTable = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISCRETETRANSFER_PROP::D2D1_DISCRETETRANSFER_PROP_RED_DISABLE"]/*' />
	/// <unmanaged>D2D1_DISCRETETRANSFER_PROP_RED_DISABLE</unmanaged>
	RedDisable = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISCRETETRANSFER_PROP::D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE"]/*' />
	/// <unmanaged>D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE</unmanaged>
	GreenTable = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISCRETETRANSFER_PROP::D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE"]/*' />
	/// <unmanaged>D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE</unmanaged>
	GreenDisable = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISCRETETRANSFER_PROP::D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE"]/*' />
	/// <unmanaged>D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE</unmanaged>
	BlueTable = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISCRETETRANSFER_PROP::D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE"]/*' />
	/// <unmanaged>D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE</unmanaged>
	BlueDisable = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISCRETETRANSFER_PROP::D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE"]/*' />
	/// <unmanaged>D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE</unmanaged>
	AlphaTable = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISCRETETRANSFER_PROP::D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE"]/*' />
	/// <unmanaged>D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE</unmanaged>
	AlphaDisable = 7,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DISCRETETRANSFER_PROP::D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT"]/*' />
	/// <unmanaged>D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT</unmanaged>
	ClampOutput = 8,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_PROP"]/*' />
/// <unmanaged>D2D1_CONVOLVEMATRIX_PROP</unmanaged>
public enum ConvolveMatrixProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_PROP::D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH</unmanaged>
	KernelUnitLength = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_PROP::D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE</unmanaged>
	ScaleMode = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_PROP::D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X</unmanaged>
	KernelSizeX = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_PROP::D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y</unmanaged>
	KernelSizeY = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_PROP::D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX</unmanaged>
	KernelMatrix = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_PROP::D2D1_CONVOLVEMATRIX_PROP_DIVISOR"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_DIVISOR</unmanaged>
	Divisor = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_PROP::D2D1_CONVOLVEMATRIX_PROP_BIAS"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_BIAS</unmanaged>
	Bias = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_PROP::D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET</unmanaged>
	KernelOffset = 7,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_PROP::D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA</unmanaged>
	PreserveAlpha = 8,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_PROP::D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE</unmanaged>
	BorderMode = 9,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_PROP::D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT</unmanaged>
	ClampOutput = 10,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_SCALE_MODE"]/*' />
/// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE</unmanaged>
public enum ConvolveMatrixScaleMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_SCALE_MODE::D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_SCALE_MODE::D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR</unmanaged>
	Linear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_SCALE_MODE::D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC</unmanaged>
	Cubic = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_SCALE_MODE::D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
	MultiSampleLinear = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_SCALE_MODE::D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC</unmanaged>
	Anisotropic = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONVOLVEMATRIX_SCALE_MODE::D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC"]/*' />
	/// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
	HighQualityCubic = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BRIGHTNESS_PROP"]/*' />
/// <unmanaged>D2D1_BRIGHTNESS_PROP</unmanaged>
public enum BrightnessProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BRIGHTNESS_PROP::D2D1_BRIGHTNESS_PROP_WHITE_POINT"]/*' />
	/// <unmanaged>D2D1_BRIGHTNESS_PROP_WHITE_POINT</unmanaged>
	WhitePoint = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BRIGHTNESS_PROP::D2D1_BRIGHTNESS_PROP_BLACK_POINT"]/*' />
	/// <unmanaged>D2D1_BRIGHTNESS_PROP_BLACK_POINT</unmanaged>
	BlackPoint = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ARITHMETICCOMPOSITE_PROP"]/*' />
/// <unmanaged>D2D1_ARITHMETICCOMPOSITE_PROP</unmanaged>
public enum ArithmeticCompositeProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ARITHMETICCOMPOSITE_PROP::D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS"]/*' />
	/// <unmanaged>D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS</unmanaged>
	Coefficients = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ARITHMETICCOMPOSITE_PROP::D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT"]/*' />
	/// <unmanaged>D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT</unmanaged>
	ClampOutput = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CROP_PROP"]/*' />
/// <unmanaged>D2D1_CROP_PROP</unmanaged>
public enum CropProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CROP_PROP::D2D1_CROP_PROP_RECT"]/*' />
	/// <unmanaged>D2D1_CROP_PROP_RECT</unmanaged>
	Rect = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CROP_PROP::D2D1_CROP_PROP_BORDER_MODE"]/*' />
	/// <unmanaged>D2D1_CROP_PROP_BORDER_MODE</unmanaged>
	BorderMode = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BORDER_PROP"]/*' />
/// <unmanaged>D2D1_BORDER_PROP</unmanaged>
public enum BorderProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BORDER_PROP::D2D1_BORDER_PROP_EDGE_MODE_X"]/*' />
	/// <unmanaged>D2D1_BORDER_PROP_EDGE_MODE_X</unmanaged>
	EdgeModeX = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BORDER_PROP::D2D1_BORDER_PROP_EDGE_MODE_Y"]/*' />
	/// <unmanaged>D2D1_BORDER_PROP_EDGE_MODE_Y</unmanaged>
	EdgeModeY = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BORDER_EDGE_MODE"]/*' />
/// <unmanaged>D2D1_BORDER_EDGE_MODE</unmanaged>
public enum BorderEdgeMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BORDER_EDGE_MODE::D2D1_BORDER_EDGE_MODE_CLAMP"]/*' />
	/// <unmanaged>D2D1_BORDER_EDGE_MODE_CLAMP</unmanaged>
	Clamp = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BORDER_EDGE_MODE::D2D1_BORDER_EDGE_MODE_WRAP"]/*' />
	/// <unmanaged>D2D1_BORDER_EDGE_MODE_WRAP</unmanaged>
	Wrap = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BORDER_EDGE_MODE::D2D1_BORDER_EDGE_MODE_MIRROR"]/*' />
	/// <unmanaged>D2D1_BORDER_EDGE_MODE_MIRROR</unmanaged>
	Mirror = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_MORPHOLOGY_PROP"]/*' />
/// <unmanaged>D2D1_MORPHOLOGY_PROP</unmanaged>
public enum MorphologyProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_MORPHOLOGY_PROP::D2D1_MORPHOLOGY_PROP_MODE"]/*' />
	/// <unmanaged>D2D1_MORPHOLOGY_PROP_MODE</unmanaged>
	Mode = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_MORPHOLOGY_PROP::D2D1_MORPHOLOGY_PROP_WIDTH"]/*' />
	/// <unmanaged>D2D1_MORPHOLOGY_PROP_WIDTH</unmanaged>
	Width = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_MORPHOLOGY_PROP::D2D1_MORPHOLOGY_PROP_HEIGHT"]/*' />
	/// <unmanaged>D2D1_MORPHOLOGY_PROP_HEIGHT</unmanaged>
	Height = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_MORPHOLOGY_MODE"]/*' />
/// <unmanaged>D2D1_MORPHOLOGY_MODE</unmanaged>
public enum MorphologyMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_MORPHOLOGY_MODE::D2D1_MORPHOLOGY_MODE_ERODE"]/*' />
	/// <unmanaged>D2D1_MORPHOLOGY_MODE_ERODE</unmanaged>
	Erode = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_MORPHOLOGY_MODE::D2D1_MORPHOLOGY_MODE_DILATE"]/*' />
	/// <unmanaged>D2D1_MORPHOLOGY_MODE_DILATE</unmanaged>
	Dilate = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TILE_PROP"]/*' />
/// <unmanaged>D2D1_TILE_PROP</unmanaged>
public enum TileProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TILE_PROP::D2D1_TILE_PROP_RECT"]/*' />
	/// <unmanaged>D2D1_TILE_PROP_RECT</unmanaged>
	Rect = 0,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ATLAS_PROP"]/*' />
/// <unmanaged>D2D1_ATLAS_PROP</unmanaged>
public enum AtlasProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ATLAS_PROP::D2D1_ATLAS_PROP_INPUT_RECT"]/*' />
	/// <unmanaged>D2D1_ATLAS_PROP_INPUT_RECT</unmanaged>
	InputRect = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ATLAS_PROP::D2D1_ATLAS_PROP_INPUT_PADDING_RECT"]/*' />
	/// <unmanaged>D2D1_ATLAS_PROP_INPUT_PADDING_RECT</unmanaged>
	InputPaddingRect = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_OPACITYMETADATA_PROP"]/*' />
/// <unmanaged>D2D1_OPACITYMETADATA_PROP</unmanaged>
public enum OpacityMetadataProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_OPACITYMETADATA_PROP::D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT"]/*' />
	/// <unmanaged>D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT</unmanaged>
	InputOpaqueRect = 0,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE"]/*' />
/// <unmanaged>D2D1_PROPERTY_TYPE</unmanaged>
public enum PropertyType : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_UNKNOWN"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_STRING"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_STRING</unmanaged>
	String = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_BOOL"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_BOOL</unmanaged>
	Bool = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_UINT32"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_UINT32</unmanaged>
	UInt32 = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_INT32"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_INT32</unmanaged>
	Int32 = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_FLOAT"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_FLOAT</unmanaged>
	Float = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_VECTOR2"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_VECTOR2</unmanaged>
	Vector2 = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_VECTOR3"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_VECTOR3</unmanaged>
	Vector3 = 7,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_VECTOR4"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_VECTOR4</unmanaged>
	Vector4 = 8,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_BLOB"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_BLOB</unmanaged>
	Blob = 9,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_IUNKNOWN"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_IUNKNOWN</unmanaged>
	IUnknown = 10,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_ENUM"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_ENUM</unmanaged>
	Enum = 11,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_ARRAY"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_ARRAY</unmanaged>
	Array = 12,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_CLSID"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_CLSID</unmanaged>
	Clsid = 13,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_MATRIX_3X2"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_MATRIX_3X2</unmanaged>
	Matrix3x2 = 14,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_MATRIX_4X3"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_MATRIX_4X3</unmanaged>
	Matrix4x3 = 15,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_MATRIX_4X4"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_MATRIX_4X4</unmanaged>
	Matrix4x4 = 16,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_MATRIX_5X4"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_MATRIX_5X4</unmanaged>
	Matrix5x4 = 17,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_TYPE::D2D1_PROPERTY_TYPE_COLOR_CONTEXT"]/*' />
	/// <unmanaged>D2D1_PROPERTY_TYPE_COLOR_CONTEXT</unmanaged>
	ColorContext = 18,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY"]/*' />
/// <unmanaged>D2D1_PROPERTY</unmanaged>
public enum Property : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY::D2D1_PROPERTY_CLSID"]/*' />
	/// <unmanaged>D2D1_PROPERTY_CLSID</unmanaged>
	Clsid = 2147483648,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY::D2D1_PROPERTY_DISPLAYNAME"]/*' />
	/// <unmanaged>D2D1_PROPERTY_DISPLAYNAME</unmanaged>
	Displayname = 2147483649,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY::D2D1_PROPERTY_AUTHOR"]/*' />
	/// <unmanaged>D2D1_PROPERTY_AUTHOR</unmanaged>
	Author = 2147483650,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY::D2D1_PROPERTY_CATEGORY"]/*' />
	/// <unmanaged>D2D1_PROPERTY_CATEGORY</unmanaged>
	Category = 2147483651,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY::D2D1_PROPERTY_DESCRIPTION"]/*' />
	/// <unmanaged>D2D1_PROPERTY_DESCRIPTION</unmanaged>
	Description = 2147483652,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY::D2D1_PROPERTY_INPUTS"]/*' />
	/// <unmanaged>D2D1_PROPERTY_INPUTS</unmanaged>
	Inputs = 2147483653,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY::D2D1_PROPERTY_CACHED"]/*' />
	/// <unmanaged>D2D1_PROPERTY_CACHED</unmanaged>
	Cached = 2147483654,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY::D2D1_PROPERTY_PRECISION"]/*' />
	/// <unmanaged>D2D1_PROPERTY_PRECISION</unmanaged>
	Precision = 2147483655,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY::D2D1_PROPERTY_MIN_INPUTS"]/*' />
	/// <unmanaged>D2D1_PROPERTY_MIN_INPUTS</unmanaged>
	MinInputs = 2147483656,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY::D2D1_PROPERTY_MAX_INPUTS"]/*' />
	/// <unmanaged>D2D1_PROPERTY_MAX_INPUTS</unmanaged>
	MaxInputs = 2147483657,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SUBPROPERTY"]/*' />
/// <unmanaged>D2D1_SUBPROPERTY</unmanaged>
public enum SubProperty : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SUBPROPERTY::D2D1_SUBPROPERTY_DISPLAYNAME"]/*' />
	/// <unmanaged>D2D1_SUBPROPERTY_DISPLAYNAME</unmanaged>
	Displayname = 2147483648,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SUBPROPERTY::D2D1_SUBPROPERTY_ISREADONLY"]/*' />
	/// <unmanaged>D2D1_SUBPROPERTY_ISREADONLY</unmanaged>
	Isreadonly = 2147483649,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SUBPROPERTY::D2D1_SUBPROPERTY_MIN"]/*' />
	/// <unmanaged>D2D1_SUBPROPERTY_MIN</unmanaged>
	Min = 2147483650,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SUBPROPERTY::D2D1_SUBPROPERTY_MAX"]/*' />
	/// <unmanaged>D2D1_SUBPROPERTY_MAX</unmanaged>
	Max = 2147483651,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SUBPROPERTY::D2D1_SUBPROPERTY_DEFAULT"]/*' />
	/// <unmanaged>D2D1_SUBPROPERTY_DEFAULT</unmanaged>
	Default = 2147483652,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SUBPROPERTY::D2D1_SUBPROPERTY_FIELDS"]/*' />
	/// <unmanaged>D2D1_SUBPROPERTY_FIELDS</unmanaged>
	Fields = 2147483653,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SUBPROPERTY::D2D1_SUBPROPERTY_INDEX"]/*' />
	/// <unmanaged>D2D1_SUBPROPERTY_INDEX</unmanaged>
	Index = 2147483654,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_OPTIONS"]/*' />
/// <unmanaged>D2D1_BITMAP_OPTIONS</unmanaged>
[Flags]
public enum BitmapOptions : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_OPTIONS::D2D1_BITMAP_OPTIONS_NONE"]/*' />
	/// <unmanaged>D2D1_BITMAP_OPTIONS_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_OPTIONS::D2D1_BITMAP_OPTIONS_TARGET"]/*' />
	/// <unmanaged>D2D1_BITMAP_OPTIONS_TARGET</unmanaged>
	Target = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_OPTIONS::D2D1_BITMAP_OPTIONS_CANNOT_DRAW"]/*' />
	/// <unmanaged>D2D1_BITMAP_OPTIONS_CANNOT_DRAW</unmanaged>
	CannotDraw = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_OPTIONS::D2D1_BITMAP_OPTIONS_CPU_READ"]/*' />
	/// <unmanaged>D2D1_BITMAP_OPTIONS_CPU_READ</unmanaged>
	CpuRead = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_OPTIONS::D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE"]/*' />
	/// <unmanaged>D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE</unmanaged>
	GDICompatible = 8,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BUFFER_PRECISION"]/*' />
/// <unmanaged>D2D1_BUFFER_PRECISION</unmanaged>
public enum BufferPrecision : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BUFFER_PRECISION::D2D1_BUFFER_PRECISION_UNKNOWN"]/*' />
	/// <unmanaged>D2D1_BUFFER_PRECISION_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BUFFER_PRECISION::D2D1_BUFFER_PRECISION_8BPC_UNORM"]/*' />
	/// <unmanaged>D2D1_BUFFER_PRECISION_8BPC_UNORM</unmanaged>
	Precision8BitUnorm = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BUFFER_PRECISION::D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB"]/*' />
	/// <unmanaged>D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB</unmanaged>
	Precision8BitUnormSrgb = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BUFFER_PRECISION::D2D1_BUFFER_PRECISION_16BPC_UNORM"]/*' />
	/// <unmanaged>D2D1_BUFFER_PRECISION_16BPC_UNORM</unmanaged>
	Precision16BitUnorm = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BUFFER_PRECISION::D2D1_BUFFER_PRECISION_16BPC_FLOAT"]/*' />
	/// <unmanaged>D2D1_BUFFER_PRECISION_16BPC_FLOAT</unmanaged>
	Precision16BitFloat = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BUFFER_PRECISION::D2D1_BUFFER_PRECISION_32BPC_FLOAT"]/*' />
	/// <unmanaged>D2D1_BUFFER_PRECISION_32BPC_FLOAT</unmanaged>
	Precision32BitFloat = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_MAP_OPTIONS"]/*' />
/// <unmanaged>D2D1_MAP_OPTIONS</unmanaged>
[Flags]
public enum MapOptions : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_MAP_OPTIONS::D2D1_MAP_OPTIONS_NONE"]/*' />
	/// <unmanaged>D2D1_MAP_OPTIONS_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_MAP_OPTIONS::D2D1_MAP_OPTIONS_READ"]/*' />
	/// <unmanaged>D2D1_MAP_OPTIONS_READ</unmanaged>
	Read = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_MAP_OPTIONS::D2D1_MAP_OPTIONS_WRITE"]/*' />
	/// <unmanaged>D2D1_MAP_OPTIONS_WRITE</unmanaged>
	Write = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_MAP_OPTIONS::D2D1_MAP_OPTIONS_DISCARD"]/*' />
	/// <unmanaged>D2D1_MAP_OPTIONS_DISCARD</unmanaged>
	Discard = 4,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INTERPOLATION_MODE"]/*' />
/// <unmanaged>D2D1_INTERPOLATION_MODE</unmanaged>
public enum InterpolationMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INTERPOLATION_MODE::D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INTERPOLATION_MODE::D2D1_INTERPOLATION_MODE_LINEAR"]/*' />
	/// <unmanaged>D2D1_INTERPOLATION_MODE_LINEAR</unmanaged>
	Linear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INTERPOLATION_MODE::D2D1_INTERPOLATION_MODE_CUBIC"]/*' />
	/// <unmanaged>D2D1_INTERPOLATION_MODE_CUBIC</unmanaged>
	Cubic = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INTERPOLATION_MODE::D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR"]/*' />
	/// <unmanaged>D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
	MultiSampleLinear = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INTERPOLATION_MODE::D2D1_INTERPOLATION_MODE_ANISOTROPIC"]/*' />
	/// <unmanaged>D2D1_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
	Anisotropic = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INTERPOLATION_MODE::D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC"]/*' />
	/// <unmanaged>D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>
	HighQualityCubic = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_UNIT_MODE"]/*' />
/// <unmanaged>D2D1_UNIT_MODE</unmanaged>
public enum UnitMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_UNIT_MODE::D2D1_UNIT_MODE_DIPS"]/*' />
	/// <unmanaged>D2D1_UNIT_MODE_DIPS</unmanaged>
	Dips = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_UNIT_MODE::D2D1_UNIT_MODE_PIXELS"]/*' />
	/// <unmanaged>D2D1_UNIT_MODE_PIXELS</unmanaged>
	Pixels = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_SPACE"]/*' />
/// <unmanaged>D2D1_COLOR_SPACE</unmanaged>
public enum ColorSpace : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_SPACE::D2D1_COLOR_SPACE_CUSTOM"]/*' />
	/// <unmanaged>D2D1_COLOR_SPACE_CUSTOM</unmanaged>
	Custom = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_SPACE::D2D1_COLOR_SPACE_SRGB"]/*' />
	/// <unmanaged>D2D1_COLOR_SPACE_SRGB</unmanaged>
	Srgb = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_SPACE::D2D1_COLOR_SPACE_SCRGB"]/*' />
	/// <unmanaged>D2D1_COLOR_SPACE_SCRGB</unmanaged>
	Scrgb = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DEVICE_CONTEXT_OPTIONS"]/*' />
/// <unmanaged>D2D1_DEVICE_CONTEXT_OPTIONS</unmanaged>
[Flags]
public enum DeviceContextOptions : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DEVICE_CONTEXT_OPTIONS::D2D1_DEVICE_CONTEXT_OPTIONS_NONE"]/*' />
	/// <unmanaged>D2D1_DEVICE_CONTEXT_OPTIONS_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DEVICE_CONTEXT_OPTIONS::D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS"]/*' />
	/// <unmanaged>D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS</unmanaged>
	EnableMultithreadedOptimizations = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_TRANSFORM_TYPE"]/*' />
/// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE</unmanaged>
public enum StrokeTransformType : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_TRANSFORM_TYPE::D2D1_STROKE_TRANSFORM_TYPE_NORMAL"]/*' />
	/// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE_NORMAL</unmanaged>
	Normal = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_TRANSFORM_TYPE::D2D1_STROKE_TRANSFORM_TYPE_FIXED"]/*' />
	/// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE_FIXED</unmanaged>
	Fixed = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_TRANSFORM_TYPE::D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE"]/*' />
	/// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE</unmanaged>
	Hairline = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRIMITIVE_BLEND"]/*' />
/// <unmanaged>D2D1_PRIMITIVE_BLEND</unmanaged>
public enum PrimitiveBlend : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRIMITIVE_BLEND::D2D1_PRIMITIVE_BLEND_SOURCE_OVER"]/*' />
	/// <unmanaged>D2D1_PRIMITIVE_BLEND_SOURCE_OVER</unmanaged>
	SourceOver = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRIMITIVE_BLEND::D2D1_PRIMITIVE_BLEND_COPY"]/*' />
	/// <unmanaged>D2D1_PRIMITIVE_BLEND_COPY</unmanaged>
	Copy = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRIMITIVE_BLEND::D2D1_PRIMITIVE_BLEND_MIN"]/*' />
	/// <unmanaged>D2D1_PRIMITIVE_BLEND_MIN</unmanaged>
	Min = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRIMITIVE_BLEND::D2D1_PRIMITIVE_BLEND_ADD"]/*' />
	/// <unmanaged>D2D1_PRIMITIVE_BLEND_ADD</unmanaged>
	Add = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRIMITIVE_BLEND::D2D1_PRIMITIVE_BLEND_MAX"]/*' />
	/// <unmanaged>D2D1_PRIMITIVE_BLEND_MAX</unmanaged>
	Max = 4,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_THREADING_MODE"]/*' />
/// <unmanaged>D2D1_THREADING_MODE</unmanaged>
public enum ThreadingMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_THREADING_MODE::D2D1_THREADING_MODE_SINGLE_THREADED"]/*' />
	/// <unmanaged>D2D1_THREADING_MODE_SINGLE_THREADED</unmanaged>
	SingleThreaded = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_THREADING_MODE::D2D1_THREADING_MODE_MULTI_THREADED"]/*' />
	/// <unmanaged>D2D1_THREADING_MODE_MULTI_THREADED</unmanaged>
	MultiThreaded = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_INTERPOLATION_MODE"]/*' />
/// <unmanaged>D2D1_COLOR_INTERPOLATION_MODE</unmanaged>
public enum ColorInterpolationMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_INTERPOLATION_MODE::D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT"]/*' />
	/// <unmanaged>D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT</unmanaged>
	Straight = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_INTERPOLATION_MODE::D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED"]/*' />
	/// <unmanaged>D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED</unmanaged>
	Premultiplied = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_OPTIONS1"]/*' />
/// <unmanaged>D2D1_LAYER_OPTIONS1</unmanaged>
[Flags]
public enum LayerOptions1 : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_OPTIONS1::D2D1_LAYER_OPTIONS1_NONE"]/*' />
	/// <unmanaged>D2D1_LAYER_OPTIONS1_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_OPTIONS1::D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND"]/*' />
	/// <unmanaged>D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND</unmanaged>
	InitializeFromBackground = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_OPTIONS1::D2D1_LAYER_OPTIONS1_IGNORE_ALPHA"]/*' />
	/// <unmanaged>D2D1_LAYER_OPTIONS1_IGNORE_ALPHA</unmanaged>
	IgnoreAlpha = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRINT_FONT_SUBSET_MODE"]/*' />
/// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE</unmanaged>
public enum PrintFontSubsetMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRINT_FONT_SUBSET_MODE::D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT"]/*' />
	/// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT</unmanaged>
	Default = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRINT_FONT_SUBSET_MODE::D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE"]/*' />
	/// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE</unmanaged>
	Eachpage = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRINT_FONT_SUBSET_MODE::D2D1_PRINT_FONT_SUBSET_MODE_NONE"]/*' />
	/// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE_NONE</unmanaged>
	None = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHANGE_TYPE"]/*' />
/// <unmanaged>D2D1_CHANGE_TYPE</unmanaged>
[Flags]
public enum ChangeType : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHANGE_TYPE::D2D1_CHANGE_TYPE_NONE"]/*' />
	/// <unmanaged>D2D1_CHANGE_TYPE_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHANGE_TYPE::D2D1_CHANGE_TYPE_PROPERTIES"]/*' />
	/// <unmanaged>D2D1_CHANGE_TYPE_PROPERTIES</unmanaged>
	Properties = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHANGE_TYPE::D2D1_CHANGE_TYPE_CONTEXT"]/*' />
	/// <unmanaged>D2D1_CHANGE_TYPE_CONTEXT</unmanaged>
	Context = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHANGE_TYPE::D2D1_CHANGE_TYPE_GRAPH"]/*' />
	/// <unmanaged>D2D1_CHANGE_TYPE_GRAPH</unmanaged>
	Graph = 3,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PIXEL_OPTIONS"]/*' />
/// <unmanaged>D2D1_PIXEL_OPTIONS</unmanaged>
[Flags]
public enum PixelOptions : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PIXEL_OPTIONS::D2D1_PIXEL_OPTIONS_NONE"]/*' />
	/// <unmanaged>D2D1_PIXEL_OPTIONS_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PIXEL_OPTIONS::D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING"]/*' />
	/// <unmanaged>D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING</unmanaged>
	TrivialSampling = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VERTEX_OPTIONS"]/*' />
/// <unmanaged>D2D1_VERTEX_OPTIONS</unmanaged>
[Flags]
public enum VertexOptions : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VERTEX_OPTIONS::D2D1_VERTEX_OPTIONS_NONE"]/*' />
	/// <unmanaged>D2D1_VERTEX_OPTIONS_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VERTEX_OPTIONS::D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR"]/*' />
	/// <unmanaged>D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR</unmanaged>
	DoNotClear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VERTEX_OPTIONS::D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER"]/*' />
	/// <unmanaged>D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER</unmanaged>
	UseDepthBuffer = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VERTEX_OPTIONS::D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP"]/*' />
	/// <unmanaged>D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP</unmanaged>
	AssumeNoOverlap = 4,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VERTEX_USAGE"]/*' />
/// <unmanaged>D2D1_VERTEX_USAGE</unmanaged>
public enum VertexUsage : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VERTEX_USAGE::D2D1_VERTEX_USAGE_STATIC"]/*' />
	/// <unmanaged>D2D1_VERTEX_USAGE_STATIC</unmanaged>
	Static = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VERTEX_USAGE::D2D1_VERTEX_USAGE_DYNAMIC"]/*' />
	/// <unmanaged>D2D1_VERTEX_USAGE_DYNAMIC</unmanaged>
	Dynamic = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_OPERATION"]/*' />
/// <unmanaged>D2D1_BLEND_OPERATION</unmanaged>
public enum BlendOperation : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_OPERATION::D2D1_BLEND_OPERATION_ADD"]/*' />
	/// <unmanaged>D2D1_BLEND_OPERATION_ADD</unmanaged>
	Add = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_OPERATION::D2D1_BLEND_OPERATION_SUBTRACT"]/*' />
	/// <unmanaged>D2D1_BLEND_OPERATION_SUBTRACT</unmanaged>
	Subtract = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_OPERATION::D2D1_BLEND_OPERATION_REV_SUBTRACT"]/*' />
	/// <unmanaged>D2D1_BLEND_OPERATION_REV_SUBTRACT</unmanaged>
	RevSubtract = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_OPERATION::D2D1_BLEND_OPERATION_MIN"]/*' />
	/// <unmanaged>D2D1_BLEND_OPERATION_MIN</unmanaged>
	Min = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_OPERATION::D2D1_BLEND_OPERATION_MAX"]/*' />
	/// <unmanaged>D2D1_BLEND_OPERATION_MAX</unmanaged>
	Max = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND"]/*' />
/// <unmanaged>D2D1_BLEND</unmanaged>
public enum Blend : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND::D2D1_BLEND_ZERO"]/*' />
	/// <unmanaged>D2D1_BLEND_ZERO</unmanaged>
	Zero = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND::D2D1_BLEND_ONE"]/*' />
	/// <unmanaged>D2D1_BLEND_ONE</unmanaged>
	One = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND::D2D1_BLEND_SRC_COLOR"]/*' />
	/// <unmanaged>D2D1_BLEND_SRC_COLOR</unmanaged>
	SrcColor = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND::D2D1_BLEND_INV_SRC_COLOR"]/*' />
	/// <unmanaged>D2D1_BLEND_INV_SRC_COLOR</unmanaged>
	InvSrcColor = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND::D2D1_BLEND_SRC_ALPHA"]/*' />
	/// <unmanaged>D2D1_BLEND_SRC_ALPHA</unmanaged>
	SrcAlpha = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND::D2D1_BLEND_INV_SRC_ALPHA"]/*' />
	/// <unmanaged>D2D1_BLEND_INV_SRC_ALPHA</unmanaged>
	InvSrcAlpha = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND::D2D1_BLEND_DEST_ALPHA"]/*' />
	/// <unmanaged>D2D1_BLEND_DEST_ALPHA</unmanaged>
	DestAlpha = 7,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND::D2D1_BLEND_INV_DEST_ALPHA"]/*' />
	/// <unmanaged>D2D1_BLEND_INV_DEST_ALPHA</unmanaged>
	InvDestAlpha = 8,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND::D2D1_BLEND_DEST_COLOR"]/*' />
	/// <unmanaged>D2D1_BLEND_DEST_COLOR</unmanaged>
	DestColor = 9,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND::D2D1_BLEND_INV_DEST_COLOR"]/*' />
	/// <unmanaged>D2D1_BLEND_INV_DEST_COLOR</unmanaged>
	InvDestColor = 10,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND::D2D1_BLEND_SRC_ALPHA_SAT"]/*' />
	/// <unmanaged>D2D1_BLEND_SRC_ALPHA_SAT</unmanaged>
	SrcAlphaSat = 11,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND::D2D1_BLEND_BLEND_FACTOR"]/*' />
	/// <unmanaged>D2D1_BLEND_BLEND_FACTOR</unmanaged>
	BlendFactor = 14,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND::D2D1_BLEND_INV_BLEND_FACTOR"]/*' />
	/// <unmanaged>D2D1_BLEND_INV_BLEND_FACTOR</unmanaged>
	InvBlendFactor = 15,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHANNEL_DEPTH"]/*' />
/// <unmanaged>D2D1_CHANNEL_DEPTH</unmanaged>
public enum ChannelDepth : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHANNEL_DEPTH::D2D1_CHANNEL_DEPTH_DEFAULT"]/*' />
	/// <unmanaged>D2D1_CHANNEL_DEPTH_DEFAULT</unmanaged>
	Default = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHANNEL_DEPTH::D2D1_CHANNEL_DEPTH_1"]/*' />
	/// <unmanaged>D2D1_CHANNEL_DEPTH_1</unmanaged>
	_1 = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHANNEL_DEPTH::D2D1_CHANNEL_DEPTH_4"]/*' />
	/// <unmanaged>D2D1_CHANNEL_DEPTH_4</unmanaged>
	_4 = 4,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FILTER"]/*' />
/// <unmanaged>D2D1_FILTER</unmanaged>
public enum Filter : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FILTER::D2D1_FILTER_MIN_MAG_MIP_POINT"]/*' />
	/// <unmanaged>D2D1_FILTER_MIN_MAG_MIP_POINT</unmanaged>
	MinMagMipPoint = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FILTER::D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR"]/*' />
	/// <unmanaged>D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
	MinMagPointMipLinear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FILTER::D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT"]/*' />
	/// <unmanaged>D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
	MinPointMagLinearMipPoint = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FILTER::D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR"]/*' />
	/// <unmanaged>D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
	MinPointMagMipLinear = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FILTER::D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT"]/*' />
	/// <unmanaged>D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
	MinLinearMagMipPoint = 16,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FILTER::D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR"]/*' />
	/// <unmanaged>D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
	MinLinearMagPointMipLinear = 17,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FILTER::D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT"]/*' />
	/// <unmanaged>D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
	MinMagLinearMipPoint = 20,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FILTER::D2D1_FILTER_MIN_MAG_MIP_LINEAR"]/*' />
	/// <unmanaged>D2D1_FILTER_MIN_MAG_MIP_LINEAR</unmanaged>
	MinMagMipLinear = 21,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FILTER::D2D1_FILTER_ANISOTROPIC"]/*' />
	/// <unmanaged>D2D1_FILTER_ANISOTROPIC</unmanaged>
	Anisotropic = 85,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FEATURE"]/*' />
/// <unmanaged>D2D1_FEATURE</unmanaged>
public enum Feature : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FEATURE::D2D1_FEATURE_DOUBLES"]/*' />
	/// <unmanaged>D2D1_FEATURE_DOUBLES</unmanaged>
	Doubles = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FEATURE::D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS"]/*' />
	/// <unmanaged>D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS</unmanaged>
	XHardwareOptions = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_PROP"]/*' />
/// <unmanaged>D2D1_YCBCR_PROP</unmanaged>
public enum YcbcrProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_PROP::D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING"]/*' />
	/// <unmanaged>D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING</unmanaged>
	ChromaSubsampling = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_PROP::D2D1_YCBCR_PROP_TRANSFORM_MATRIX"]/*' />
	/// <unmanaged>D2D1_YCBCR_PROP_TRANSFORM_MATRIX</unmanaged>
	TransformMatrix = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_PROP::D2D1_YCBCR_PROP_INTERPOLATION_MODE"]/*' />
	/// <unmanaged>D2D1_YCBCR_PROP_INTERPOLATION_MODE</unmanaged>
	InterpolationMode = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_CHROMA_SUBSAMPLING"]/*' />
/// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING</unmanaged>
public enum YcbcrChromaSubsampling : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_CHROMA_SUBSAMPLING::D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO"]/*' />
	/// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO</unmanaged>
	Auto = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_CHROMA_SUBSAMPLING::D2D1_YCBCR_CHROMA_SUBSAMPLING_420"]/*' />
	/// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_420</unmanaged>
	_420 = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_CHROMA_SUBSAMPLING::D2D1_YCBCR_CHROMA_SUBSAMPLING_422"]/*' />
	/// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_422</unmanaged>
	_422 = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_CHROMA_SUBSAMPLING::D2D1_YCBCR_CHROMA_SUBSAMPLING_444"]/*' />
	/// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_444</unmanaged>
	_444 = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_CHROMA_SUBSAMPLING::D2D1_YCBCR_CHROMA_SUBSAMPLING_440"]/*' />
	/// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_440</unmanaged>
	_440 = 4,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_INTERPOLATION_MODE"]/*' />
/// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE</unmanaged>
public enum YcbcrInterpolationMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_INTERPOLATION_MODE::D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_INTERPOLATION_MODE::D2D1_YCBCR_INTERPOLATION_MODE_LINEAR"]/*' />
	/// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_LINEAR</unmanaged>
	Linear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_INTERPOLATION_MODE::D2D1_YCBCR_INTERPOLATION_MODE_CUBIC"]/*' />
	/// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_CUBIC</unmanaged>
	Cubic = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_INTERPOLATION_MODE::D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR"]/*' />
	/// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
	MultiSampleLinear = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_INTERPOLATION_MODE::D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC"]/*' />
	/// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
	Anisotropic = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_YCBCR_INTERPOLATION_MODE::D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC"]/*' />
	/// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>
	HighQualityCubic = 5,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONTRAST_PROP"]/*' />
/// <unmanaged>D2D1_CONTRAST_PROP</unmanaged>
public enum ContrastProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONTRAST_PROP::D2D1_CONTRAST_PROP_CONTRAST"]/*' />
	/// <unmanaged>D2D1_CONTRAST_PROP_CONTRAST</unmanaged>
	Contrast = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CONTRAST_PROP::D2D1_CONTRAST_PROP_CLAMP_INPUT"]/*' />
	/// <unmanaged>D2D1_CONTRAST_PROP_CLAMP_INPUT</unmanaged>
	ClampInput = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RGBTOHUE_PROP"]/*' />
/// <unmanaged>D2D1_RGBTOHUE_PROP</unmanaged>
public enum RgbToHueProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RGBTOHUE_PROP::D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE"]/*' />
	/// <unmanaged>D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE</unmanaged>
	OutputColorSpace = 0,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE"]/*' />
/// <unmanaged>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE</unmanaged>
public enum RgbToHueOutputColorSpace : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE::D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_VALUE"]/*' />
	/// <unmanaged>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_VALUE</unmanaged>
	HueSaturationValue = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE::D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS"]/*' />
	/// <unmanaged>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS</unmanaged>
	HueSaturationLightness = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HUETORGB_PROP"]/*' />
/// <unmanaged>D2D1_HUETORGB_PROP</unmanaged>
public enum HueToRgbProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HUETORGB_PROP::D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE"]/*' />
	/// <unmanaged>D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE</unmanaged>
	InputColorSpace = 0,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HUETORGB_INPUT_COLOR_SPACE"]/*' />
/// <unmanaged>D2D1_HUETORGB_INPUT_COLOR_SPACE</unmanaged>
public enum HueToRgbInputColorSpace : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HUETORGB_INPUT_COLOR_SPACE::D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_VALUE"]/*' />
	/// <unmanaged>D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_VALUE</unmanaged>
	HueSaturationValue = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HUETORGB_INPUT_COLOR_SPACE::D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS"]/*' />
	/// <unmanaged>D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS</unmanaged>
	HueSaturationLightness = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHROMAKEY_PROP"]/*' />
/// <unmanaged>D2D1_CHROMAKEY_PROP</unmanaged>
public enum ChromaKeyProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHROMAKEY_PROP::D2D1_CHROMAKEY_PROP_COLOR"]/*' />
	/// <unmanaged>D2D1_CHROMAKEY_PROP_COLOR</unmanaged>
	Color = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHROMAKEY_PROP::D2D1_CHROMAKEY_PROP_TOLERANCE"]/*' />
	/// <unmanaged>D2D1_CHROMAKEY_PROP_TOLERANCE</unmanaged>
	Tolerance = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHROMAKEY_PROP::D2D1_CHROMAKEY_PROP_INVERT_ALPHA"]/*' />
	/// <unmanaged>D2D1_CHROMAKEY_PROP_INVERT_ALPHA</unmanaged>
	InvertAlpha = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CHROMAKEY_PROP::D2D1_CHROMAKEY_PROP_FEATHER"]/*' />
	/// <unmanaged>D2D1_CHROMAKEY_PROP_FEATHER</unmanaged>
	Feather = 3,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EMBOSS_PROP"]/*' />
/// <unmanaged>D2D1_EMBOSS_PROP</unmanaged>
public enum EmbossProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EMBOSS_PROP::D2D1_EMBOSS_PROP_HEIGHT"]/*' />
	/// <unmanaged>D2D1_EMBOSS_PROP_HEIGHT</unmanaged>
	Height = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EMBOSS_PROP::D2D1_EMBOSS_PROP_DIRECTION"]/*' />
	/// <unmanaged>D2D1_EMBOSS_PROP_DIRECTION</unmanaged>
	Direction = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EXPOSURE_PROP"]/*' />
/// <unmanaged>D2D1_EXPOSURE_PROP</unmanaged>
public enum ExposureProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EXPOSURE_PROP::D2D1_EXPOSURE_PROP_EXPOSURE_VALUE"]/*' />
	/// <unmanaged>D2D1_EXPOSURE_PROP_EXPOSURE_VALUE</unmanaged>
	ExposureValue = 0,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POSTERIZE_PROP"]/*' />
/// <unmanaged>D2D1_POSTERIZE_PROP</unmanaged>
public enum PosterizeProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POSTERIZE_PROP::D2D1_POSTERIZE_PROP_RED_VALUE_COUNT"]/*' />
	/// <unmanaged>D2D1_POSTERIZE_PROP_RED_VALUE_COUNT</unmanaged>
	RedValueCount = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POSTERIZE_PROP::D2D1_POSTERIZE_PROP_GREEN_VALUE_COUNT"]/*' />
	/// <unmanaged>D2D1_POSTERIZE_PROP_GREEN_VALUE_COUNT</unmanaged>
	GreenValueCount = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POSTERIZE_PROP::D2D1_POSTERIZE_PROP_BLUE_VALUE_COUNT"]/*' />
	/// <unmanaged>D2D1_POSTERIZE_PROP_BLUE_VALUE_COUNT</unmanaged>
	BlueValueCount = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SEPIA_PROP"]/*' />
/// <unmanaged>D2D1_SEPIA_PROP</unmanaged>
public enum SepiaProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SEPIA_PROP::D2D1_SEPIA_PROP_INTENSITY"]/*' />
	/// <unmanaged>D2D1_SEPIA_PROP_INTENSITY</unmanaged>
	Intensity = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SEPIA_PROP::D2D1_SEPIA_PROP_ALPHA_MODE"]/*' />
	/// <unmanaged>D2D1_SEPIA_PROP_ALPHA_MODE</unmanaged>
	AlphaMode = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SHARPEN_PROP"]/*' />
/// <unmanaged>D2D1_SHARPEN_PROP</unmanaged>
public enum SharpenProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SHARPEN_PROP::D2D1_SHARPEN_PROP_SHARPNESS"]/*' />
	/// <unmanaged>D2D1_SHARPEN_PROP_SHARPNESS</unmanaged>
	Sharpness = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SHARPEN_PROP::D2D1_SHARPEN_PROP_THRESHOLD"]/*' />
	/// <unmanaged>D2D1_SHARPEN_PROP_THRESHOLD</unmanaged>
	Threshold = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STRAIGHTEN_PROP"]/*' />
/// <unmanaged>D2D1_STRAIGHTEN_PROP</unmanaged>
public enum StraightenProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STRAIGHTEN_PROP::D2D1_STRAIGHTEN_PROP_ANGLE"]/*' />
	/// <unmanaged>D2D1_STRAIGHTEN_PROP_ANGLE</unmanaged>
	Angle = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STRAIGHTEN_PROP::D2D1_STRAIGHTEN_PROP_MAINTAIN_SIZE"]/*' />
	/// <unmanaged>D2D1_STRAIGHTEN_PROP_MAINTAIN_SIZE</unmanaged>
	MaintainSize = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STRAIGHTEN_PROP::D2D1_STRAIGHTEN_PROP_SCALE_MODE"]/*' />
	/// <unmanaged>D2D1_STRAIGHTEN_PROP_SCALE_MODE</unmanaged>
	ScaleMode = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STRAIGHTEN_SCALE_MODE"]/*' />
/// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE</unmanaged>
public enum StraightenScaleMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STRAIGHTEN_SCALE_MODE::D2D1_STRAIGHTEN_SCALE_MODE_NEAREST_NEIGHBOR"]/*' />
	/// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
	NearestNeighbor = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STRAIGHTEN_SCALE_MODE::D2D1_STRAIGHTEN_SCALE_MODE_LINEAR"]/*' />
	/// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_LINEAR</unmanaged>
	Linear = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STRAIGHTEN_SCALE_MODE::D2D1_STRAIGHTEN_SCALE_MODE_CUBIC"]/*' />
	/// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_CUBIC</unmanaged>
	Cubic = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STRAIGHTEN_SCALE_MODE::D2D1_STRAIGHTEN_SCALE_MODE_MULTI_SAMPLE_LINEAR"]/*' />
	/// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
	MultiSampleLinear = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STRAIGHTEN_SCALE_MODE::D2D1_STRAIGHTEN_SCALE_MODE_ANISOTROPIC"]/*' />
	/// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_ANISOTROPIC</unmanaged>
	Anisotropic = 4,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TEMPERATUREANDTINT_PROP"]/*' />
/// <unmanaged>D2D1_TEMPERATUREANDTINT_PROP</unmanaged>
public enum TemperatureandtintProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TEMPERATUREANDTINT_PROP::D2D1_TEMPERATUREANDTINT_PROP_TEMPERATURE"]/*' />
	/// <unmanaged>D2D1_TEMPERATUREANDTINT_PROP_TEMPERATURE</unmanaged>
	Temperature = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TEMPERATUREANDTINT_PROP::D2D1_TEMPERATUREANDTINT_PROP_TINT"]/*' />
	/// <unmanaged>D2D1_TEMPERATUREANDTINT_PROP_TINT</unmanaged>
	Tint = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VIGNETTE_PROP"]/*' />
/// <unmanaged>D2D1_VIGNETTE_PROP</unmanaged>
public enum VignetteProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VIGNETTE_PROP::D2D1_VIGNETTE_PROP_COLOR"]/*' />
	/// <unmanaged>D2D1_VIGNETTE_PROP_COLOR</unmanaged>
	Color = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VIGNETTE_PROP::D2D1_VIGNETTE_PROP_TRANSITION_SIZE"]/*' />
	/// <unmanaged>D2D1_VIGNETTE_PROP_TRANSITION_SIZE</unmanaged>
	TransitionSize = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VIGNETTE_PROP::D2D1_VIGNETTE_PROP_STRENGTH"]/*' />
	/// <unmanaged>D2D1_VIGNETTE_PROP_STRENGTH</unmanaged>
	Strength = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EDGEDETECTION_PROP"]/*' />
/// <unmanaged>D2D1_EDGEDETECTION_PROP</unmanaged>
public enum EdgeDetectionProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EDGEDETECTION_PROP::D2D1_EDGEDETECTION_PROP_STRENGTH"]/*' />
	/// <unmanaged>D2D1_EDGEDETECTION_PROP_STRENGTH</unmanaged>
	Strength = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EDGEDETECTION_PROP::D2D1_EDGEDETECTION_PROP_BLUR_RADIUS"]/*' />
	/// <unmanaged>D2D1_EDGEDETECTION_PROP_BLUR_RADIUS</unmanaged>
	BlurRadius = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EDGEDETECTION_PROP::D2D1_EDGEDETECTION_PROP_MODE"]/*' />
	/// <unmanaged>D2D1_EDGEDETECTION_PROP_MODE</unmanaged>
	Mode = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EDGEDETECTION_PROP::D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES"]/*' />
	/// <unmanaged>D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES</unmanaged>
	OverlayEdges = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EDGEDETECTION_PROP::D2D1_EDGEDETECTION_PROP_ALPHA_MODE"]/*' />
	/// <unmanaged>D2D1_EDGEDETECTION_PROP_ALPHA_MODE</unmanaged>
	AlphaMode = 4,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EDGEDETECTION_MODE"]/*' />
/// <unmanaged>D2D1_EDGEDETECTION_MODE</unmanaged>
public enum EdgeDetectionMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EDGEDETECTION_MODE::D2D1_EDGEDETECTION_MODE_SOBEL"]/*' />
	/// <unmanaged>D2D1_EDGEDETECTION_MODE_SOBEL</unmanaged>
	Sobel = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EDGEDETECTION_MODE::D2D1_EDGEDETECTION_MODE_PREWITT"]/*' />
	/// <unmanaged>D2D1_EDGEDETECTION_MODE_PREWITT</unmanaged>
	Prewitt = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HIGHLIGHTSANDSHADOWS_PROP"]/*' />
/// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP</unmanaged>
public enum HighlightSandShadowsProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HIGHLIGHTSANDSHADOWS_PROP::D2D1_HIGHLIGHTSANDSHADOWS_PROP_HIGHLIGHTS"]/*' />
	/// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_HIGHLIGHTS</unmanaged>
	Highlights = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HIGHLIGHTSANDSHADOWS_PROP::D2D1_HIGHLIGHTSANDSHADOWS_PROP_SHADOWS"]/*' />
	/// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_SHADOWS</unmanaged>
	Shadows = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HIGHLIGHTSANDSHADOWS_PROP::D2D1_HIGHLIGHTSANDSHADOWS_PROP_CLARITY"]/*' />
	/// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_CLARITY</unmanaged>
	Clarity = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HIGHLIGHTSANDSHADOWS_PROP::D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA"]/*' />
	/// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA</unmanaged>
	InputGamma = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HIGHLIGHTSANDSHADOWS_PROP::D2D1_HIGHLIGHTSANDSHADOWS_PROP_MASK_BLUR_RADIUS"]/*' />
	/// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_MASK_BLUR_RADIUS</unmanaged>
	MaskBlurRadius = 4,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA"]/*' />
/// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA</unmanaged>
public enum HighlightSandShadowsInputGamma : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA::D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_LINEAR"]/*' />
	/// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_LINEAR</unmanaged>
	Linear = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA::D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_SRGB"]/*' />
	/// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_SRGB</unmanaged>
	Srgb = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LOOKUPTABLE3D_PROP"]/*' />
/// <unmanaged>D2D1_LOOKUPTABLE3D_PROP</unmanaged>
public enum LookupTable3DProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LOOKUPTABLE3D_PROP::D2D1_LOOKUPTABLE3D_PROP_LUT"]/*' />
	/// <unmanaged>D2D1_LOOKUPTABLE3D_PROP_LUT</unmanaged>
	Lut = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LOOKUPTABLE3D_PROP::D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE"]/*' />
	/// <unmanaged>D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE</unmanaged>
	AlphaMode = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_OPACITY_PROP"]/*' />
/// <unmanaged>D2D1_OPACITY_PROP</unmanaged>
public enum OpacityProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_OPACITY_PROP::D2D1_OPACITY_PROP_OPACITY"]/*' />
	/// <unmanaged>D2D1_OPACITY_PROP_OPACITY</unmanaged>
	Opacity = 0,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CROSSFADE_PROP"]/*' />
/// <unmanaged>D2D1_CROSSFADE_PROP</unmanaged>
public enum CrossfadeProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CROSSFADE_PROP::D2D1_CROSSFADE_PROP_WEIGHT"]/*' />
	/// <unmanaged>D2D1_CROSSFADE_PROP_WEIGHT</unmanaged>
	Weight = 0,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TINT_PROP"]/*' />
/// <unmanaged>D2D1_TINT_PROP</unmanaged>
public enum TintProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TINT_PROP::D2D1_TINT_PROP_COLOR"]/*' />
	/// <unmanaged>D2D1_TINT_PROP_COLOR</unmanaged>
	Color = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TINT_PROP::D2D1_TINT_PROP_CLAMP_OUTPUT"]/*' />
	/// <unmanaged>D2D1_TINT_PROP_CLAMP_OUTPUT</unmanaged>
	ClampOutput = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_WHITELEVELADJUSTMENT_PROP"]/*' />
/// <unmanaged>D2D1_WHITELEVELADJUSTMENT_PROP</unmanaged>
public enum WhiteLevelAdjustmentProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_WHITELEVELADJUSTMENT_PROP::D2D1_WHITELEVELADJUSTMENT_PROP_INPUT_WHITE_LEVEL"]/*' />
	/// <unmanaged>D2D1_WHITELEVELADJUSTMENT_PROP_INPUT_WHITE_LEVEL</unmanaged>
	InputWhiteLevel = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_WHITELEVELADJUSTMENT_PROP::D2D1_WHITELEVELADJUSTMENT_PROP_OUTPUT_WHITE_LEVEL"]/*' />
	/// <unmanaged>D2D1_WHITELEVELADJUSTMENT_PROP_OUTPUT_WHITE_LEVEL</unmanaged>
	OutputWhiteLevel = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HDRTONEMAP_PROP"]/*' />
/// <unmanaged>D2D1_HDRTONEMAP_PROP</unmanaged>
public enum HDRTonemapProp : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HDRTONEMAP_PROP::D2D1_HDRTONEMAP_PROP_INPUT_MAX_LUMINANCE"]/*' />
	/// <unmanaged>D2D1_HDRTONEMAP_PROP_INPUT_MAX_LUMINANCE</unmanaged>
	InputMaxLuminance = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HDRTONEMAP_PROP::D2D1_HDRTONEMAP_PROP_OUTPUT_MAX_LUMINANCE"]/*' />
	/// <unmanaged>D2D1_HDRTONEMAP_PROP_OUTPUT_MAX_LUMINANCE</unmanaged>
	OutputMaxLuminance = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HDRTONEMAP_PROP::D2D1_HDRTONEMAP_PROP_DISPLAY_MODE"]/*' />
	/// <unmanaged>D2D1_HDRTONEMAP_PROP_DISPLAY_MODE</unmanaged>
	DisplayMode = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HDRTONEMAP_DISPLAY_MODE"]/*' />
/// <unmanaged>D2D1_HDRTONEMAP_DISPLAY_MODE</unmanaged>
public enum HDRTonemapDisplayMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HDRTONEMAP_DISPLAY_MODE::D2D1_HDRTONEMAP_DISPLAY_MODE_SDR"]/*' />
	/// <unmanaged>D2D1_HDRTONEMAP_DISPLAY_MODE_SDR</unmanaged>
	Sdr = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HDRTONEMAP_DISPLAY_MODE::D2D1_HDRTONEMAP_DISPLAY_MODE_HDR"]/*' />
	/// <unmanaged>D2D1_HDRTONEMAP_DISPLAY_MODE_HDR</unmanaged>
	HDR = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDERING_PRIORITY"]/*' />
/// <unmanaged>D2D1_RENDERING_PRIORITY</unmanaged>
public enum RenderingPriority : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDERING_PRIORITY::D2D1_RENDERING_PRIORITY_NORMAL"]/*' />
	/// <unmanaged>D2D1_RENDERING_PRIORITY_NORMAL</unmanaged>
	Normal = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDERING_PRIORITY::D2D1_RENDERING_PRIORITY_LOW"]/*' />
	/// <unmanaged>D2D1_RENDERING_PRIORITY_LOW</unmanaged>
	Low = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PAINT_TYPE"]/*' />
/// <unmanaged>D2D1_SVG_PAINT_TYPE</unmanaged>
public enum SvgPaintType : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PAINT_TYPE::D2D1_SVG_PAINT_TYPE_NONE"]/*' />
	/// <unmanaged>D2D1_SVG_PAINT_TYPE_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PAINT_TYPE::D2D1_SVG_PAINT_TYPE_COLOR"]/*' />
	/// <unmanaged>D2D1_SVG_PAINT_TYPE_COLOR</unmanaged>
	Color = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PAINT_TYPE::D2D1_SVG_PAINT_TYPE_CURRENT_COLOR"]/*' />
	/// <unmanaged>D2D1_SVG_PAINT_TYPE_CURRENT_COLOR</unmanaged>
	CurrentColor = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PAINT_TYPE::D2D1_SVG_PAINT_TYPE_URI"]/*' />
	/// <unmanaged>D2D1_SVG_PAINT_TYPE_URI</unmanaged>
	Uri = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PAINT_TYPE::D2D1_SVG_PAINT_TYPE_URI_NONE"]/*' />
	/// <unmanaged>D2D1_SVG_PAINT_TYPE_URI_NONE</unmanaged>
	UriNone = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PAINT_TYPE::D2D1_SVG_PAINT_TYPE_URI_COLOR"]/*' />
	/// <unmanaged>D2D1_SVG_PAINT_TYPE_URI_COLOR</unmanaged>
	UriColor = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PAINT_TYPE::D2D1_SVG_PAINT_TYPE_URI_CURRENT_COLOR"]/*' />
	/// <unmanaged>D2D1_SVG_PAINT_TYPE_URI_CURRENT_COLOR</unmanaged>
	UriCurrentColor = 6,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_LENGTH_UNITS"]/*' />
/// <unmanaged>D2D1_SVG_LENGTH_UNITS</unmanaged>
public enum SvgLengthUnits : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_LENGTH_UNITS::D2D1_SVG_LENGTH_UNITS_NUMBER"]/*' />
	/// <unmanaged>D2D1_SVG_LENGTH_UNITS_NUMBER</unmanaged>
	Number = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_LENGTH_UNITS::D2D1_SVG_LENGTH_UNITS_PERCENTAGE"]/*' />
	/// <unmanaged>D2D1_SVG_LENGTH_UNITS_PERCENTAGE</unmanaged>
	Percentage = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_DISPLAY"]/*' />
/// <unmanaged>D2D1_SVG_DISPLAY</unmanaged>
public enum SvgDisplay : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_DISPLAY::D2D1_SVG_DISPLAY_INLINE"]/*' />
	/// <unmanaged>D2D1_SVG_DISPLAY_INLINE</unmanaged>
	Inline = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_DISPLAY::D2D1_SVG_DISPLAY_NONE"]/*' />
	/// <unmanaged>D2D1_SVG_DISPLAY_NONE</unmanaged>
	None = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_VISIBILITY"]/*' />
/// <unmanaged>D2D1_SVG_VISIBILITY</unmanaged>
public enum SvgVisibility : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_VISIBILITY::D2D1_SVG_VISIBILITY_VISIBLE"]/*' />
	/// <unmanaged>D2D1_SVG_VISIBILITY_VISIBLE</unmanaged>
	Visible = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_VISIBILITY::D2D1_SVG_VISIBILITY_HIDDEN"]/*' />
	/// <unmanaged>D2D1_SVG_VISIBILITY_HIDDEN</unmanaged>
	Hidden = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_OVERFLOW"]/*' />
/// <unmanaged>D2D1_SVG_OVERFLOW</unmanaged>
public enum SvgOverflow : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_OVERFLOW::D2D1_SVG_OVERFLOW_VISIBLE"]/*' />
	/// <unmanaged>D2D1_SVG_OVERFLOW_VISIBLE</unmanaged>
	Visible = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_OVERFLOW::D2D1_SVG_OVERFLOW_HIDDEN"]/*' />
	/// <unmanaged>D2D1_SVG_OVERFLOW_HIDDEN</unmanaged>
	Hidden = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_LINE_CAP"]/*' />
/// <unmanaged>D2D1_SVG_LINE_CAP</unmanaged>
public enum SvgLineCap : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_LINE_CAP::D2D1_SVG_LINE_CAP_BUTT"]/*' />
	/// <unmanaged>D2D1_SVG_LINE_CAP_BUTT</unmanaged>
	Butt = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_LINE_CAP::D2D1_SVG_LINE_CAP_SQUARE"]/*' />
	/// <unmanaged>D2D1_SVG_LINE_CAP_SQUARE</unmanaged>
	Square = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_LINE_CAP::D2D1_SVG_LINE_CAP_ROUND"]/*' />
	/// <unmanaged>D2D1_SVG_LINE_CAP_ROUND</unmanaged>
	Round = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_LINE_JOIN"]/*' />
/// <unmanaged>D2D1_SVG_LINE_JOIN</unmanaged>
public enum SvgLineJoin : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_LINE_JOIN::D2D1_SVG_LINE_JOIN_BEVEL"]/*' />
	/// <unmanaged>D2D1_SVG_LINE_JOIN_BEVEL</unmanaged>
	Bevel = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_LINE_JOIN::D2D1_SVG_LINE_JOIN_MITER"]/*' />
	/// <unmanaged>D2D1_SVG_LINE_JOIN_MITER</unmanaged>
	Miter = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_LINE_JOIN::D2D1_SVG_LINE_JOIN_ROUND"]/*' />
	/// <unmanaged>D2D1_SVG_LINE_JOIN_ROUND</unmanaged>
	Round = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ASPECT_ALIGN"]/*' />
/// <unmanaged>D2D1_SVG_ASPECT_ALIGN</unmanaged>
public enum SvgAspectAlign : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ASPECT_ALIGN::D2D1_SVG_ASPECT_ALIGN_NONE"]/*' />
	/// <unmanaged>D2D1_SVG_ASPECT_ALIGN_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ASPECT_ALIGN::D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MIN"]/*' />
	/// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MIN</unmanaged>
	XMinYMin = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ASPECT_ALIGN::D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MIN"]/*' />
	/// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MIN</unmanaged>
	XMidYMin = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ASPECT_ALIGN::D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MIN"]/*' />
	/// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MIN</unmanaged>
	XMaxYMin = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ASPECT_ALIGN::D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MID"]/*' />
	/// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MID</unmanaged>
	XMinYMid = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ASPECT_ALIGN::D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MID"]/*' />
	/// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MID</unmanaged>
	XMidYMid = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ASPECT_ALIGN::D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MID"]/*' />
	/// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MID</unmanaged>
	XMaxYMid = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ASPECT_ALIGN::D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MAX"]/*' />
	/// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MAX</unmanaged>
	XMinYMax = 7,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ASPECT_ALIGN::D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MAX"]/*' />
	/// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MAX</unmanaged>
	XMidYMax = 8,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ASPECT_ALIGN::D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MAX"]/*' />
	/// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MAX</unmanaged>
	XMaxYMax = 9,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ASPECT_SCALING"]/*' />
/// <unmanaged>D2D1_SVG_ASPECT_SCALING</unmanaged>
public enum SvgAspectScaling : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ASPECT_SCALING::D2D1_SVG_ASPECT_SCALING_MEET"]/*' />
	/// <unmanaged>D2D1_SVG_ASPECT_SCALING_MEET</unmanaged>
	Meet = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ASPECT_SCALING::D2D1_SVG_ASPECT_SCALING_SLICE"]/*' />
	/// <unmanaged>D2D1_SVG_ASPECT_SCALING_SLICE</unmanaged>
	Slice = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND"]/*' />
/// <unmanaged>D2D1_SVG_PATH_COMMAND</unmanaged>
public enum SvgPathCommand : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_CLOSE_PATH"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_CLOSE_PATH</unmanaged>
	ClosePath = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_MOVE_ABSOLUTE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_MOVE_ABSOLUTE</unmanaged>
	MoveAbsolute = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_MOVE_RELATIVE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_MOVE_RELATIVE</unmanaged>
	MoveRelative = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_LINE_ABSOLUTE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_LINE_ABSOLUTE</unmanaged>
	LineAbsolute = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_LINE_RELATIVE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_LINE_RELATIVE</unmanaged>
	LineRelative = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_CUBIC_ABSOLUTE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_CUBIC_ABSOLUTE</unmanaged>
	CubicAbsolute = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_CUBIC_RELATIVE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_CUBIC_RELATIVE</unmanaged>
	CubicRelative = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_QUADRADIC_ABSOLUTE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_QUADRADIC_ABSOLUTE</unmanaged>
	QuadradicAbsolute = 7,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_QUADRADIC_RELATIVE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_QUADRADIC_RELATIVE</unmanaged>
	QuadradicRelative = 8,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_ARC_ABSOLUTE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_ARC_ABSOLUTE</unmanaged>
	ArcAbsolute = 9,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_ARC_RELATIVE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_ARC_RELATIVE</unmanaged>
	ArcRelative = 10,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_HORIZONTAL_ABSOLUTE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_HORIZONTAL_ABSOLUTE</unmanaged>
	HorizontalAbsolute = 11,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_HORIZONTAL_RELATIVE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_HORIZONTAL_RELATIVE</unmanaged>
	HorizontalRelative = 12,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_VERTICAL_ABSOLUTE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_VERTICAL_ABSOLUTE</unmanaged>
	VerticalAbsolute = 13,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_VERTICAL_RELATIVE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_VERTICAL_RELATIVE</unmanaged>
	VerticalRelative = 14,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_ABSOLUTE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_ABSOLUTE</unmanaged>
	CubicSmoothAbsolute = 15,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_RELATIVE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_RELATIVE</unmanaged>
	CubicSmoothRelative = 16,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_ABSOLUTE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_ABSOLUTE</unmanaged>
	QuadradicSmoothAbsolute = 17,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PATH_COMMAND::D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_RELATIVE"]/*' />
	/// <unmanaged>D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_RELATIVE</unmanaged>
	QuadradicSmoothRelative = 18,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_UNIT_TYPE"]/*' />
/// <unmanaged>D2D1_SVG_UNIT_TYPE</unmanaged>
public enum SvgUnitType : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_UNIT_TYPE::D2D1_SVG_UNIT_TYPE_USER_SPACE_ON_USE"]/*' />
	/// <unmanaged>D2D1_SVG_UNIT_TYPE_USER_SPACE_ON_USE</unmanaged>
	UserSpaceOnUse = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_UNIT_TYPE::D2D1_SVG_UNIT_TYPE_OBJECT_BOUNDING_BOX"]/*' />
	/// <unmanaged>D2D1_SVG_UNIT_TYPE_OBJECT_BOUNDING_BOX</unmanaged>
	ObjectBoundingBox = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_STRING_TYPE"]/*' />
/// <unmanaged>D2D1_SVG_ATTRIBUTE_STRING_TYPE</unmanaged>
public enum SvgAttributeStringType : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_STRING_TYPE::D2D1_SVG_ATTRIBUTE_STRING_TYPE_SVG"]/*' />
	/// <unmanaged>D2D1_SVG_ATTRIBUTE_STRING_TYPE_SVG</unmanaged>
	Svg = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_STRING_TYPE::D2D1_SVG_ATTRIBUTE_STRING_TYPE_ID"]/*' />
	/// <unmanaged>D2D1_SVG_ATTRIBUTE_STRING_TYPE_ID</unmanaged>
	Id = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_POD_TYPE"]/*' />
/// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE</unmanaged>
public enum SvgAttributePodType : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_POD_TYPE::D2D1_SVG_ATTRIBUTE_POD_TYPE_FLOAT"]/*' />
	/// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_FLOAT</unmanaged>
	Float = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_POD_TYPE::D2D1_SVG_ATTRIBUTE_POD_TYPE_COLOR"]/*' />
	/// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_COLOR</unmanaged>
	Color = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_POD_TYPE::D2D1_SVG_ATTRIBUTE_POD_TYPE_FILL_MODE"]/*' />
	/// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_FILL_MODE</unmanaged>
	FillMode = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_POD_TYPE::D2D1_SVG_ATTRIBUTE_POD_TYPE_DISPLAY"]/*' />
	/// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_DISPLAY</unmanaged>
	Display = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_POD_TYPE::D2D1_SVG_ATTRIBUTE_POD_TYPE_OVERFLOW"]/*' />
	/// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_OVERFLOW</unmanaged>
	Overflow = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_POD_TYPE::D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_CAP"]/*' />
	/// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_CAP</unmanaged>
	LineCap = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_POD_TYPE::D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_JOIN"]/*' />
	/// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_JOIN</unmanaged>
	LineJoin = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_POD_TYPE::D2D1_SVG_ATTRIBUTE_POD_TYPE_VISIBILITY"]/*' />
	/// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_VISIBILITY</unmanaged>
	Visibility = 7,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_POD_TYPE::D2D1_SVG_ATTRIBUTE_POD_TYPE_MATRIX"]/*' />
	/// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_MATRIX</unmanaged>
	Matrix = 8,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_POD_TYPE::D2D1_SVG_ATTRIBUTE_POD_TYPE_UNIT_TYPE"]/*' />
	/// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_UNIT_TYPE</unmanaged>
	UnitType = 9,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_POD_TYPE::D2D1_SVG_ATTRIBUTE_POD_TYPE_EXTEND_MODE"]/*' />
	/// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_EXTEND_MODE</unmanaged>
	ExtendMode = 10,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_POD_TYPE::D2D1_SVG_ATTRIBUTE_POD_TYPE_PRESERVE_ASPECT_RATIO"]/*' />
	/// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_PRESERVE_ASPECT_RATIO</unmanaged>
	PreserveAspectRatio = 11,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_POD_TYPE::D2D1_SVG_ATTRIBUTE_POD_TYPE_VIEWBOX"]/*' />
	/// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_VIEWBOX</unmanaged>
	Viewbox = 12,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_ATTRIBUTE_POD_TYPE::D2D1_SVG_ATTRIBUTE_POD_TYPE_LENGTH"]/*' />
	/// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_LENGTH</unmanaged>
	Length = 13,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INK_NIB_SHAPE"]/*' />
/// <unmanaged>D2D1_INK_NIB_SHAPE</unmanaged>
public enum InkNibShape : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INK_NIB_SHAPE::D2D1_INK_NIB_SHAPE_ROUND"]/*' />
	/// <unmanaged>D2D1_INK_NIB_SHAPE_ROUND</unmanaged>
	Round = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INK_NIB_SHAPE::D2D1_INK_NIB_SHAPE_SQUARE"]/*' />
	/// <unmanaged>D2D1_INK_NIB_SHAPE_SQUARE</unmanaged>
	Square = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ORIENTATION"]/*' />
/// <unmanaged>D2D1_ORIENTATION</unmanaged>
public enum Orientation : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ORIENTATION::D2D1_ORIENTATION_DEFAULT"]/*' />
	/// <unmanaged>D2D1_ORIENTATION_DEFAULT</unmanaged>
	Default = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ORIENTATION::D2D1_ORIENTATION_FLIP_HORIZONTAL"]/*' />
	/// <unmanaged>D2D1_ORIENTATION_FLIP_HORIZONTAL</unmanaged>
	FlipHorizontal = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ORIENTATION::D2D1_ORIENTATION_ROTATE_CLOCKWISE180"]/*' />
	/// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE180</unmanaged>
	RotateClockwise180 = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ORIENTATION::D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL"]/*' />
	/// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL</unmanaged>
	RotateClockwise180FlipHorizontal = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ORIENTATION::D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL"]/*' />
	/// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL</unmanaged>
	RotateClockwise90FlipHorizontal = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ORIENTATION::D2D1_ORIENTATION_ROTATE_CLOCKWISE270"]/*' />
	/// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE270</unmanaged>
	RotateClockwise270 = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ORIENTATION::D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL"]/*' />
	/// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL</unmanaged>
	RotateClockwise270FlipHorizontal = 7,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ORIENTATION::D2D1_ORIENTATION_ROTATE_CLOCKWISE90"]/*' />
	/// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE90</unmanaged>
	RotateClockwise90 = 8,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_IMAGE_SOURCE_LOADING_OPTIONS"]/*' />
/// <unmanaged>D2D1_IMAGE_SOURCE_LOADING_OPTIONS</unmanaged>
[Flags]
public enum ImageSourceLoadingOptions : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_IMAGE_SOURCE_LOADING_OPTIONS::D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE"]/*' />
	/// <unmanaged>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_IMAGE_SOURCE_LOADING_OPTIONS::D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE"]/*' />
	/// <unmanaged>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE</unmanaged>
	ReleaseSource = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_IMAGE_SOURCE_LOADING_OPTIONS::D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND"]/*' />
	/// <unmanaged>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND</unmanaged>
	CacheOnDemand = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS"]/*' />
/// <unmanaged>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS</unmanaged>
[Flags]
public enum ImageSourceFromDxgiOptions : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS::D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE"]/*' />
	/// <unmanaged>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS::D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION"]/*' />
	/// <unmanaged>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION</unmanaged>
	LowQualityPrimaryConversion = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS"]/*' />
/// <unmanaged>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS</unmanaged>
[Flags]
public enum TransformedImageSourceOptions : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS::D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE"]/*' />
	/// <unmanaged>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS::D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE"]/*' />
	/// <unmanaged>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE</unmanaged>
	DisableDpiScale = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PATCH_EDGE_MODE"]/*' />
/// <unmanaged>D2D1_PATCH_EDGE_MODE</unmanaged>
public enum PatchEdgeMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PATCH_EDGE_MODE::D2D1_PATCH_EDGE_MODE_ALIASED"]/*' />
	/// <unmanaged>D2D1_PATCH_EDGE_MODE_ALIASED</unmanaged>
	Aliased = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PATCH_EDGE_MODE::D2D1_PATCH_EDGE_MODE_ANTIALIASED"]/*' />
	/// <unmanaged>D2D1_PATCH_EDGE_MODE_ANTIALIASED</unmanaged>
	Antialiased = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PATCH_EDGE_MODE::D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED"]/*' />
	/// <unmanaged>D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED</unmanaged>
	AliasedInflated = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPRITE_OPTIONS"]/*' />
/// <unmanaged>D2D1_SPRITE_OPTIONS</unmanaged>
[Flags]
public enum SpriteOptions : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPRITE_OPTIONS::D2D1_SPRITE_OPTIONS_NONE"]/*' />
	/// <unmanaged>D2D1_SPRITE_OPTIONS_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SPRITE_OPTIONS::D2D1_SPRITE_OPTIONS_CLAMP_TO_SOURCE_RECTANGLE"]/*' />
	/// <unmanaged>D2D1_SPRITE_OPTIONS_CLAMP_TO_SOURCE_RECTANGLE</unmanaged>
	ClampToSourceRectangle = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION"]/*' />
/// <unmanaged>D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION</unmanaged>
public enum ColorBitmapGlyphSnapOption : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION::D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DEFAULT"]/*' />
	/// <unmanaged>D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DEFAULT</unmanaged>
	Default = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION::D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DISABLE"]/*' />
	/// <unmanaged>D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DISABLE</unmanaged>
	Disable = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMA1"]/*' />
/// <unmanaged>D2D1_GAMMA1</unmanaged>
public enum Gamma1 : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMA1::D2D1_GAMMA1_G22"]/*' />
	/// <unmanaged>D2D1_GAMMA1_G22</unmanaged>
	G22 = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMA1::D2D1_GAMMA1_G10"]/*' />
	/// <unmanaged>D2D1_GAMMA1_G10</unmanaged>
	G10 = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GAMMA1::D2D1_GAMMA1_G2084"]/*' />
	/// <unmanaged>D2D1_GAMMA1_G2084</unmanaged>
	G2084 = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_CONTEXT_TYPE"]/*' />
/// <unmanaged>D2D1_COLOR_CONTEXT_TYPE</unmanaged>
public enum ColorContextType : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_CONTEXT_TYPE::D2D1_COLOR_CONTEXT_TYPE_ICC"]/*' />
	/// <unmanaged>D2D1_COLOR_CONTEXT_TYPE_ICC</unmanaged>
	Icc = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_CONTEXT_TYPE::D2D1_COLOR_CONTEXT_TYPE_SIMPLE"]/*' />
	/// <unmanaged>D2D1_COLOR_CONTEXT_TYPE_SIMPLE</unmanaged>
	Simple = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_CONTEXT_TYPE::D2D1_COLOR_CONTEXT_TYPE_DXGI"]/*' />
	/// <unmanaged>D2D1_COLOR_CONTEXT_TYPE_DXGI</unmanaged>
	DXGI = 2,
}

#endregion Enums

#region Structs
/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_PROPERTIES"]/*' />
/// <unmanaged>D2D1_BITMAP_PROPERTIES</unmanaged>
public partial struct BitmapProperties
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_PROPERTIES::pixelFormat"]/*' />
	public Common.PixelFormat pixelFormat;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_PROPERTIES::dpiX"]/*' />
	public float dpiX;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_PROPERTIES::dpiY"]/*' />
	public float dpiY;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_STOP"]/*' />
/// <unmanaged>D2D1_GRADIENT_STOP</unmanaged>
public partial struct GradientStop
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_STOP::position"]/*' />
	public float position;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_STOP::color"]/*' />
	public Color4 color;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BRUSH_PROPERTIES"]/*' />
/// <unmanaged>D2D1_BRUSH_PROPERTIES</unmanaged>
public partial struct BrushProperties
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BRUSH_PROPERTIES::opacity"]/*' />
	public float opacity;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BRUSH_PROPERTIES::transform"]/*' />
	public Matrix3x2 transform;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_BRUSH_PROPERTIES"]/*' />
/// <unmanaged>D2D1_BITMAP_BRUSH_PROPERTIES</unmanaged>
public partial struct BitmapBrushProperties
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_BRUSH_PROPERTIES::extendModeX"]/*' />
	public ExtendMode extendModeX;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_BRUSH_PROPERTIES::extendModeY"]/*' />
	public ExtendMode extendModeY;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_BRUSH_PROPERTIES::interpolationMode"]/*' />
	public BitmapInterpolationMode interpolationMode;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES"]/*' />
/// <unmanaged>D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES</unmanaged>
public partial struct LinearGradientBrushProperties
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES::startPoint"]/*' />
	public System.Drawing.PointF startPoint;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES::endPoint"]/*' />
	public System.Drawing.PointF endPoint;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES"]/*' />
/// <unmanaged>D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES</unmanaged>
public partial struct RadialGradientBrushProperties
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES::center"]/*' />
	public System.Drawing.PointF center;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES::gradientOriginOffset"]/*' />
	public System.Drawing.PointF gradientOriginOffset;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES::radiusX"]/*' />
	public float radiusX;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES::radiusY"]/*' />
	public float radiusY;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TRIANGLE"]/*' />
/// <unmanaged>D2D1_TRIANGLE</unmanaged>
public partial struct Triangle
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TRIANGLE::point1"]/*' />
	public System.Drawing.PointF point1;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TRIANGLE::point2"]/*' />
	public System.Drawing.PointF point2;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TRIANGLE::point3"]/*' />
	public System.Drawing.PointF point3;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ARC_SEGMENT"]/*' />
/// <unmanaged>D2D1_ARC_SEGMENT</unmanaged>
public partial struct ArcSegment
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ARC_SEGMENT::point"]/*' />
	public System.Drawing.PointF point;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ARC_SEGMENT::size"]/*' />
	public System.Drawing.SizeF size;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ARC_SEGMENT::rotationAngle"]/*' />
	public float rotationAngle;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ARC_SEGMENT::sweepDirection"]/*' />
	public SweepDirection sweepDirection;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ARC_SEGMENT::arcSize"]/*' />
	public ArcSize arcSize;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_QUADRATIC_BEZIER_SEGMENT"]/*' />
/// <unmanaged>D2D1_QUADRATIC_BEZIER_SEGMENT</unmanaged>
public partial struct QuadraticBezierSegment
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_QUADRATIC_BEZIER_SEGMENT::point1"]/*' />
	public System.Drawing.PointF point1;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_QUADRATIC_BEZIER_SEGMENT::point2"]/*' />
	public System.Drawing.PointF point2;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ELLIPSE"]/*' />
/// <unmanaged>D2D1_ELLIPSE</unmanaged>
public partial struct Ellipse
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ELLIPSE::point"]/*' />
	public System.Drawing.PointF point;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ELLIPSE::radiusX"]/*' />
	public float radiusX;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ELLIPSE::radiusY"]/*' />
	public float radiusY;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ROUNDED_RECT"]/*' />
/// <unmanaged>D2D1_ROUNDED_RECT</unmanaged>
public partial struct RoundedRect
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ROUNDED_RECT::rect"]/*' />
	public Common.RectF rect;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ROUNDED_RECT::radiusX"]/*' />
	public float radiusX;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ROUNDED_RECT::radiusY"]/*' />
	public float radiusY;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES"]/*' />
/// <unmanaged>D2D1_STROKE_STYLE_PROPERTIES</unmanaged>
public partial struct StrokeStyleProperties
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES::startCap"]/*' />
	public CapStyle startCap;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES::endCap"]/*' />
	public CapStyle endCap;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES::dashCap"]/*' />
	public CapStyle dashCap;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES::lineJoin"]/*' />
	public LineJoin lineJoin;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES::miterLimit"]/*' />
	public float miterLimit;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES::dashStyle"]/*' />
	public DashStyle dashStyle;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES::dashOffset"]/*' />
	public float dashOffset;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_PARAMETERS"]/*' />
/// <unmanaged>D2D1_LAYER_PARAMETERS</unmanaged>
public partial struct LayerParameters
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_PARAMETERS::contentBounds"]/*' />
	public Common.RectF contentBounds;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_PARAMETERS::geometricMask"]/*' />
	public unsafe ID2D1Geometry* geometricMask;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_PARAMETERS::maskAntialiasMode"]/*' />
	public AntialiasMode maskAntialiasMode;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_PARAMETERS::maskTransform"]/*' />
	public Matrix3x2 maskTransform;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_PARAMETERS::opacity"]/*' />
	public float opacity;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_PARAMETERS::opacityBrush"]/*' />
	public unsafe ID2D1Brush* opacityBrush;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_PARAMETERS::layerOptions"]/*' />
	public LayerOptions layerOptions;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDER_TARGET_PROPERTIES"]/*' />
/// <unmanaged>D2D1_RENDER_TARGET_PROPERTIES</unmanaged>
public partial struct RenderTargetProperties
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDER_TARGET_PROPERTIES::type"]/*' />
	public RenderTargetType type;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDER_TARGET_PROPERTIES::pixelFormat"]/*' />
	public Common.PixelFormat pixelFormat;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDER_TARGET_PROPERTIES::dpiX"]/*' />
	public float dpiX;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDER_TARGET_PROPERTIES::dpiY"]/*' />
	public float dpiY;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDER_TARGET_PROPERTIES::usage"]/*' />
	public RenderTargetUsage usage;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDER_TARGET_PROPERTIES::minLevel"]/*' />
	public FeatureLevel minLevel;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HWND_RENDER_TARGET_PROPERTIES"]/*' />
/// <unmanaged>D2D1_HWND_RENDER_TARGET_PROPERTIES</unmanaged>
public partial struct HwndRenderTargetProperties
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HWND_RENDER_TARGET_PROPERTIES::hwnd"]/*' />
	public IntPtr hwnd;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HWND_RENDER_TARGET_PROPERTIES::pixelSize"]/*' />
	public System.Drawing.Size pixelSize;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_HWND_RENDER_TARGET_PROPERTIES::presentOptions"]/*' />
	public PresentOptions presentOptions;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAWING_STATE_DESCRIPTION"]/*' />
/// <unmanaged>D2D1_DRAWING_STATE_DESCRIPTION</unmanaged>
public partial struct DrawingStateDescription
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAWING_STATE_DESCRIPTION::antialiasMode"]/*' />
	public AntialiasMode antialiasMode;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAWING_STATE_DESCRIPTION::textAntialiasMode"]/*' />
	public TextAntialiasMode textAntialiasMode;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAWING_STATE_DESCRIPTION::tag1"]/*' />
	public ulong tag1;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAWING_STATE_DESCRIPTION::tag2"]/*' />
	public ulong tag2;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAWING_STATE_DESCRIPTION::transform"]/*' />
	public Matrix3x2 transform;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FACTORY_OPTIONS"]/*' />
/// <unmanaged>D2D1_FACTORY_OPTIONS</unmanaged>
public partial struct FactoryOptions
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FACTORY_OPTIONS::debugLevel"]/*' />
	public DebugLevel debugLevel;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_PROPERTIES1"]/*' />
/// <unmanaged>D2D1_BITMAP_PROPERTIES1</unmanaged>
public partial struct BitmapProperties1
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_PROPERTIES1::pixelFormat"]/*' />
	public Common.PixelFormat pixelFormat;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_PROPERTIES1::dpiX"]/*' />
	public float dpiX;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_PROPERTIES1::dpiY"]/*' />
	public float dpiY;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_PROPERTIES1::bitmapOptions"]/*' />
	public BitmapOptions bitmapOptions;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_PROPERTIES1::colorContext"]/*' />
	public unsafe ID2D1ColorContext* colorContext;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_MAPPED_RECT"]/*' />
/// <unmanaged>D2D1_MAPPED_RECT</unmanaged>
public partial struct MappedRect
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_MAPPED_RECT::pitch"]/*' />
	public uint pitch;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_MAPPED_RECT::bits"]/*' />
	public unsafe byte* bits;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDERING_CONTROLS"]/*' />
/// <unmanaged>D2D1_RENDERING_CONTROLS</unmanaged>
public partial struct RenderingControls
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDERING_CONTROLS::bufferPrecision"]/*' />
	public BufferPrecision bufferPrecision;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RENDERING_CONTROLS::tileSize"]/*' />
	public System.Drawing.Size tileSize;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EFFECT_INPUT_DESCRIPTION"]/*' />
/// <unmanaged>D2D1_EFFECT_INPUT_DESCRIPTION</unmanaged>
public partial struct EffectInputDescription
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EFFECT_INPUT_DESCRIPTION::effect"]/*' />
	public unsafe ID2D1Effect* effect;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EFFECT_INPUT_DESCRIPTION::inputIndex"]/*' />
	public uint inputIndex;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_EFFECT_INPUT_DESCRIPTION::inputRectangle"]/*' />
	public Common.RectF inputRectangle;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINT_DESCRIPTION"]/*' />
/// <unmanaged>D2D1_POINT_DESCRIPTION</unmanaged>
public partial struct PointDescription
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINT_DESCRIPTION::point"]/*' />
	public System.Drawing.PointF point;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINT_DESCRIPTION::unitTangentVector"]/*' />
	public System.Drawing.PointF unitTangentVector;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINT_DESCRIPTION::endSegment"]/*' />
	public uint endSegment;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINT_DESCRIPTION::endFigure"]/*' />
	public uint endFigure;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_POINT_DESCRIPTION::lengthToEndSegment"]/*' />
	public float lengthToEndSegment;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_IMAGE_BRUSH_PROPERTIES"]/*' />
/// <unmanaged>D2D1_IMAGE_BRUSH_PROPERTIES</unmanaged>
public partial struct ImageBrushProperties
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_IMAGE_BRUSH_PROPERTIES::sourceRectangle"]/*' />
	public Common.RectF sourceRectangle;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_IMAGE_BRUSH_PROPERTIES::extendModeX"]/*' />
	public ExtendMode extendModeX;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_IMAGE_BRUSH_PROPERTIES::extendModeY"]/*' />
	public ExtendMode extendModeY;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_IMAGE_BRUSH_PROPERTIES::interpolationMode"]/*' />
	public InterpolationMode interpolationMode;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_BRUSH_PROPERTIES1"]/*' />
/// <unmanaged>D2D1_BITMAP_BRUSH_PROPERTIES1</unmanaged>
public partial struct BitmapBrushProperties1
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_BRUSH_PROPERTIES1::extendModeX"]/*' />
	public ExtendMode extendModeX;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_BRUSH_PROPERTIES1::extendModeY"]/*' />
	public ExtendMode extendModeY;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BITMAP_BRUSH_PROPERTIES1::interpolationMode"]/*' />
	public InterpolationMode interpolationMode;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES1"]/*' />
/// <unmanaged>D2D1_STROKE_STYLE_PROPERTIES1</unmanaged>
public partial struct StrokeStyleProperties1
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES1::startCap"]/*' />
	public CapStyle startCap;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES1::endCap"]/*' />
	public CapStyle endCap;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES1::dashCap"]/*' />
	public CapStyle dashCap;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES1::lineJoin"]/*' />
	public LineJoin lineJoin;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES1::miterLimit"]/*' />
	public float miterLimit;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES1::dashStyle"]/*' />
	public DashStyle dashStyle;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES1::dashOffset"]/*' />
	public float dashOffset;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_STROKE_STYLE_PROPERTIES1::transformType"]/*' />
	public StrokeTransformType transformType;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_PARAMETERS1"]/*' />
/// <unmanaged>D2D1_LAYER_PARAMETERS1</unmanaged>
public partial struct LayerParameters1
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_PARAMETERS1::contentBounds"]/*' />
	public Common.RectF contentBounds;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_PARAMETERS1::geometricMask"]/*' />
	public unsafe ID2D1Geometry* geometricMask;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_PARAMETERS1::maskAntialiasMode"]/*' />
	public AntialiasMode maskAntialiasMode;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_PARAMETERS1::maskTransform"]/*' />
	public Matrix3x2 maskTransform;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_PARAMETERS1::opacity"]/*' />
	public float opacity;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_PARAMETERS1::opacityBrush"]/*' />
	public unsafe ID2D1Brush* opacityBrush;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_LAYER_PARAMETERS1::layerOptions"]/*' />
	public LayerOptions1 layerOptions;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAWING_STATE_DESCRIPTION1"]/*' />
/// <unmanaged>D2D1_DRAWING_STATE_DESCRIPTION1</unmanaged>
public partial struct DrawingStateDescription1
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAWING_STATE_DESCRIPTION1::antialiasMode"]/*' />
	public AntialiasMode antialiasMode;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAWING_STATE_DESCRIPTION1::textAntialiasMode"]/*' />
	public TextAntialiasMode textAntialiasMode;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAWING_STATE_DESCRIPTION1::tag1"]/*' />
	public ulong tag1;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAWING_STATE_DESCRIPTION1::tag2"]/*' />
	public ulong tag2;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAWING_STATE_DESCRIPTION1::transform"]/*' />
	public Matrix3x2 transform;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAWING_STATE_DESCRIPTION1::primitiveBlend"]/*' />
	public PrimitiveBlend primitiveBlend;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_DRAWING_STATE_DESCRIPTION1::unitMode"]/*' />
	public UnitMode unitMode;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRINT_CONTROL_PROPERTIES"]/*' />
/// <unmanaged>D2D1_PRINT_CONTROL_PROPERTIES</unmanaged>
public partial struct PrintControlProperties
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRINT_CONTROL_PROPERTIES::fontSubset"]/*' />
	public PrintFontSubsetMode fontSubset;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRINT_CONTROL_PROPERTIES::rasterDPI"]/*' />
	public float rasterDPI;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PRINT_CONTROL_PROPERTIES::colorSpace"]/*' />
	public ColorSpace colorSpace;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CREATION_PROPERTIES"]/*' />
/// <unmanaged>D2D1_CREATION_PROPERTIES</unmanaged>
public partial struct CreationProperties
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CREATION_PROPERTIES::threadingMode"]/*' />
	public ThreadingMode threadingMode;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CREATION_PROPERTIES::debugLevel"]/*' />
	public DebugLevel debugLevel;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CREATION_PROPERTIES::options"]/*' />
	public DeviceContextOptions options;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_BINDING"]/*' />
/// <unmanaged>D2D1_PROPERTY_BINDING</unmanaged>
public partial struct PropertyBinding
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_BINDING::propertyName"]/*' />
	public unsafe ushort* propertyName;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_BINDING::setFunction"]/*' />
	public unsafe delegate* unmanaged[Stdcall]<IUnknown*, byte*, uint, HResult> setFunction;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PROPERTY_BINDING::getFunction"]/*' />
	public unsafe delegate* unmanaged[Stdcall]<IUnknown*, byte*, uint, uint*, HResult> getFunction;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RESOURCE_TEXTURE_PROPERTIES"]/*' />
/// <unmanaged>D2D1_RESOURCE_TEXTURE_PROPERTIES</unmanaged>
public partial struct ResourceTextureProperties
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RESOURCE_TEXTURE_PROPERTIES::extents"]/*' />
	public unsafe uint* extents;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RESOURCE_TEXTURE_PROPERTIES::dimensions"]/*' />
	public uint dimensions;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RESOURCE_TEXTURE_PROPERTIES::bufferPrecision"]/*' />
	public BufferPrecision bufferPrecision;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RESOURCE_TEXTURE_PROPERTIES::channelDepth"]/*' />
	public ChannelDepth channelDepth;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RESOURCE_TEXTURE_PROPERTIES::filter"]/*' />
	public Filter filter;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_RESOURCE_TEXTURE_PROPERTIES::extendModes"]/*' />
	public unsafe ExtendMode* extendModes;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INPUT_ELEMENT_DESC"]/*' />
/// <unmanaged>D2D1_INPUT_ELEMENT_DESC</unmanaged>
public partial struct InputElementDescription
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INPUT_ELEMENT_DESC::semanticName"]/*' />
	public unsafe sbyte* semanticName;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INPUT_ELEMENT_DESC::semanticIndex"]/*' />
	public uint semanticIndex;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INPUT_ELEMENT_DESC::format"]/*' />
	public Graphics.Dxgi.Common.Format format;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INPUT_ELEMENT_DESC::inputSlot"]/*' />
	public uint inputSlot;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INPUT_ELEMENT_DESC::alignedByteOffset"]/*' />
	public uint alignedByteOffset;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VERTEX_BUFFER_PROPERTIES"]/*' />
/// <unmanaged>D2D1_VERTEX_BUFFER_PROPERTIES</unmanaged>
public partial struct VertexBufferProperties
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VERTEX_BUFFER_PROPERTIES::inputCount"]/*' />
	public uint inputCount;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VERTEX_BUFFER_PROPERTIES::usage"]/*' />
	public VertexUsage usage;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VERTEX_BUFFER_PROPERTIES::data"]/*' />
	public unsafe byte* data;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VERTEX_BUFFER_PROPERTIES::byteWidth"]/*' />
	public uint byteWidth;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES"]/*' />
/// <unmanaged>D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES</unmanaged>
public partial struct CustomVertexBufferProperties
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES::shaderBufferWithInputSignature"]/*' />
	public unsafe byte* shaderBufferWithInputSignature;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES::shaderBufferSize"]/*' />
	public uint shaderBufferSize;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES::inputElements"]/*' />
	public unsafe InputElementDescription* inputElements;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES::elementCount"]/*' />
	public uint elementCount;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES::stride"]/*' />
	public uint stride;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VERTEX_RANGE"]/*' />
/// <unmanaged>D2D1_VERTEX_RANGE</unmanaged>
public partial struct VertexRange
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VERTEX_RANGE::startVertex"]/*' />
	public uint startVertex;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_VERTEX_RANGE::vertexCount"]/*' />
	public uint vertexCount;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_DESCRIPTION"]/*' />
/// <unmanaged>D2D1_BLEND_DESCRIPTION</unmanaged>
public partial struct BlendDescription
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_DESCRIPTION::sourceBlend"]/*' />
	public Blend sourceBlend;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_DESCRIPTION::destinationBlend"]/*' />
	public Blend destinationBlend;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_DESCRIPTION::blendOperation"]/*' />
	public BlendOperation blendOperation;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_DESCRIPTION::sourceBlendAlpha"]/*' />
	public Blend sourceBlendAlpha;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_DESCRIPTION::destinationBlendAlpha"]/*' />
	public Blend destinationBlendAlpha;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_DESCRIPTION::blendOperationAlpha"]/*' />
	public BlendOperation blendOperationAlpha;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_DESCRIPTION::blendFactor"]/*' />
	public unsafe fixed float blendFactor[4];
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INPUT_DESCRIPTION"]/*' />
/// <unmanaged>D2D1_INPUT_DESCRIPTION</unmanaged>
public partial struct InputDescription
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INPUT_DESCRIPTION::filter"]/*' />
	public Filter filter;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INPUT_DESCRIPTION::levelOfDetailCount"]/*' />
	public uint levelOfDetailCount;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FEATURE_DATA_DOUBLES"]/*' />
/// <unmanaged>D2D1_FEATURE_DATA_DOUBLES</unmanaged>
public partial struct FeatureDataDoubles
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FEATURE_DATA_DOUBLES::doublePrecisionFloatShaderOps"]/*' />
	public Bool32 doublePrecisionFloatShaderOps;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS"]/*' />
/// <unmanaged>D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS</unmanaged>
public partial struct FeatureDataD3D10XHardwareOptions
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS::computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x"]/*' />
	public Bool32 computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_LENGTH"]/*' />
/// <unmanaged>D2D1_SVG_LENGTH</unmanaged>
public partial struct SvgLength
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_LENGTH::value"]/*' />
	public float value;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_LENGTH::units"]/*' />
	public SvgLengthUnits units;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PRESERVE_ASPECT_RATIO"]/*' />
/// <unmanaged>D2D1_SVG_PRESERVE_ASPECT_RATIO</unmanaged>
public partial struct SvgPreserveAspectRatio
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PRESERVE_ASPECT_RATIO::defer"]/*' />
	public Bool32 defer;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PRESERVE_ASPECT_RATIO::align"]/*' />
	public SvgAspectAlign align;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_PRESERVE_ASPECT_RATIO::meetOrSlice"]/*' />
	public SvgAspectScaling meetOrSlice;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_VIEWBOX"]/*' />
/// <unmanaged>D2D1_SVG_VIEWBOX</unmanaged>
public partial struct SvgViewbox
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_VIEWBOX::x"]/*' />
	public float x;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_VIEWBOX::y"]/*' />
	public float y;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_VIEWBOX::width"]/*' />
	public float width;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SVG_VIEWBOX::height"]/*' />
	public float height;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES"]/*' />
/// <unmanaged>D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES</unmanaged>
public partial struct TransformedImageSourceProperties
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES::orientation"]/*' />
	public Orientation orientation;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES::scaleX"]/*' />
	public float scaleX;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES::scaleY"]/*' />
	public float scaleY;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES::interpolationMode"]/*' />
	public InterpolationMode interpolationMode;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES::options"]/*' />
	public TransformedImageSourceOptions options;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INK_POINT"]/*' />
/// <unmanaged>D2D1_INK_POINT</unmanaged>
public partial struct InkPoint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INK_POINT::x"]/*' />
	public float x;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INK_POINT::y"]/*' />
	public float y;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INK_POINT::radius"]/*' />
	public float radius;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INK_BEZIER_SEGMENT"]/*' />
/// <unmanaged>D2D1_INK_BEZIER_SEGMENT</unmanaged>
public partial struct InkBezierSegment
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INK_BEZIER_SEGMENT::point1"]/*' />
	public InkPoint point1;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INK_BEZIER_SEGMENT::point2"]/*' />
	public InkPoint point2;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INK_BEZIER_SEGMENT::point3"]/*' />
	public InkPoint point3;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INK_STYLE_PROPERTIES"]/*' />
/// <unmanaged>D2D1_INK_STYLE_PROPERTIES</unmanaged>
public partial struct InkStyleProperties
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INK_STYLE_PROPERTIES::nibShape"]/*' />
	public InkNibShape nibShape;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_INK_STYLE_PROPERTIES::nibTransform"]/*' />
	public Matrix3x2 nibTransform;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH"]/*' />
/// <unmanaged>D2D1_GRADIENT_MESH_PATCH</unmanaged>
public partial struct GradientMeshPatch
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::point00"]/*' />
	public System.Drawing.PointF point00;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::point01"]/*' />
	public System.Drawing.PointF point01;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::point02"]/*' />
	public System.Drawing.PointF point02;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::point03"]/*' />
	public System.Drawing.PointF point03;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::point10"]/*' />
	public System.Drawing.PointF point10;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::point11"]/*' />
	public System.Drawing.PointF point11;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::point12"]/*' />
	public System.Drawing.PointF point12;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::point13"]/*' />
	public System.Drawing.PointF point13;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::point20"]/*' />
	public System.Drawing.PointF point20;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::point21"]/*' />
	public System.Drawing.PointF point21;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::point22"]/*' />
	public System.Drawing.PointF point22;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::point23"]/*' />
	public System.Drawing.PointF point23;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::point30"]/*' />
	public System.Drawing.PointF point30;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::point31"]/*' />
	public System.Drawing.PointF point31;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::point32"]/*' />
	public System.Drawing.PointF point32;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::point33"]/*' />
	public System.Drawing.PointF point33;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::color00"]/*' />
	public Color4 color00;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::color03"]/*' />
	public Color4 color03;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::color30"]/*' />
	public Color4 color30;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::color33"]/*' />
	public Color4 color33;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::topEdgeMode"]/*' />
	public PatchEdgeMode topEdgeMode;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::leftEdgeMode"]/*' />
	public PatchEdgeMode leftEdgeMode;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::bottomEdgeMode"]/*' />
	public PatchEdgeMode bottomEdgeMode;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_GRADIENT_MESH_PATCH::rightEdgeMode"]/*' />
	public PatchEdgeMode rightEdgeMode;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SIMPLE_COLOR_PROFILE"]/*' />
/// <unmanaged>D2D1_SIMPLE_COLOR_PROFILE</unmanaged>
public partial struct SimpleColorProfile
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SIMPLE_COLOR_PROFILE::redPrimary"]/*' />
	public System.Drawing.PointF redPrimary;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SIMPLE_COLOR_PROFILE::greenPrimary"]/*' />
	public System.Drawing.PointF greenPrimary;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SIMPLE_COLOR_PROFILE::bluePrimary"]/*' />
	public System.Drawing.PointF bluePrimary;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SIMPLE_COLOR_PROFILE::whitePointXZ"]/*' />
	public System.Drawing.PointF whitePointXZ;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_SIMPLE_COLOR_PROFILE::gamma"]/*' />
	public Gamma1 gamma;
}

#endregion Structs

#region COM Types
#endregion Com Types

#region Functions
public static unsafe partial class Apis
{
	[DllImport("d2d1", ExactSpelling = true)]
	public static extern HResult D2D1CreateFactory(FactoryType factoryType, Guid* riid, FactoryOptions* pFactoryOptions, void** ppIFactory);

	[DllImport("d2d1", ExactSpelling = true)]
	public static extern void D2D1MakeRotateMatrix(float angle, System.Drawing.PointF center, Matrix3x2* matrix);

	[DllImport("d2d1", ExactSpelling = true)]
	public static extern void D2D1MakeSkewMatrix(float angleX, float angleY, System.Drawing.PointF center, Matrix3x2* matrix);

	[DllImport("d2d1", ExactSpelling = true)]
	public static extern Bool32 D2D1IsMatrixInvertible(Matrix3x2* matrix);

	[DllImport("d2d1", ExactSpelling = true)]
	public static extern Bool32 D2D1InvertMatrix(Matrix3x2* matrix);

	[DllImport("d2d1", ExactSpelling = true)]
	public static extern HResult D2D1CreateDevice(Graphics.Dxgi.IDXGIDevice* dxgiDevice, CreationProperties* creationProperties, ID2D1Device* d2dDevice);

	[DllImport("d2d1", ExactSpelling = true)]
	public static extern HResult D2D1CreateDeviceContext(Graphics.Dxgi.IDXGISurface* dxgiSurface, CreationProperties* creationProperties, ID2D1DeviceContext* d2dDeviceContext);

	[DllImport("d2d1", ExactSpelling = true)]
	public static extern Color4 D2D1ConvertColorSpace(ColorSpace sourceColorSpace, ColorSpace destinationColorSpace, Color4* color);

	[DllImport("d2d1", ExactSpelling = true)]
	public static extern void D2D1SinCos(float angle, float* s, float* c);

	[DllImport("d2d1", ExactSpelling = true)]
	public static extern float D2D1Tan(float angle);

	[DllImport("d2d1", ExactSpelling = true)]
	public static extern float D2D1Vec3Length(float x, float y, float z);

	[DllImport("d2d1", ExactSpelling = true)]
	public static extern float D2D1ComputeMaximumScaleFactor(Matrix3x2* matrix);

	[DllImport("d2d1", ExactSpelling = true)]
	public static extern void D2D1GetGradientMeshInteriorPointsFromCoonsPatch(System.Drawing.PointF* pPoint0, System.Drawing.PointF* pPoint1, System.Drawing.PointF* pPoint2, System.Drawing.PointF* pPoint3, System.Drawing.PointF* pPoint4, System.Drawing.PointF* pPoint5, System.Drawing.PointF* pPoint6, System.Drawing.PointF* pPoint7, System.Drawing.PointF* pPoint8, System.Drawing.PointF* pPoint9, System.Drawing.PointF* pPoint10, System.Drawing.PointF* pPoint11, System.Drawing.PointF* pTensorPoint11, System.Drawing.PointF* pTensorPoint12, System.Drawing.PointF* pTensorPoint21, System.Drawing.PointF* pTensorPoint22);

}
#endregion Functions
