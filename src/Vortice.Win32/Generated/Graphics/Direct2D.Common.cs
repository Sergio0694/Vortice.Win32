// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Numerics;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Diagnostics.CodeAnalysis;

#if !NET6_0_OR_GREATER
using MemoryMarshal = Win32.MemoryMarshal;
#endif

namespace Win32.Graphics.Direct2D.Common;

public static partial class Apis
{
}

#region Enums
/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ALPHA_MODE"]/*' />
/// <unmanaged>D2D1_ALPHA_MODE</unmanaged>
public enum AlphaMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ALPHA_MODE::D2D1_ALPHA_MODE_UNKNOWN"]/*' />
	/// <unmanaged>D2D1_ALPHA_MODE_UNKNOWN</unmanaged>
	Unknown = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ALPHA_MODE::D2D1_ALPHA_MODE_PREMULTIPLIED"]/*' />
	/// <unmanaged>D2D1_ALPHA_MODE_PREMULTIPLIED</unmanaged>
	Premultiplied = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ALPHA_MODE::D2D1_ALPHA_MODE_STRAIGHT"]/*' />
	/// <unmanaged>D2D1_ALPHA_MODE_STRAIGHT</unmanaged>
	Straight = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_ALPHA_MODE::D2D1_ALPHA_MODE_IGNORE"]/*' />
	/// <unmanaged>D2D1_ALPHA_MODE_IGNORE</unmanaged>
	Ignore = 3,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FIGURE_BEGIN"]/*' />
/// <unmanaged>D2D1_FIGURE_BEGIN</unmanaged>
public enum FigureBegin : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FIGURE_BEGIN::D2D1_FIGURE_BEGIN_FILLED"]/*' />
	/// <unmanaged>D2D1_FIGURE_BEGIN_FILLED</unmanaged>
	Filled = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FIGURE_BEGIN::D2D1_FIGURE_BEGIN_HOLLOW"]/*' />
	/// <unmanaged>D2D1_FIGURE_BEGIN_HOLLOW</unmanaged>
	Hollow = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FIGURE_END"]/*' />
/// <unmanaged>D2D1_FIGURE_END</unmanaged>
public enum FigureEnd : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FIGURE_END::D2D1_FIGURE_END_OPEN"]/*' />
	/// <unmanaged>D2D1_FIGURE_END_OPEN</unmanaged>
	Open = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FIGURE_END::D2D1_FIGURE_END_CLOSED"]/*' />
	/// <unmanaged>D2D1_FIGURE_END_CLOSED</unmanaged>
	Closed = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PATH_SEGMENT"]/*' />
/// <unmanaged>D2D1_PATH_SEGMENT</unmanaged>
[Flags]
public enum PathSegment : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PATH_SEGMENT::D2D1_PATH_SEGMENT_NONE"]/*' />
	/// <unmanaged>D2D1_PATH_SEGMENT_NONE</unmanaged>
	None = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PATH_SEGMENT::D2D1_PATH_SEGMENT_FORCE_UNSTROKED"]/*' />
	/// <unmanaged>D2D1_PATH_SEGMENT_FORCE_UNSTROKED</unmanaged>
	ForceUnstroked = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PATH_SEGMENT::D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN"]/*' />
	/// <unmanaged>D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN</unmanaged>
	ForceRoundLineJoin = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FILL_MODE"]/*' />
/// <unmanaged>D2D1_FILL_MODE</unmanaged>
public enum FillMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FILL_MODE::D2D1_FILL_MODE_ALTERNATE"]/*' />
	/// <unmanaged>D2D1_FILL_MODE_ALTERNATE</unmanaged>
	Alternate = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_FILL_MODE::D2D1_FILL_MODE_WINDING"]/*' />
	/// <unmanaged>D2D1_FILL_MODE_WINDING</unmanaged>
	Winding = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BORDER_MODE"]/*' />
/// <unmanaged>D2D1_BORDER_MODE</unmanaged>
public enum BorderMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BORDER_MODE::D2D1_BORDER_MODE_SOFT"]/*' />
	/// <unmanaged>D2D1_BORDER_MODE_SOFT</unmanaged>
	Soft = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BORDER_MODE::D2D1_BORDER_MODE_HARD"]/*' />
	/// <unmanaged>D2D1_BORDER_MODE_HARD</unmanaged>
	Hard = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE"]/*' />
/// <unmanaged>D2D1_BLEND_MODE</unmanaged>
public enum BlendMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_MULTIPLY"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_MULTIPLY</unmanaged>
	Multiply = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_SCREEN"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_SCREEN</unmanaged>
	Screen = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_DARKEN"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_DARKEN</unmanaged>
	Darken = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_LIGHTEN"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_LIGHTEN</unmanaged>
	Lighten = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_DISSOLVE"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_DISSOLVE</unmanaged>
	Dissolve = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_COLOR_BURN"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_COLOR_BURN</unmanaged>
	ColorBurn = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_LINEAR_BURN"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_LINEAR_BURN</unmanaged>
	LinearBurn = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_DARKER_COLOR"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_DARKER_COLOR</unmanaged>
	DarkerColor = 7,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_LIGHTER_COLOR"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_LIGHTER_COLOR</unmanaged>
	LighterColor = 8,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_COLOR_DODGE"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_COLOR_DODGE</unmanaged>
	ColorDodge = 9,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_LINEAR_DODGE"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_LINEAR_DODGE</unmanaged>
	LinearDodge = 10,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_OVERLAY"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_OVERLAY</unmanaged>
	Overlay = 11,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_SOFT_LIGHT"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_SOFT_LIGHT</unmanaged>
	SoftLight = 12,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_HARD_LIGHT"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_HARD_LIGHT</unmanaged>
	HardLight = 13,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_VIVID_LIGHT"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_VIVID_LIGHT</unmanaged>
	VividLight = 14,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_LINEAR_LIGHT"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_LINEAR_LIGHT</unmanaged>
	LinearLight = 15,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_PIN_LIGHT"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_PIN_LIGHT</unmanaged>
	PinLight = 16,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_HARD_MIX"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_HARD_MIX</unmanaged>
	HardMix = 17,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_DIFFERENCE"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_DIFFERENCE</unmanaged>
	Difference = 18,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_EXCLUSION"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_EXCLUSION</unmanaged>
	Exclusion = 19,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_HUE"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_HUE</unmanaged>
	Hue = 20,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_SATURATION"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_SATURATION</unmanaged>
	Saturation = 21,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_COLOR"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_COLOR</unmanaged>
	Color = 22,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_LUMINOSITY"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_LUMINOSITY</unmanaged>
	Luminosity = 23,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_SUBTRACT"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_SUBTRACT</unmanaged>
	Subtract = 24,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BLEND_MODE::D2D1_BLEND_MODE_DIVISION"]/*' />
	/// <unmanaged>D2D1_BLEND_MODE_DIVISION</unmanaged>
	Division = 25,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMATRIX_ALPHA_MODE"]/*' />
/// <unmanaged>D2D1_COLORMATRIX_ALPHA_MODE</unmanaged>
public enum ColorMatrixAlphaMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMATRIX_ALPHA_MODE::D2D1_COLORMATRIX_ALPHA_MODE_PREMULTIPLIED"]/*' />
	/// <unmanaged>D2D1_COLORMATRIX_ALPHA_MODE_PREMULTIPLIED</unmanaged>
	Premultiplied = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLORMATRIX_ALPHA_MODE::D2D1_COLORMATRIX_ALPHA_MODE_STRAIGHT"]/*' />
	/// <unmanaged>D2D1_COLORMATRIX_ALPHA_MODE_STRAIGHT</unmanaged>
	Straight = 2,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TURBULENCE_NOISE"]/*' />
/// <unmanaged>D2D1_TURBULENCE_NOISE</unmanaged>
public enum TurbulenceNoise : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TURBULENCE_NOISE::D2D1_TURBULENCE_NOISE_FRACTAL_SUM"]/*' />
	/// <unmanaged>D2D1_TURBULENCE_NOISE_FRACTAL_SUM</unmanaged>
	FractalSum = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_TURBULENCE_NOISE::D2D1_TURBULENCE_NOISE_TURBULENCE"]/*' />
	/// <unmanaged>D2D1_TURBULENCE_NOISE_TURBULENCE</unmanaged>
	Turbulence = 1,
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPOSITE_MODE"]/*' />
/// <unmanaged>D2D1_COMPOSITE_MODE</unmanaged>
public enum CompositeMode : uint
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPOSITE_MODE::D2D1_COMPOSITE_MODE_SOURCE_OVER"]/*' />
	/// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_OVER</unmanaged>
	SourceOver = 0,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPOSITE_MODE::D2D1_COMPOSITE_MODE_DESTINATION_OVER"]/*' />
	/// <unmanaged>D2D1_COMPOSITE_MODE_DESTINATION_OVER</unmanaged>
	DestinationOver = 1,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPOSITE_MODE::D2D1_COMPOSITE_MODE_SOURCE_IN"]/*' />
	/// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_IN</unmanaged>
	SourceIn = 2,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPOSITE_MODE::D2D1_COMPOSITE_MODE_DESTINATION_IN"]/*' />
	/// <unmanaged>D2D1_COMPOSITE_MODE_DESTINATION_IN</unmanaged>
	DestinationIn = 3,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPOSITE_MODE::D2D1_COMPOSITE_MODE_SOURCE_OUT"]/*' />
	/// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_OUT</unmanaged>
	SourceOut = 4,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPOSITE_MODE::D2D1_COMPOSITE_MODE_DESTINATION_OUT"]/*' />
	/// <unmanaged>D2D1_COMPOSITE_MODE_DESTINATION_OUT</unmanaged>
	DestinationOut = 5,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPOSITE_MODE::D2D1_COMPOSITE_MODE_SOURCE_ATOP"]/*' />
	/// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_ATOP</unmanaged>
	SourceAtop = 6,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPOSITE_MODE::D2D1_COMPOSITE_MODE_DESTINATION_ATOP"]/*' />
	/// <unmanaged>D2D1_COMPOSITE_MODE_DESTINATION_ATOP</unmanaged>
	DestinationAtop = 7,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPOSITE_MODE::D2D1_COMPOSITE_MODE_XOR"]/*' />
	/// <unmanaged>D2D1_COMPOSITE_MODE_XOR</unmanaged>
	Xor = 8,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPOSITE_MODE::D2D1_COMPOSITE_MODE_PLUS"]/*' />
	/// <unmanaged>D2D1_COMPOSITE_MODE_PLUS</unmanaged>
	Plus = 9,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPOSITE_MODE::D2D1_COMPOSITE_MODE_SOURCE_COPY"]/*' />
	/// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_COPY</unmanaged>
	SourceCopy = 10,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPOSITE_MODE::D2D1_COMPOSITE_MODE_BOUNDED_SOURCE_COPY"]/*' />
	/// <unmanaged>D2D1_COMPOSITE_MODE_BOUNDED_SOURCE_COPY</unmanaged>
	BoundedSourceCopy = 11,
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COMPOSITE_MODE::D2D1_COMPOSITE_MODE_MASK_INVERT"]/*' />
	/// <unmanaged>D2D1_COMPOSITE_MODE_MASK_INVERT</unmanaged>
	MaskInvert = 12,
}

#endregion Enums

#region Structs
/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_F"]/*' />
/// <unmanaged>D2D1_COLOR_F</unmanaged>
public partial struct ColorF
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_F::r"]/*' />
	public float r;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_F::g"]/*' />
	public float g;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_F::b"]/*' />
	public float b;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_COLOR_F::a"]/*' />
	public float a;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PIXEL_FORMAT"]/*' />
/// <unmanaged>D2D1_PIXEL_FORMAT</unmanaged>
public partial struct PixelFormat
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PIXEL_FORMAT::format"]/*' />
	public Graphics.Dxgi.Common.Format format;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_PIXEL_FORMAT::alphaMode"]/*' />
	public AlphaMode alphaMode;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D_RECT_F"]/*' />
/// <unmanaged>D2D_RECT_F</unmanaged>
public partial struct RectF
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D_RECT_F::left"]/*' />
	public float left;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D_RECT_F::top"]/*' />
	public float top;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D_RECT_F::right"]/*' />
	public float right;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D_RECT_F::bottom"]/*' />
	public float bottom;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D_RECT_U"]/*' />
/// <unmanaged>D2D_RECT_U</unmanaged>
public partial struct RectU
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D_RECT_U::left"]/*' />
	public uint left;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D_RECT_U::top"]/*' />
	public uint top;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D_RECT_U::right"]/*' />
	public uint right;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D_RECT_U::bottom"]/*' />
	public uint bottom;
}

/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BEZIER_SEGMENT"]/*' />
/// <unmanaged>D2D1_BEZIER_SEGMENT</unmanaged>
public partial struct BezierSegment
{
	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BEZIER_SEGMENT::point1"]/*' />
	public System.Drawing.PointF point1;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BEZIER_SEGMENT::point2"]/*' />
	public System.Drawing.PointF point2;

	/// <include file='../Direct2D.xml' path='doc/member[@name="D2D1_BEZIER_SEGMENT::point3"]/*' />
	public System.Drawing.PointF point3;
}

#endregion Structs

#region COM Types
/// <include file='../Direct2D.xml' path='doc/member[@name="ID2D1SimplifiedGeometrySink"]/*' />
/// <unmanaged>ID2D1SimplifiedGeometrySink</unmanaged>
[Guid("2cd9069e-12e2-11dc-9fed-001143a055f9")]
[NativeTypeName("struct ID2D1SimplifiedGeometrySink : IUnknown")]
[NativeInheritance("IUnknown")]
public unsafe partial struct ID2D1SimplifiedGeometrySink
{
	public static ref readonly Guid IID_ID2D1SimplifiedGeometrySink
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0x9E, 0x06, 0xD9, 0x2C,
				0xE2, 0x12,
				0xDC, 0x11,
				0x9F,
				0xED,
				0x00,
				0x11,
				0x43,
				0xA0,
				0x55,
				0xF9
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_ID2D1SimplifiedGeometrySink));

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, Guid*, void**, int>)(lpVtbl[0]))((IUnknown*)Unsafe.AsPointer(ref this), riid, ppvObject);
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[1]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
		return ((delegate* unmanaged[Stdcall]<IUnknown*, uint>)(lpVtbl[2]))((IUnknown*)Unsafe.AsPointer(ref this));
	}

	/// <include file='../Direct2D.xml' path='doc/member[@name="ID2D1SimplifiedGeometrySink::SetFillMode"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public void SetFillMode(FillMode fillMode)
	{
		((delegate* unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, FillMode, void>)(lpVtbl[3]))((ID2D1SimplifiedGeometrySink*)Unsafe.AsPointer(ref this), fillMode);
	}

	/// <include file='../Direct2D.xml' path='doc/member[@name="ID2D1SimplifiedGeometrySink::SetSegmentFlags"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public void SetSegmentFlags(PathSegment vertexFlags)
	{
		((delegate* unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, PathSegment, void>)(lpVtbl[4]))((ID2D1SimplifiedGeometrySink*)Unsafe.AsPointer(ref this), vertexFlags);
	}

	/// <include file='../Direct2D.xml' path='doc/member[@name="ID2D1SimplifiedGeometrySink::BeginFigure"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public void BeginFigure(System.Drawing.PointF* startPoint, FigureBegin figureBegin)
	{
		((delegate* unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, System.Drawing.PointF*, FigureBegin, void>)(lpVtbl[5]))((ID2D1SimplifiedGeometrySink*)Unsafe.AsPointer(ref this), startPoint, figureBegin);
	}

	/// <include file='../Direct2D.xml' path='doc/member[@name="ID2D1SimplifiedGeometrySink::AddLines"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public void AddLines(System.Drawing.PointF** points, uint pointsCount)
	{
		((delegate* unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, System.Drawing.PointF**, uint, void>)(lpVtbl[6]))((ID2D1SimplifiedGeometrySink*)Unsafe.AsPointer(ref this), points, pointsCount);
	}

	/// <include file='../Direct2D.xml' path='doc/member[@name="ID2D1SimplifiedGeometrySink::AddBeziers"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public void AddBeziers(BezierSegment* beziers, uint beziersCount)
	{
		((delegate* unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, BezierSegment*, uint, void>)(lpVtbl[7]))((ID2D1SimplifiedGeometrySink*)Unsafe.AsPointer(ref this), beziers, beziersCount);
	}

	/// <include file='../Direct2D.xml' path='doc/member[@name="ID2D1SimplifiedGeometrySink::EndFigure"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public void EndFigure(FigureEnd figureEnd)
	{
		((delegate* unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, FigureEnd, void>)(lpVtbl[8]))((ID2D1SimplifiedGeometrySink*)Unsafe.AsPointer(ref this), figureEnd);
	}

	/// <include file='../Direct2D.xml' path='doc/member[@name="ID2D1SimplifiedGeometrySink::Close"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult Close()
	{
		return ((delegate* unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, int>)(lpVtbl[9]))((ID2D1SimplifiedGeometrySink*)Unsafe.AsPointer(ref this));
	}
}

#endregion Com Types

