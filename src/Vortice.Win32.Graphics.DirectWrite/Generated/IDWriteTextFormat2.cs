// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Win32.Graphics.DirectWrite;

/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat2"]/*' />
/// <unmanaged>IDWriteTextFormat2</unmanaged>
[Guid("f67e0edd-9e3d-4ecc-8c32-4183253dfe70")]
[NativeTypeName("struct IDWriteTextFormat2 : IDWriteTextFormat1")]
[NativeInheritance("IDWriteTextFormat1")]
public unsafe partial struct IDWriteTextFormat2 : IDWriteTextFormat2.Interface, INativeGuid
{
	public static ref readonly Guid IID_IDWriteTextFormat2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			ReadOnlySpan<byte> data = new byte[] {
				0xDD, 0x0E, 0x7E, 0xF6,
				0x3D, 0x9E,
				0xCC, 0x4E,
				0x8C,
				0x32,
				0x41,
				0x83,
				0x25,
				0x3D,
				0xFE,
				0x70
			};

			Debug.Assert(data.Length == Unsafe.SizeOf<Guid>());
			return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
		}
	}

#if NET6_0_OR_GREATER
	static Guid* INativeGuid.NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextFormat2));
#else
	public static Guid* NativeGuid => (Guid*)Unsafe.AsPointer(ref Unsafe.AsRef(in IID_IDWriteTextFormat2));
#endif

	public void** lpVtbl;

	/// <inheritdoc cref="IUnknown.QueryInterface" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(0)]
	public HResult QueryInterface([NativeTypeName("const IID &")] Guid* riid, void** ppvObject)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, Guid*, void**, int>)(lpVtbl[0]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), riid, ppvObject);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Guid*, void**, int>)(lpVtbl[0]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), riid, ppvObject);
#endif
	}

	/// <inheritdoc cref="IUnknown.AddRef" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(1)]
	[return: NativeTypeName("ULONG")]
	public uint AddRef()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, uint>)(lpVtbl[1]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, uint>)(lpVtbl[1]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IUnknown.Release" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(2)]
	[return: NativeTypeName("ULONG")]
	public uint Release()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, uint>)(lpVtbl[2]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, uint>)(lpVtbl[2]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(3)]
	public HResult SetTextAlignment(TextAlignment textAlignment)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, TextAlignment, int>)(lpVtbl[3]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), textAlignment);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, TextAlignment, int>)(lpVtbl[3]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), textAlignment);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(4)]
	public HResult SetParagraphAlignment(ParagraphAlignment paragraphAlignment)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, ParagraphAlignment, int>)(lpVtbl[4]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), paragraphAlignment);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, ParagraphAlignment, int>)(lpVtbl[4]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), paragraphAlignment);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(5)]
	public HResult SetWordWrapping(WordWrapping wordWrapping)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, WordWrapping, int>)(lpVtbl[5]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), wordWrapping);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, WordWrapping, int>)(lpVtbl[5]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), wordWrapping);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(6)]
	public HResult SetReadingDirection(ReadingDirection readingDirection)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, ReadingDirection, int>)(lpVtbl[6]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), readingDirection);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, ReadingDirection, int>)(lpVtbl[6]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), readingDirection);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(7)]
	public HResult SetFlowDirection(FlowDirection flowDirection)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, FlowDirection, int>)(lpVtbl[7]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), flowDirection);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, FlowDirection, int>)(lpVtbl[7]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), flowDirection);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(8)]
	public HResult SetIncrementalTabStop(float incrementalTabStop)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, float, int>)(lpVtbl[8]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), incrementalTabStop);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, float, int>)(lpVtbl[8]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), incrementalTabStop);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(9)]
	public HResult SetTrimming(Trimming* trimmingOptions, IDWriteInlineObject* trimmingSign)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, Trimming*, IDWriteInlineObject*, int>)(lpVtbl[9]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Trimming*, IDWriteInlineObject*, int>)(lpVtbl[9]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.SetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(10)]
	public HResult SetLineSpacing(LineSpacingMethod lineSpacingMethod, float lineSpacing, float baseline)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, LineSpacingMethod, float, float, int>)(lpVtbl[10]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, LineSpacingMethod, float, float, int>)(lpVtbl[10]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTextAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(11)]
	public TextAlignment GetTextAlignment()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, TextAlignment>)(lpVtbl[11]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, TextAlignment>)(lpVtbl[11]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetParagraphAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(12)]
	public ParagraphAlignment GetParagraphAlignment()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, ParagraphAlignment>)(lpVtbl[12]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, ParagraphAlignment>)(lpVtbl[12]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetWordWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(13)]
	public WordWrapping GetWordWrapping()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, WordWrapping>)(lpVtbl[13]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, WordWrapping>)(lpVtbl[13]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetReadingDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(14)]
	public ReadingDirection GetReadingDirection()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, ReadingDirection>)(lpVtbl[14]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, ReadingDirection>)(lpVtbl[14]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFlowDirection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(15)]
	public FlowDirection GetFlowDirection()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, FlowDirection>)(lpVtbl[15]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, FlowDirection>)(lpVtbl[15]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetIncrementalTabStop" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(16)]
	public float GetIncrementalTabStop()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, float>)(lpVtbl[16]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, float>)(lpVtbl[16]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetTrimming" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(17)]
	public HResult GetTrimming(Trimming* trimmingOptions, IDWriteInlineObject** trimmingSign)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, Trimming*, IDWriteInlineObject**, int>)(lpVtbl[17]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Trimming*, IDWriteInlineObject**, int>)(lpVtbl[17]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), trimmingOptions, trimmingSign);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLineSpacing" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(18)]
	public HResult GetLineSpacing(LineSpacingMethod* lineSpacingMethod, float* lineSpacing, float* baseline)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, LineSpacingMethod*, float*, float*, int>)(lpVtbl[18]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, LineSpacingMethod*, float*, float*, int>)(lpVtbl[18]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), lineSpacingMethod, lineSpacing, baseline);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontCollection" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(19)]
	public HResult GetFontCollection(IDWriteFontCollection** fontCollection)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, IDWriteFontCollection**, int>)(lpVtbl[19]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), fontCollection);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, IDWriteFontCollection**, int>)(lpVtbl[19]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), fontCollection);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(20)]
	public uint GetFontFamilyNameLength()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, uint>)(lpVtbl[20]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, uint>)(lpVtbl[20]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontFamilyName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(21)]
	public HResult GetFontFamilyName(ushort* fontFamilyName, uint nameSize)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, ushort*, uint, int>)(lpVtbl[21]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), fontFamilyName, nameSize);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, ushort*, uint, int>)(lpVtbl[21]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), fontFamilyName, nameSize);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontWeight" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(22)]
	public FontWeight GetFontWeight()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, FontWeight>)(lpVtbl[22]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, FontWeight>)(lpVtbl[22]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStyle" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(23)]
	public FontStyle GetFontStyle()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, FontStyle>)(lpVtbl[23]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, FontStyle>)(lpVtbl[23]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontStretch" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(24)]
	public FontStretch GetFontStretch()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, FontStretch>)(lpVtbl[24]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, FontStretch>)(lpVtbl[24]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetFontSize" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(25)]
	public float GetFontSize()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, float>)(lpVtbl[25]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, float>)(lpVtbl[25]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleNameLength" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(26)]
	public uint GetLocaleNameLength()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, uint>)(lpVtbl[26]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, uint>)(lpVtbl[26]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat.GetLocaleName" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(27)]
	public HResult GetLocaleName(ushort* localeName, uint nameSize)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, ushort*, uint, int>)(lpVtbl[27]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), localeName, nameSize);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, ushort*, uint, int>)(lpVtbl[27]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), localeName, nameSize);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat1.SetVerticalGlyphOrientation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(28)]
	public HResult SetVerticalGlyphOrientation(VerticalGlyphOrientation glyphOrientation)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, VerticalGlyphOrientation, int>)(lpVtbl[28]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), glyphOrientation);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, VerticalGlyphOrientation, int>)(lpVtbl[28]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), glyphOrientation);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat1.GetVerticalGlyphOrientation" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(29)]
	public VerticalGlyphOrientation GetVerticalGlyphOrientation()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, VerticalGlyphOrientation>)(lpVtbl[29]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, VerticalGlyphOrientation>)(lpVtbl[29]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat1.SetLastLineWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(30)]
	public HResult SetLastLineWrapping(Bool32 isLastLineWrappingEnabled)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, Bool32, int>)(lpVtbl[30]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), isLastLineWrappingEnabled);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Bool32, int>)(lpVtbl[30]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), isLastLineWrappingEnabled);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat1.GetLastLineWrapping" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(31)]
	public Bool32 GetLastLineWrapping()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, Bool32>)(lpVtbl[31]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, Bool32>)(lpVtbl[31]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat1.SetOpticalAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(32)]
	public HResult SetOpticalAlignment(OpticalAlignment opticalAlignment)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, OpticalAlignment, int>)(lpVtbl[32]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), opticalAlignment);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, OpticalAlignment, int>)(lpVtbl[32]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), opticalAlignment);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat1.GetOpticalAlignment" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(33)]
	public OpticalAlignment GetOpticalAlignment()
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, OpticalAlignment>)(lpVtbl[33]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, OpticalAlignment>)(lpVtbl[33]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this));
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat1.SetFontFallback" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(34)]
	public HResult SetFontFallback(IDWriteFontFallback* fontFallback)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, IDWriteFontFallback*, int>)(lpVtbl[34]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), fontFallback);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, IDWriteFontFallback*, int>)(lpVtbl[34]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), fontFallback);
#endif
	}

	/// <inheritdoc cref="IDWriteTextFormat1.GetFontFallback" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(35)]
	public HResult GetFontFallback(IDWriteFontFallback** fontFallback)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, IDWriteFontFallback**, int>)(lpVtbl[35]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), fontFallback);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, IDWriteFontFallback**, int>)(lpVtbl[35]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), fontFallback);
#endif
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat2::SetLineSpacing"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(36)]
	public HResult SetLineSpacing(LineSpacing* lineSpacingOptions)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, LineSpacing*, int>)(lpVtbl[36]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), lineSpacingOptions);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, LineSpacing*, int>)(lpVtbl[36]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), lineSpacingOptions);
#endif
	}

	/// <include file='../DirectWrite.xml' path='doc/member[@name="IDWriteTextFormat2::GetLineSpacing"]/*' />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[VtblIndex(37)]
	public HResult GetLineSpacing(LineSpacing* lineSpacingOptions)
	{
#if NET6_0_OR_GREATER
		return ((delegate* unmanaged<IDWriteTextFormat2*, LineSpacing*, int>)(lpVtbl[37]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), lineSpacingOptions);
#else
		return ((delegate* unmanaged[Stdcall]<IDWriteTextFormat2*, LineSpacing*, int>)(lpVtbl[37]))((IDWriteTextFormat2*)Unsafe.AsPointer(ref this), lineSpacingOptions);
#endif
	}

	public interface Interface : IDWriteTextFormat1.Interface
	{
		[VtblIndex(36)]
		HResult SetLineSpacing(LineSpacing* lineSpacingOptions);

		[VtblIndex(37)]
		HResult GetLineSpacing(LineSpacing* lineSpacingOptions);
	}
}

